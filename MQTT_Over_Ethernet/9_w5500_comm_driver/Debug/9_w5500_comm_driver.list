
9_w5500_comm_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000564c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080057ec  080057ec  000067ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f0  080059f0  000070c0  2**0
                  CONTENTS
  4 .ARM          00000008  080059f0  080059f0  000069f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f8  080059f8  000070c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f8  080059f8  000069f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08005a00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  200000c0  08005ac0  000070c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08005ac0  00007784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e50  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a9  00000000  00000000  0000bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  0000d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000043e  00000000  00000000  0000dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010eaf  00000000  00000000  0000dfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f13  00000000  00000000  0001ee9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a2d3  00000000  00000000  00026db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00081083  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de4  00000000  00000000  000810c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00082eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057d4 	.word	0x080057d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	080057d4 	.word	0x080057d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <pa1_adc_init+0x58>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <pa1_adc_init+0x58>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <pa1_adc_init+0x5c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <pa1_adc_init+0x5c>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <pa1_adc_init+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <pa1_adc_init+0x5c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <pa1_adc_init+0x58>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <pa1_adc_init+0x58>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002b2:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <pa1_adc_init+0x60>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <pa1_adc_init+0x60>)
 80002bc:	2200      	movs	r2, #0
 80002be:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a06      	ldr	r2, [pc, #24]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6093      	str	r3, [r2, #8]

}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40012000 	.word	0x40012000

080002e4 <start_conversion>:


void start_conversion(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <start_conversion+0x28>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a07      	ldr	r2, [pc, #28]	@ (800030c <start_conversion+0x28>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <start_conversion+0x28>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <start_conversion+0x28>)
 80002fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002fe:	6093      	str	r3, [r2, #8]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40012000 	.word	0x40012000

08000310 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000314:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <led_init+0x34>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000318:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <led_init+0x34>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <led_init+0x38>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a08      	ldr	r2, [pc, #32]	@ (8000348 <led_init+0x38>)
 8000326:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800032a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <led_init+0x38>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a05      	ldr	r2, [pc, #20]	@ (8000348 <led_init+0x38>)
 8000332:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000336:	6013      	str	r3, [r2, #0]
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40023800 	.word	0x40023800
 8000348:	40020000 	.word	0x40020000

0800034c <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 8000350:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <button_init+0x34>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a0a      	ldr	r2, [pc, #40]	@ (8000380 <button_init+0x34>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <button_init+0x38>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a08      	ldr	r2, [pc, #32]	@ (8000384 <button_init+0x38>)
 8000362:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000366:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <button_init+0x38>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a05      	ldr	r2, [pc, #20]	@ (8000384 <button_init+0x38>)
 800036e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000372:	6013      	str	r3, [r2, #0]

}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	40020800 	.word	0x40020800

08000388 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 800038c:	4b12      	ldr	r3, [pc, #72]	@ (80003d8 <fpu_enable+0x50>)
 800038e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000392:	4a11      	ldr	r2, [pc, #68]	@ (80003d8 <fpu_enable+0x50>)
 8000394:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 800039c:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <fpu_enable+0x50>)
 800039e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003a2:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <fpu_enable+0x50>)
 80003a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 80003ac:	4b0a      	ldr	r3, [pc, #40]	@ (80003d8 <fpu_enable+0x50>)
 80003ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003b2:	4a09      	ldr	r2, [pc, #36]	@ (80003d8 <fpu_enable+0x50>)
 80003b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <fpu_enable+0x50>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003c2:	4a05      	ldr	r2, [pc, #20]	@ (80003d8 <fpu_enable+0x50>)
 80003c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000ed00 	.word	0xe000ed00

080003dc <check_cable_connection>:


wiz_PhyConf current_phy_conf;

void check_cable_connection(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
	uint8_t cable_status;

	do{

		printf("\r\nGetting cable status...\r\n");
 80003e2:	480e      	ldr	r0, [pc, #56]	@ (800041c <check_cable_connection+0x40>)
 80003e4:	f004 fa6a 	bl	80048bc <puts>
		ctlwizchip(CW_GET_PHYLINK,(void *)&cable_status);
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	4619      	mov	r1, r3
 80003ec:	200f      	movs	r0, #15
 80003ee:	f003 fcb1 	bl	8003d54 <ctlwizchip>

		if(cable_status ==  PHY_LINK_OFF)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d106      	bne.n	8000406 <check_cable_connection+0x2a>
		{
			printf("No cable detected ...\r\n");
 80003f8:	4809      	ldr	r0, [pc, #36]	@ (8000420 <check_cable_connection+0x44>)
 80003fa:	f004 fa5f 	bl	80048bc <puts>
			delay(1000);
 80003fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000402:	f000 fd73 	bl	8000eec <delay>
		}

	}while(cable_status ==  PHY_LINK_OFF);
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0ea      	beq.n	80003e2 <check_cable_connection+0x6>

	printf("Cable connected...\r\n");
 800040c:	4805      	ldr	r0, [pc, #20]	@ (8000424 <check_cable_connection+0x48>)
 800040e:	f004 fa55 	bl	80048bc <puts>

}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	080057ec 	.word	0x080057ec
 8000420:	08005808 	.word	0x08005808
 8000424:	08005820 	.word	0x08005820

08000428 <display_phy_config>:

void display_phy_config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_conf;
	ctlwizchip(CW_GET_PHYCONF,(void*)&phy_conf);
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	200b      	movs	r0, #11
 8000434:	f003 fc8e 	bl	8003d54 <ctlwizchip>

	if(phy_conf.by == PHY_CONFBY_HW)
 8000438:	793b      	ldrb	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d103      	bne.n	8000446 <display_phy_config+0x1e>
	{
		printf("\n\rPHY is currently configured by hardware.");
 800043e:	4816      	ldr	r0, [pc, #88]	@ (8000498 <display_phy_config+0x70>)
 8000440:	f004 f9d4 	bl	80047ec <iprintf>
 8000444:	e002      	b.n	800044c <display_phy_config+0x24>
	}
	else{
		printf("\n\rPHY is currently configured by software.");
 8000446:	4815      	ldr	r0, [pc, #84]	@ (800049c <display_phy_config+0x74>)
 8000448:	f004 f9d0 	bl	80047ec <iprintf>

	}
	printf("\r\nSTATUS: Autonegotiation %s",(phy_conf.mode == PHY_MODE_AUTONEGO) ? "Enabled" : "Disabled");
 800044c:	797b      	ldrb	r3, [r7, #5]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d101      	bne.n	8000456 <display_phy_config+0x2e>
 8000452:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <display_phy_config+0x78>)
 8000454:	e000      	b.n	8000458 <display_phy_config+0x30>
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <display_phy_config+0x7c>)
 8000458:	4619      	mov	r1, r3
 800045a:	4813      	ldr	r0, [pc, #76]	@ (80004a8 <display_phy_config+0x80>)
 800045c:	f004 f9c6 	bl	80047ec <iprintf>
	printf("\r\nSTATUS: Duplex Mode: %s",(phy_conf.duplex == PHY_DUPLEX_FULL) ? "Full Duplex" : "Half Duplex");
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d101      	bne.n	800046a <display_phy_config+0x42>
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <display_phy_config+0x84>)
 8000468:	e000      	b.n	800046c <display_phy_config+0x44>
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <display_phy_config+0x88>)
 800046c:	4619      	mov	r1, r3
 800046e:	4811      	ldr	r0, [pc, #68]	@ (80004b4 <display_phy_config+0x8c>)
 8000470:	f004 f9bc 	bl	80047ec <iprintf>
	printf("\r\nSTATUS: Speed: %dMbps",(phy_conf.speed == PHY_SPEED_10) ? 10 : 100);
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d101      	bne.n	800047e <display_phy_config+0x56>
 800047a:	230a      	movs	r3, #10
 800047c:	e000      	b.n	8000480 <display_phy_config+0x58>
 800047e:	2364      	movs	r3, #100	@ 0x64
 8000480:	4619      	mov	r1, r3
 8000482:	480d      	ldr	r0, [pc, #52]	@ (80004b8 <display_phy_config+0x90>)
 8000484:	f004 f9b2 	bl	80047ec <iprintf>
  printf("\r\n...");
 8000488:	480c      	ldr	r0, [pc, #48]	@ (80004bc <display_phy_config+0x94>)
 800048a:	f004 f9af 	bl	80047ec <iprintf>

}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	08005834 	.word	0x08005834
 800049c:	08005860 	.word	0x08005860
 80004a0:	0800588c 	.word	0x0800588c
 80004a4:	08005894 	.word	0x08005894
 80004a8:	080058a0 	.word	0x080058a0
 80004ac:	080058c0 	.word	0x080058c0
 80004b0:	080058cc 	.word	0x080058cc
 80004b4:	080058d8 	.word	0x080058d8
 80004b8:	080058f4 	.word	0x080058f4
 80004bc:	0800590c 	.word	0x0800590c

080004c0 <main>:

int main()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 80004c4:	f7ff ff60 	bl	8000388 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 80004c8:	f000 fd52 	bl	8000f70 <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 80004cc:	f000 fd86 	bl	8000fdc <debug_uart_init>



	/*Initialize LED*/
	led_init();
 80004d0:	f7ff ff1e 	bl	8000310 <led_init>

	/*Initialize Push button*/
	button_init();
 80004d4:	f7ff ff3a 	bl	800034c <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 80004d8:	f7ff fed2 	bl	8000280 <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 80004dc:	f7ff ff02 	bl	80002e4 <start_conversion>

    wizchip_cs_pin_init();
 80004e0:	f000 fe2a 	bl	8001138 <wizchip_cs_pin_init>
    w5500_spi_init();
 80004e4:	f000 feaa 	bl	800123c <w5500_spi_init>
    w5500_init();
 80004e8:	f000 fed4 	bl	8001294 <w5500_init>

    check_cable_connection();
 80004ec:	f7ff ff76 	bl	80003dc <check_cable_connection>
    display_phy_config();
 80004f0:	f7ff ff9a 	bl	8000428 <display_phy_config>

    current_phy_conf.by =  PHY_CONFBY_SW;
 80004f4:	4b09      	ldr	r3, [pc, #36]	@ (800051c <main+0x5c>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
    current_phy_conf.duplex =  PHY_DUPLEX_FULL;
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <main+0x5c>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	70da      	strb	r2, [r3, #3]
    current_phy_conf.mode   =  PHY_MODE_AUTONEGO;
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <main+0x5c>)
 8000502:	2201      	movs	r2, #1
 8000504:	705a      	strb	r2, [r3, #1]
    current_phy_conf.speed =  PHY_SPEED_10;
 8000506:	4b05      	ldr	r3, [pc, #20]	@ (800051c <main+0x5c>)
 8000508:	2200      	movs	r2, #0
 800050a:	709a      	strb	r2, [r3, #2]

    ctlwizchip(CW_SET_PHYCONF,(void*)&current_phy_conf);
 800050c:	4903      	ldr	r1, [pc, #12]	@ (800051c <main+0x5c>)
 800050e:	200a      	movs	r0, #10
 8000510:	f003 fc20 	bl	8003d54 <ctlwizchip>


    display_phy_config();
 8000514:	f7ff ff88 	bl	8000428 <display_phy_config>


	while(1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <main+0x58>
 800051c:	200000dc 	.word	0x200000dc

08000520 <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8000524:	4b3e      	ldr	r3, [pc, #248]	@ (8000620 <spi1_gpio_init+0x100>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000528:	4a3d      	ldr	r2, [pc, #244]	@ (8000620 <spi1_gpio_init+0x100>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 8000530:	4b3c      	ldr	r3, [pc, #240]	@ (8000624 <spi1_gpio_init+0x104>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a3b      	ldr	r2, [pc, #236]	@ (8000624 <spi1_gpio_init+0x104>)
 8000536:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800053a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 800053c:	4b39      	ldr	r3, [pc, #228]	@ (8000624 <spi1_gpio_init+0x104>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a38      	ldr	r2, [pc, #224]	@ (8000624 <spi1_gpio_init+0x104>)
 8000542:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000546:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8000548:	4b36      	ldr	r3, [pc, #216]	@ (8000624 <spi1_gpio_init+0x104>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a35      	ldr	r2, [pc, #212]	@ (8000624 <spi1_gpio_init+0x104>)
 800054e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000552:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8000554:	4b33      	ldr	r3, [pc, #204]	@ (8000624 <spi1_gpio_init+0x104>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a32      	ldr	r2, [pc, #200]	@ (8000624 <spi1_gpio_init+0x104>)
 800055a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800055e:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8000560:	4b30      	ldr	r3, [pc, #192]	@ (8000624 <spi1_gpio_init+0x104>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a2f      	ldr	r2, [pc, #188]	@ (8000624 <spi1_gpio_init+0x104>)
 8000566:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800056a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 800056c:	4b2d      	ldr	r3, [pc, #180]	@ (8000624 <spi1_gpio_init+0x104>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a2c      	ldr	r2, [pc, #176]	@ (8000624 <spi1_gpio_init+0x104>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000576:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8000578:	4b2a      	ldr	r3, [pc, #168]	@ (8000624 <spi1_gpio_init+0x104>)
 800057a:	6a1b      	ldr	r3, [r3, #32]
 800057c:	4a29      	ldr	r2, [pc, #164]	@ (8000624 <spi1_gpio_init+0x104>)
 800057e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000582:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <spi1_gpio_init+0x104>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	4a26      	ldr	r2, [pc, #152]	@ (8000624 <spi1_gpio_init+0x104>)
 800058a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800058e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8000590:	4b24      	ldr	r3, [pc, #144]	@ (8000624 <spi1_gpio_init+0x104>)
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	4a23      	ldr	r2, [pc, #140]	@ (8000624 <spi1_gpio_init+0x104>)
 8000596:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800059a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <spi1_gpio_init+0x104>)
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	4a20      	ldr	r2, [pc, #128]	@ (8000624 <spi1_gpio_init+0x104>)
 80005a2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80005a6:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 80005a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <spi1_gpio_init+0x104>)
 80005aa:	6a1b      	ldr	r3, [r3, #32]
 80005ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000624 <spi1_gpio_init+0x104>)
 80005ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 80005b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <spi1_gpio_init+0x104>)
 80005b6:	6a1b      	ldr	r3, [r3, #32]
 80005b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000624 <spi1_gpio_init+0x104>)
 80005ba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80005be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <spi1_gpio_init+0x104>)
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <spi1_gpio_init+0x104>)
 80005c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 80005cc:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <spi1_gpio_init+0x104>)
 80005ce:	6a1b      	ldr	r3, [r3, #32]
 80005d0:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <spi1_gpio_init+0x104>)
 80005d2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80005d6:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <spi1_gpio_init+0x104>)
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	4a11      	ldr	r2, [pc, #68]	@ (8000624 <spi1_gpio_init+0x104>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <spi1_gpio_init+0x104>)
 80005e6:	6a1b      	ldr	r3, [r3, #32]
 80005e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <spi1_gpio_init+0x104>)
 80005ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80005ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <spi1_gpio_init+0x104>)
 80005f2:	6a1b      	ldr	r3, [r3, #32]
 80005f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000624 <spi1_gpio_init+0x104>)
 80005f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80005fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <spi1_gpio_init+0x104>)
 80005fe:	6a1b      	ldr	r3, [r3, #32]
 8000600:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <spi1_gpio_init+0x104>)
 8000602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000606:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <spi1_gpio_init+0x100>)
 800060a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800060c:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <spi1_gpio_init+0x100>)
 800060e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000612:	6453      	str	r3, [r2, #68]	@ 0x44

}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000

08000628 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <spi_init+0x12>
	{
		return DEV_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e05a      	b.n	80006f0 <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	629a      	str	r2, [r3, #40]	@ 0x28

	if(hspi->State == SPI_STATE_RESET)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <spi_init+0x26>
	{
		spi1_gpio_init();
 800064a:	f7ff ff69 	bl	8000520 <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2202      	movs	r2, #2
 8000652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000664:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8000676:	431a      	orrs	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000680:	431a      	orrs	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	431a      	orrs	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	69db      	ldr	r3, [r3, #28]
 80006a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80006a8:	431a      	orrs	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6a1b      	ldr	r3, [r3, #32]
 80006ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b2:	ea42 0103 	orr.w	r1, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	0c1b      	lsrs	r3, r3, #16
 80006cc:	f003 0104 	and.w	r1, r3, #4
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d4:	f003 0210 	and.w	r2, r3, #16
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	430a      	orrs	r2, r1
 80006de:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->State =  SPI_STATE_READY;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2201      	movs	r2, #1
 80006ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   return DEV_OK;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <spi_transmit>:




StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4613      	mov	r3, r2
 8000706:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code;// = DEV_OK;
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	83fb      	strh	r3, [r7, #30]
	tickstart = get_tick();
 800070c:	f000 fc0c 	bl	8000f28 <get_tick>
 8000710:	61b8      	str	r0, [r7, #24]



	if((p_data == NULL) || (size  == 0))
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <spi_transmit+0x26>
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d101      	bne.n	8000722 <spi_transmit+0x2a>
	{

		return DEV_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e106      	b.n	8000930 <spi_transmit+0x238>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2203      	movs	r2, #3
 8000726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2200      	movs	r2, #0
 800072e:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  size;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	88fa      	ldrh	r2, [r7, #6]
 800073a:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  size;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	88fa      	ldrh	r2, [r7, #6]
 8000740:	865a      	strh	r2, [r3, #50]	@ 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2200      	movs	r2, #0
 8000746:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  0;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	2200      	movs	r2, #0
 800074c:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  0;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2200      	movs	r2, #0
 8000752:	875a      	strh	r2, [r3, #58]	@ 0x3a


	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800075c:	d10f      	bne.n	800077e <spi_transmit+0x86>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800076c:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800077c:	601a      	str	r2, [r3, #0]

	}



	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000788:	2b40      	cmp	r3, #64	@ 0x40
 800078a:	d007      	beq.n	800079c <spi_transmit+0xa4>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800079a:	601a      	str	r2, [r3, #0]
	}

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007a6:	2b40      	cmp	r3, #64	@ 0x40
 80007a8:	d007      	beq.n	80007ba <spi_transmit+0xc2>
	  {

			SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007b8:	601a      	str	r2, [r3, #0]

	  }

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007c2:	d14e      	bne.n	8000862 <spi_transmit+0x16a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <spi_transmit+0xda>
 80007cc:	8bfb      	ldrh	r3, [r7, #30]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d141      	bne.n	8000856 <spi_transmit+0x15e>
		{
			hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d6:	881a      	ldrh	r2, [r3, #0]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e2:	1c9a      	adds	r2, r3, #2
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	3b01      	subs	r3, #1
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	865a      	strh	r2, [r3, #50]	@ 0x32
		}

		while(hspi->TxXferCount> 0)
 80007f6:	e02e      	b.n	8000856 <spi_transmit+0x15e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d012      	beq.n	800082c <spi_transmit+0x134>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000816:	1c9a      	adds	r2, r3, #2
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000820:	b29b      	uxth	r3, r3
 8000822:	3b01      	subs	r3, #1
 8000824:	b29a      	uxth	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	865a      	strh	r2, [r3, #50]	@ 0x32
 800082a:	e014      	b.n	8000856 <spi_transmit+0x15e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 800082c:	f000 fb7c 	bl	8000f28 <get_tick>
 8000830:	4602      	mov	r2, r0
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	429a      	cmp	r2, r3
 800083a:	d803      	bhi.n	8000844 <spi_transmit+0x14c>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000842:	d102      	bne.n	800084a <spi_transmit+0x152>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d105      	bne.n	8000856 <spi_transmit+0x15e>
		         {
					hspi->State = SPI_STATE_READY;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2201      	movs	r2, #1
 800084e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return DEV_TIMEOUT;
 8000852:	2303      	movs	r3, #3
 8000854:	e06c      	b.n	8000930 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800085a:	b29b      	uxth	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1cb      	bne.n	80007f8 <spi_transmit+0x100>
 8000860:	e051      	b.n	8000906 <spi_transmit+0x20e>
	}


	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <spi_transmit+0x178>
 800086a:	8bfb      	ldrh	r3, [r7, #30]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d145      	bne.n	80008fc <spi_transmit+0x204>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) =  *((const uint8_t *)hspi->pTxBuffPtr);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	330c      	adds	r3, #12
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800088c:	b29b      	uxth	r3, r3
 800088e:	3b01      	subs	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	865a      	strh	r2, [r3, #50]	@ 0x32
		}
		while(hspi->TxXferCount> 0)
 8000896:	e031      	b.n	80008fc <spi_transmit+0x204>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d013      	beq.n	80008ce <spi_transmit+0x1d6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*(const uint8_t *)hspi->pTxBuffPtr);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	330c      	adds	r3, #12
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	3b01      	subs	r3, #1
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	865a      	strh	r2, [r3, #50]	@ 0x32
 80008cc:	e016      	b.n	80008fc <spi_transmit+0x204>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80008ce:	f000 fb2b 	bl	8000f28 <get_tick>
 80008d2:	4602      	mov	r2, r0
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d803      	bhi.n	80008e6 <spi_transmit+0x1ee>
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e4:	d102      	bne.n	80008ec <spi_transmit+0x1f4>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d107      	bne.n	80008fc <spi_transmit+0x204>
		         {
					error_code = DEV_TIMEOUT;
 80008ec:	2303      	movs	r3, #3
 80008ee:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2201      	movs	r2, #1
 80008f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 80008f8:	7dfb      	ldrb	r3, [r7, #23]
 80008fa:	e019      	b.n	8000930 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000900:	b29b      	uxth	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1c8      	bne.n	8000898 <spi_transmit+0x1a0>
			}
		}

	}

	  __IO uint32_t tmpreg_ovr = 0x00U;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->DR;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->SR;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	613b      	str	r3, [r7, #16]

		hspi->State =  SPI_STATE_READY;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2201      	movs	r2, #1
 800091e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <spi_transmit+0x236>
	{
		return DEV_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e000      	b.n	8000930 <spi_transmit+0x238>
	}
	else
	{
		return DEV_OK;
 800092e:	2300      	movs	r3, #0

	}

}
 8000930:	4618      	mov	r0, r3
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af02      	add	r7, sp, #8
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	4613      	mov	r3, r2
 8000946:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 8000948:	2300      	movs	r3, #0
 800094a:	75fb      	strb	r3, [r7, #23]



	if(hspi->State != SPI_STATE_READY)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000952:	2b01      	cmp	r3, #1
 8000954:	d007      	beq.n	8000966 <spi_receive+0x2e>
	{
		error_code = DEV_BUSY;
 8000956:	2302      	movs	r3, #2
 8000958:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	e0d1      	b.n	8000b0a <spi_receive+0x1d2>
	}

	  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800096e:	d112      	bne.n	8000996 <spi_receive+0x5e>
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10e      	bne.n	8000996 <spi_receive+0x5e>
	  {
	    hspi->State = SPI_STATE_BUSY_RX;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2204      	movs	r2, #4
 800097c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
	    return spi_transmit_receive(hspi, p_data, p_data, size, timeout);
 8000980:	88fa      	ldrh	r2, [r7, #6]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4613      	mov	r3, r2
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f000 f8c0 	bl	8000b12 <spi_transmit_receive>
 8000992:	4603      	mov	r3, r0
 8000994:	e0b9      	b.n	8000b0a <spi_receive+0x1d2>
	  }

		tickstart = get_tick();
 8000996:	f000 fac7 	bl	8000f28 <get_tick>
 800099a:	6138      	str	r0, [r7, #16]

	if((p_data == NULL) || (size  == 0))
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <spi_receive+0x70>
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d107      	bne.n	80009b8 <spi_receive+0x80>
	{
		error_code =  DEV_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2201      	movs	r2, #1
 80009b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 80009b4:	7dfb      	ldrb	r3, [r7, #23]
 80009b6:	e0a8      	b.n	8000b0a <spi_receive+0x1d2>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2204      	movs	r2, #4
 80009bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2200      	movs	r2, #0
 80009c4:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  size;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	88fa      	ldrh	r2, [r7, #6]
 80009d0:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  size;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	88fa      	ldrh	r2, [r7, #6]
 80009d6:	875a      	strh	r2, [r3, #58]	@ 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2200      	movs	r2, #0
 80009dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  0;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2200      	movs	r2, #0
 80009e2:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  0;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2200      	movs	r2, #0
 80009e8:	865a      	strh	r2, [r3, #50]	@ 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f4:	2b40      	cmp	r3, #64	@ 0x40
 80009f6:	d007      	beq.n	8000a08 <spi_receive+0xd0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a06:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d16c      	bne.n	8000aea <spi_receive+0x1b2>
	{
		while(hspi->RxXferCount > 0)
 8000a10:	e033      	b.n	8000a7a <spi_receive+0x142>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d015      	beq.n	8000a4c <spi_receive+0x114>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f103 020c 	add.w	r2, r3, #12
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	3b01      	subs	r3, #1
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8000a4a:	e016      	b.n	8000a7a <spi_receive+0x142>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000a4c:	f000 fa6c 	bl	8000f28 <get_tick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	683a      	ldr	r2, [r7, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d803      	bhi.n	8000a64 <spi_receive+0x12c>
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a62:	d102      	bne.n	8000a6a <spi_receive+0x132>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d107      	bne.n	8000a7a <spi_receive+0x142>
		         {
					error_code = DEV_TIMEOUT;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2201      	movs	r2, #1
 8000a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
 8000a78:	e047      	b.n	8000b0a <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1c6      	bne.n	8000a12 <spi_receive+0xda>
 8000a84:	e036      	b.n	8000af4 <spi_receive+0x1bc>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d013      	beq.n	8000abc <spi_receive+0x184>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a9e:	b292      	uxth	r2, r2
 8000aa0:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aa6:	1c9a      	adds	r2, r3, #2
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8000aba:	e016      	b.n	8000aea <spi_receive+0x1b2>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000abc:	f000 fa34 	bl	8000f28 <get_tick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d803      	bhi.n	8000ad4 <spi_receive+0x19c>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad2:	d102      	bne.n	8000ada <spi_receive+0x1a2>
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d107      	bne.n	8000aea <spi_receive+0x1b2>
		         {
					error_code = DEV_TIMEOUT;
 8000ada:	2303      	movs	r3, #3
 8000adc:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	e00f      	b.n	8000b0a <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1c8      	bne.n	8000a86 <spi_receive+0x14e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <spi_receive+0x1c8>
	{
		error_code = DEV_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2201      	movs	r2, #1
 8000b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return error_code;
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <spi_transmit_receive>:


StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b08a      	sub	sp, #40	@ 0x28
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 8000b20:	2301      	movs	r3, #1
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
	  StatusTypeDef        error_code = DEV_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 8000b2a:	f000 f9fd 	bl	8000f28 <get_tick>
 8000b2e:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000b36:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2200      	movs	r2, #0
 8000b46:	641a      	str	r2, [r3, #64]	@ 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	635a      	str	r2, [r3, #52]	@ 0x34
	  hspi->RxXferCount = size;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	887a      	ldrh	r2, [r7, #2]
 8000b52:	875a      	strh	r2, [r3, #58]	@ 0x3a
	  hspi->RxXferSize  = size;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	871a      	strh	r2, [r3, #56]	@ 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi->TxXferCount = size;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	887a      	ldrh	r2, [r7, #2]
 8000b64:	865a      	strh	r2, [r3, #50]	@ 0x32
	  hspi->TxXferSize  = size;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	887a      	ldrh	r2, [r7, #2]
 8000b6a:	861a      	strh	r2, [r3, #48]	@ 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b76:	2b40      	cmp	r3, #64	@ 0x40
 8000b78:	d007      	beq.n	8000b8a <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b88:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b92:	d17e      	bne.n	8000c92 <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <spi_transmit_receive+0x90>
 8000b9c:	8a7b      	ldrh	r3, [r7, #18]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d16c      	bne.n	8000c7c <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ba6:	881a      	ldrh	r2, [r3, #0]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb2:	1c9a      	adds	r2, r3, #2
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000bc6:	e059      	b.n	8000c7c <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d01b      	beq.n	8000c0e <spi_transmit_receive+0xfc>
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d016      	beq.n	8000c0e <spi_transmit_receive+0xfc>
 8000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d113      	bne.n	8000c0e <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bea:	881a      	ldrh	r2, [r3, #0]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf6:	1c9a      	adds	r2, r3, #2
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	3b01      	subs	r3, #1
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d019      	beq.n	8000c50 <spi_transmit_receive+0x13e>
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d014      	beq.n	8000c50 <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c30:	b292      	uxth	r2, r2
 8000c32:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c38:	1c9a      	adds	r2, r3, #2
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	3b01      	subs	r3, #1
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 8000c50:	f000 f96a 	bl	8000f28 <get_tick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d80d      	bhi.n	8000c7c <spi_transmit_receive+0x16a>
 8000c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c66:	d009      	beq.n	8000c7c <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8000c76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c7a:	e08f      	b.n	8000d9c <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1a0      	bne.n	8000bc8 <spi_transmit_receive+0xb6>
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d19b      	bne.n	8000bc8 <spi_transmit_receive+0xb6>
 8000c90:	e082      	b.n	8000d98 <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <spi_transmit_receive+0x18e>
 8000c9a:	8a7b      	ldrh	r3, [r7, #18]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d171      	bne.n	8000d84 <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	330c      	adds	r3, #12
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000cc6:	e05d      	b.n	8000d84 <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d01c      	beq.n	8000d10 <spi_transmit_receive+0x1fe>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d017      	beq.n	8000d10 <spi_transmit_receive+0x1fe>
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d114      	bne.n	8000d10 <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	330c      	adds	r3, #12
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	3b01      	subs	r3, #1
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d019      	beq.n	8000d52 <spi_transmit_receive+0x240>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d014      	beq.n	8000d52 <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	3b01      	subs	r3, #1
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 8000d52:	f000 f8e9 	bl	8000f28 <get_tick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d803      	bhi.n	8000d6a <spi_transmit_receive+0x258>
 8000d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d102      	bne.n	8000d70 <spi_transmit_receive+0x25e>
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d109      	bne.n	8000d84 <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8000d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000d82:	e00b      	b.n	8000d9c <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d19c      	bne.n	8000cc8 <spi_transmit_receive+0x1b6>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d197      	bne.n	8000cc8 <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 8000d98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3728      	adds	r7, #40	@ 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	e00a      	b.n	8000dcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000db6:	f3af 8000 	nop.w
 8000dba:	4601      	mov	r1, r0
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	b2ca      	uxtb	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbf0      	blt.n	8000db6 <_read+0x12>
	}

return len;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e009      	b.n	8000e04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 f8e3 	bl	8000fc4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbf1      	blt.n	8000df0 <_write+0x12>
	}
	return len;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_close>:

int _close(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_isatty>:

int _isatty(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	return 1;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f003 fe62 	bl	8004b78 <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20020000 	.word	0x20020000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	200000e0 	.word	0x200000e0
 8000ee8:	20000788 	.word	0x20000788

08000eec <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8000ef4:	f000 f818 	bl	8000f28 <get_tick>
 8000ef8:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d002      	beq.n	8000f0c <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8000f0c:	bf00      	nop
 8000f0e:	f000 f80b 	bl	8000f28 <get_tick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d8f7      	bhi.n	8000f0e <delay+0x22>

}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <get_tick>:

uint32_t get_tick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <get_tick+0x24>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a06      	ldr	r2, [pc, #24]	@ (8000f50 <get_tick+0x28>)
 8000f36:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f38:	b662      	cpsie	i
}
 8000f3a:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000f3c:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <get_tick+0x28>)
 8000f3e:	681b      	ldr	r3, [r3, #0]

}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200000e4 	.word	0x200000e4
 8000f50:	200000e8 	.word	0x200000e8

08000f54 <tick_increment>:
static void tick_increment(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <tick_increment+0x18>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	4a03      	ldr	r2, [pc, #12]	@ (8000f6c <tick_increment+0x18>)
 8000f60:	6013      	str	r3, [r2, #0]
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	200000e4 	.word	0x200000e4

08000f70 <timebase_init>:
void timebase_init(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <timebase_init+0x44>)
 8000f7a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000f7e:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <timebase_init+0x44>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <timebase_init+0x44>)
 8000f88:	2204      	movs	r2, #4
 8000f8a:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <timebase_init+0x44>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <timebase_init+0x44>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <timebase_init+0x44>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <timebase_init+0x44>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fa4:	b662      	cpsie	i
}
 8000fa6:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	tick_increment();
 8000fbc:	f7ff ffca 	bl	8000f54 <tick_increment>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f84f 	bl	8001070 <uart_write>
	return ch;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <debug_uart_init>:

void debug_uart_init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <debug_uart_init+0x84>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8001060 <debug_uart_init+0x84>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000fec:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <debug_uart_init+0x88>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8001064 <debug_uart_init+0x88>)
 8000ff2:	f023 0310 	bic.w	r3, r3, #16
 8000ff6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <debug_uart_init+0x88>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <debug_uart_init+0x88>)
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <debug_uart_init+0x88>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	4a16      	ldr	r2, [pc, #88]	@ (8001064 <debug_uart_init+0x88>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <debug_uart_init+0x88>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a13      	ldr	r2, [pc, #76]	@ (8001064 <debug_uart_init+0x88>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800101a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <debug_uart_init+0x88>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <debug_uart_init+0x88>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001026:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <debug_uart_init+0x88>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <debug_uart_init+0x88>)
 800102e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001032:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <debug_uart_init+0x84>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <debug_uart_init+0x84>)
 800103a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103e:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8001040:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001044:	4808      	ldr	r0, [pc, #32]	@ (8001068 <debug_uart_init+0x8c>)
 8001046:	f000 f83f 	bl	80010c8 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <debug_uart_init+0x90>)
 800104c:	2208      	movs	r2, #8
 800104e:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <debug_uart_init+0x90>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4a05      	ldr	r2, [pc, #20]	@ (800106c <debug_uart_init+0x90>)
 8001056:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	00f42400 	.word	0x00f42400
 800106c:	40004400 	.word	0x40004400

08001070 <uart_write>:



static void uart_write(int ch)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8001078:	bf00      	nop
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <uart_write+0x2c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f9      	beq.n	800107a <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <uart_write+0x2c>)
 800108a:	b2db      	uxtb	r3, r3
 800108c:	6053      	str	r3, [r2, #4]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40004400 	.word	0x40004400

080010a0 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	085a      	lsrs	r2, r3, #1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	441a      	add	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b8:	b29b      	uxth	r3, r3
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffe3 	bl	80010a0 <compute_uart_bd>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <uart_set_baudrate+0x24>)
 80010e0:	609a      	str	r2, [r3, #8]
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40004400 	.word	0x40004400

080010f0 <ip_assigned_callback>:

volatile bool is_ip_assigned =  false;


void ip_assigned_callback(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <ip_assigned_callback+0x14>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	200005dc 	.word	0x200005dc

08001108 <ip_update_callback>:

void ip_update_callback(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <ip_update_callback+0x14>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	200005dc 	.word	0x200005dc

08001120 <ip_conflict_callback>:
void ip_conflict_callback(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	is_ip_assigned =  false;
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <ip_conflict_callback+0x14>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	200005dc 	.word	0x200005dc

08001138 <wizchip_cs_pin_init>:
    .dhcp =  NETINFO_DHCP
};
/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <wizchip_cs_pin_init+0x34>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <wizchip_cs_pin_init+0x34>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <wizchip_cs_pin_init+0x38>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <wizchip_cs_pin_init+0x38>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001152:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <wizchip_cs_pin_init+0x38>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <wizchip_cs_pin_init+0x38>)
 800115a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800115e:	6013      	str	r3, [r2, #0]

}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <wizchip_pin_cs_select>:
/*Select W5500 by pulling CS pin low*/
void wizchip_pin_cs_select(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <wizchip_pin_cs_select+0x1c>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <wizchip_pin_cs_select+0x1c>)
 800117e:	f023 0310 	bic.w	r3, r3, #16
 8001182:	6153      	str	r3, [r2, #20]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000

08001194 <wizchip_pin_cs_deselect>:

/*Unselect W5500 by pulling CS pin high*/
void wizchip_pin_cs_deselect(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <wizchip_pin_cs_deselect+0x1c>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <wizchip_pin_cs_deselect+0x1c>)
 800119e:	f043 0310 	orr.w	r3, r3, #16
 80011a2:	6153      	str	r3, [r2, #20]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000

080011b4 <wizchip_read_burst>:

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);
 80011c0:	887a      	ldrh	r2, [r7, #2]
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <wizchip_read_burst+0x24>)
 80011ca:	f7ff fbb5 	bl	8000938 <spi_receive>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200000ec 	.word	0x200000ec

080011dc <wizchip_read_byte>:

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ffe4 	bl	80011b4 <wizchip_read_burst>
	return byte;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <wizchip_write_burst>:
/*Spi write multiple bytes*/
void wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);
 8001204:	887a      	ldrh	r2, [r7, #2]
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <wizchip_write_burst+0x24>)
 800120e:	f7ff fa73 	bl	80006f8 <spi_transmit>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000ec 	.word	0x200000ec

08001220 <wizchip_write_byte>:

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	wizchip_write_burst(&byte,sizeof(byte));
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ffe2 	bl	80011f8 <wizchip_write_burst>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <w5500_spi_init>:
 void w5500_spi_init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <w5500_spi_init+0x50>)
 8001242:	4a13      	ldr	r2, [pc, #76]	@ (8001290 <w5500_spi_init+0x54>)
 8001244:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <w5500_spi_init+0x50>)
 8001248:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800124c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <w5500_spi_init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <w5500_spi_init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <w5500_spi_init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <w5500_spi_init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <w5500_spi_init+0x50>)
 8001268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800126c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <w5500_spi_init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <w5500_spi_init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127a:	4b04      	ldr	r3, [pc, #16]	@ (800128c <w5500_spi_init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Initialize spi*/
	spi_init(&hspi1);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <w5500_spi_init+0x50>)
 8001282:	f7ff f9d1 	bl	8000628 <spi_init>

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000ec 	.word	0x200000ec
 8001290:	40013000 	.word	0x40013000

08001294 <w5500_init>:


 void w5500_init(void)
 {
 8001294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001296:	b093      	sub	sp, #76	@ 0x4c
 8001298:	af0a      	add	r7, sp, #40	@ 0x28
     //Set RX and TX Buffer sizes

	 /*Set 2KB buffer for each of the 8 sockets*/
	 uint8_t rx_tx_buff_sizes[]= {2,2,2,2,2,2,2,2};
 800129a:	4a4a      	ldr	r2, [pc, #296]	@ (80013c4 <w5500_init+0x130>)
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a4:	e883 0003 	stmia.w	r3, {r0, r1}

	 /*Initialize the W5500 with the RX and TX buffer sizes*/
	 wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80012a8:	f107 0214 	add.w	r2, r7, #20
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fe7a 	bl	8003fac <wizchip_init>

	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_pin_cs_select,wizchip_pin_cs_deselect);
 80012b8:	4943      	ldr	r1, [pc, #268]	@ (80013c8 <w5500_init+0x134>)
 80012ba:	4844      	ldr	r0, [pc, #272]	@ (80013cc <w5500_init+0x138>)
 80012bc:	f002 fccc 	bl	8003c58 <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
 80012c0:	4943      	ldr	r1, [pc, #268]	@ (80013d0 <w5500_init+0x13c>)
 80012c2:	4844      	ldr	r0, [pc, #272]	@ (80013d4 <w5500_init+0x140>)
 80012c4:	f002 fcee 	bl	8003ca4 <reg_wizchip_spi_cbfunc>
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 80012c8:	4943      	ldr	r1, [pc, #268]	@ (80013d8 <w5500_init+0x144>)
 80012ca:	4844      	ldr	r0, [pc, #272]	@ (80013dc <w5500_init+0x148>)
 80012cc:	f002 fd16 	bl	8003cfc <reg_wizchip_spiburst_cbfunc>

	 /*Set MAC Address*/
	 setSHAR(net_info.mac);
 80012d0:	2206      	movs	r2, #6
 80012d2:	4943      	ldr	r1, [pc, #268]	@ (80013e0 <w5500_init+0x14c>)
 80012d4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80012d8:	f002 fa6e 	bl	80037b8 <WIZCHIP_WRITE_BUF>

	 /*Initialize DHCP*/
	 DHCP_init(DHCP_SOCKET,dhcp_buffer);
 80012dc:	4941      	ldr	r1, [pc, #260]	@ (80013e4 <w5500_init+0x150>)
 80012de:	2000      	movs	r0, #0
 80012e0:	f001 fbaa 	bl	8002a38 <DHCP_init>

	 //Register DHCP Callbacks
	 reg_dhcp_cbfunc(ip_assigned_callback,ip_update_callback,ip_conflict_callback);
 80012e4:	4a40      	ldr	r2, [pc, #256]	@ (80013e8 <w5500_init+0x154>)
 80012e6:	4941      	ldr	r1, [pc, #260]	@ (80013ec <w5500_init+0x158>)
 80012e8:	4841      	ldr	r0, [pc, #260]	@ (80013f0 <w5500_init+0x15c>)
 80012ea:	f000 f903 	bl	80014f4 <reg_dhcp_cbfunc>

	 /*Wait for IP assignment from DHCP*/
	 uint16_t timeout_counter =  10000;
 80012ee:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012f2:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 80012f4:	e004      	b.n	8001300 <w5500_init+0x6c>
	 {
		 DHCP_run();
 80012f6:	f001 f9e7 	bl	80026c8 <DHCP_run>
		 timeout_counter--;
 80012fa:	8bfb      	ldrh	r3, [r7, #30]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8001300:	4b3c      	ldr	r3, [pc, #240]	@ (80013f4 <w5500_init+0x160>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f083 0301 	eor.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <w5500_init+0x82>
 8001310:	8bfb      	ldrh	r3, [r7, #30]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ef      	bne.n	80012f6 <w5500_init+0x62>
	 }

	 if(!is_ip_assigned)
 8001316:	4b37      	ldr	r3, [pc, #220]	@ (80013f4 <w5500_init+0x160>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d149      	bne.n	80013ba <w5500_init+0x126>
	 {
		 return;
	 }

	 /*Get network settings from DHCP*/
	 getIPfromDHCP(net_info.ip);
 8001326:	4834      	ldr	r0, [pc, #208]	@ (80013f8 <w5500_init+0x164>)
 8001328:	f001 fc30 	bl	8002b8c <getIPfromDHCP>
	 getGWfromDHCP(net_info.gw);
 800132c:	4833      	ldr	r0, [pc, #204]	@ (80013fc <w5500_init+0x168>)
 800132e:	f001 fc4d 	bl	8002bcc <getGWfromDHCP>
	 getSNfromDHCP(net_info.sn);
 8001332:	4833      	ldr	r0, [pc, #204]	@ (8001400 <w5500_init+0x16c>)
 8001334:	f001 fc6a 	bl	8002c0c <getSNfromDHCP>


	/* Format and print the assigned IP, Gateway, and Subnet mask */
	sprintf(temp_buffer,
		"IP Address:  %d.%d.%d.%d\r\nGateway:  %d.%d.%d.%d\r\nSubnet mask: %d.%d.%d.%d\r\n",
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001338:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <w5500_init+0x14c>)
 800133a:	799b      	ldrb	r3, [r3, #6]
	sprintf(temp_buffer,
 800133c:	469c      	mov	ip, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800133e:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <w5500_init+0x14c>)
 8001340:	79db      	ldrb	r3, [r3, #7]
	sprintf(temp_buffer,
 8001342:	469e      	mov	lr, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001344:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <w5500_init+0x14c>)
 8001346:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(temp_buffer,
 8001348:	461a      	mov	r2, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800134a:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <w5500_init+0x14c>)
 800134c:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(temp_buffer,
 800134e:	4619      	mov	r1, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <w5500_init+0x14c>)
 8001352:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(temp_buffer,
 8001354:	4618      	mov	r0, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <w5500_init+0x14c>)
 8001358:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(temp_buffer,
 800135a:	461c      	mov	r4, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800135c:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <w5500_init+0x14c>)
 800135e:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(temp_buffer,
 8001360:	461d      	mov	r5, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001362:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <w5500_init+0x14c>)
 8001364:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(temp_buffer,
 8001366:	461e      	mov	r6, r3
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001368:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <w5500_init+0x14c>)
 800136a:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(temp_buffer,
 800136c:	60fb      	str	r3, [r7, #12]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 800136e:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <w5500_init+0x14c>)
 8001370:	7adb      	ldrb	r3, [r3, #11]
	sprintf(temp_buffer,
 8001372:	60bb      	str	r3, [r7, #8]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <w5500_init+0x14c>)
 8001376:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(temp_buffer,
 8001378:	607b      	str	r3, [r7, #4]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <w5500_init+0x14c>)
 800137c:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(temp_buffer,
 800137e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	9308      	str	r3, [sp, #32]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	9307      	str	r3, [sp, #28]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	9306      	str	r3, [sp, #24]
 800138c:	9605      	str	r6, [sp, #20]
 800138e:	9504      	str	r5, [sp, #16]
 8001390:	9403      	str	r4, [sp, #12]
 8001392:	9002      	str	r0, [sp, #8]
 8001394:	9101      	str	r1, [sp, #4]
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	4673      	mov	r3, lr
 800139a:	4662      	mov	r2, ip
 800139c:	4919      	ldr	r1, [pc, #100]	@ (8001404 <w5500_init+0x170>)
 800139e:	481a      	ldr	r0, [pc, #104]	@ (8001408 <w5500_init+0x174>)
 80013a0:	f003 fa94 	bl	80048cc <siprintf>
	);

    printf("*************Network Information************************\r\n");
 80013a4:	4819      	ldr	r0, [pc, #100]	@ (800140c <w5500_init+0x178>)
 80013a6:	f003 fa89 	bl	80048bc <puts>
    printf("%s", temp_buffer);
 80013aa:	4917      	ldr	r1, [pc, #92]	@ (8001408 <w5500_init+0x174>)
 80013ac:	4818      	ldr	r0, [pc, #96]	@ (8001410 <w5500_init+0x17c>)
 80013ae:	f003 fa1d 	bl	80047ec <iprintf>

    /*Apply the network configurations to the W5500*/
    wizchip_setnetinfo(&net_info);
 80013b2:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <w5500_init+0x14c>)
 80013b4:	f003 f86a 	bl	800448c <wizchip_setnetinfo>
 80013b8:	e000      	b.n	80013bc <w5500_init+0x128>
		 return;
 80013ba:	bf00      	nop

 }
 80013bc:	3724      	adds	r7, #36	@ 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c2:	bf00      	nop
 80013c4:	080059a0 	.word	0x080059a0
 80013c8:	08001195 	.word	0x08001195
 80013cc:	08001175 	.word	0x08001175
 80013d0:	08001221 	.word	0x08001221
 80013d4:	080011dd 	.word	0x080011dd
 80013d8:	080011f9 	.word	0x080011f9
 80013dc:	080011b5 	.word	0x080011b5
 80013e0:	20000000 	.word	0x20000000
 80013e4:	200001dc 	.word	0x200001dc
 80013e8:	08001121 	.word	0x08001121
 80013ec:	08001109 	.word	0x08001109
 80013f0:	080010f1 	.word	0x080010f1
 80013f4:	200005dc 	.word	0x200005dc
 80013f8:	20000006 	.word	0x20000006
 80013fc:	2000000e 	.word	0x2000000e
 8001400:	2000000a 	.word	0x2000000a
 8001404:	08005914 	.word	0x08005914
 8001408:	20000130 	.word	0x20000130
 800140c:	08005960 	.word	0x08005960
 8001410:	0800599c 	.word	0x0800599c

08001414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001414:	480d      	ldr	r0, [pc, #52]	@ (800144c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001416:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001418:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <LoopForever+0x6>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	@ (8001454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <LoopForever+0xe>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	@ (8001460 <LoopForever+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001442:	f003 fb9f 	bl	8004b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001446:	f7ff f83b 	bl	80004c0 <main>

0800144a <LoopForever>:

LoopForever:
    b LoopForever
 800144a:	e7fe      	b.n	800144a <LoopForever>
  ldr   r0, =_estack
 800144c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001458:	08005a00 	.word	0x08005a00
  ldr r2, =_sbss
 800145c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001460:	20000784 	.word	0x20000784

08001464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>
	...

08001468 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 800146c:	2204      	movs	r2, #4
 800146e:	4909      	ldr	r1, [pc, #36]	@ (8001494 <default_ip_assign+0x2c>)
 8001470:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001474:	f002 f9a0 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8001478:	2204      	movs	r2, #4
 800147a:	4907      	ldr	r1, [pc, #28]	@ (8001498 <default_ip_assign+0x30>)
 800147c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001480:	f002 f99a 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8001484:	2204      	movs	r2, #4
 8001486:	4905      	ldr	r1, [pc, #20]	@ (800149c <default_ip_assign+0x34>)
 8001488:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800148c:	f002 f994 	bl	80037b8 <WIZCHIP_WRITE_BUF>
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200005ec 	.word	0x200005ec
 8001498:	200005f4 	.word	0x200005f4
 800149c:	200005f0 	.word	0x200005f0

080014a0 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80014a4:	2180      	movs	r1, #128	@ 0x80
 80014a6:	2000      	movs	r0, #0
 80014a8:	f002 f8d8 	bl	800365c <WIZCHIP_WRITE>
   getMR(); // for delay
 80014ac:	2000      	movs	r0, #0
 80014ae:	f002 f889 	bl	80035c4 <WIZCHIP_READ>
   default_ip_assign();
 80014b2:	f7ff ffd9 	bl	8001468 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 80014b6:	2206      	movs	r2, #6
 80014b8:	4903      	ldr	r1, [pc, #12]	@ (80014c8 <default_ip_update+0x28>)
 80014ba:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80014be:	f002 f97b 	bl	80037b8 <WIZCHIP_WRITE_BUF>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000060c 	.word	0x2000060c

080014cc <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 80014d0:	2180      	movs	r1, #128	@ 0x80
 80014d2:	2000      	movs	r0, #0
 80014d4:	f002 f8c2 	bl	800365c <WIZCHIP_WRITE>
	getMR(); // for delay
 80014d8:	2000      	movs	r0, #0
 80014da:	f002 f873 	bl	80035c4 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80014de:	2206      	movs	r2, #6
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <default_ip_conflict+0x24>)
 80014e2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80014e6:	f002 f967 	bl	80037b8 <WIZCHIP_WRITE_BUF>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000060c 	.word	0x2000060c

080014f4 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8001500:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <reg_dhcp_cbfunc+0x50>)
 8001502:	4a11      	ldr	r2, [pc, #68]	@ (8001548 <reg_dhcp_cbfunc+0x54>)
 8001504:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <reg_dhcp_cbfunc+0x58>)
 8001508:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <reg_dhcp_cbfunc+0x5c>)
 800150a:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <reg_dhcp_cbfunc+0x60>)
 800150e:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <reg_dhcp_cbfunc+0x64>)
 8001510:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <reg_dhcp_cbfunc+0x2a>
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <reg_dhcp_cbfunc+0x50>)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <reg_dhcp_cbfunc+0x36>
 8001524:	4a09      	ldr	r2, [pc, #36]	@ (800154c <reg_dhcp_cbfunc+0x58>)
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <reg_dhcp_cbfunc+0x42>
 8001530:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <reg_dhcp_cbfunc+0x60>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000028 	.word	0x20000028
 8001548:	08001469 	.word	0x08001469
 800154c:	2000002c 	.word	0x2000002c
 8001550:	080014a1 	.word	0x080014a1
 8001554:	20000030 	.word	0x20000030
 8001558:	080014cd 	.word	0x080014cd

0800155c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8001562:	463b      	mov	r3, r7
 8001564:	2206      	movs	r2, #6
 8001566:	4619      	mov	r1, r3
 8001568:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800156c:	f002 f8c4 	bl	80036f8 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001570:	4b72      	ldr	r3, [pc, #456]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001578:	4b70      	ldr	r3, [pc, #448]	@ (800173c <makeDHCPMSG+0x1e0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2201      	movs	r2, #1
 800157e:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001580:	4b6e      	ldr	r3, [pc, #440]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2206      	movs	r2, #6
 8001586:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001588:	4b6c      	ldr	r3, [pc, #432]	@ (800173c <makeDHCPMSG+0x1e0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2200      	movs	r2, #0
 800158e:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001590:	4b6a      	ldr	r3, [pc, #424]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3304      	adds	r3, #4
 8001596:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001598:	4b69      	ldr	r3, [pc, #420]	@ (8001740 <makeDHCPMSG+0x1e4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0e1b      	lsrs	r3, r3, #24
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80015a4:	4b66      	ldr	r3, [pc, #408]	@ (8001740 <makeDHCPMSG+0x1e4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0c1a      	lsrs	r2, r3, #16
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80015b2:	4b63      	ldr	r3, [pc, #396]	@ (8001740 <makeDHCPMSG+0x1e4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0a1a      	lsrs	r2, r3, #8
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	3302      	adds	r3, #2
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80015c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001740 <makeDHCPMSG+0x1e4>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	3303      	adds	r3, #3
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80015cc:	4b5b      	ldr	r3, [pc, #364]	@ (800173c <makeDHCPMSG+0x1e0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2200      	movs	r2, #0
 80015d2:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80015d4:	4b59      	ldr	r3, [pc, #356]	@ (800173c <makeDHCPMSG+0x1e0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	330a      	adds	r3, #10
 80015da:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3301      	adds	r3, #1
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80015ea:	4b54      	ldr	r3, [pc, #336]	@ (800173c <makeDHCPMSG+0x1e0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2200      	movs	r2, #0
 80015f0:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80015f2:	4b52      	ldr	r3, [pc, #328]	@ (800173c <makeDHCPMSG+0x1e0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 80015fa:	4b50      	ldr	r3, [pc, #320]	@ (800173c <makeDHCPMSG+0x1e0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8001602:	4b4e      	ldr	r3, [pc, #312]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 800160a:	4b4c      	ldr	r3, [pc, #304]	@ (800173c <makeDHCPMSG+0x1e0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8001612:	4b4a      	ldr	r3, [pc, #296]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2200      	movs	r2, #0
 8001618:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 800161a:	4b48      	ldr	r3, [pc, #288]	@ (800173c <makeDHCPMSG+0x1e0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2200      	movs	r2, #0
 8001620:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8001622:	4b46      	ldr	r3, [pc, #280]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 800162a:	4b44      	ldr	r3, [pc, #272]	@ (800173c <makeDHCPMSG+0x1e0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8001632:	4b42      	ldr	r3, [pc, #264]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 800163a:	4b40      	ldr	r3, [pc, #256]	@ (800173c <makeDHCPMSG+0x1e0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8001642:	4b3e      	ldr	r3, [pc, #248]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 800164a:	4b3c      	ldr	r3, [pc, #240]	@ (800173c <makeDHCPMSG+0x1e0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8001652:	4b3a      	ldr	r3, [pc, #232]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 800165a:	4b38      	ldr	r3, [pc, #224]	@ (800173c <makeDHCPMSG+0x1e0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2200      	movs	r2, #0
 8001660:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8001662:	4b36      	ldr	r3, [pc, #216]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 800166a:	4b34      	ldr	r3, [pc, #208]	@ (800173c <makeDHCPMSG+0x1e0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a35      	ldr	r2, [pc, #212]	@ (8001744 <makeDHCPMSG+0x1e8>)
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8001674:	4b31      	ldr	r3, [pc, #196]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a32      	ldr	r2, [pc, #200]	@ (8001744 <makeDHCPMSG+0x1e8>)
 800167a:	7852      	ldrb	r2, [r2, #1]
 800167c:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800167e:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a30      	ldr	r2, [pc, #192]	@ (8001744 <makeDHCPMSG+0x1e8>)
 8001684:	7892      	ldrb	r2, [r2, #2]
 8001686:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001688:	4b2c      	ldr	r3, [pc, #176]	@ (800173c <makeDHCPMSG+0x1e0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a2d      	ldr	r2, [pc, #180]	@ (8001744 <makeDHCPMSG+0x1e8>)
 800168e:	78d2      	ldrb	r2, [r2, #3]
 8001690:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8001692:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a2b      	ldr	r2, [pc, #172]	@ (8001744 <makeDHCPMSG+0x1e8>)
 8001698:	7912      	ldrb	r2, [r2, #4]
 800169a:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800169e:	4b27      	ldr	r3, [pc, #156]	@ (800173c <makeDHCPMSG+0x1e0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a28      	ldr	r2, [pc, #160]	@ (8001744 <makeDHCPMSG+0x1e8>)
 80016a4:	7952      	ldrb	r2, [r2, #5]
 80016a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80016aa:	2306      	movs	r3, #6
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e008      	b.n	80016c2 <makeDHCPMSG+0x166>
 80016b0:	4b22      	ldr	r3, [pc, #136]	@ (800173c <makeDHCPMSG+0x1e0>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	4413      	add	r3, r2
 80016b8:	2200      	movs	r2, #0
 80016ba:	771a      	strb	r2, [r3, #28]
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	3301      	adds	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d9f3      	bls.n	80016b0 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e009      	b.n	80016e2 <makeDHCPMSG+0x186>
 80016ce:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <makeDHCPMSG+0x1e0>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4413      	add	r3, r2
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	3301      	adds	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80016e6:	d9f2      	bls.n	80016ce <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e009      	b.n	8001702 <makeDHCPMSG+0x1a6>
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <makeDHCPMSG+0x1e0>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	4413      	add	r3, r2
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	3301      	adds	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	2b00      	cmp	r3, #0
 8001708:	daf1      	bge.n	80016ee <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 800170a:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <makeDHCPMSG+0x1e0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2263      	movs	r2, #99	@ 0x63
 8001710:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8001714:	4b09      	ldr	r3, [pc, #36]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2282      	movs	r2, #130	@ 0x82
 800171a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800171e:	4b07      	ldr	r3, [pc, #28]	@ (800173c <makeDHCPMSG+0x1e0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2253      	movs	r2, #83	@ 0x53
 8001724:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <makeDHCPMSG+0x1e0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2263      	movs	r2, #99	@ 0x63
 800172e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000608 	.word	0x20000608
 8001740:	20000604 	.word	0x20000604
 8001744:	2000060c 	.word	0x2000060c

08001748 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8001752:	f7ff ff03 	bl	800155c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8001756:	4b56      	ldr	r3, [pc, #344]	@ (80018b0 <send_DHCP_DISCOVER+0x168>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 800175c:	4b54      	ldr	r3, [pc, #336]	@ (80018b0 <send_DHCP_DISCOVER+0x168>)
 800175e:	2200      	movs	r2, #0
 8001760:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8001762:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <send_DHCP_DISCOVER+0x168>)
 8001764:	2200      	movs	r2, #0
 8001766:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8001768:	4b51      	ldr	r3, [pc, #324]	@ (80018b0 <send_DHCP_DISCOVER+0x168>)
 800176a:	2200      	movs	r2, #0
 800176c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800176e:	4b51      	ldr	r3, [pc, #324]	@ (80018b4 <send_DHCP_DISCOVER+0x16c>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8001774:	4b4f      	ldr	r3, [pc, #316]	@ (80018b4 <send_DHCP_DISCOVER+0x16c>)
 8001776:	2200      	movs	r2, #0
 8001778:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 800177a:	4b4e      	ldr	r3, [pc, #312]	@ (80018b4 <send_DHCP_DISCOVER+0x16c>)
 800177c:	2200      	movs	r2, #0
 800177e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8001780:	4b4c      	ldr	r3, [pc, #304]	@ (80018b4 <send_DHCP_DISCOVER+0x16c>)
 8001782:	2200      	movs	r2, #0
 8001784:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001786:	2304      	movs	r3, #4
 8001788:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800178a:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	1c59      	adds	r1, r3, #1
 8001792:	80b9      	strh	r1, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	2235      	movs	r2, #53	@ 0x35
 8001798:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800179c:	4b46      	ldr	r3, [pc, #280]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	88bb      	ldrh	r3, [r7, #4]
 80017a2:	1c59      	adds	r1, r3, #1
 80017a4:	80b9      	strh	r1, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80017ae:	4b42      	ldr	r3, [pc, #264]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	1c59      	adds	r1, r3, #1
 80017b6:	80b9      	strh	r1, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80017c0:	4b3d      	ldr	r3, [pc, #244]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	1c59      	adds	r1, r3, #1
 80017c8:	80b9      	strh	r1, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	223d      	movs	r2, #61	@ 0x3d
 80017ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80017d2:	4b39      	ldr	r3, [pc, #228]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	88bb      	ldrh	r3, [r7, #4]
 80017d8:	1c59      	adds	r1, r3, #1
 80017da:	80b9      	strh	r1, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	2207      	movs	r2, #7
 80017e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80017e4:	4b34      	ldr	r3, [pc, #208]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	80b9      	strh	r1, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80017f6:	4b30      	ldr	r3, [pc, #192]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	88bb      	ldrh	r3, [r7, #4]
 80017fc:	1c59      	adds	r1, r3, #1
 80017fe:	80b9      	strh	r1, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	4b2e      	ldr	r3, [pc, #184]	@ (80018bc <send_DHCP_DISCOVER+0x174>)
 8001804:	7819      	ldrb	r1, [r3, #0]
 8001806:	1813      	adds	r3, r2, r0
 8001808:	460a      	mov	r2, r1
 800180a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800180e:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	1c59      	adds	r1, r3, #1
 8001816:	80b9      	strh	r1, [r7, #4]
 8001818:	4618      	mov	r0, r3
 800181a:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <send_DHCP_DISCOVER+0x174>)
 800181c:	7859      	ldrb	r1, [r3, #1]
 800181e:	1813      	adds	r3, r2, r0
 8001820:	460a      	mov	r2, r1
 8001822:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	1c59      	adds	r1, r3, #1
 800182e:	80b9      	strh	r1, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	4b22      	ldr	r3, [pc, #136]	@ (80018bc <send_DHCP_DISCOVER+0x174>)
 8001834:	7899      	ldrb	r1, [r3, #2]
 8001836:	1813      	adds	r3, r2, r0
 8001838:	460a      	mov	r2, r1
 800183a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800183e:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	1c59      	adds	r1, r3, #1
 8001846:	80b9      	strh	r1, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <send_DHCP_DISCOVER+0x174>)
 800184c:	78d9      	ldrb	r1, [r3, #3]
 800184e:	1813      	adds	r3, r2, r0
 8001850:	460a      	mov	r2, r1
 8001852:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	88bb      	ldrh	r3, [r7, #4]
 800185c:	1c59      	adds	r1, r3, #1
 800185e:	80b9      	strh	r1, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <send_DHCP_DISCOVER+0x174>)
 8001864:	7919      	ldrb	r1, [r3, #4]
 8001866:	1813      	adds	r3, r2, r0
 8001868:	460a      	mov	r2, r1
 800186a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	1c59      	adds	r1, r3, #1
 8001876:	80b9      	strh	r1, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <send_DHCP_DISCOVER+0x174>)
 800187c:	7959      	ldrb	r1, [r3, #5]
 800187e:	1813      	adds	r3, r2, r0
 8001880:	460a      	mov	r2, r1
 8001882:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001886:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	1c59      	adds	r1, r3, #1
 800188e:	80b9      	strh	r1, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	220c      	movs	r2, #12
 8001894:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001898:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <send_DHCP_DISCOVER+0x170>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	88bb      	ldrh	r3, [r7, #4]
 800189e:	1c59      	adds	r1, r3, #1
 80018a0:	80b9      	strh	r1, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	e017      	b.n	80018e0 <send_DHCP_DISCOVER+0x198>
 80018b0:	200005e0 	.word	0x200005e0
 80018b4:	200005e4 	.word	0x200005e4
 80018b8:	20000608 	.word	0x20000608
 80018bc:	2000060c 	.word	0x2000060c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80018c0:	88f9      	ldrh	r1, [r7, #6]
 80018c2:	4b80      	ldr	r3, [pc, #512]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	1c58      	adds	r0, r3, #1
 80018ca:	80b8      	strh	r0, [r7, #4]
 80018cc:	4618      	mov	r0, r3
 80018ce:	4b7e      	ldr	r3, [pc, #504]	@ (8001ac8 <send_DHCP_DISCOVER+0x380>)
 80018d0:	5c59      	ldrb	r1, [r3, r1]
 80018d2:	1813      	adds	r3, r2, r0
 80018d4:	460a      	mov	r2, r1
 80018d6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	3301      	adds	r3, #1
 80018de:	80fb      	strh	r3, [r7, #6]
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	4a79      	ldr	r2, [pc, #484]	@ (8001ac8 <send_DHCP_DISCOVER+0x380>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ea      	bne.n	80018c0 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80018ea:	4b78      	ldr	r3, [pc, #480]	@ (8001acc <send_DHCP_DISCOVER+0x384>)
 80018ec:	78db      	ldrb	r3, [r3, #3]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b74      	ldr	r3, [pc, #464]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 80018f4:	681c      	ldr	r4, [r3, #0]
 80018f6:	88bb      	ldrh	r3, [r7, #4]
 80018f8:	1c59      	adds	r1, r3, #1
 80018fa:	80b9      	strh	r1, [r7, #4]
 80018fc:	461d      	mov	r5, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f001 f9a4 	bl	8002c4c <NibbleToHex>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	1963      	adds	r3, r4, r5
 800190a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800190e:	4b6f      	ldr	r3, [pc, #444]	@ (8001acc <send_DHCP_DISCOVER+0x384>)
 8001910:	78da      	ldrb	r2, [r3, #3]
 8001912:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001914:	681c      	ldr	r4, [r3, #0]
 8001916:	88bb      	ldrh	r3, [r7, #4]
 8001918:	1c59      	adds	r1, r3, #1
 800191a:	80b9      	strh	r1, [r7, #4]
 800191c:	461d      	mov	r5, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f001 f994 	bl	8002c4c <NibbleToHex>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	1963      	adds	r3, r4, r5
 800192a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800192e:	4b67      	ldr	r3, [pc, #412]	@ (8001acc <send_DHCP_DISCOVER+0x384>)
 8001930:	791b      	ldrb	r3, [r3, #4]
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b63      	ldr	r3, [pc, #396]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001938:	681c      	ldr	r4, [r3, #0]
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	1c59      	adds	r1, r3, #1
 800193e:	80b9      	strh	r1, [r7, #4]
 8001940:	461d      	mov	r5, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f001 f982 	bl	8002c4c <NibbleToHex>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	1963      	adds	r3, r4, r5
 800194e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001952:	4b5e      	ldr	r3, [pc, #376]	@ (8001acc <send_DHCP_DISCOVER+0x384>)
 8001954:	791a      	ldrb	r2, [r3, #4]
 8001956:	4b5b      	ldr	r3, [pc, #364]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001958:	681c      	ldr	r4, [r3, #0]
 800195a:	88bb      	ldrh	r3, [r7, #4]
 800195c:	1c59      	adds	r1, r3, #1
 800195e:	80b9      	strh	r1, [r7, #4]
 8001960:	461d      	mov	r5, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f001 f972 	bl	8002c4c <NibbleToHex>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	1963      	adds	r3, r4, r5
 800196e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001972:	4b56      	ldr	r3, [pc, #344]	@ (8001acc <send_DHCP_DISCOVER+0x384>)
 8001974:	795b      	ldrb	r3, [r3, #5]
 8001976:	091b      	lsrs	r3, r3, #4
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b52      	ldr	r3, [pc, #328]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 800197c:	681c      	ldr	r4, [r3, #0]
 800197e:	88bb      	ldrh	r3, [r7, #4]
 8001980:	1c59      	adds	r1, r3, #1
 8001982:	80b9      	strh	r1, [r7, #4]
 8001984:	461d      	mov	r5, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f001 f960 	bl	8002c4c <NibbleToHex>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	1963      	adds	r3, r4, r5
 8001992:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001996:	4b4d      	ldr	r3, [pc, #308]	@ (8001acc <send_DHCP_DISCOVER+0x384>)
 8001998:	795a      	ldrb	r2, [r3, #5]
 800199a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 800199c:	681c      	ldr	r4, [r3, #0]
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	1c59      	adds	r1, r3, #1
 80019a2:	80b9      	strh	r1, [r7, #4]
 80019a4:	461d      	mov	r5, r3
 80019a6:	4610      	mov	r0, r2
 80019a8:	f001 f950 	bl	8002c4c <NibbleToHex>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	1963      	adds	r3, r4, r5
 80019b2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	b2d9      	uxtb	r1, r3
 80019ba:	4b42      	ldr	r3, [pc, #264]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	88b8      	ldrh	r0, [r7, #4]
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	3307      	adds	r3, #7
 80019c4:	1ac3      	subs	r3, r0, r3
 80019c6:	3106      	adds	r1, #6
 80019c8:	b2c9      	uxtb	r1, r1
 80019ca:	4413      	add	r3, r2
 80019cc:	460a      	mov	r2, r1
 80019ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80019d2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	1c59      	adds	r1, r3, #1
 80019da:	80b9      	strh	r1, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	2237      	movs	r2, #55	@ 0x37
 80019e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80019e4:	4b37      	ldr	r3, [pc, #220]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	88bb      	ldrh	r3, [r7, #4]
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	80b9      	strh	r1, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	2206      	movs	r2, #6
 80019f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80019f6:	4b33      	ldr	r3, [pc, #204]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	88bb      	ldrh	r3, [r7, #4]
 80019fc:	1c59      	adds	r1, r3, #1
 80019fe:	80b9      	strh	r1, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001a08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	88bb      	ldrh	r3, [r7, #4]
 8001a0e:	1c59      	adds	r1, r3, #1
 8001a10:	80b9      	strh	r1, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	2203      	movs	r2, #3
 8001a16:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	88bb      	ldrh	r3, [r7, #4]
 8001a20:	1c59      	adds	r1, r3, #1
 8001a22:	80b9      	strh	r1, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	2206      	movs	r2, #6
 8001a28:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	88bb      	ldrh	r3, [r7, #4]
 8001a32:	1c59      	adds	r1, r3, #1
 8001a34:	80b9      	strh	r1, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	88bb      	ldrh	r3, [r7, #4]
 8001a44:	1c59      	adds	r1, r3, #1
 8001a46:	80b9      	strh	r1, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	223a      	movs	r2, #58	@ 0x3a
 8001a4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	80b9      	strh	r1, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	223b      	movs	r2, #59	@ 0x3b
 8001a5e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001a62:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	88bb      	ldrh	r3, [r7, #4]
 8001a68:	1c59      	adds	r1, r3, #1
 8001a6a:	80b9      	strh	r1, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	22ff      	movs	r2, #255	@ 0xff
 8001a70:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	80fb      	strh	r3, [r7, #6]
 8001a78:	e009      	b.n	8001a8e <send_DHCP_DISCOVER+0x346>
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4413      	add	r3, r2
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	80fb      	strh	r3, [r7, #6]
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001a94:	d3f1      	bcc.n	8001a7a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8001a96:	23ff      	movs	r3, #255	@ 0xff
 8001a98:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001a9a:	23ff      	movs	r3, #255	@ 0xff
 8001a9c:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8001a9e:	23ff      	movs	r3, #255	@ 0xff
 8001aa0:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8001aa2:	23ff      	movs	r3, #255	@ 0xff
 8001aa4:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <send_DHCP_DISCOVER+0x388>)
 8001aa8:	7818      	ldrb	r0, [r3, #0]
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <send_DHCP_DISCOVER+0x37c>)
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2243      	movs	r2, #67	@ 0x43
 8001ab2:	9200      	str	r2, [sp, #0]
 8001ab4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001ab8:	f001 fa64 	bl	8002f84 <sendto>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac4:	20000608 	.word	0x20000608
 8001ac8:	20000020 	.word	0x20000020
 8001acc:	2000060c 	.word	0x2000060c
 8001ad0:	200005dd 	.word	0x200005dd

08001ad4 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001ad4:	b5b0      	push	{r4, r5, r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001ade:	f7ff fd3d 	bl	800155c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <send_DHCP_REQUEST+0x7c>)
 8001ae4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d004      	beq.n	8001af6 <send_DHCP_REQUEST+0x22>
 8001aec:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <send_DHCP_REQUEST+0x7c>)
 8001aee:	f993 3000 	ldrsb.w	r3, [r3]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d134      	bne.n	8001b60 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <send_DHCP_REQUEST+0x80>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	330a      	adds	r3, #10
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <send_DHCP_REQUEST+0x80>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	330a      	adds	r3, #10
 8001b06:	3301      	adds	r3, #1
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <send_DHCP_REQUEST+0x80>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <send_DHCP_REQUEST+0x84>)
 8001b12:	7812      	ldrb	r2, [r2, #0]
 8001b14:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <send_DHCP_REQUEST+0x80>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b58 <send_DHCP_REQUEST+0x84>)
 8001b1c:	7852      	ldrb	r2, [r2, #1]
 8001b1e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <send_DHCP_REQUEST+0x80>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0c      	ldr	r2, [pc, #48]	@ (8001b58 <send_DHCP_REQUEST+0x84>)
 8001b26:	7892      	ldrb	r2, [r2, #2]
 8001b28:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <send_DHCP_REQUEST+0x80>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <send_DHCP_REQUEST+0x84>)
 8001b30:	78d2      	ldrb	r2, [r2, #3]
 8001b32:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <send_DHCP_REQUEST+0x88>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <send_DHCP_REQUEST+0x88>)
 8001b3c:	785b      	ldrb	r3, [r3, #1]
 8001b3e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <send_DHCP_REQUEST+0x88>)
 8001b42:	789b      	ldrb	r3, [r3, #2]
 8001b44:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8001b46:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <send_DHCP_REQUEST+0x88>)
 8001b48:	78db      	ldrb	r3, [r3, #3]
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	e010      	b.n	8001b70 <send_DHCP_REQUEST+0x9c>
 8001b4e:	bf00      	nop
 8001b50:	200005fc 	.word	0x200005fc
 8001b54:	20000608 	.word	0x20000608
 8001b58:	200005ec 	.word	0x200005ec
 8001b5c:	200005e0 	.word	0x200005e0
   }
   else
   {
   	ip[0] = 255;
 8001b60:	23ff      	movs	r3, #255	@ 0xff
 8001b62:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8001b64:	23ff      	movs	r3, #255	@ 0xff
 8001b66:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001b68:	23ff      	movs	r3, #255	@ 0xff
 8001b6a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001b6c:	23ff      	movs	r3, #255	@ 0xff
 8001b6e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001b70:	2304      	movs	r3, #4
 8001b72:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001b74:	4b8d      	ldr	r3, [pc, #564]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	8179      	strh	r1, [r7, #10]
 8001b7e:	4413      	add	r3, r2
 8001b80:	2235      	movs	r2, #53	@ 0x35
 8001b82:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001b86:	4b89      	ldr	r3, [pc, #548]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	897b      	ldrh	r3, [r7, #10]
 8001b8c:	1c59      	adds	r1, r3, #1
 8001b8e:	8179      	strh	r1, [r7, #10]
 8001b90:	4413      	add	r3, r2
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001b98:	4b84      	ldr	r3, [pc, #528]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	1c59      	adds	r1, r3, #1
 8001ba0:	8179      	strh	r1, [r7, #10]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001baa:	4b80      	ldr	r3, [pc, #512]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	1c59      	adds	r1, r3, #1
 8001bb2:	8179      	strh	r1, [r7, #10]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	223d      	movs	r2, #61	@ 0x3d
 8001bb8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001bbc:	4b7b      	ldr	r3, [pc, #492]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	1c59      	adds	r1, r3, #1
 8001bc4:	8179      	strh	r1, [r7, #10]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	2207      	movs	r2, #7
 8001bca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001bce:	4b77      	ldr	r3, [pc, #476]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	1c59      	adds	r1, r3, #1
 8001bd6:	8179      	strh	r1, [r7, #10]
 8001bd8:	4413      	add	r3, r2
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001be0:	4b72      	ldr	r3, [pc, #456]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	897b      	ldrh	r3, [r7, #10]
 8001be6:	1c59      	adds	r1, r3, #1
 8001be8:	8179      	strh	r1, [r7, #10]
 8001bea:	4618      	mov	r0, r3
 8001bec:	4b70      	ldr	r3, [pc, #448]	@ (8001db0 <send_DHCP_REQUEST+0x2dc>)
 8001bee:	7819      	ldrb	r1, [r3, #0]
 8001bf0:	1813      	adds	r3, r2, r0
 8001bf2:	460a      	mov	r2, r1
 8001bf4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	897b      	ldrh	r3, [r7, #10]
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	8179      	strh	r1, [r7, #10]
 8001c02:	4618      	mov	r0, r3
 8001c04:	4b6a      	ldr	r3, [pc, #424]	@ (8001db0 <send_DHCP_REQUEST+0x2dc>)
 8001c06:	7859      	ldrb	r1, [r3, #1]
 8001c08:	1813      	adds	r3, r2, r0
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001c10:	4b66      	ldr	r3, [pc, #408]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	8179      	strh	r1, [r7, #10]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4b64      	ldr	r3, [pc, #400]	@ (8001db0 <send_DHCP_REQUEST+0x2dc>)
 8001c1e:	7899      	ldrb	r1, [r3, #2]
 8001c20:	1813      	adds	r3, r2, r0
 8001c22:	460a      	mov	r2, r1
 8001c24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001c28:	4b60      	ldr	r3, [pc, #384]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	8179      	strh	r1, [r7, #10]
 8001c32:	4618      	mov	r0, r3
 8001c34:	4b5e      	ldr	r3, [pc, #376]	@ (8001db0 <send_DHCP_REQUEST+0x2dc>)
 8001c36:	78d9      	ldrb	r1, [r3, #3]
 8001c38:	1813      	adds	r3, r2, r0
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001c40:	4b5a      	ldr	r3, [pc, #360]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	1c59      	adds	r1, r3, #1
 8001c48:	8179      	strh	r1, [r7, #10]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4b58      	ldr	r3, [pc, #352]	@ (8001db0 <send_DHCP_REQUEST+0x2dc>)
 8001c4e:	7919      	ldrb	r1, [r3, #4]
 8001c50:	1813      	adds	r3, r2, r0
 8001c52:	460a      	mov	r2, r1
 8001c54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001c58:	4b54      	ldr	r3, [pc, #336]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	897b      	ldrh	r3, [r7, #10]
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	8179      	strh	r1, [r7, #10]
 8001c62:	4618      	mov	r0, r3
 8001c64:	4b52      	ldr	r3, [pc, #328]	@ (8001db0 <send_DHCP_REQUEST+0x2dc>)
 8001c66:	7959      	ldrb	r1, [r3, #5]
 8001c68:	1813      	adds	r3, r2, r0
 8001c6a:	460a      	mov	r2, r1
 8001c6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2bff      	cmp	r3, #255	@ 0xff
 8001c74:	f040 8084 	bne.w	8001d80 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001c78:	4b4c      	ldr	r3, [pc, #304]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	897b      	ldrh	r3, [r7, #10]
 8001c7e:	1c59      	adds	r1, r3, #1
 8001c80:	8179      	strh	r1, [r7, #10]
 8001c82:	4413      	add	r3, r2
 8001c84:	2232      	movs	r2, #50	@ 0x32
 8001c86:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001c8a:	4b48      	ldr	r3, [pc, #288]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	1c59      	adds	r1, r3, #1
 8001c92:	8179      	strh	r1, [r7, #10]
 8001c94:	4413      	add	r3, r2
 8001c96:	2204      	movs	r2, #4
 8001c98:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001c9c:	4b43      	ldr	r3, [pc, #268]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	897b      	ldrh	r3, [r7, #10]
 8001ca2:	1c59      	adds	r1, r3, #1
 8001ca4:	8179      	strh	r1, [r7, #10]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	4b42      	ldr	r3, [pc, #264]	@ (8001db4 <send_DHCP_REQUEST+0x2e0>)
 8001caa:	7819      	ldrb	r1, [r3, #0]
 8001cac:	1813      	adds	r3, r2, r0
 8001cae:	460a      	mov	r2, r1
 8001cb0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	1c59      	adds	r1, r3, #1
 8001cbc:	8179      	strh	r1, [r7, #10]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	4b3c      	ldr	r3, [pc, #240]	@ (8001db4 <send_DHCP_REQUEST+0x2e0>)
 8001cc2:	7859      	ldrb	r1, [r3, #1]
 8001cc4:	1813      	adds	r3, r2, r0
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001ccc:	4b37      	ldr	r3, [pc, #220]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	897b      	ldrh	r3, [r7, #10]
 8001cd2:	1c59      	adds	r1, r3, #1
 8001cd4:	8179      	strh	r1, [r7, #10]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4b36      	ldr	r3, [pc, #216]	@ (8001db4 <send_DHCP_REQUEST+0x2e0>)
 8001cda:	7899      	ldrb	r1, [r3, #2]
 8001cdc:	1813      	adds	r3, r2, r0
 8001cde:	460a      	mov	r2, r1
 8001ce0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001ce4:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	897b      	ldrh	r3, [r7, #10]
 8001cea:	1c59      	adds	r1, r3, #1
 8001cec:	8179      	strh	r1, [r7, #10]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	4b30      	ldr	r3, [pc, #192]	@ (8001db4 <send_DHCP_REQUEST+0x2e0>)
 8001cf2:	78d9      	ldrb	r1, [r3, #3]
 8001cf4:	1813      	adds	r3, r2, r0
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	897b      	ldrh	r3, [r7, #10]
 8001d02:	1c59      	adds	r1, r3, #1
 8001d04:	8179      	strh	r1, [r7, #10]
 8001d06:	4413      	add	r3, r2
 8001d08:	2236      	movs	r2, #54	@ 0x36
 8001d0a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001d0e:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	897b      	ldrh	r3, [r7, #10]
 8001d14:	1c59      	adds	r1, r3, #1
 8001d16:	8179      	strh	r1, [r7, #10]
 8001d18:	4413      	add	r3, r2
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	897b      	ldrh	r3, [r7, #10]
 8001d26:	1c59      	adds	r1, r3, #1
 8001d28:	8179      	strh	r1, [r7, #10]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <send_DHCP_REQUEST+0x2e4>)
 8001d2e:	7819      	ldrb	r1, [r3, #0]
 8001d30:	1813      	adds	r3, r2, r0
 8001d32:	460a      	mov	r2, r1
 8001d34:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001d38:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	897b      	ldrh	r3, [r7, #10]
 8001d3e:	1c59      	adds	r1, r3, #1
 8001d40:	8179      	strh	r1, [r7, #10]
 8001d42:	4618      	mov	r0, r3
 8001d44:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <send_DHCP_REQUEST+0x2e4>)
 8001d46:	7859      	ldrb	r1, [r3, #1]
 8001d48:	1813      	adds	r3, r2, r0
 8001d4a:	460a      	mov	r2, r1
 8001d4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001d50:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	897b      	ldrh	r3, [r7, #10]
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	8179      	strh	r1, [r7, #10]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <send_DHCP_REQUEST+0x2e4>)
 8001d5e:	7899      	ldrb	r1, [r3, #2]
 8001d60:	1813      	adds	r3, r2, r0
 8001d62:	460a      	mov	r2, r1
 8001d64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001d68:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	897b      	ldrh	r3, [r7, #10]
 8001d6e:	1c59      	adds	r1, r3, #1
 8001d70:	8179      	strh	r1, [r7, #10]
 8001d72:	4618      	mov	r0, r3
 8001d74:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <send_DHCP_REQUEST+0x2e4>)
 8001d76:	78d9      	ldrb	r1, [r3, #3]
 8001d78:	1813      	adds	r3, r2, r0
 8001d7a:	460a      	mov	r2, r1
 8001d7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	897b      	ldrh	r3, [r7, #10]
 8001d86:	1c59      	adds	r1, r3, #1
 8001d88:	8179      	strh	r1, [r7, #10]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	220c      	movs	r2, #12
 8001d8e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <send_DHCP_REQUEST+0x2d8>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	1c59      	adds	r1, r3, #1
 8001d9a:	8179      	strh	r1, [r7, #10]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e019      	b.n	8001dde <send_DHCP_REQUEST+0x30a>
 8001daa:	bf00      	nop
 8001dac:	20000608 	.word	0x20000608
 8001db0:	2000060c 	.word	0x2000060c
 8001db4:	200005ec 	.word	0x200005ec
 8001db8:	200005e0 	.word	0x200005e0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001dbc:	4b86      	ldr	r3, [pc, #536]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	897b      	ldrh	r3, [r7, #10]
 8001dc2:	1c59      	adds	r1, r3, #1
 8001dc4:	8179      	strh	r1, [r7, #10]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4984      	ldr	r1, [pc, #528]	@ (8001fdc <send_DHCP_REQUEST+0x508>)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	440b      	add	r3, r1
 8001dce:	7819      	ldrb	r1, [r3, #0]
 8001dd0:	1813      	adds	r3, r2, r0
 8001dd2:	460a      	mov	r2, r1
 8001dd4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4a7f      	ldr	r2, [pc, #508]	@ (8001fdc <send_DHCP_REQUEST+0x508>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1e8      	bne.n	8001dbc <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001dea:	4b7d      	ldr	r3, [pc, #500]	@ (8001fe0 <send_DHCP_REQUEST+0x50c>)
 8001dec:	78db      	ldrb	r3, [r3, #3]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b79      	ldr	r3, [pc, #484]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001df4:	681c      	ldr	r4, [r3, #0]
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	1c59      	adds	r1, r3, #1
 8001dfa:	8179      	strh	r1, [r7, #10]
 8001dfc:	461d      	mov	r5, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f000 ff24 	bl	8002c4c <NibbleToHex>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	1963      	adds	r3, r4, r5
 8001e0a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001e0e:	4b74      	ldr	r3, [pc, #464]	@ (8001fe0 <send_DHCP_REQUEST+0x50c>)
 8001e10:	78da      	ldrb	r2, [r3, #3]
 8001e12:	4b71      	ldr	r3, [pc, #452]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001e14:	681c      	ldr	r4, [r3, #0]
 8001e16:	897b      	ldrh	r3, [r7, #10]
 8001e18:	1c59      	adds	r1, r3, #1
 8001e1a:	8179      	strh	r1, [r7, #10]
 8001e1c:	461d      	mov	r5, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f000 ff14 	bl	8002c4c <NibbleToHex>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	1963      	adds	r3, r4, r5
 8001e2a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe0 <send_DHCP_REQUEST+0x50c>)
 8001e30:	791b      	ldrb	r3, [r3, #4]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b68      	ldr	r3, [pc, #416]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001e38:	681c      	ldr	r4, [r3, #0]
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	1c59      	adds	r1, r3, #1
 8001e3e:	8179      	strh	r1, [r7, #10]
 8001e40:	461d      	mov	r5, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f000 ff02 	bl	8002c4c <NibbleToHex>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	1963      	adds	r3, r4, r5
 8001e4e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001e52:	4b63      	ldr	r3, [pc, #396]	@ (8001fe0 <send_DHCP_REQUEST+0x50c>)
 8001e54:	791a      	ldrb	r2, [r3, #4]
 8001e56:	4b60      	ldr	r3, [pc, #384]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001e58:	681c      	ldr	r4, [r3, #0]
 8001e5a:	897b      	ldrh	r3, [r7, #10]
 8001e5c:	1c59      	adds	r1, r3, #1
 8001e5e:	8179      	strh	r1, [r7, #10]
 8001e60:	461d      	mov	r5, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f000 fef2 	bl	8002c4c <NibbleToHex>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	1963      	adds	r3, r4, r5
 8001e6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001e72:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe0 <send_DHCP_REQUEST+0x50c>)
 8001e74:	795b      	ldrb	r3, [r3, #5]
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b57      	ldr	r3, [pc, #348]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001e7c:	681c      	ldr	r4, [r3, #0]
 8001e7e:	897b      	ldrh	r3, [r7, #10]
 8001e80:	1c59      	adds	r1, r3, #1
 8001e82:	8179      	strh	r1, [r7, #10]
 8001e84:	461d      	mov	r5, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f000 fee0 	bl	8002c4c <NibbleToHex>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	1963      	adds	r3, r4, r5
 8001e92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001e96:	4b52      	ldr	r3, [pc, #328]	@ (8001fe0 <send_DHCP_REQUEST+0x50c>)
 8001e98:	795a      	ldrb	r2, [r3, #5]
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001e9c:	681c      	ldr	r4, [r3, #0]
 8001e9e:	897b      	ldrh	r3, [r7, #10]
 8001ea0:	1c59      	adds	r1, r3, #1
 8001ea2:	8179      	strh	r1, [r7, #10]
 8001ea4:	461d      	mov	r5, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 fed0 	bl	8002c4c <NibbleToHex>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	1963      	adds	r3, r4, r5
 8001eb2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	b2d9      	uxtb	r1, r3
 8001eba:	4b47      	ldr	r3, [pc, #284]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	8978      	ldrh	r0, [r7, #10]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3307      	adds	r3, #7
 8001ec4:	1ac3      	subs	r3, r0, r3
 8001ec6:	3106      	adds	r1, #6
 8001ec8:	b2c9      	uxtb	r1, r1
 8001eca:	4413      	add	r3, r2
 8001ecc:	460a      	mov	r2, r1
 8001ece:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001ed2:	4b41      	ldr	r3, [pc, #260]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	897b      	ldrh	r3, [r7, #10]
 8001ed8:	1c59      	adds	r1, r3, #1
 8001eda:	8179      	strh	r1, [r7, #10]
 8001edc:	4413      	add	r3, r2
 8001ede:	2237      	movs	r2, #55	@ 0x37
 8001ee0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	897b      	ldrh	r3, [r7, #10]
 8001eea:	1c59      	adds	r1, r3, #1
 8001eec:	8179      	strh	r1, [r7, #10]
 8001eee:	4413      	add	r3, r2
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001ef6:	4b38      	ldr	r3, [pc, #224]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	897b      	ldrh	r3, [r7, #10]
 8001efc:	1c59      	adds	r1, r3, #1
 8001efe:	8179      	strh	r1, [r7, #10]
 8001f00:	4413      	add	r3, r2
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001f08:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	897b      	ldrh	r3, [r7, #10]
 8001f0e:	1c59      	adds	r1, r3, #1
 8001f10:	8179      	strh	r1, [r7, #10]
 8001f12:	4413      	add	r3, r2
 8001f14:	2203      	movs	r2, #3
 8001f16:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	897b      	ldrh	r3, [r7, #10]
 8001f20:	1c59      	adds	r1, r3, #1
 8001f22:	8179      	strh	r1, [r7, #10]
 8001f24:	4413      	add	r3, r2
 8001f26:	2206      	movs	r2, #6
 8001f28:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	897b      	ldrh	r3, [r7, #10]
 8001f32:	1c59      	adds	r1, r3, #1
 8001f34:	8179      	strh	r1, [r7, #10]
 8001f36:	4413      	add	r3, r2
 8001f38:	220f      	movs	r2, #15
 8001f3a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001f3e:	4b26      	ldr	r3, [pc, #152]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	897b      	ldrh	r3, [r7, #10]
 8001f44:	1c59      	adds	r1, r3, #1
 8001f46:	8179      	strh	r1, [r7, #10]
 8001f48:	4413      	add	r3, r2
 8001f4a:	223a      	movs	r2, #58	@ 0x3a
 8001f4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001f50:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	897b      	ldrh	r3, [r7, #10]
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	8179      	strh	r1, [r7, #10]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	223b      	movs	r2, #59	@ 0x3b
 8001f5e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001f62:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	897b      	ldrh	r3, [r7, #10]
 8001f68:	1c59      	adds	r1, r3, #1
 8001f6a:	8179      	strh	r1, [r7, #10]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	221f      	movs	r2, #31
 8001f70:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001f74:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	897b      	ldrh	r3, [r7, #10]
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	8179      	strh	r1, [r7, #10]
 8001f7e:	4413      	add	r3, r2
 8001f80:	2221      	movs	r2, #33	@ 0x21
 8001f82:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001f86:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	897b      	ldrh	r3, [r7, #10]
 8001f8c:	1c59      	adds	r1, r3, #1
 8001f8e:	8179      	strh	r1, [r7, #10]
 8001f90:	4413      	add	r3, r2
 8001f92:	22ff      	movs	r2, #255	@ 0xff
 8001f94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001f98:	897b      	ldrh	r3, [r7, #10]
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e009      	b.n	8001fb2 <send_DHCP_REQUEST+0x4de>
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	33ec      	adds	r3, #236	@ 0xec
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001fb8:	dbf1      	blt.n	8001f9e <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <send_DHCP_REQUEST+0x510>)
 8001fbc:	7818      	ldrb	r0, [r3, #0]
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <send_DHCP_REQUEST+0x504>)
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2243      	movs	r2, #67	@ 0x43
 8001fc6:	9200      	str	r2, [sp, #0]
 8001fc8:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001fcc:	f000 ffda 	bl	8002f84 <sendto>

}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd8:	20000608 	.word	0x20000608
 8001fdc:	20000020 	.word	0x20000020
 8001fe0:	2000060c 	.word	0x2000060c
 8001fe4:	200005dd 	.word	0x200005dd

08001fe8 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001ff2:	f7ff fab3 	bl	800155c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001ffa:	4b9f      	ldr	r3, [pc, #636]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	330a      	adds	r3, #10
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8002004:	4b9c      	ldr	r3, [pc, #624]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	330a      	adds	r3, #10
 800200a:	3301      	adds	r3, #1
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002010:	4b99      	ldr	r3, [pc, #612]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	897b      	ldrh	r3, [r7, #10]
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	8179      	strh	r1, [r7, #10]
 800201a:	4413      	add	r3, r2
 800201c:	2235      	movs	r2, #53	@ 0x35
 800201e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002022:	4b95      	ldr	r3, [pc, #596]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	1c59      	adds	r1, r3, #1
 800202a:	8179      	strh	r1, [r7, #10]
 800202c:	4413      	add	r3, r2
 800202e:	2201      	movs	r2, #1
 8002030:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8002034:	4b90      	ldr	r3, [pc, #576]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	897b      	ldrh	r3, [r7, #10]
 800203a:	1c59      	adds	r1, r3, #1
 800203c:	8179      	strh	r1, [r7, #10]
 800203e:	4413      	add	r3, r2
 8002040:	2204      	movs	r2, #4
 8002042:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002046:	4b8c      	ldr	r3, [pc, #560]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	1c59      	adds	r1, r3, #1
 800204e:	8179      	strh	r1, [r7, #10]
 8002050:	4413      	add	r3, r2
 8002052:	223d      	movs	r2, #61	@ 0x3d
 8002054:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002058:	4b87      	ldr	r3, [pc, #540]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	897b      	ldrh	r3, [r7, #10]
 800205e:	1c59      	adds	r1, r3, #1
 8002060:	8179      	strh	r1, [r7, #10]
 8002062:	4413      	add	r3, r2
 8002064:	2207      	movs	r2, #7
 8002066:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800206a:	4b83      	ldr	r3, [pc, #524]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	897b      	ldrh	r3, [r7, #10]
 8002070:	1c59      	adds	r1, r3, #1
 8002072:	8179      	strh	r1, [r7, #10]
 8002074:	4413      	add	r3, r2
 8002076:	2201      	movs	r2, #1
 8002078:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800207c:	4b7e      	ldr	r3, [pc, #504]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	897b      	ldrh	r3, [r7, #10]
 8002082:	1c59      	adds	r1, r3, #1
 8002084:	8179      	strh	r1, [r7, #10]
 8002086:	4618      	mov	r0, r3
 8002088:	4b7c      	ldr	r3, [pc, #496]	@ (800227c <send_DHCP_DECLINE+0x294>)
 800208a:	7819      	ldrb	r1, [r3, #0]
 800208c:	1813      	adds	r3, r2, r0
 800208e:	460a      	mov	r2, r1
 8002090:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002094:	4b78      	ldr	r3, [pc, #480]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	897b      	ldrh	r3, [r7, #10]
 800209a:	1c59      	adds	r1, r3, #1
 800209c:	8179      	strh	r1, [r7, #10]
 800209e:	4618      	mov	r0, r3
 80020a0:	4b76      	ldr	r3, [pc, #472]	@ (800227c <send_DHCP_DECLINE+0x294>)
 80020a2:	7859      	ldrb	r1, [r3, #1]
 80020a4:	1813      	adds	r3, r2, r0
 80020a6:	460a      	mov	r2, r1
 80020a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80020ac:	4b72      	ldr	r3, [pc, #456]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	1c59      	adds	r1, r3, #1
 80020b4:	8179      	strh	r1, [r7, #10]
 80020b6:	4618      	mov	r0, r3
 80020b8:	4b70      	ldr	r3, [pc, #448]	@ (800227c <send_DHCP_DECLINE+0x294>)
 80020ba:	7899      	ldrb	r1, [r3, #2]
 80020bc:	1813      	adds	r3, r2, r0
 80020be:	460a      	mov	r2, r1
 80020c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80020c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	897b      	ldrh	r3, [r7, #10]
 80020ca:	1c59      	adds	r1, r3, #1
 80020cc:	8179      	strh	r1, [r7, #10]
 80020ce:	4618      	mov	r0, r3
 80020d0:	4b6a      	ldr	r3, [pc, #424]	@ (800227c <send_DHCP_DECLINE+0x294>)
 80020d2:	78d9      	ldrb	r1, [r3, #3]
 80020d4:	1813      	adds	r3, r2, r0
 80020d6:	460a      	mov	r2, r1
 80020d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80020dc:	4b66      	ldr	r3, [pc, #408]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	897b      	ldrh	r3, [r7, #10]
 80020e2:	1c59      	adds	r1, r3, #1
 80020e4:	8179      	strh	r1, [r7, #10]
 80020e6:	4618      	mov	r0, r3
 80020e8:	4b64      	ldr	r3, [pc, #400]	@ (800227c <send_DHCP_DECLINE+0x294>)
 80020ea:	7919      	ldrb	r1, [r3, #4]
 80020ec:	1813      	adds	r3, r2, r0
 80020ee:	460a      	mov	r2, r1
 80020f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80020f4:	4b60      	ldr	r3, [pc, #384]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	1c59      	adds	r1, r3, #1
 80020fc:	8179      	strh	r1, [r7, #10]
 80020fe:	4618      	mov	r0, r3
 8002100:	4b5e      	ldr	r3, [pc, #376]	@ (800227c <send_DHCP_DECLINE+0x294>)
 8002102:	7959      	ldrb	r1, [r3, #5]
 8002104:	1813      	adds	r3, r2, r0
 8002106:	460a      	mov	r2, r1
 8002108:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800210c:	4b5a      	ldr	r3, [pc, #360]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	897b      	ldrh	r3, [r7, #10]
 8002112:	1c59      	adds	r1, r3, #1
 8002114:	8179      	strh	r1, [r7, #10]
 8002116:	4413      	add	r3, r2
 8002118:	2232      	movs	r2, #50	@ 0x32
 800211a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800211e:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	897b      	ldrh	r3, [r7, #10]
 8002124:	1c59      	adds	r1, r3, #1
 8002126:	8179      	strh	r1, [r7, #10]
 8002128:	4413      	add	r3, r2
 800212a:	2204      	movs	r2, #4
 800212c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8002130:	4b51      	ldr	r3, [pc, #324]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	897b      	ldrh	r3, [r7, #10]
 8002136:	1c59      	adds	r1, r3, #1
 8002138:	8179      	strh	r1, [r7, #10]
 800213a:	4618      	mov	r0, r3
 800213c:	4b50      	ldr	r3, [pc, #320]	@ (8002280 <send_DHCP_DECLINE+0x298>)
 800213e:	7819      	ldrb	r1, [r3, #0]
 8002140:	1813      	adds	r3, r2, r0
 8002142:	460a      	mov	r2, r1
 8002144:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8002148:	4b4b      	ldr	r3, [pc, #300]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	897b      	ldrh	r3, [r7, #10]
 800214e:	1c59      	adds	r1, r3, #1
 8002150:	8179      	strh	r1, [r7, #10]
 8002152:	4618      	mov	r0, r3
 8002154:	4b4a      	ldr	r3, [pc, #296]	@ (8002280 <send_DHCP_DECLINE+0x298>)
 8002156:	7859      	ldrb	r1, [r3, #1]
 8002158:	1813      	adds	r3, r2, r0
 800215a:	460a      	mov	r2, r1
 800215c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8002160:	4b45      	ldr	r3, [pc, #276]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	897b      	ldrh	r3, [r7, #10]
 8002166:	1c59      	adds	r1, r3, #1
 8002168:	8179      	strh	r1, [r7, #10]
 800216a:	4618      	mov	r0, r3
 800216c:	4b44      	ldr	r3, [pc, #272]	@ (8002280 <send_DHCP_DECLINE+0x298>)
 800216e:	7899      	ldrb	r1, [r3, #2]
 8002170:	1813      	adds	r3, r2, r0
 8002172:	460a      	mov	r2, r1
 8002174:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8002178:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	897b      	ldrh	r3, [r7, #10]
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	8179      	strh	r1, [r7, #10]
 8002182:	4618      	mov	r0, r3
 8002184:	4b3e      	ldr	r3, [pc, #248]	@ (8002280 <send_DHCP_DECLINE+0x298>)
 8002186:	78d9      	ldrb	r1, [r3, #3]
 8002188:	1813      	adds	r3, r2, r0
 800218a:	460a      	mov	r2, r1
 800218c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8002190:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	897b      	ldrh	r3, [r7, #10]
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	8179      	strh	r1, [r7, #10]
 800219a:	4413      	add	r3, r2
 800219c:	2236      	movs	r2, #54	@ 0x36
 800219e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80021a2:	4b35      	ldr	r3, [pc, #212]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	897b      	ldrh	r3, [r7, #10]
 80021a8:	1c59      	adds	r1, r3, #1
 80021aa:	8179      	strh	r1, [r7, #10]
 80021ac:	4413      	add	r3, r2
 80021ae:	2204      	movs	r2, #4
 80021b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80021b4:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	897b      	ldrh	r3, [r7, #10]
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	8179      	strh	r1, [r7, #10]
 80021be:	4618      	mov	r0, r3
 80021c0:	4b30      	ldr	r3, [pc, #192]	@ (8002284 <send_DHCP_DECLINE+0x29c>)
 80021c2:	7819      	ldrb	r1, [r3, #0]
 80021c4:	1813      	adds	r3, r2, r0
 80021c6:	460a      	mov	r2, r1
 80021c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80021cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	897b      	ldrh	r3, [r7, #10]
 80021d2:	1c59      	adds	r1, r3, #1
 80021d4:	8179      	strh	r1, [r7, #10]
 80021d6:	4618      	mov	r0, r3
 80021d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002284 <send_DHCP_DECLINE+0x29c>)
 80021da:	7859      	ldrb	r1, [r3, #1]
 80021dc:	1813      	adds	r3, r2, r0
 80021de:	460a      	mov	r2, r1
 80021e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80021e4:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	897b      	ldrh	r3, [r7, #10]
 80021ea:	1c59      	adds	r1, r3, #1
 80021ec:	8179      	strh	r1, [r7, #10]
 80021ee:	4618      	mov	r0, r3
 80021f0:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <send_DHCP_DECLINE+0x29c>)
 80021f2:	7899      	ldrb	r1, [r3, #2]
 80021f4:	1813      	adds	r3, r2, r0
 80021f6:	460a      	mov	r2, r1
 80021f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80021fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	897b      	ldrh	r3, [r7, #10]
 8002202:	1c59      	adds	r1, r3, #1
 8002204:	8179      	strh	r1, [r7, #10]
 8002206:	4618      	mov	r0, r3
 8002208:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <send_DHCP_DECLINE+0x29c>)
 800220a:	78d9      	ldrb	r1, [r3, #3]
 800220c:	1813      	adds	r3, r2, r0
 800220e:	460a      	mov	r2, r1
 8002210:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8002214:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	897b      	ldrh	r3, [r7, #10]
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	8179      	strh	r1, [r7, #10]
 800221e:	4413      	add	r3, r2
 8002220:	22ff      	movs	r2, #255	@ 0xff
 8002222:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002226:	897b      	ldrh	r3, [r7, #10]
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e009      	b.n	8002240 <send_DHCP_DECLINE+0x258>
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	33ec      	adds	r3, #236	@ 0xec
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3301      	adds	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002246:	dbf1      	blt.n	800222c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8002248:	23ff      	movs	r3, #255	@ 0xff
 800224a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800224c:	23ff      	movs	r3, #255	@ 0xff
 800224e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8002250:	23ff      	movs	r3, #255	@ 0xff
 8002252:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8002254:	23ff      	movs	r3, #255	@ 0xff
 8002256:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <send_DHCP_DECLINE+0x2a0>)
 800225a:	7818      	ldrb	r0, [r3, #0]
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <send_DHCP_DECLINE+0x290>)
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2243      	movs	r2, #67	@ 0x43
 8002264:	9200      	str	r2, [sp, #0]
 8002266:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800226a:	f000 fe8b 	bl	8002f84 <sendto>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000608 	.word	0x20000608
 800227c:	2000060c 	.word	0x2000060c
 8002280:	200005ec 	.word	0x200005ec
 8002284:	200005e0 	.word	0x200005e0
 8002288:	200005dd 	.word	0x200005dd

0800228c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b089      	sub	sp, #36	@ 0x24
 8002290:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8002296:	4ba1      	ldr	r3, [pc, #644]	@ (800251c <parseDHCPMSG+0x290>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f001 fb35 	bl	800390a <getSn_RX_RSR>
 80022a0:	4603      	mov	r3, r0
 80022a2:	823b      	strh	r3, [r7, #16]
 80022a4:	8a3b      	ldrh	r3, [r7, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d011      	beq.n	80022ce <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 80022aa:	4b9c      	ldr	r3, [pc, #624]	@ (800251c <parseDHCPMSG+0x290>)
 80022ac:	7818      	ldrb	r0, [r3, #0]
 80022ae:	4b9c      	ldr	r3, [pc, #624]	@ (8002520 <parseDHCPMSG+0x294>)
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	1d3c      	adds	r4, r7, #4
 80022b4:	8a3a      	ldrh	r2, [r7, #16]
 80022b6:	1cbb      	adds	r3, r7, #2
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	4623      	mov	r3, r4
 80022bc:	f000 ff96 	bl	80031ec <recvfrom>
 80022c0:	4603      	mov	r3, r0
 80022c2:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	2b43      	cmp	r3, #67	@ 0x43
 80022c8:	f040 81ed 	bne.w	80026a6 <parseDHCPMSG+0x41a>
 80022cc:	e001      	b.n	80022d2 <parseDHCPMSG+0x46>
   else return 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e1eb      	b.n	80026aa <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80022d2:	4b93      	ldr	r3, [pc, #588]	@ (8002520 <parseDHCPMSG+0x294>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	7f1a      	ldrb	r2, [r3, #28]
 80022d8:	4b92      	ldr	r3, [pc, #584]	@ (8002524 <parseDHCPMSG+0x298>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d124      	bne.n	800232a <parseDHCPMSG+0x9e>
 80022e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002520 <parseDHCPMSG+0x294>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	7f5a      	ldrb	r2, [r3, #29]
 80022e6:	4b8f      	ldr	r3, [pc, #572]	@ (8002524 <parseDHCPMSG+0x298>)
 80022e8:	785b      	ldrb	r3, [r3, #1]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d11d      	bne.n	800232a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80022ee:	4b8c      	ldr	r3, [pc, #560]	@ (8002520 <parseDHCPMSG+0x294>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	7f9a      	ldrb	r2, [r3, #30]
 80022f4:	4b8b      	ldr	r3, [pc, #556]	@ (8002524 <parseDHCPMSG+0x298>)
 80022f6:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d116      	bne.n	800232a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80022fc:	4b88      	ldr	r3, [pc, #544]	@ (8002520 <parseDHCPMSG+0x294>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	7fda      	ldrb	r2, [r3, #31]
 8002302:	4b88      	ldr	r3, [pc, #544]	@ (8002524 <parseDHCPMSG+0x298>)
 8002304:	78db      	ldrb	r3, [r3, #3]
 8002306:	429a      	cmp	r2, r3
 8002308:	d10f      	bne.n	800232a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800230a:	4b85      	ldr	r3, [pc, #532]	@ (8002520 <parseDHCPMSG+0x294>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002312:	4b84      	ldr	r3, [pc, #528]	@ (8002524 <parseDHCPMSG+0x298>)
 8002314:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d107      	bne.n	800232a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800231a:	4b81      	ldr	r3, [pc, #516]	@ (8002520 <parseDHCPMSG+0x294>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8002322:	4b80      	ldr	r3, [pc, #512]	@ (8002524 <parseDHCPMSG+0x298>)
 8002324:	795b      	ldrb	r3, [r3, #5]
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 800232a:	2300      	movs	r3, #0
 800232c:	e1bd      	b.n	80026aa <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 800232e:	4b7e      	ldr	r3, [pc, #504]	@ (8002528 <parseDHCPMSG+0x29c>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10b      	bne.n	800234e <parseDHCPMSG+0xc2>
 8002336:	4b7c      	ldr	r3, [pc, #496]	@ (8002528 <parseDHCPMSG+0x29c>)
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d107      	bne.n	800234e <parseDHCPMSG+0xc2>
 800233e:	4b7a      	ldr	r3, [pc, #488]	@ (8002528 <parseDHCPMSG+0x29c>)
 8002340:	789b      	ldrb	r3, [r3, #2]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <parseDHCPMSG+0xc2>
 8002346:	4b78      	ldr	r3, [pc, #480]	@ (8002528 <parseDHCPMSG+0x29c>)
 8002348:	78db      	ldrb	r3, [r3, #3]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d029      	beq.n	80023a2 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800234e:	793a      	ldrb	r2, [r7, #4]
 8002350:	4b75      	ldr	r3, [pc, #468]	@ (8002528 <parseDHCPMSG+0x29c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d10e      	bne.n	8002376 <parseDHCPMSG+0xea>
 8002358:	797a      	ldrb	r2, [r7, #5]
 800235a:	4b73      	ldr	r3, [pc, #460]	@ (8002528 <parseDHCPMSG+0x29c>)
 800235c:	785b      	ldrb	r3, [r3, #1]
 800235e:	429a      	cmp	r2, r3
 8002360:	d109      	bne.n	8002376 <parseDHCPMSG+0xea>
 8002362:	79ba      	ldrb	r2, [r7, #6]
 8002364:	4b70      	ldr	r3, [pc, #448]	@ (8002528 <parseDHCPMSG+0x29c>)
 8002366:	789b      	ldrb	r3, [r3, #2]
 8002368:	429a      	cmp	r2, r3
 800236a:	d104      	bne.n	8002376 <parseDHCPMSG+0xea>
 800236c:	79fa      	ldrb	r2, [r7, #7]
 800236e:	4b6e      	ldr	r3, [pc, #440]	@ (8002528 <parseDHCPMSG+0x29c>)
 8002370:	78db      	ldrb	r3, [r3, #3]
 8002372:	429a      	cmp	r2, r3
 8002374:	d015      	beq.n	80023a2 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002376:	793a      	ldrb	r2, [r7, #4]
 8002378:	4b6c      	ldr	r3, [pc, #432]	@ (800252c <parseDHCPMSG+0x2a0>)
 800237a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800237c:	429a      	cmp	r2, r3
 800237e:	d10e      	bne.n	800239e <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002380:	797a      	ldrb	r2, [r7, #5]
 8002382:	4b6a      	ldr	r3, [pc, #424]	@ (800252c <parseDHCPMSG+0x2a0>)
 8002384:	785b      	ldrb	r3, [r3, #1]
 8002386:	429a      	cmp	r2, r3
 8002388:	d109      	bne.n	800239e <parseDHCPMSG+0x112>
 800238a:	79ba      	ldrb	r2, [r7, #6]
 800238c:	4b67      	ldr	r3, [pc, #412]	@ (800252c <parseDHCPMSG+0x2a0>)
 800238e:	789b      	ldrb	r3, [r3, #2]
 8002390:	429a      	cmp	r2, r3
 8002392:	d104      	bne.n	800239e <parseDHCPMSG+0x112>
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	4b65      	ldr	r3, [pc, #404]	@ (800252c <parseDHCPMSG+0x2a0>)
 8002398:	78db      	ldrb	r3, [r3, #3]
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	e183      	b.n	80026aa <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 80023a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002520 <parseDHCPMSG+0x294>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	33f0      	adds	r3, #240	@ 0xf0
 80023ac:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 80023ae:	8a3b      	ldrh	r3, [r7, #16]
 80023b0:	3bf0      	subs	r3, #240	@ 0xf0
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4413      	add	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80023b8:	e170      	b.n	800269c <parseDHCPMSG+0x410>

			switch ( *p ) {
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b36      	cmp	r3, #54	@ 0x36
 80023c0:	dc76      	bgt.n	80024b0 <parseDHCPMSG+0x224>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f2c0 815d 	blt.w	8002682 <parseDHCPMSG+0x3f6>
 80023c8:	2b36      	cmp	r3, #54	@ 0x36
 80023ca:	f200 815a 	bhi.w	8002682 <parseDHCPMSG+0x3f6>
 80023ce:	a201      	add	r2, pc, #4	@ (adr r2, 80023d4 <parseDHCPMSG+0x148>)
 80023d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d4:	080024bd 	.word	0x080024bd
 80023d8:	080024dd 	.word	0x080024dd
 80023dc:	08002683 	.word	0x08002683
 80023e0:	08002535 	.word	0x08002535
 80023e4:	08002683 	.word	0x08002683
 80023e8:	08002683 	.word	0x08002683
 80023ec:	08002581 	.word	0x08002581
 80023f0:	08002683 	.word	0x08002683
 80023f4:	08002683 	.word	0x08002683
 80023f8:	08002683 	.word	0x08002683
 80023fc:	08002683 	.word	0x08002683
 8002400:	08002683 	.word	0x08002683
 8002404:	08002683 	.word	0x08002683
 8002408:	08002683 	.word	0x08002683
 800240c:	08002683 	.word	0x08002683
 8002410:	08002683 	.word	0x08002683
 8002414:	08002683 	.word	0x08002683
 8002418:	08002683 	.word	0x08002683
 800241c:	08002683 	.word	0x08002683
 8002420:	08002683 	.word	0x08002683
 8002424:	08002683 	.word	0x08002683
 8002428:	08002683 	.word	0x08002683
 800242c:	08002683 	.word	0x08002683
 8002430:	08002683 	.word	0x08002683
 8002434:	08002683 	.word	0x08002683
 8002438:	08002683 	.word	0x08002683
 800243c:	08002683 	.word	0x08002683
 8002440:	08002683 	.word	0x08002683
 8002444:	08002683 	.word	0x08002683
 8002448:	08002683 	.word	0x08002683
 800244c:	08002683 	.word	0x08002683
 8002450:	08002683 	.word	0x08002683
 8002454:	08002683 	.word	0x08002683
 8002458:	08002683 	.word	0x08002683
 800245c:	08002683 	.word	0x08002683
 8002460:	08002683 	.word	0x08002683
 8002464:	08002683 	.word	0x08002683
 8002468:	08002683 	.word	0x08002683
 800246c:	08002683 	.word	0x08002683
 8002470:	08002683 	.word	0x08002683
 8002474:	08002683 	.word	0x08002683
 8002478:	08002683 	.word	0x08002683
 800247c:	08002683 	.word	0x08002683
 8002480:	08002683 	.word	0x08002683
 8002484:	08002683 	.word	0x08002683
 8002488:	08002683 	.word	0x08002683
 800248c:	08002683 	.word	0x08002683
 8002490:	08002683 	.word	0x08002683
 8002494:	08002683 	.word	0x08002683
 8002498:	08002683 	.word	0x08002683
 800249c:	08002683 	.word	0x08002683
 80024a0:	080025cd 	.word	0x080025cd
 80024a4:	08002683 	.word	0x08002683
 80024a8:	080024c5 	.word	0x080024c5
 80024ac:	08002629 	.word	0x08002629
 80024b0:	2bff      	cmp	r3, #255	@ 0xff
 80024b2:	f040 80e6 	bne.w	8002682 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	617b      	str	r3, [r7, #20]
   				break;
 80024ba:	e0ef      	b.n	800269c <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3301      	adds	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
   				break;
 80024c2:	e0eb      	b.n	800269c <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
   				p++;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3301      	adds	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	617a      	str	r2, [r7, #20]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	74fb      	strb	r3, [r7, #19]
   				break;
 80024da:	e0df      	b.n	800269c <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
   				p++;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	617a      	str	r2, [r7, #20]
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <parseDHCPMSG+0x2a4>)
 80024f2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	617a      	str	r2, [r7, #20]
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <parseDHCPMSG+0x2a4>)
 80024fe:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	617a      	str	r2, [r7, #20]
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <parseDHCPMSG+0x2a4>)
 800250a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	617a      	str	r2, [r7, #20]
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <parseDHCPMSG+0x2a4>)
 8002516:	70da      	strb	r2, [r3, #3]
   				break;
 8002518:	e0c0      	b.n	800269c <parseDHCPMSG+0x410>
 800251a:	bf00      	nop
 800251c:	200005dd 	.word	0x200005dd
 8002520:	20000608 	.word	0x20000608
 8002524:	2000060c 	.word	0x2000060c
 8002528:	200005e0 	.word	0x200005e0
 800252c:	200005e4 	.word	0x200005e4
 8002530:	200005f4 	.word	0x200005f4
   			case routersOnSubnet :
   				p++;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3301      	adds	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	617a      	str	r2, [r7, #20]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	617a      	str	r2, [r7, #20]
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	4b59      	ldr	r3, [pc, #356]	@ (80026b4 <parseDHCPMSG+0x428>)
 800254e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	617a      	str	r2, [r7, #20]
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	4b56      	ldr	r3, [pc, #344]	@ (80026b4 <parseDHCPMSG+0x428>)
 800255a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	617a      	str	r2, [r7, #20]
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	4b53      	ldr	r3, [pc, #332]	@ (80026b4 <parseDHCPMSG+0x428>)
 8002566:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	617a      	str	r2, [r7, #20]
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	4b50      	ldr	r3, [pc, #320]	@ (80026b4 <parseDHCPMSG+0x428>)
 8002572:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002574:	7afb      	ldrb	r3, [r7, #11]
 8002576:	3b04      	subs	r3, #4
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4413      	add	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
   				break;
 800257e:	e08d      	b.n	800269c <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	617a      	str	r2, [r7, #20]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	617a      	str	r2, [r7, #20]
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	4b47      	ldr	r3, [pc, #284]	@ (80026b8 <parseDHCPMSG+0x42c>)
 800259a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	617a      	str	r2, [r7, #20]
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	4b44      	ldr	r3, [pc, #272]	@ (80026b8 <parseDHCPMSG+0x42c>)
 80025a6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	617a      	str	r2, [r7, #20]
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	4b41      	ldr	r3, [pc, #260]	@ (80026b8 <parseDHCPMSG+0x42c>)
 80025b2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	617a      	str	r2, [r7, #20]
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	4b3e      	ldr	r3, [pc, #248]	@ (80026b8 <parseDHCPMSG+0x42c>)
 80025be:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	3b04      	subs	r3, #4
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4413      	add	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
   				break;
 80025ca:	e067      	b.n	800269c <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	617a      	str	r2, [r7, #20]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	617a      	str	r2, [r7, #20]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b35      	ldr	r3, [pc, #212]	@ (80026bc <parseDHCPMSG+0x430>)
 80025e8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80025ea:	4b34      	ldr	r3, [pc, #208]	@ (80026bc <parseDHCPMSG+0x430>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	021a      	lsls	r2, r3, #8
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	1c59      	adds	r1, r3, #1
 80025f4:	6179      	str	r1, [r7, #20]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a30      	ldr	r2, [pc, #192]	@ (80026bc <parseDHCPMSG+0x430>)
 80025fc:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80025fe:	4b2f      	ldr	r3, [pc, #188]	@ (80026bc <parseDHCPMSG+0x430>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	021a      	lsls	r2, r3, #8
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1c59      	adds	r1, r3, #1
 8002608:	6179      	str	r1, [r7, #20]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4413      	add	r3, r2
 800260e:	4a2b      	ldr	r2, [pc, #172]	@ (80026bc <parseDHCPMSG+0x430>)
 8002610:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002612:	4b2a      	ldr	r3, [pc, #168]	@ (80026bc <parseDHCPMSG+0x430>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	021a      	lsls	r2, r3, #8
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	1c59      	adds	r1, r3, #1
 800261c:	6179      	str	r1, [r7, #20]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4413      	add	r3, r2
 8002622:	4a26      	ldr	r2, [pc, #152]	@ (80026bc <parseDHCPMSG+0x430>)
 8002624:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8002626:	e039      	b.n	800269c <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	617a      	str	r2, [r7, #20]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	617a      	str	r2, [r7, #20]
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	4b1f      	ldr	r3, [pc, #124]	@ (80026c0 <parseDHCPMSG+0x434>)
 8002642:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	617a      	str	r2, [r7, #20]
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <parseDHCPMSG+0x434>)
 800264e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	617a      	str	r2, [r7, #20]
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <parseDHCPMSG+0x434>)
 800265a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	617a      	str	r2, [r7, #20]
 8002662:	781a      	ldrb	r2, [r3, #0]
 8002664:	4b16      	ldr	r3, [pc, #88]	@ (80026c0 <parseDHCPMSG+0x434>)
 8002666:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002668:	793a      	ldrb	r2, [r7, #4]
 800266a:	4b16      	ldr	r3, [pc, #88]	@ (80026c4 <parseDHCPMSG+0x438>)
 800266c:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800266e:	797a      	ldrb	r2, [r7, #5]
 8002670:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <parseDHCPMSG+0x438>)
 8002672:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8002674:	79ba      	ldrb	r2, [r7, #6]
 8002676:	4b13      	ldr	r3, [pc, #76]	@ (80026c4 <parseDHCPMSG+0x438>)
 8002678:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 800267a:	79fa      	ldrb	r2, [r7, #7]
 800267c:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <parseDHCPMSG+0x438>)
 800267e:	70da      	strb	r2, [r3, #3]
   				break;
 8002680:	e00c      	b.n	800269c <parseDHCPMSG+0x410>
   			default :
   				p++;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	617a      	str	r2, [r7, #20]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8002692:	7afb      	ldrb	r3, [r7, #11]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4413      	add	r3, r2
 8002698:	617b      	str	r3, [r7, #20]
   				break;
 800269a:	bf00      	nop
		while ( p < e ) {
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f4ff ae8a 	bcc.w	80023ba <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 80026a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd90      	pop	{r4, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200005f0 	.word	0x200005f0
 80026b8:	200005f8 	.word	0x200005f8
 80026bc:	20000018 	.word	0x20000018
 80026c0:	200005e0 	.word	0x200005e0
 80026c4:	200005e4 	.word	0x200005e4

080026c8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80026ce:	4b7f      	ldr	r3, [pc, #508]	@ (80028cc <DHCP_run+0x204>)
 80026d0:	f993 3000 	ldrsb.w	r3, [r3]
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d101      	bne.n	80026dc <DHCP_run+0x14>
 80026d8:	2305      	movs	r3, #5
 80026da:	e0f3      	b.n	80028c4 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80026dc:	4b7c      	ldr	r3, [pc, #496]	@ (80028d0 <DHCP_run+0x208>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	3301      	adds	r3, #1
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 ff6a 	bl	80035c4 <WIZCHIP_READ>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b22      	cmp	r3, #34	@ 0x22
 80026f4:	d006      	beq.n	8002704 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80026f6:	4b76      	ldr	r3, [pc, #472]	@ (80028d0 <DHCP_run+0x208>)
 80026f8:	7818      	ldrb	r0, [r3, #0]
 80026fa:	2300      	movs	r3, #0
 80026fc:	2244      	movs	r2, #68	@ 0x44
 80026fe:	2102      	movs	r1, #2
 8002700:	f000 fabe 	bl	8002c80 <socket>

	ret = DHCP_RUNNING;
 8002704:	2301      	movs	r3, #1
 8002706:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8002708:	f7ff fdc0 	bl	800228c <parseDHCPMSG>
 800270c:	4603      	mov	r3, r0
 800270e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8002710:	4b6e      	ldr	r3, [pc, #440]	@ (80028cc <DHCP_run+0x204>)
 8002712:	f993 3000 	ldrsb.w	r3, [r3]
 8002716:	2b04      	cmp	r3, #4
 8002718:	f200 80d0 	bhi.w	80028bc <DHCP_run+0x1f4>
 800271c:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <DHCP_run+0x5c>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002739 	.word	0x08002739
 8002728:	0800275d 	.word	0x0800275d
 800272c:	080027a1 	.word	0x080027a1
 8002730:	080027f1 	.word	0x080027f1
 8002734:	0800284b 	.word	0x0800284b
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8002738:	4b66      	ldr	r3, [pc, #408]	@ (80028d4 <DHCP_run+0x20c>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800273e:	4b65      	ldr	r3, [pc, #404]	@ (80028d4 <DHCP_run+0x20c>)
 8002740:	2200      	movs	r2, #0
 8002742:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8002744:	4b63      	ldr	r3, [pc, #396]	@ (80028d4 <DHCP_run+0x20c>)
 8002746:	2200      	movs	r2, #0
 8002748:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800274a:	4b62      	ldr	r3, [pc, #392]	@ (80028d4 <DHCP_run+0x20c>)
 800274c:	2200      	movs	r2, #0
 800274e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8002750:	f7fe fffa 	bl	8001748 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8002754:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <DHCP_run+0x204>)
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
   		break;
 800275a:	e0b2      	b.n	80028c2 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 800275c:	79bb      	ldrb	r3, [r7, #6]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d119      	bne.n	8002796 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8002762:	4b5d      	ldr	r3, [pc, #372]	@ (80028d8 <DHCP_run+0x210>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	7c1a      	ldrb	r2, [r3, #16]
 8002768:	4b5a      	ldr	r3, [pc, #360]	@ (80028d4 <DHCP_run+0x20c>)
 800276a:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 800276c:	4b5a      	ldr	r3, [pc, #360]	@ (80028d8 <DHCP_run+0x210>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	7c5a      	ldrb	r2, [r3, #17]
 8002772:	4b58      	ldr	r3, [pc, #352]	@ (80028d4 <DHCP_run+0x20c>)
 8002774:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8002776:	4b58      	ldr	r3, [pc, #352]	@ (80028d8 <DHCP_run+0x210>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	7c9a      	ldrb	r2, [r3, #18]
 800277c:	4b55      	ldr	r3, [pc, #340]	@ (80028d4 <DHCP_run+0x20c>)
 800277e:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8002780:	4b55      	ldr	r3, [pc, #340]	@ (80028d8 <DHCP_run+0x210>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	7cda      	ldrb	r2, [r3, #19]
 8002786:	4b53      	ldr	r3, [pc, #332]	@ (80028d4 <DHCP_run+0x20c>)
 8002788:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 800278a:	f7ff f9a3 	bl	8001ad4 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800278e:	4b4f      	ldr	r3, [pc, #316]	@ (80028cc <DHCP_run+0x204>)
 8002790:	2202      	movs	r2, #2
 8002792:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002794:	e095      	b.n	80028c2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002796:	f000 f8b1 	bl	80028fc <check_DHCP_timeout>
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
         break;
 800279e:	e090      	b.n	80028c2 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80027a0:	79bb      	ldrb	r3, [r7, #6]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d116      	bne.n	80027d4 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80027a6:	f000 f909 	bl	80029bc <check_DHCP_leasedIP>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80027b0:	4b4a      	ldr	r3, [pc, #296]	@ (80028dc <DHCP_run+0x214>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4798      	blx	r3
					reset_DHCP_timeout();
 80027b6:	f000 f9d3 	bl	8002b60 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80027ba:	4b44      	ldr	r3, [pc, #272]	@ (80028cc <DHCP_run+0x204>)
 80027bc:	2203      	movs	r2, #3
 80027be:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80027c0:	e07f      	b.n	80028c2 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80027c2:	f000 f9cd 	bl	8002b60 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80027c6:	4b46      	ldr	r3, [pc, #280]	@ (80028e0 <DHCP_run+0x218>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80027cc:	4b3f      	ldr	r3, [pc, #252]	@ (80028cc <DHCP_run+0x204>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
		break;
 80027d2:	e076      	b.n	80028c2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80027d4:	79bb      	ldrb	r3, [r7, #6]
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d105      	bne.n	80027e6 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 80027da:	f000 f9c1 	bl	8002b60 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80027de:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <DHCP_run+0x204>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
		break;
 80027e4:	e06d      	b.n	80028c2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80027e6:	f000 f889 	bl	80028fc <check_DHCP_timeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
		break;
 80027ee:	e068      	b.n	80028c2 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 80027f0:	2304      	movs	r3, #4
 80027f2:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80027f4:	4b3b      	ldr	r3, [pc, #236]	@ (80028e4 <DHCP_run+0x21c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d060      	beq.n	80028c0 <DHCP_run+0x1f8>
 80027fe:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <DHCP_run+0x21c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	085a      	lsrs	r2, r3, #1
 8002804:	4b38      	ldr	r3, [pc, #224]	@ (80028e8 <DHCP_run+0x220>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d259      	bcs.n	80028c0 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8002810:	4b30      	ldr	r3, [pc, #192]	@ (80028d4 <DHCP_run+0x20c>)
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	4b35      	ldr	r3, [pc, #212]	@ (80028ec <DHCP_run+0x224>)
 8002816:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8002818:	4b2e      	ldr	r3, [pc, #184]	@ (80028d4 <DHCP_run+0x20c>)
 800281a:	785a      	ldrb	r2, [r3, #1]
 800281c:	4b33      	ldr	r3, [pc, #204]	@ (80028ec <DHCP_run+0x224>)
 800281e:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8002820:	4b2c      	ldr	r3, [pc, #176]	@ (80028d4 <DHCP_run+0x20c>)
 8002822:	789a      	ldrb	r2, [r3, #2]
 8002824:	4b31      	ldr	r3, [pc, #196]	@ (80028ec <DHCP_run+0x224>)
 8002826:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8002828:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <DHCP_run+0x20c>)
 800282a:	78da      	ldrb	r2, [r3, #3]
 800282c:	4b2f      	ldr	r3, [pc, #188]	@ (80028ec <DHCP_run+0x224>)
 800282e:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8002830:	4b2f      	ldr	r3, [pc, #188]	@ (80028f0 <DHCP_run+0x228>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	4a2e      	ldr	r2, [pc, #184]	@ (80028f0 <DHCP_run+0x228>)
 8002838:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800283a:	f7ff f94b 	bl	8001ad4 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800283e:	f000 f98f 	bl	8002b60 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <DHCP_run+0x204>)
 8002844:	2204      	movs	r2, #4
 8002846:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002848:	e03a      	b.n	80028c0 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800284a:	2304      	movs	r3, #4
 800284c:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800284e:	79bb      	ldrb	r3, [r7, #6]
 8002850:	2b05      	cmp	r3, #5
 8002852:	d125      	bne.n	80028a0 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8002854:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <DHCP_run+0x22c>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800285a:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <DHCP_run+0x224>)
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <DHCP_run+0x20c>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d111      	bne.n	800288a <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002866:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <DHCP_run+0x224>)
 8002868:	785a      	ldrb	r2, [r3, #1]
 800286a:	4b1a      	ldr	r3, [pc, #104]	@ (80028d4 <DHCP_run+0x20c>)
 800286c:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800286e:	429a      	cmp	r2, r3
 8002870:	d10b      	bne.n	800288a <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002872:	4b1e      	ldr	r3, [pc, #120]	@ (80028ec <DHCP_run+0x224>)
 8002874:	789a      	ldrb	r2, [r3, #2]
 8002876:	4b17      	ldr	r3, [pc, #92]	@ (80028d4 <DHCP_run+0x20c>)
 8002878:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d105      	bne.n	800288a <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800287e:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <DHCP_run+0x224>)
 8002880:	78da      	ldrb	r2, [r3, #3]
 8002882:	4b14      	ldr	r3, [pc, #80]	@ (80028d4 <DHCP_run+0x20c>)
 8002884:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d004      	beq.n	8002894 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 800288a:	2303      	movs	r3, #3
 800288c:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800288e:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <DHCP_run+0x230>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002894:	f000 f964 	bl	8002b60 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <DHCP_run+0x204>)
 800289a:	2203      	movs	r2, #3
 800289c:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800289e:	e010      	b.n	80028c2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80028a0:	79bb      	ldrb	r3, [r7, #6]
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d105      	bne.n	80028b2 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80028a6:	f000 f95b 	bl	8002b60 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80028aa:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <DHCP_run+0x204>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
	   	break;
 80028b0:	e007      	b.n	80028c2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80028b2:	f000 f823 	bl	80028fc <check_DHCP_timeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
	   	break;
 80028ba:	e002      	b.n	80028c2 <DHCP_run+0x1fa>
		default :
   		break;
 80028bc:	bf00      	nop
 80028be:	e000      	b.n	80028c2 <DHCP_run+0x1fa>
		break;
 80028c0:	bf00      	nop
	}

	return ret;
 80028c2:	79fb      	ldrb	r3, [r7, #7]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200005fc 	.word	0x200005fc
 80028d0:	200005dd 	.word	0x200005dd
 80028d4:	200005ec 	.word	0x200005ec
 80028d8:	20000608 	.word	0x20000608
 80028dc:	20000028 	.word	0x20000028
 80028e0:	20000030 	.word	0x20000030
 80028e4:	20000018 	.word	0x20000018
 80028e8:	20000600 	.word	0x20000600
 80028ec:	200005e8 	.word	0x200005e8
 80028f0:	20000604 	.word	0x20000604
 80028f4:	200005fd 	.word	0x200005fd
 80028f8:	2000002c 	.word	0x2000002c

080028fc <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8002902:	2301      	movs	r3, #1
 8002904:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8002906:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <check_DHCP_timeout+0xb0>)
 8002908:	f993 3000 	ldrsb.w	r3, [r3]
 800290c:	2b01      	cmp	r3, #1
 800290e:	dc2d      	bgt.n	800296c <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8002910:	4b27      	ldr	r3, [pc, #156]	@ (80029b0 <check_DHCP_timeout+0xb4>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b27      	ldr	r3, [pc, #156]	@ (80029b4 <check_DHCP_timeout+0xb8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d242      	bcs.n	80029a2 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 800291c:	4b26      	ldr	r3, [pc, #152]	@ (80029b8 <check_DHCP_timeout+0xbc>)
 800291e:	f993 3000 	ldrsb.w	r3, [r3]
 8002922:	2b04      	cmp	r3, #4
 8002924:	d00c      	beq.n	8002940 <check_DHCP_timeout+0x44>
 8002926:	2b04      	cmp	r3, #4
 8002928:	dc0d      	bgt.n	8002946 <check_DHCP_timeout+0x4a>
 800292a:	2b01      	cmp	r3, #1
 800292c:	d002      	beq.n	8002934 <check_DHCP_timeout+0x38>
 800292e:	2b02      	cmp	r3, #2
 8002930:	d003      	beq.n	800293a <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8002932:	e008      	b.n	8002946 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8002934:	f7fe ff08 	bl	8001748 <send_DHCP_DISCOVER>
				break;
 8002938:	e006      	b.n	8002948 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800293a:	f7ff f8cb 	bl	8001ad4 <send_DHCP_REQUEST>
				break;
 800293e:	e003      	b.n	8002948 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002940:	f7ff f8c8 	bl	8001ad4 <send_DHCP_REQUEST>
				break;
 8002944:	e000      	b.n	8002948 <check_DHCP_timeout+0x4c>
				break;
 8002946:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8002948:	4b1a      	ldr	r3, [pc, #104]	@ (80029b4 <check_DHCP_timeout+0xb8>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800294e:	4b19      	ldr	r3, [pc, #100]	@ (80029b4 <check_DHCP_timeout+0xb8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	330a      	adds	r3, #10
 8002954:	4a16      	ldr	r2, [pc, #88]	@ (80029b0 <check_DHCP_timeout+0xb4>)
 8002956:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002958:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <check_DHCP_timeout+0xb0>)
 800295a:	f993 3000 	ldrsb.w	r3, [r3]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	3301      	adds	r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	b25a      	sxtb	r2, r3
 8002966:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <check_DHCP_timeout+0xb0>)
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e01a      	b.n	80029a2 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 800296c:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <check_DHCP_timeout+0xbc>)
 800296e:	f993 3000 	ldrsb.w	r3, [r3]
 8002972:	2b04      	cmp	r3, #4
 8002974:	d00c      	beq.n	8002990 <check_DHCP_timeout+0x94>
 8002976:	2b04      	cmp	r3, #4
 8002978:	dc10      	bgt.n	800299c <check_DHCP_timeout+0xa0>
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <check_DHCP_timeout+0x88>
 800297e:	2b02      	cmp	r3, #2
 8002980:	d006      	beq.n	8002990 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8002982:	e00b      	b.n	800299c <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002984:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <check_DHCP_timeout+0xbc>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 800298a:	2300      	movs	r3, #0
 800298c:	71fb      	strb	r3, [r7, #7]
				break;
 800298e:	e006      	b.n	800299e <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8002990:	f7fe feda 	bl	8001748 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002994:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <check_DHCP_timeout+0xbc>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
				break;
 800299a:	e000      	b.n	800299e <check_DHCP_timeout+0xa2>
				break;
 800299c:	bf00      	nop
		}
		reset_DHCP_timeout();
 800299e:	f000 f8df 	bl	8002b60 <reset_DHCP_timeout>
	}
	return ret;
 80029a2:	79fb      	ldrb	r3, [r7, #7]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200005fd 	.word	0x200005fd
 80029b0:	2000001c 	.word	0x2000001c
 80029b4:	20000600 	.word	0x20000600
 80029b8:	200005fc 	.word	0x200005fc

080029bc <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80029c2:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80029c6:	f000 fdfd 	bl	80035c4 <WIZCHIP_READ>
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80029ce:	2103      	movs	r1, #3
 80029d0:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80029d4:	f000 fe42 	bl	800365c <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80029d8:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <check_DHCP_leasedIP+0x6c>)
 80029da:	7818      	ldrb	r0, [r3, #0]
 80029dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <check_DHCP_leasedIP+0x70>)
 80029e4:	2211      	movs	r2, #17
 80029e6:	4912      	ldr	r1, [pc, #72]	@ (8002a30 <check_DHCP_leasedIP+0x74>)
 80029e8:	f000 facc 	bl	8002f84 <sendto>
 80029ec:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	4619      	mov	r1, r3
 80029f2:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80029f6:	f000 fe31 	bl	800365c <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f113 0f0d 	cmn.w	r3, #13
 8002a00:	d101      	bne.n	8002a06 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00c      	b.n	8002a20 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8002a06:	f7ff faef 	bl	8001fe8 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <check_DHCP_leasedIP+0x78>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8002a10:	bf00      	nop
 8002a12:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <check_DHCP_leasedIP+0x78>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d9f9      	bls.n	8002a12 <check_DHCP_leasedIP+0x56>

		return 0;
 8002a1e:	2300      	movs	r3, #0
	}
}	
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200005dd 	.word	0x200005dd
 8002a2c:	200005ec 	.word	0x200005ec
 8002a30:	080059a8 	.word	0x080059a8
 8002a34:	20000600 	.word	0x20000600

08002a38 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002a48:	2206      	movs	r2, #6
 8002a4a:	493f      	ldr	r1, [pc, #252]	@ (8002b48 <DHCP_init+0x110>)
 8002a4c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002a50:	f000 fe52 	bl	80036f8 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002a54:	4b3c      	ldr	r3, [pc, #240]	@ (8002b48 <DHCP_init+0x110>)
 8002a56:	781a      	ldrb	r2, [r3, #0]
 8002a58:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <DHCP_init+0x110>)
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	4b39      	ldr	r3, [pc, #228]	@ (8002b48 <DHCP_init+0x110>)
 8002a62:	789b      	ldrb	r3, [r3, #2]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b37      	ldr	r3, [pc, #220]	@ (8002b48 <DHCP_init+0x110>)
 8002a6a:	78db      	ldrb	r3, [r3, #3]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b35      	ldr	r3, [pc, #212]	@ (8002b48 <DHCP_init+0x110>)
 8002a72:	791b      	ldrb	r3, [r3, #4]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	4b33      	ldr	r3, [pc, #204]	@ (8002b48 <DHCP_init+0x110>)
 8002a7a:	795b      	ldrb	r3, [r3, #5]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d117      	bne.n	8002ab4 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002a84:	4b30      	ldr	r3, [pc, #192]	@ (8002b48 <DHCP_init+0x110>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b48 <DHCP_init+0x110>)
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002a90:	4b2d      	ldr	r3, [pc, #180]	@ (8002b48 <DHCP_init+0x110>)
 8002a92:	22dc      	movs	r2, #220	@ 0xdc
 8002a94:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002a96:	4b2c      	ldr	r3, [pc, #176]	@ (8002b48 <DHCP_init+0x110>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b48 <DHCP_init+0x110>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8002aa2:	4b29      	ldr	r3, [pc, #164]	@ (8002b48 <DHCP_init+0x110>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002aa8:	2206      	movs	r2, #6
 8002aaa:	4927      	ldr	r1, [pc, #156]	@ (8002b48 <DHCP_init+0x110>)
 8002aac:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002ab0:	f000 fe82 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002ab4:	4a25      	ldr	r2, [pc, #148]	@ (8002b4c <DHCP_init+0x114>)
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002aba:	4a25      	ldr	r2, [pc, #148]	@ (8002b50 <DHCP_init+0x118>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002ac0:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <DHCP_init+0x11c>)
 8002ac2:	4a25      	ldr	r2, [pc, #148]	@ (8002b58 <DHCP_init+0x120>)
 8002ac4:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8002ac6:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <DHCP_init+0x110>)
 8002ac8:	78db      	ldrb	r3, [r3, #3]
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b21      	ldr	r3, [pc, #132]	@ (8002b54 <DHCP_init+0x11c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a20      	ldr	r2, [pc, #128]	@ (8002b54 <DHCP_init+0x11c>)
 8002ad4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <DHCP_init+0x110>)
 8002ad8:	791b      	ldrb	r3, [r3, #4]
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <DHCP_init+0x11c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b54 <DHCP_init+0x11c>)
 8002ae4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8002ae6:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <DHCP_init+0x110>)
 8002ae8:	795b      	ldrb	r3, [r3, #5]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <DHCP_init+0x11c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <DHCP_init+0x11c>)
 8002af4:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8002af6:	4b14      	ldr	r3, [pc, #80]	@ (8002b48 <DHCP_init+0x110>)
 8002af8:	78da      	ldrb	r2, [r3, #3]
 8002afa:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <DHCP_init+0x110>)
 8002afc:	791b      	ldrb	r3, [r3, #4]
 8002afe:	4053      	eors	r3, r2
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <DHCP_init+0x110>)
 8002b04:	795b      	ldrb	r3, [r3, #5]
 8002b06:	4053      	eors	r3, r2
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <DHCP_init+0x11c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a10      	ldr	r2, [pc, #64]	@ (8002b54 <DHCP_init+0x11c>)
 8002b14:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002b22:	f000 fe49 	bl	80037b8 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8002b26:	f107 030c 	add.w	r3, r7, #12
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002b32:	f000 fe41 	bl	80037b8 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002b36:	f000 f813 	bl	8002b60 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002b3a:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <DHCP_init+0x124>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	2000060c 	.word	0x2000060c
 8002b4c:	200005dd 	.word	0x200005dd
 8002b50:	20000608 	.word	0x20000608
 8002b54:	20000604 	.word	0x20000604
 8002b58:	12345678 	.word	0x12345678
 8002b5c:	200005fc 	.word	0x200005fc

08002b60 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <reset_DHCP_timeout+0x20>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <reset_DHCP_timeout+0x24>)
 8002b6c:	220a      	movs	r2, #10
 8002b6e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002b70:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <reset_DHCP_timeout+0x28>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	20000600 	.word	0x20000600
 8002b84:	2000001c 	.word	0x2000001c
 8002b88:	200005fd 	.word	0x200005fd

08002b8c <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8002b94:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <getIPfromDHCP+0x3c>)
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	4a09      	ldr	r2, [pc, #36]	@ (8002bc8 <getIPfromDHCP+0x3c>)
 8002ba2:	7852      	ldrb	r2, [r2, #1]
 8002ba4:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3302      	adds	r3, #2
 8002baa:	4a07      	ldr	r2, [pc, #28]	@ (8002bc8 <getIPfromDHCP+0x3c>)
 8002bac:	7892      	ldrb	r2, [r2, #2]
 8002bae:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3303      	adds	r3, #3
 8002bb4:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <getIPfromDHCP+0x3c>)
 8002bb6:	78d2      	ldrb	r2, [r2, #3]
 8002bb8:	701a      	strb	r2, [r3, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	200005ec 	.word	0x200005ec

08002bcc <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <getGWfromDHCP+0x3c>)
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3301      	adds	r3, #1
 8002be0:	4a09      	ldr	r2, [pc, #36]	@ (8002c08 <getGWfromDHCP+0x3c>)
 8002be2:	7852      	ldrb	r2, [r2, #1]
 8002be4:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3302      	adds	r3, #2
 8002bea:	4a07      	ldr	r2, [pc, #28]	@ (8002c08 <getGWfromDHCP+0x3c>)
 8002bec:	7892      	ldrb	r2, [r2, #2]
 8002bee:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3303      	adds	r3, #3
 8002bf4:	4a04      	ldr	r2, [pc, #16]	@ (8002c08 <getGWfromDHCP+0x3c>)
 8002bf6:	78d2      	ldrb	r2, [r2, #3]
 8002bf8:	701a      	strb	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	200005f0 	.word	0x200005f0

08002c0c <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8002c14:	4b0c      	ldr	r3, [pc, #48]	@ (8002c48 <getSNfromDHCP+0x3c>)
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4a09      	ldr	r2, [pc, #36]	@ (8002c48 <getSNfromDHCP+0x3c>)
 8002c22:	7852      	ldrb	r2, [r2, #1]
 8002c24:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3302      	adds	r3, #2
 8002c2a:	4a07      	ldr	r2, [pc, #28]	@ (8002c48 <getSNfromDHCP+0x3c>)
 8002c2c:	7892      	ldrb	r2, [r2, #2]
 8002c2e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3303      	adds	r3, #3
 8002c34:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <getSNfromDHCP+0x3c>)
 8002c36:	78d2      	ldrb	r2, [r2, #3]
 8002c38:	701a      	strb	r2, [r3, #0]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	200005f4 	.word	0x200005f4

08002c4c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	2b09      	cmp	r3, #9
 8002c62:	d803      	bhi.n	8002c6c <NibbleToHex+0x20>
    return nibble + '0';
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	3330      	adds	r3, #48	@ 0x30
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e002      	b.n	8002c72 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	3337      	adds	r3, #55	@ 0x37
 8002c70:	b2db      	uxtb	r3, r3
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4604      	mov	r4, r0
 8002c88:	4608      	mov	r0, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4623      	mov	r3, r4
 8002c90:	71fb      	strb	r3, [r7, #7]
 8002c92:	4603      	mov	r3, r0
 8002c94:	71bb      	strb	r3, [r7, #6]
 8002c96:	460b      	mov	r3, r1
 8002c98:	80bb      	strh	r3, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d902      	bls.n	8002caa <socket+0x2a>
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca8:	e0f0      	b.n	8002e8c <socket+0x20c>
	switch(protocol)
 8002caa:	79bb      	ldrb	r3, [r7, #6]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d005      	beq.n	8002cbc <socket+0x3c>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	dd11      	ble.n	8002cd8 <socket+0x58>
 8002cb4:	3b02      	subs	r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d80e      	bhi.n	8002cd8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002cba:	e011      	b.n	8002ce0 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002cc8:	f000 fd16 	bl	80036f8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <socket+0x5e>
 8002cd2:	f06f 0302 	mvn.w	r3, #2
 8002cd6:	e0d9      	b.n	8002e8c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002cd8:	f06f 0304 	mvn.w	r3, #4
 8002cdc:	e0d6      	b.n	8002e8c <socket+0x20c>
	    break;
 8002cde:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <socket+0x70>
 8002cea:	f06f 0305 	mvn.w	r3, #5
 8002cee:	e0cd      	b.n	8002e8c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d028      	beq.n	8002d48 <socket+0xc8>
	{
   	switch(protocol)
 8002cf6:	79bb      	ldrb	r3, [r7, #6]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d002      	beq.n	8002d02 <socket+0x82>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d008      	beq.n	8002d12 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002d00:	e022      	b.n	8002d48 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11a      	bne.n	8002d42 <socket+0xc2>
 8002d0c:	f06f 0305 	mvn.w	r3, #5
 8002d10:	e0bc      	b.n	8002e8c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db02      	blt.n	8002d2a <socket+0xaa>
 8002d24:	f06f 0305 	mvn.w	r3, #5
 8002d28:	e0b0      	b.n	8002e8c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	db04      	blt.n	8002d46 <socket+0xc6>
 8002d3c:	f06f 0305 	mvn.w	r3, #5
 8002d40:	e0a4      	b.n	8002e8c <socket+0x20c>
   	      break;
 8002d42:	bf00      	nop
 8002d44:	e000      	b.n	8002d48 <socket+0xc8>
   	      break;
 8002d46:	bf00      	nop
   	}
   }
	close(sn);
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f8ac 	bl	8002ea8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	3301      	adds	r3, #1
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d5e:	f023 030f 	bic.w	r3, r3, #15
 8002d62:	b25a      	sxtb	r2, r3
 8002d64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f000 fc74 	bl	800365c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002d74:	88bb      	ldrh	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d110      	bne.n	8002d9c <socket+0x11c>
	{
	   port = sock_any_port++;
 8002d7a:	4b46      	ldr	r3, [pc, #280]	@ (8002e94 <socket+0x214>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	b291      	uxth	r1, r2
 8002d82:	4a44      	ldr	r2, [pc, #272]	@ (8002e94 <socket+0x214>)
 8002d84:	8011      	strh	r1, [r2, #0]
 8002d86:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002d88:	4b42      	ldr	r3, [pc, #264]	@ (8002e94 <socket+0x214>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d103      	bne.n	8002d9c <socket+0x11c>
 8002d94:	4b3f      	ldr	r3, [pc, #252]	@ (8002e94 <socket+0x214>)
 8002d96:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002d9a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	3301      	adds	r3, #1
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002da8:	461a      	mov	r2, r3
 8002daa:	88bb      	ldrh	r3, [r7, #4]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f000 fc51 	bl	800365c <WIZCHIP_WRITE>
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	88bb      	ldrh	r3, [r7, #4]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f000 fc44 	bl	800365c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	3301      	adds	r3, #1
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002de0:	2101      	movs	r1, #1
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fc3a 	bl	800365c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002de8:	bf00      	nop
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	3301      	adds	r3, #1
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fbe4 	bl	80035c4 <WIZCHIP_READ>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f3      	bne.n	8002dea <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2201      	movs	r2, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	b21b      	sxth	r3, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	b21a      	sxth	r2, r3
 8002e10:	4b21      	ldr	r3, [pc, #132]	@ (8002e98 <socket+0x218>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b21b      	sxth	r3, r3
 8002e16:	4013      	ands	r3, r2
 8002e18:	b21b      	sxth	r3, r3
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e98 <socket+0x218>)
 8002e1e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	f003 0201 	and.w	r2, r3, #1
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e98 <socket+0x218>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	4b17      	ldr	r3, [pc, #92]	@ (8002e98 <socket+0x218>)
 8002e3c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	2201      	movs	r2, #1
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	b21a      	sxth	r2, r3
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <socket+0x21c>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b21b      	sxth	r3, r3
 8002e52:	4013      	ands	r3, r2
 8002e54:	b21b      	sxth	r3, r3
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <socket+0x21c>)
 8002e5a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ea0 <socket+0x220>)
 8002e60:	2100      	movs	r1, #0
 8002e62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea4 <socket+0x224>)
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002e6e:	bf00      	nop
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	3301      	adds	r3, #1
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fba1 	bl	80035c4 <WIZCHIP_READ>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f3      	beq.n	8002e70 <socket+0x1f0>
   return (int8_t)sn;
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	20000034 	.word	0x20000034
 8002e98:	20000612 	.word	0x20000612
 8002e9c:	20000614 	.word	0x20000614
 8002ea0:	20000618 	.word	0x20000618
 8002ea4:	20000628 	.word	0x20000628

08002ea8 <close>:

int8_t close(uint8_t sn)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d902      	bls.n	8002ebe <close+0x16>
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebc:	e055      	b.n	8002f6a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002eca:	2110      	movs	r1, #16
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fbc5 	bl	800365c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002ed2:	bf00      	nop
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	3301      	adds	r3, #1
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fb6f 	bl	80035c4 <WIZCHIP_READ>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f3      	bne.n	8002ed4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ef8:	211f      	movs	r1, #31
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fbae 	bl	800365c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	2201      	movs	r2, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	b21a      	sxth	r2, r3
 8002f0e:	4b19      	ldr	r3, [pc, #100]	@ (8002f74 <close+0xcc>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	4013      	ands	r3, r2
 8002f16:	b21b      	sxth	r3, r3
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <close+0xcc>)
 8002f1c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	2201      	movs	r2, #1
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	b21b      	sxth	r3, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	b21a      	sxth	r2, r3
 8002f2c:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <close+0xd0>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b21b      	sxth	r3, r3
 8002f32:	4013      	ands	r3, r2
 8002f34:	b21b      	sxth	r3, r3
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b0f      	ldr	r3, [pc, #60]	@ (8002f78 <close+0xd0>)
 8002f3a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f7c <close+0xd4>)
 8002f40:	2100      	movs	r1, #0
 8002f42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	4a0d      	ldr	r2, [pc, #52]	@ (8002f80 <close+0xd8>)
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002f4e:	bf00      	nop
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	3301      	adds	r3, #1
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fb31 	bl	80035c4 <WIZCHIP_READ>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f3      	bne.n	8002f50 <close+0xa8>
	return SOCK_OK;
 8002f68:	2301      	movs	r3, #1
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000612 	.word	0x20000612
 8002f78:	20000614 	.word	0x20000614
 8002f7c:	20000618 	.word	0x20000618
 8002f80:	20000628 	.word	0x20000628

08002f84 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	4603      	mov	r3, r0
 8002f90:	73fb      	strb	r3, [r7, #15]
 8002f92:	4613      	mov	r3, r2
 8002f94:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d902      	bls.n	8002faa <sendto+0x26>
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa8:	e11a      	b.n	80031e0 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3301      	adds	r3, #1
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fb06 	bl	80035c4 <WIZCHIP_READ>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	3b02      	subs	r3, #2
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d902      	bls.n	8002fca <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002fc4:	f06f 0304 	mvn.w	r3, #4
 8002fc8:	e10a      	b.n	80031e0 <sendto+0x25c>
         break;
 8002fca:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002fcc:	89bb      	ldrh	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <sendto+0x54>
 8002fd2:	f06f 030d 	mvn.w	r3, #13
 8002fd6:	e103      	b.n	80031e0 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	3201      	adds	r2, #1
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	4413      	add	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	3202      	adds	r2, #2
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	3203      	adds	r2, #3
 8003002:	7812      	ldrb	r2, [r2, #0]
 8003004:	4413      	add	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10e      	bne.n	800302c <sendto+0xa8>
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	3301      	adds	r3, #1
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fad4 	bl	80035c4 <WIZCHIP_READ>
 800301c:	4603      	mov	r3, r0
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d002      	beq.n	800302c <sendto+0xa8>
 8003026:	f06f 030b 	mvn.w	r3, #11
 800302a:	e0d9      	b.n	80031e0 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800302c:	8c3b      	ldrh	r3, [r7, #32]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10e      	bne.n	8003050 <sendto+0xcc>
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	3301      	adds	r3, #1
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fac2 	bl	80035c4 <WIZCHIP_READ>
 8003040:	4603      	mov	r3, r0
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d002      	beq.n	8003050 <sendto+0xcc>
 800304a:	f06f 030a 	mvn.w	r3, #10
 800304e:	e0c7      	b.n	80031e0 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	3301      	adds	r3, #1
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fab1 	bl	80035c4 <WIZCHIP_READ>
 8003062:	4603      	mov	r3, r0
 8003064:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b42      	cmp	r3, #66	@ 0x42
 800306a:	d008      	beq.n	800307e <sendto+0xfa>
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	2b22      	cmp	r3, #34	@ 0x22
 8003070:	d005      	beq.n	800307e <sendto+0xfa>
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b32      	cmp	r3, #50	@ 0x32
 8003076:	d002      	beq.n	800307e <sendto+0xfa>
 8003078:	f06f 0306 	mvn.w	r3, #6
 800307c:	e0b0      	b.n	80031e0 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	3301      	adds	r3, #1
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800308a:	2204      	movs	r2, #4
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fb92 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3301      	adds	r3, #1
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030a0:	461a      	mov	r2, r3
 80030a2:	8c3b      	ldrh	r3, [r7, #32]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4619      	mov	r1, r3
 80030ac:	4610      	mov	r0, r2
 80030ae:	f000 fad5 	bl	800365c <WIZCHIP_WRITE>
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	3301      	adds	r3, #1
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80030be:	461a      	mov	r2, r3
 80030c0:	8c3b      	ldrh	r3, [r7, #32]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	4619      	mov	r1, r3
 80030c6:	4610      	mov	r0, r2
 80030c8:	f000 fac8 	bl	800365c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	3301      	adds	r3, #1
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fa73 	bl	80035c4 <WIZCHIP_READ>
 80030de:	4603      	mov	r3, r0
 80030e0:	029b      	lsls	r3, r3, #10
 80030e2:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80030e4:	89ba      	ldrh	r2, [r7, #12]
 80030e6:	8abb      	ldrh	r3, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d901      	bls.n	80030f0 <sendto+0x16c>
 80030ec:	8abb      	ldrh	r3, [r7, #20]
 80030ee:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fbc0 	bl	8003878 <getSn_TX_FSR>
 80030f8:	4603      	mov	r3, r0
 80030fa:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3301      	adds	r3, #1
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fa5b 	bl	80035c4 <WIZCHIP_READ>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <sendto+0x196>
 8003114:	f06f 0303 	mvn.w	r3, #3
 8003118:	e062      	b.n	80031e0 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800311a:	4b33      	ldr	r3, [pc, #204]	@ (80031e8 <sendto+0x264>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	fa42 f303 	asr.w	r3, r2, r3
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <sendto+0x1b6>
 800312e:	89ba      	ldrh	r2, [r7, #12]
 8003130:	8abb      	ldrh	r3, [r7, #20]
 8003132:	429a      	cmp	r2, r3
 8003134:	d901      	bls.n	800313a <sendto+0x1b6>
 8003136:	2300      	movs	r3, #0
 8003138:	e052      	b.n	80031e0 <sendto+0x25c>
      if(len <= freesize) break;
 800313a:	89ba      	ldrh	r2, [r7, #12]
 800313c:	8abb      	ldrh	r3, [r7, #20]
 800313e:	429a      	cmp	r2, r3
 8003140:	d900      	bls.n	8003144 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8003142:	e7d5      	b.n	80030f0 <sendto+0x16c>
      if(len <= freesize) break;
 8003144:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8003146:	89ba      	ldrh	r2, [r7, #12]
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fc25 	bl	800399c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	3301      	adds	r3, #1
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800315e:	2120      	movs	r1, #32
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fa7b 	bl	800365c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003166:	bf00      	nop
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	3301      	adds	r3, #1
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fa25 	bl	80035c4 <WIZCHIP_READ>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f3      	bne.n	8003168 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	3301      	adds	r3, #1
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fa19 	bl	80035c4 <WIZCHIP_READ>
 8003192:	4603      	mov	r3, r0
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800319a:	7dfb      	ldrb	r3, [r7, #23]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00c      	beq.n	80031be <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	3301      	adds	r3, #1
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80031b0:	2110      	movs	r1, #16
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fa52 	bl	800365c <WIZCHIP_WRITE>
         break;
 80031b8:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80031ba:	89bb      	ldrh	r3, [r7, #12]
 80031bc:	e010      	b.n	80031e0 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0db      	beq.n	8003180 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	3301      	adds	r3, #1
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80031d4:	2108      	movs	r1, #8
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fa40 	bl	800365c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80031dc:	f06f 030c 	mvn.w	r3, #12
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000612 	.word	0x20000612

080031ec <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	4603      	mov	r3, r0
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	4613      	mov	r3, r2
 80031fc:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80031fe:	2300      	movs	r3, #0
 8003200:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d902      	bls.n	800320e <recvfrom+0x22>
 8003208:	f04f 33ff 	mov.w	r3, #4294967295
 800320c:	e1d2      	b.n	80035b4 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3301      	adds	r3, #1
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f9d4 	bl	80035c4 <WIZCHIP_READ>
 800321c:	4603      	mov	r3, r0
 800321e:	777b      	strb	r3, [r7, #29]
 8003220:	7f7b      	ldrb	r3, [r7, #29]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3b02      	subs	r3, #2
 8003228:	2b02      	cmp	r3, #2
 800322a:	d902      	bls.n	8003232 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800322c:	f06f 0304 	mvn.w	r3, #4
 8003230:	e1c0      	b.n	80035b4 <recvfrom+0x3c8>
         break;
 8003232:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003234:	89bb      	ldrh	r3, [r7, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <recvfrom+0x54>
 800323a:	f06f 030d 	mvn.w	r3, #13
 800323e:	e1b9      	b.n	80035b4 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	4a87      	ldr	r2, [pc, #540]	@ (8003460 <recvfrom+0x274>)
 8003244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d128      	bne.n	800329e <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fb5b 	bl	800390a <getSn_RX_RSR>
 8003254:	4603      	mov	r3, r0
 8003256:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	3301      	adds	r3, #1
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f9ad 	bl	80035c4 <WIZCHIP_READ>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <recvfrom+0x8a>
 8003270:	f06f 0303 	mvn.w	r3, #3
 8003274:	e19e      	b.n	80035b4 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8003276:	4b7b      	ldr	r3, [pc, #492]	@ (8003464 <recvfrom+0x278>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	fa42 f303 	asr.w	r3, r2, r3
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <recvfrom+0xa8>
 800328a:	8bfb      	ldrh	r3, [r7, #30]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <recvfrom+0xa8>
 8003290:	2300      	movs	r3, #0
 8003292:	e18f      	b.n	80035b4 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8003294:	8bfb      	ldrh	r3, [r7, #30]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d100      	bne.n	800329c <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800329a:	e7d7      	b.n	800324c <recvfrom+0x60>
         if(pack_len != 0) break;
 800329c:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800329e:	7f7b      	ldrb	r3, [r7, #29]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d078      	beq.n	800339a <recvfrom+0x1ae>
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	f300 8140 	bgt.w	800352e <recvfrom+0x342>
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d003      	beq.n	80032ba <recvfrom+0xce>
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	f000 80da 	beq.w	800346c <recvfrom+0x280>
 80032b8:	e139      	b.n	800352e <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	4a68      	ldr	r2, [pc, #416]	@ (8003460 <recvfrom+0x274>)
 80032be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d151      	bne.n	800336a <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80032c6:	f107 0114 	add.w	r1, r7, #20
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2208      	movs	r2, #8
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fbbe 	bl	8003a50 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	3301      	adds	r3, #1
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80032e0:	2140      	movs	r1, #64	@ 0x40
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f9ba 	bl	800365c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80032e8:	bf00      	nop
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	3301      	adds	r3, #1
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f964 	bl	80035c4 <WIZCHIP_READ>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f3      	bne.n	80032ea <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8003302:	7d3a      	ldrb	r2, [r7, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3301      	adds	r3, #1
 800330c:	7d7a      	ldrb	r2, [r7, #21]
 800330e:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3302      	adds	r3, #2
 8003314:	7dba      	ldrb	r2, [r7, #22]
 8003316:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3303      	adds	r3, #3
 800331c:	7dfa      	ldrb	r2, [r7, #23]
 800331e:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8003320:	7e3b      	ldrb	r3, [r7, #24]
 8003322:	461a      	mov	r2, r3
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	b29b      	uxth	r3, r3
 8003330:	7e7a      	ldrb	r2, [r7, #25]
 8003332:	4413      	add	r3, r2
 8003334:	b29a      	uxth	r2, r3
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800333a:	7eba      	ldrb	r2, [r7, #26]
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	4611      	mov	r1, r2
 8003340:	4a47      	ldr	r2, [pc, #284]	@ (8003460 <recvfrom+0x274>)
 8003342:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	4a45      	ldr	r2, [pc, #276]	@ (8003460 <recvfrom+0x274>)
 800334a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	b29a      	uxth	r2, r3
 8003352:	7efb      	ldrb	r3, [r7, #27]
 8003354:	4619      	mov	r1, r3
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	440a      	add	r2, r1
 800335a:	b291      	uxth	r1, r2
 800335c:	4a40      	ldr	r2, [pc, #256]	@ (8003460 <recvfrom+0x274>)
 800335e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	4a40      	ldr	r2, [pc, #256]	@ (8003468 <recvfrom+0x27c>)
 8003366:	2180      	movs	r1, #128	@ 0x80
 8003368:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	4a3c      	ldr	r2, [pc, #240]	@ (8003460 <recvfrom+0x274>)
 800336e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003372:	89ba      	ldrh	r2, [r7, #12]
 8003374:	429a      	cmp	r2, r3
 8003376:	d202      	bcs.n	800337e <recvfrom+0x192>
 8003378:	89bb      	ldrh	r3, [r7, #12]
 800337a:	83fb      	strh	r3, [r7, #30]
 800337c:	e004      	b.n	8003388 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	4a37      	ldr	r2, [pc, #220]	@ (8003460 <recvfrom+0x274>)
 8003382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003386:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8003388:	8bfb      	ldrh	r3, [r7, #30]
 800338a:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800338c:	8bfa      	ldrh	r2, [r7, #30]
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fb5c 	bl	8003a50 <wiz_recv_data>
			break;
 8003398:	e0d5      	b.n	8003546 <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	4a30      	ldr	r2, [pc, #192]	@ (8003460 <recvfrom+0x274>)
 800339e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d145      	bne.n	8003432 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 80033a6:	f107 0114 	add.w	r1, r7, #20
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	2202      	movs	r2, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fb4e 	bl	8003a50 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	3301      	adds	r3, #1
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80033c0:	2140      	movs	r1, #64	@ 0x40
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f94a 	bl	800365c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80033c8:	bf00      	nop
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3301      	adds	r3, #1
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f8f4 	bl	80035c4 <WIZCHIP_READ>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f3      	bne.n	80033ca <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80033e2:	7d3a      	ldrb	r2, [r7, #20]
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	4611      	mov	r1, r2
 80033e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003460 <recvfrom+0x274>)
 80033ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003460 <recvfrom+0x274>)
 80033f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	7d7a      	ldrb	r2, [r7, #21]
 80033fc:	4413      	add	r3, r2
 80033fe:	b29a      	uxth	r2, r3
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	3a02      	subs	r2, #2
 8003404:	b291      	uxth	r1, r2
 8003406:	4a16      	ldr	r2, [pc, #88]	@ (8003460 <recvfrom+0x274>)
 8003408:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	4a14      	ldr	r2, [pc, #80]	@ (8003460 <recvfrom+0x274>)
 8003410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003414:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8003418:	4293      	cmp	r3, r2
 800341a:	d906      	bls.n	800342a <recvfrom+0x23e>
   			{
   			   close(sn);
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fd42 	bl	8002ea8 <close>
   			   return SOCKFATAL_PACKLEN;
 8003424:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8003428:	e0c4      	b.n	80035b4 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	4a0e      	ldr	r2, [pc, #56]	@ (8003468 <recvfrom+0x27c>)
 800342e:	2180      	movs	r1, #128	@ 0x80
 8003430:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	4a0a      	ldr	r2, [pc, #40]	@ (8003460 <recvfrom+0x274>)
 8003436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800343a:	89ba      	ldrh	r2, [r7, #12]
 800343c:	429a      	cmp	r2, r3
 800343e:	d202      	bcs.n	8003446 <recvfrom+0x25a>
 8003440:	89bb      	ldrh	r3, [r7, #12]
 8003442:	83fb      	strh	r3, [r7, #30]
 8003444:	e004      	b.n	8003450 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	4a05      	ldr	r2, [pc, #20]	@ (8003460 <recvfrom+0x274>)
 800344a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800344e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003450:	8bfa      	ldrh	r2, [r7, #30]
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fafa 	bl	8003a50 <wiz_recv_data>
		   break;
 800345c:	e073      	b.n	8003546 <recvfrom+0x35a>
 800345e:	bf00      	nop
 8003460:	20000618 	.word	0x20000618
 8003464:	20000612 	.word	0x20000612
 8003468:	20000628 	.word	0x20000628
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	4a53      	ldr	r2, [pc, #332]	@ (80035bc <recvfrom+0x3d0>)
 8003470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d144      	bne.n	8003502 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8003478:	f107 0114 	add.w	r1, r7, #20
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2206      	movs	r2, #6
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fae5 	bl	8003a50 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	3301      	adds	r3, #1
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003492:	2140      	movs	r1, #64	@ 0x40
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f8e1 	bl	800365c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800349a:	bf00      	nop
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	3301      	adds	r3, #1
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f88b 	bl	80035c4 <WIZCHIP_READ>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f3      	bne.n	800349c <recvfrom+0x2b0>
   			addr[0] = head[0];
 80034b4:	7d3a      	ldrb	r2, [r7, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3301      	adds	r3, #1
 80034be:	7d7a      	ldrb	r2, [r7, #21]
 80034c0:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3302      	adds	r3, #2
 80034c6:	7dba      	ldrb	r2, [r7, #22]
 80034c8:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3303      	adds	r3, #3
 80034ce:	7dfa      	ldrb	r2, [r7, #23]
 80034d0:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80034d2:	7e3a      	ldrb	r2, [r7, #24]
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4a38      	ldr	r2, [pc, #224]	@ (80035bc <recvfrom+0x3d0>)
 80034da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	4a36      	ldr	r2, [pc, #216]	@ (80035bc <recvfrom+0x3d0>)
 80034e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	7e7b      	ldrb	r3, [r7, #25]
 80034ec:	4619      	mov	r1, r3
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	440a      	add	r2, r1
 80034f2:	b291      	uxth	r1, r2
 80034f4:	4a31      	ldr	r2, [pc, #196]	@ (80035bc <recvfrom+0x3d0>)
 80034f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	4a30      	ldr	r2, [pc, #192]	@ (80035c0 <recvfrom+0x3d4>)
 80034fe:	2180      	movs	r1, #128	@ 0x80
 8003500:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	4a2d      	ldr	r2, [pc, #180]	@ (80035bc <recvfrom+0x3d0>)
 8003506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800350a:	89ba      	ldrh	r2, [r7, #12]
 800350c:	429a      	cmp	r2, r3
 800350e:	d202      	bcs.n	8003516 <recvfrom+0x32a>
 8003510:	89bb      	ldrh	r3, [r7, #12]
 8003512:	83fb      	strh	r3, [r7, #30]
 8003514:	e004      	b.n	8003520 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	4a28      	ldr	r2, [pc, #160]	@ (80035bc <recvfrom+0x3d0>)
 800351a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800351e:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003520:	8bfa      	ldrh	r2, [r7, #30]
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa92 	bl	8003a50 <wiz_recv_data>
			break;
 800352c:	e00b      	b.n	8003546 <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800352e:	8bfa      	ldrh	r2, [r7, #30]
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fae5 	bl	8003b04 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	491f      	ldr	r1, [pc, #124]	@ (80035bc <recvfrom+0x3d0>)
 800353e:	8bfa      	ldrh	r2, [r7, #30]
 8003540:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8003544:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3301      	adds	r3, #1
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003552:	2140      	movs	r1, #64	@ 0x40
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f881 	bl	800365c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800355a:	bf00      	nop
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	3301      	adds	r3, #1
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f82b 	bl	80035c4 <WIZCHIP_READ>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f3      	bne.n	800355c <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	4a11      	ldr	r2, [pc, #68]	@ (80035bc <recvfrom+0x3d0>)
 8003578:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	8bfa      	ldrh	r2, [r7, #30]
 8003580:	1a8a      	subs	r2, r1, r2
 8003582:	b291      	uxth	r1, r2
 8003584:	4a0d      	ldr	r2, [pc, #52]	@ (80035bc <recvfrom+0x3d0>)
 8003586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	4a0b      	ldr	r2, [pc, #44]	@ (80035bc <recvfrom+0x3d0>)
 800358e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	4a09      	ldr	r2, [pc, #36]	@ (80035c0 <recvfrom+0x3d4>)
 800359a:	5cd2      	ldrb	r2, [r2, r3]
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	b2d1      	uxtb	r1, r2
 80035a4:	4a06      	ldr	r2, [pc, #24]	@ (80035c0 <recvfrom+0x3d4>)
 80035a6:	54d1      	strb	r1, [r2, r3]
 80035a8:	e003      	b.n	80035b2 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	4a04      	ldr	r2, [pc, #16]	@ (80035c0 <recvfrom+0x3d4>)
 80035ae:	2100      	movs	r1, #0
 80035b0:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80035b2:	8bfb      	ldrh	r3, [r7, #30]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3720      	adds	r7, #32
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000618 	.word	0x20000618
 80035c0:	20000628 	.word	0x20000628

080035c4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80035cc:	4b22      	ldr	r3, [pc, #136]	@ (8003658 <WIZCHIP_READ+0x94>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80035d2:	4b21      	ldr	r3, [pc, #132]	@ (8003658 <WIZCHIP_READ+0x94>)
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80035d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003658 <WIZCHIP_READ+0x94>)
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <WIZCHIP_READ+0x24>
 80035e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003658 <WIZCHIP_READ+0x94>)
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d114      	bne.n	8003612 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <WIZCHIP_READ+0x94>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	0c12      	lsrs	r2, r2, #16
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	4610      	mov	r0, r2
 80035f4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80035f6:	4b18      	ldr	r3, [pc, #96]	@ (8003658 <WIZCHIP_READ+0x94>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	0a12      	lsrs	r2, r2, #8
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	4610      	mov	r0, r2
 8003602:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003604:	4b14      	ldr	r3, [pc, #80]	@ (8003658 <WIZCHIP_READ+0x94>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	4610      	mov	r0, r2
 800360e:	4798      	blx	r3
 8003610:	e011      	b.n	8003636 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	b2db      	uxtb	r3, r3
 8003618:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	b2db      	uxtb	r3, r3
 8003620:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003628:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <WIZCHIP_READ+0x94>)
 800362a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362c:	f107 020c 	add.w	r2, r7, #12
 8003630:	2103      	movs	r1, #3
 8003632:	4610      	mov	r0, r2
 8003634:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003636:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <WIZCHIP_READ+0x94>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	4798      	blx	r3
 800363c:	4603      	mov	r3, r0
 800363e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <WIZCHIP_READ+0x94>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003646:	4b04      	ldr	r3, [pc, #16]	@ (8003658 <WIZCHIP_READ+0x94>)
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4798      	blx	r3
   return ret;
 800364c:	7bfb      	ldrb	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000038 	.word	0x20000038

0800365c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003668:	4b22      	ldr	r3, [pc, #136]	@ (80036f4 <WIZCHIP_WRITE+0x98>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800366e:	4b21      	ldr	r3, [pc, #132]	@ (80036f4 <WIZCHIP_WRITE+0x98>)
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f043 0304 	orr.w	r3, r3, #4
 800367a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800367c:	4b1d      	ldr	r3, [pc, #116]	@ (80036f4 <WIZCHIP_WRITE+0x98>)
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	d119      	bne.n	80036b8 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003684:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <WIZCHIP_WRITE+0x98>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	0c12      	lsrs	r2, r2, #16
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	4610      	mov	r0, r2
 8003690:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003692:	4b18      	ldr	r3, [pc, #96]	@ (80036f4 <WIZCHIP_WRITE+0x98>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	0a12      	lsrs	r2, r2, #8
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	4610      	mov	r0, r2
 800369e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80036a0:	4b14      	ldr	r3, [pc, #80]	@ (80036f4 <WIZCHIP_WRITE+0x98>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	4610      	mov	r0, r2
 80036aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <WIZCHIP_WRITE+0x98>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	4610      	mov	r0, r2
 80036b4:	4798      	blx	r3
 80036b6:	e013      	b.n	80036e0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0c1b      	lsrs	r3, r3, #16
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80036d2:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <WIZCHIP_WRITE+0x98>)
 80036d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d6:	f107 020c 	add.w	r2, r7, #12
 80036da:	2104      	movs	r1, #4
 80036dc:	4610      	mov	r0, r2
 80036de:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80036e0:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <WIZCHIP_WRITE+0x98>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80036e6:	4b03      	ldr	r3, [pc, #12]	@ (80036f4 <WIZCHIP_WRITE+0x98>)
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	4798      	blx	r3
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000038 	.word	0x20000038

080036f8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003706:	4b2b      	ldr	r3, [pc, #172]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800370c:	4b29      	ldr	r3, [pc, #164]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003712:	4b28      	ldr	r3, [pc, #160]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <WIZCHIP_READ_BUF+0x2a>
 800371a:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d126      	bne.n	8003770 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003722:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	0c12      	lsrs	r2, r2, #16
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	4610      	mov	r0, r2
 800372e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003730:	4b20      	ldr	r3, [pc, #128]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	0a12      	lsrs	r2, r2, #8
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	4610      	mov	r0, r2
 800373c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800373e:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	4610      	mov	r0, r2
 8003748:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800374a:	2300      	movs	r3, #0
 800374c:	82fb      	strh	r3, [r7, #22]
 800374e:	e00a      	b.n	8003766 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003750:	4b18      	ldr	r3, [pc, #96]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	8afa      	ldrh	r2, [r7, #22]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	188c      	adds	r4, r1, r2
 800375a:	4798      	blx	r3
 800375c:	4603      	mov	r3, r0
 800375e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003760:	8afb      	ldrh	r3, [r7, #22]
 8003762:	3301      	adds	r3, #1
 8003764:	82fb      	strh	r3, [r7, #22]
 8003766:	8afa      	ldrh	r2, [r7, #22]
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	429a      	cmp	r2, r3
 800376c:	d3f0      	bcc.n	8003750 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800376e:	e017      	b.n	80037a0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	b2db      	uxtb	r3, r3
 8003776:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	b2db      	uxtb	r3, r3
 800377e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003786:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	f107 0210 	add.w	r2, r7, #16
 800378e:	2103      	movs	r1, #3
 8003790:	4610      	mov	r0, r2
 8003792:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003794:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	4611      	mov	r1, r2
 800379c:	68b8      	ldr	r0, [r7, #8]
 800379e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80037a0:	4b04      	ldr	r3, [pc, #16]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80037a6:	4b03      	ldr	r3, [pc, #12]	@ (80037b4 <WIZCHIP_READ_BUF+0xbc>)
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	4798      	blx	r3
}
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd90      	pop	{r4, r7, pc}
 80037b4:	20000038 	.word	0x20000038

080037b8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	4613      	mov	r3, r2
 80037c4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80037c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4798      	blx	r3
   WIZCHIP.CS._select();
 80037cc:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80037da:	4b26      	ldr	r3, [pc, #152]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 80037dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d126      	bne.n	8003830 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80037e2:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	0c12      	lsrs	r2, r2, #16
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	4610      	mov	r0, r2
 80037ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80037f0:	4b20      	ldr	r3, [pc, #128]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	0a12      	lsrs	r2, r2, #8
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	4610      	mov	r0, r2
 80037fc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80037fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	4610      	mov	r0, r2
 8003808:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800380a:	2300      	movs	r3, #0
 800380c:	82fb      	strh	r3, [r7, #22]
 800380e:	e00a      	b.n	8003826 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003810:	4b18      	ldr	r3, [pc, #96]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	8afa      	ldrh	r2, [r7, #22]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	440a      	add	r2, r1
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	4610      	mov	r0, r2
 800381e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003820:	8afb      	ldrh	r3, [r7, #22]
 8003822:	3301      	adds	r3, #1
 8003824:	82fb      	strh	r3, [r7, #22]
 8003826:	8afa      	ldrh	r2, [r7, #22]
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	429a      	cmp	r2, r3
 800382c:	d3f0      	bcc.n	8003810 <WIZCHIP_WRITE_BUF+0x58>
 800382e:	e017      	b.n	8003860 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0c1b      	lsrs	r3, r3, #16
 8003834:	b2db      	uxtb	r3, r3
 8003836:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	b2db      	uxtb	r3, r3
 800383e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003846:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	f107 0210 	add.w	r2, r7, #16
 800384e:	2103      	movs	r1, #3
 8003850:	4610      	mov	r0, r2
 8003852:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003854:	4b07      	ldr	r3, [pc, #28]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 8003856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003858:	88fa      	ldrh	r2, [r7, #6]
 800385a:	4611      	mov	r1, r2
 800385c:	68b8      	ldr	r0, [r7, #8]
 800385e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003860:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003866:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <WIZCHIP_WRITE_BUF+0xbc>)
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	4798      	blx	r3
}
 800386c:	bf00      	nop
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000038 	.word	0x20000038

08003878 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003882:	2300      	movs	r3, #0
 8003884:	81fb      	strh	r3, [r7, #14]
 8003886:	2300      	movs	r3, #0
 8003888:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	3301      	adds	r3, #1
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fe94 	bl	80035c4 <WIZCHIP_READ>
 800389c:	4603      	mov	r3, r0
 800389e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80038a0:	89bb      	ldrh	r3, [r7, #12]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	b29c      	uxth	r4, r3
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	3301      	adds	r3, #1
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fe86 	bl	80035c4 <WIZCHIP_READ>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4423      	add	r3, r4
 80038bc:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80038be:	89bb      	ldrh	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d019      	beq.n	80038f8 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	3301      	adds	r3, #1
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fe77 	bl	80035c4 <WIZCHIP_READ>
 80038d6:	4603      	mov	r3, r0
 80038d8:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80038da:	89fb      	ldrh	r3, [r7, #14]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	b29c      	uxth	r4, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	3301      	adds	r3, #1
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fe69 	bl	80035c4 <WIZCHIP_READ>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4423      	add	r3, r4
 80038f6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80038f8:	89fa      	ldrh	r2, [r7, #14]
 80038fa:	89bb      	ldrh	r3, [r7, #12]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d1c4      	bne.n	800388a <getSn_TX_FSR+0x12>
   return val;
 8003900:	89fb      	ldrh	r3, [r7, #14]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	bd90      	pop	{r4, r7, pc}

0800390a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800390a:	b590      	push	{r4, r7, lr}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003914:	2300      	movs	r3, #0
 8003916:	81fb      	strh	r3, [r7, #14]
 8003918:	2300      	movs	r3, #0
 800391a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	3301      	adds	r3, #1
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fe4b 	bl	80035c4 <WIZCHIP_READ>
 800392e:	4603      	mov	r3, r0
 8003930:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003932:	89bb      	ldrh	r3, [r7, #12]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	b29c      	uxth	r4, r3
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	3301      	adds	r3, #1
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fe3d 	bl	80035c4 <WIZCHIP_READ>
 800394a:	4603      	mov	r3, r0
 800394c:	4423      	add	r3, r4
 800394e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003950:	89bb      	ldrh	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d019      	beq.n	800398a <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	3301      	adds	r3, #1
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fe2e 	bl	80035c4 <WIZCHIP_READ>
 8003968:	4603      	mov	r3, r0
 800396a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800396c:	89fb      	ldrh	r3, [r7, #14]
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	b29c      	uxth	r4, r3
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	3301      	adds	r3, #1
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fe20 	bl	80035c4 <WIZCHIP_READ>
 8003984:	4603      	mov	r3, r0
 8003986:	4423      	add	r3, r4
 8003988:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800398a:	89fa      	ldrh	r2, [r7, #14]
 800398c:	89bb      	ldrh	r3, [r7, #12]
 800398e:	429a      	cmp	r2, r3
 8003990:	d1c4      	bne.n	800391c <getSn_RX_RSR+0x12>
   return val;
 8003992:	89fb      	ldrh	r3, [r7, #14]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}

0800399c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
 80039a8:	4613      	mov	r3, r2
 80039aa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80039b4:	88bb      	ldrh	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d046      	beq.n	8003a48 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	3301      	adds	r3, #1
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fdfc 	bl	80035c4 <WIZCHIP_READ>
 80039cc:	4603      	mov	r3, r0
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	b29c      	uxth	r4, r3
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	3301      	adds	r3, #1
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fdf0 	bl	80035c4 <WIZCHIP_READ>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4423      	add	r3, r4
 80039e8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80039ea:	89fb      	ldrh	r3, [r7, #14]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	79fa      	ldrb	r2, [r7, #7]
 80039f0:	0092      	lsls	r2, r2, #2
 80039f2:	3202      	adds	r2, #2
 80039f4:	00d2      	lsls	r2, r2, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80039fa:	88bb      	ldrh	r3, [r7, #4]
 80039fc:	461a      	mov	r2, r3
 80039fe:	6839      	ldr	r1, [r7, #0]
 8003a00:	68b8      	ldr	r0, [r7, #8]
 8003a02:	f7ff fed9 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003a06:	89fa      	ldrh	r2, [r7, #14]
 8003a08:	88bb      	ldrh	r3, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	3301      	adds	r3, #1
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	89fb      	ldrh	r3, [r7, #14]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f7ff fe18 	bl	800365c <WIZCHIP_WRITE>
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	3301      	adds	r3, #1
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003a38:	461a      	mov	r2, r3
 8003a3a:	89fb      	ldrh	r3, [r7, #14]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f7ff fe0b 	bl	800365c <WIZCHIP_WRITE>
 8003a46:	e000      	b.n	8003a4a <wiz_send_data+0xae>
   if(len == 0)  return;
 8003a48:	bf00      	nop
}
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd90      	pop	{r4, r7, pc}

08003a50 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003a68:	88bb      	ldrh	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d046      	beq.n	8003afc <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	3301      	adds	r3, #1
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fda2 	bl	80035c4 <WIZCHIP_READ>
 8003a80:	4603      	mov	r3, r0
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	b29c      	uxth	r4, r3
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fd96 	bl	80035c4 <WIZCHIP_READ>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4423      	add	r3, r4
 8003a9c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003a9e:	89fb      	ldrh	r3, [r7, #14]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	79fa      	ldrb	r2, [r7, #7]
 8003aa4:	0092      	lsls	r2, r2, #2
 8003aa6:	3203      	adds	r2, #3
 8003aa8:	00d2      	lsls	r2, r2, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003aae:	88bb      	ldrh	r3, [r7, #4]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6839      	ldr	r1, [r7, #0]
 8003ab4:	68b8      	ldr	r0, [r7, #8]
 8003ab6:	f7ff fe1f 	bl	80036f8 <WIZCHIP_READ_BUF>
   ptr += len;
 8003aba:	89fa      	ldrh	r2, [r7, #14]
 8003abc:	88bb      	ldrh	r3, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003ace:	461a      	mov	r2, r3
 8003ad0:	89fb      	ldrh	r3, [r7, #14]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f7ff fdbe 	bl	800365c <WIZCHIP_WRITE>
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003aec:	461a      	mov	r2, r3
 8003aee:	89fb      	ldrh	r3, [r7, #14]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f7ff fdb1 	bl	800365c <WIZCHIP_WRITE>
 8003afa:	e000      	b.n	8003afe <wiz_recv_data+0xae>
   if(len == 0) return;
 8003afc:	bf00      	nop
}
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd90      	pop	{r4, r7, pc}

08003b04 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	71fb      	strb	r3, [r7, #7]
 8003b10:	4613      	mov	r3, r2
 8003b12:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fd4d 	bl	80035c4 <WIZCHIP_READ>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	b29c      	uxth	r4, r3
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	3301      	adds	r3, #1
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fd41 	bl	80035c4 <WIZCHIP_READ>
 8003b42:	4603      	mov	r3, r0
 8003b44:	4423      	add	r3, r4
 8003b46:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8003b48:	89fa      	ldrh	r2, [r7, #14]
 8003b4a:	88bb      	ldrh	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	3301      	adds	r3, #1
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	89fb      	ldrh	r3, [r7, #14]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f7ff fd77 	bl	800365c <WIZCHIP_WRITE>
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	3301      	adds	r3, #1
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	89fb      	ldrh	r3, [r7, #14]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7ff fd6a 	bl	800365c <WIZCHIP_WRITE>
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd90      	pop	{r4, r7, pc}

08003b90 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	70fb      	strb	r3, [r7, #3]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	2300      	movs	r3, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	807b      	strh	r3, [r7, #2]
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	807b      	strh	r3, [r7, #2]
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <reg_wizchip_cs_cbfunc+0x16>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <reg_wizchip_cs_cbfunc+0x40>)
 8003c70:	4a0a      	ldr	r2, [pc, #40]	@ (8003c9c <reg_wizchip_cs_cbfunc+0x44>)
 8003c72:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003c74:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <reg_wizchip_cs_cbfunc+0x40>)
 8003c76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca0 <reg_wizchip_cs_cbfunc+0x48>)
 8003c78:	619a      	str	r2, [r3, #24]
 8003c7a:	e006      	b.n	8003c8a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003c7c:	4a06      	ldr	r2, [pc, #24]	@ (8003c98 <reg_wizchip_cs_cbfunc+0x40>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003c82:	4a05      	ldr	r2, [pc, #20]	@ (8003c98 <reg_wizchip_cs_cbfunc+0x40>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	6193      	str	r3, [r2, #24]
   }
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000038 	.word	0x20000038
 8003c9c:	08003bad 	.word	0x08003bad
 8003ca0:	08003bbb 	.word	0x08003bbb

08003ca4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003cae:	bf00      	nop
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f9      	beq.n	8003cb0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <reg_wizchip_spi_cbfunc+0x24>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003cc8:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cca:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <reg_wizchip_spi_cbfunc+0x50>)
 8003ccc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003cce:	4b08      	ldr	r3, [pc, #32]	@ (8003cf0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cd0:	4a09      	ldr	r2, [pc, #36]	@ (8003cf8 <reg_wizchip_spi_cbfunc+0x54>)
 8003cd2:	621a      	str	r2, [r3, #32]
 8003cd4:	e006      	b.n	8003ce4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003cd6:	4a06      	ldr	r2, [pc, #24]	@ (8003cf0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003cdc:	4a04      	ldr	r2, [pc, #16]	@ (8003cf0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6213      	str	r3, [r2, #32]
   }
}
 8003ce2:	bf00      	nop
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	20000038 	.word	0x20000038
 8003cf4:	08003c01 	.word	0x08003c01
 8003cf8:	08003c11 	.word	0x08003c11

08003cfc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003d06:	bf00      	nop
 8003d08:	4b0f      	ldr	r3, [pc, #60]	@ (8003d48 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f9      	beq.n	8003d08 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <reg_wizchip_spiburst_cbfunc+0x24>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003d20:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d22:	4a0a      	ldr	r2, [pc, #40]	@ (8003d4c <reg_wizchip_spiburst_cbfunc+0x50>)
 8003d24:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003d26:	4b08      	ldr	r3, [pc, #32]	@ (8003d48 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d28:	4a09      	ldr	r2, [pc, #36]	@ (8003d50 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003d2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d2c:	e006      	b.n	8003d3c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003d2e:	4a06      	ldr	r2, [pc, #24]	@ (8003d48 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003d34:	4a04      	ldr	r2, [pc, #16]	@ (8003d48 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8003d3a:	bf00      	nop
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	20000038 	.word	0x20000038
 8003d4c:	08003c27 	.word	0x08003c27
 8003d50:	08003c3f 	.word	0x08003c3f

08003d54 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	2b0f      	cmp	r3, #15
 8003d70:	f200 80c5 	bhi.w	8003efe <ctlwizchip+0x1aa>
 8003d74:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <ctlwizchip+0x28>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003dc3 	.word	0x08003dc3
 8003d84:	08003def 	.word	0x08003def
 8003d88:	08003de3 	.word	0x08003de3
 8003d8c:	08003dfd 	.word	0x08003dfd
 8003d90:	08003e09 	.word	0x08003e09
 8003d94:	08003e17 	.word	0x08003e17
 8003d98:	08003e3d 	.word	0x08003e3d
 8003d9c:	08003e5f 	.word	0x08003e5f
 8003da0:	08003ea3 	.word	0x08003ea3
 8003da4:	08003ea9 	.word	0x08003ea9
 8003da8:	08003eb1 	.word	0x08003eb1
 8003dac:	08003f05 	.word	0x08003f05
 8003db0:	08003eb9 	.word	0x08003eb9
 8003db4:	08003ec7 	.word	0x08003ec7
 8003db8:	08003ee3 	.word	0x08003ee3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003dbc:	f000 f8aa 	bl	8003f14 <wizchip_sw_reset>
         break;
 8003dc0:	e0a1      	b.n	8003f06 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f8e7 	bl	8003fac <wizchip_init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	e092      	b.n	8003f08 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f96c 	bl	80040c4 <wizchip_clrinterrupt>
         break;
 8003dec:	e08b      	b.n	8003f06 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003dee:	f000 f99d 	bl	800412c <wizchip_getinterrupt>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	801a      	strh	r2, [r3, #0]
         break;
 8003dfa:	e084      	b.n	8003f06 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 f9b8 	bl	8004176 <wizchip_setinterruptmask>
         break;         
 8003e06:	e07e      	b.n	8003f06 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003e08:	f000 f9d0 	bl	80041ac <wizchip_getinterruptmask>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	801a      	strh	r2, [r3, #0]
         break;
 8003e14:	e077      	b.n	8003f06 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003e26:	f7ff fc19 	bl	800365c <WIZCHIP_WRITE>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003e36:	f7ff fc11 	bl	800365c <WIZCHIP_WRITE>
         break;
 8003e3a:	e064      	b.n	8003f06 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003e3c:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003e40:	f7ff fbc0 	bl	80035c4 <WIZCHIP_READ>
 8003e44:	4603      	mov	r3, r0
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	b29c      	uxth	r4, r3
 8003e4a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003e4e:	f7ff fbb9 	bl	80035c4 <WIZCHIP_READ>
 8003e52:	4603      	mov	r3, r0
 8003e54:	4423      	add	r3, r4
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	801a      	strh	r2, [r3, #0]
         break;
 8003e5c:	e053      	b.n	8003f06 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f10 <ctlwizchip+0x1bc>)
 8003e60:	789a      	ldrb	r2, [r3, #2]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	4a29      	ldr	r2, [pc, #164]	@ (8003f10 <ctlwizchip+0x1bc>)
 8003e6c:	78d2      	ldrb	r2, [r2, #3]
 8003e6e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	3302      	adds	r3, #2
 8003e74:	4a26      	ldr	r2, [pc, #152]	@ (8003f10 <ctlwizchip+0x1bc>)
 8003e76:	7912      	ldrb	r2, [r2, #4]
 8003e78:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	3303      	adds	r3, #3
 8003e7e:	4a24      	ldr	r2, [pc, #144]	@ (8003f10 <ctlwizchip+0x1bc>)
 8003e80:	7952      	ldrb	r2, [r2, #5]
 8003e82:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4a21      	ldr	r2, [pc, #132]	@ (8003f10 <ctlwizchip+0x1bc>)
 8003e8a:	7992      	ldrb	r2, [r2, #6]
 8003e8c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	3305      	adds	r3, #5
 8003e92:	4a1f      	ldr	r2, [pc, #124]	@ (8003f10 <ctlwizchip+0x1bc>)
 8003e94:	79d2      	ldrb	r2, [r2, #7]
 8003e96:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	3306      	adds	r3, #6
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
         break;
 8003ea0:	e031      	b.n	8003f06 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003ea2:	f000 f9d5 	bl	8004250 <wizphy_reset>
         break;
 8003ea6:	e02e      	b.n	8003f06 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003ea8:	6838      	ldr	r0, [r7, #0]
 8003eaa:	f000 f9f8 	bl	800429e <wizphy_setphyconf>
         break;
 8003eae:	e02a      	b.n	8003f06 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003eb0:	6838      	ldr	r0, [r7, #0]
 8003eb2:	f000 fa37 	bl	8004324 <wizphy_getphyconf>
         break;
 8003eb6:	e026      	b.n	8003f06 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fa9b 	bl	80043f8 <wizphy_setphypmode>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	e020      	b.n	8003f08 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003ec6:	f000 f9aa 	bl	800421e <wizphy_getphypmode>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2bff      	cmp	r3, #255	@ 0xff
 8003ed2:	d102      	bne.n	8003eda <ctlwizchip+0x186>
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	e016      	b.n	8003f08 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	7dfa      	ldrb	r2, [r7, #23]
 8003ede:	701a      	strb	r2, [r3, #0]
         break;
 8003ee0:	e011      	b.n	8003f06 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003ee2:	f000 f986 	bl	80041f2 <wizphy_getphylink>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2bff      	cmp	r3, #255	@ 0xff
 8003eee:	d102      	bne.n	8003ef6 <ctlwizchip+0x1a2>
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef4:	e008      	b.n	8003f08 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	7dfa      	ldrb	r2, [r7, #23]
 8003efa:	701a      	strb	r2, [r3, #0]
         break;
 8003efc:	e003      	b.n	8003f06 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	e001      	b.n	8003f08 <ctlwizchip+0x1b4>
         break;
 8003f04:	bf00      	nop
   }
   return 0;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd90      	pop	{r4, r7, pc}
 8003f10:	20000038 	.word	0x20000038

08003f14 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	2206      	movs	r2, #6
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003f24:	f7ff fbe8 	bl	80036f8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003f34:	f7ff fbe0 	bl	80036f8 <WIZCHIP_READ_BUF>
 8003f38:	f107 0310 	add.w	r3, r7, #16
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003f44:	f7ff fbd8 	bl	80036f8 <WIZCHIP_READ_BUF>
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003f54:	f7ff fbd0 	bl	80036f8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003f58:	2180      	movs	r1, #128	@ 0x80
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	f7ff fb7e 	bl	800365c <WIZCHIP_WRITE>
   getMR(); // for delay
 8003f60:	2000      	movs	r0, #0
 8003f62:	f7ff fb2f 	bl	80035c4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	2206      	movs	r2, #6
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003f70:	f7ff fc22 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	2204      	movs	r2, #4
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003f80:	f7ff fc1a 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003f84:	f107 0310 	add.w	r3, r7, #16
 8003f88:	2204      	movs	r2, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003f90:	f7ff fc12 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003f94:	f107 030c 	add.w	r3, r7, #12
 8003f98:	2204      	movs	r2, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003fa0:	f7ff fc0a 	bl	80037b8 <WIZCHIP_WRITE_BUF>
}
 8003fa4:	bf00      	nop
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003fba:	f7ff ffab 	bl	8003f14 <wizchip_sw_reset>
   if(txsize)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d03b      	beq.n	800403c <wizchip_init+0x90>
   {
      tmp = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	e015      	b.n	8003ffa <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	7bbb      	ldrb	r3, [r7, #14]
 8003fda:	4413      	add	r3, r2
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	dd02      	ble.n	8003fee <wizchip_init+0x42>
 8003fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fec:	e066      	b.n	80040bc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	73fb      	strb	r3, [r7, #15]
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	2b07      	cmp	r3, #7
 8004000:	dde5      	ble.n	8003fce <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
 8004006:	e015      	b.n	8004034 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	3301      	adds	r3, #1
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004016:	4618      	mov	r0, r3
 8004018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	4619      	mov	r1, r3
 8004024:	f7ff fb1a 	bl	800365c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	3301      	adds	r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	73fb      	strb	r3, [r7, #15]
 8004034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004038:	2b07      	cmp	r3, #7
 800403a:	dde5      	ble.n	8004008 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d03b      	beq.n	80040ba <wizchip_init+0x10e>
   {
      tmp = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	e015      	b.n	8004078 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800404c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	4413      	add	r3, r2
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	7bbb      	ldrb	r3, [r7, #14]
 8004058:	4413      	add	r3, r2
 800405a:	b2db      	uxtb	r3, r3
 800405c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800405e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004062:	2b10      	cmp	r3, #16
 8004064:	dd02      	ble.n	800406c <wizchip_init+0xc0>
 8004066:	f04f 33ff 	mov.w	r3, #4294967295
 800406a:	e027      	b.n	80040bc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800406c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	3301      	adds	r3, #1
 8004074:	b2db      	uxtb	r3, r3
 8004076:	73fb      	strb	r3, [r7, #15]
 8004078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407c:	2b07      	cmp	r3, #7
 800407e:	dde5      	ble.n	800404c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	e015      	b.n	80040b2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8004086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	3301      	adds	r3, #1
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004094:	4618      	mov	r0, r3
 8004096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4413      	add	r3, r2
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	4619      	mov	r1, r3
 80040a2:	f7ff fadb 	bl	800365c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80040a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b6:	2b07      	cmp	r3, #7
 80040b8:	dde5      	ble.n	8004086 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	f023 030f 	bic.w	r3, r3, #15
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	4619      	mov	r1, r3
 80040e4:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80040e8:	f7ff fab8 	bl	800365c <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]
 80040f0:	e014      	b.n	800411c <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80040f2:	7bba      	ldrb	r2, [r7, #14]
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	fa42 f303 	asr.w	r3, r2, r3
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <wizchip_clrinterrupt+0x52>
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	3301      	adds	r3, #1
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800410e:	211f      	movs	r1, #31
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff faa3 	bl	800365c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	3301      	adds	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b07      	cmp	r3, #7
 8004120:	d9e7      	bls.n	80040f2 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800413e:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004142:	f7ff fa3f 	bl	80035c4 <WIZCHIP_READ>
 8004146:	4603      	mov	r3, r0
 8004148:	f023 030f 	bic.w	r3, r3, #15
 800414c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800414e:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8004152:	f7ff fa37 	bl	80035c4 <WIZCHIP_READ>
 8004156:	4603      	mov	r3, r0
 8004158:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800415a:	79bb      	ldrb	r3, [r7, #6]
 800415c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800415e:	88bb      	ldrh	r3, [r7, #4]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	b29a      	uxth	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	b29b      	uxth	r3, r3
 8004168:	4413      	add	r3, r2
 800416a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800416c:	88bb      	ldrh	r3, [r7, #4]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	4603      	mov	r3, r0
 800417e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	b29b      	uxth	r3, r3
 800418a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	4619      	mov	r1, r3
 8004190:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004194:	f7ff fa62 	bl	800365c <WIZCHIP_WRITE>
   setSIMR(simr);
 8004198:	7bbb      	ldrb	r3, [r7, #14]
 800419a:	4619      	mov	r1, r3
 800419c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80041a0:	f7ff fa5c 	bl	800365c <WIZCHIP_WRITE>
#endif   
}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80041be:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80041c2:	f7ff f9ff 	bl	80035c4 <WIZCHIP_READ>
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80041ca:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80041ce:	f7ff f9f9 	bl	80035c4 <WIZCHIP_READ>
 80041d2:	4603      	mov	r3, r0
 80041d4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80041d6:	79bb      	ldrb	r3, [r7, #6]
 80041d8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80041da:	88bb      	ldrh	r3, [r7, #4]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	b29a      	uxth	r2, r3
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80041e8:	88bb      	ldrh	r3, [r7, #4]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80041f8:	2300      	movs	r3, #0
 80041fa:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80041fc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004200:	f7ff f9e0 	bl	80035c4 <WIZCHIP_READ>
 8004204:	4603      	mov	r3, r0
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800420e:	2301      	movs	r3, #1
 8004210:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004228:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800422c:	f7ff f9ca 	bl	80035c4 <WIZCHIP_READ>
 8004230:	4603      	mov	r3, r0
 8004232:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004236:	2b30      	cmp	r3, #48	@ 0x30
 8004238:	d102      	bne.n	8004240 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800423a:	2301      	movs	r3, #1
 800423c:	71fb      	strb	r3, [r7, #7]
 800423e:	e001      	b.n	8004244 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004240:	2300      	movs	r3, #0
 8004242:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004244:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004256:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800425a:	f7ff f9b3 	bl	80035c4 <WIZCHIP_READ>
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004268:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	4619      	mov	r1, r3
 800426e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004272:	f7ff f9f3 	bl	800365c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004276:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800427a:	f7ff f9a3 	bl	80035c4 <WIZCHIP_READ>
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004288:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	4619      	mov	r1, r3
 800428e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004292:	f7ff f9e3 	bl	800365c <WIZCHIP_WRITE>
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d104      	bne.n	80042bc <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	e003      	b.n	80042c4 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042c2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d104      	bne.n	80042d6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	e019      	b.n	800430a <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	78db      	ldrb	r3, [r3, #3]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d10d      	bne.n	80042fa <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	789b      	ldrb	r3, [r3, #2]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d104      	bne.n	80042f0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	f043 0318 	orr.w	r3, r3, #24
 80042ec:	73fb      	strb	r3, [r7, #15]
 80042ee:	e00c      	b.n	800430a <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	f043 0308 	orr.w	r3, r3, #8
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	e007      	b.n	800430a <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	789b      	ldrb	r3, [r3, #2]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d103      	bne.n	800430a <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	f043 0310 	orr.w	r3, r3, #16
 8004308:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	4619      	mov	r1, r3
 800430e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004312:	f7ff f9a3 	bl	800365c <WIZCHIP_WRITE>
   wizphy_reset();
 8004316:	f7ff ff9b 	bl	8004250 <wizphy_reset>
}
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004330:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004334:	f7ff f946 	bl	80035c4 <WIZCHIP_READ>
 8004338:	4603      	mov	r3, r0
 800433a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	119b      	asrs	r3, r3, #6
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004352:	2b20      	cmp	r3, #32
 8004354:	d001      	beq.n	800435a <wizphy_getphyconf+0x36>
 8004356:	2b38      	cmp	r3, #56	@ 0x38
 8004358:	d103      	bne.n	8004362 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	705a      	strb	r2, [r3, #1]
         break;
 8004360:	e003      	b.n	800436a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	705a      	strb	r2, [r3, #1]
         break;
 8004368:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004370:	3b10      	subs	r3, #16
 8004372:	2b10      	cmp	r3, #16
 8004374:	bf8c      	ite	hi
 8004376:	2201      	movhi	r2, #1
 8004378:	2200      	movls	r2, #0
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	2a00      	cmp	r2, #0
 800437e:	d10f      	bne.n	80043a0 <wizphy_getphyconf+0x7c>
 8004380:	4a1b      	ldr	r2, [pc, #108]	@ (80043f0 <wizphy_getphyconf+0xcc>)
 8004382:	fa22 f303 	lsr.w	r3, r2, r3
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	bf14      	ite	ne
 800438e:	2301      	movne	r3, #1
 8004390:	2300      	moveq	r3, #0
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	709a      	strb	r2, [r3, #2]
         break;
 800439e:	e003      	b.n	80043a8 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	709a      	strb	r2, [r3, #2]
         break;
 80043a6:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043ae:	3b08      	subs	r3, #8
 80043b0:	2b18      	cmp	r3, #24
 80043b2:	bf8c      	ite	hi
 80043b4:	2201      	movhi	r2, #1
 80043b6:	2200      	movls	r2, #0
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	d10f      	bne.n	80043de <wizphy_getphyconf+0xba>
 80043be:	4a0d      	ldr	r2, [pc, #52]	@ (80043f4 <wizphy_getphyconf+0xd0>)
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	70da      	strb	r2, [r3, #3]
         break;
 80043dc:	e003      	b.n	80043e6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	70da      	strb	r2, [r3, #3]
         break;
 80043e4:	bf00      	nop
   }
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	00010101 	.word	0x00010101
 80043f4:	01010001 	.word	0x01010001

080043f8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004406:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800440a:	f7ff f8db 	bl	80035c4 <WIZCHIP_READ>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <wizphy_setphypmode+0x2a>
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	e030      	b.n	8004484 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004428:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d104      	bne.n	800443a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	e003      	b.n	8004442 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004440:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	4619      	mov	r1, r3
 8004446:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800444a:	f7ff f907 	bl	800365c <WIZCHIP_WRITE>
   wizphy_reset();
 800444e:	f7ff feff 	bl	8004250 <wizphy_reset>
   tmp = getPHYCFGR();
 8004452:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004456:	f7ff f8b5 	bl	80035c4 <WIZCHIP_READ>
 800445a:	4603      	mov	r3, r0
 800445c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d106      	bne.n	8004472 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <wizphy_setphypmode+0x88>
 800446e:	2300      	movs	r3, #0
 8004470:	e008      	b.n	8004484 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <wizphy_setphypmode+0x88>
 800447c:	2300      	movs	r3, #0
 800447e:	e001      	b.n	8004484 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2206      	movs	r2, #6
 8004498:	4619      	mov	r1, r3
 800449a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800449e:	f7ff f98b 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	330e      	adds	r3, #14
 80044a6:	2204      	movs	r2, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80044ae:	f7ff f983 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	330a      	adds	r3, #10
 80044b6:	2204      	movs	r2, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80044be:	f7ff f97b 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3306      	adds	r3, #6
 80044c6:	2204      	movs	r2, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80044ce:	f7ff f973 	bl	80037b8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	7c9a      	ldrb	r2, [r3, #18]
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <wizchip_setnetinfo+0x78>)
 80044d8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	7cda      	ldrb	r2, [r3, #19]
 80044de:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <wizchip_setnetinfo+0x78>)
 80044e0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	7d1a      	ldrb	r2, [r3, #20]
 80044e6:	4b07      	ldr	r3, [pc, #28]	@ (8004504 <wizchip_setnetinfo+0x78>)
 80044e8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	7d5a      	ldrb	r2, [r3, #21]
 80044ee:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <wizchip_setnetinfo+0x78>)
 80044f0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	7d9a      	ldrb	r2, [r3, #22]
 80044f6:	4b04      	ldr	r3, [pc, #16]	@ (8004508 <wizchip_setnetinfo+0x7c>)
 80044f8:	701a      	strb	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000630 	.word	0x20000630
 8004508:	20000634 	.word	0x20000634

0800450c <sbrk_aligned>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	4e0f      	ldr	r6, [pc, #60]	@ (800454c <sbrk_aligned+0x40>)
 8004510:	460c      	mov	r4, r1
 8004512:	6831      	ldr	r1, [r6, #0]
 8004514:	4605      	mov	r5, r0
 8004516:	b911      	cbnz	r1, 800451e <sbrk_aligned+0x12>
 8004518:	f000 fb0c 	bl	8004b34 <_sbrk_r>
 800451c:	6030      	str	r0, [r6, #0]
 800451e:	4621      	mov	r1, r4
 8004520:	4628      	mov	r0, r5
 8004522:	f000 fb07 	bl	8004b34 <_sbrk_r>
 8004526:	1c43      	adds	r3, r0, #1
 8004528:	d103      	bne.n	8004532 <sbrk_aligned+0x26>
 800452a:	f04f 34ff 	mov.w	r4, #4294967295
 800452e:	4620      	mov	r0, r4
 8004530:	bd70      	pop	{r4, r5, r6, pc}
 8004532:	1cc4      	adds	r4, r0, #3
 8004534:	f024 0403 	bic.w	r4, r4, #3
 8004538:	42a0      	cmp	r0, r4
 800453a:	d0f8      	beq.n	800452e <sbrk_aligned+0x22>
 800453c:	1a21      	subs	r1, r4, r0
 800453e:	4628      	mov	r0, r5
 8004540:	f000 faf8 	bl	8004b34 <_sbrk_r>
 8004544:	3001      	adds	r0, #1
 8004546:	d1f2      	bne.n	800452e <sbrk_aligned+0x22>
 8004548:	e7ef      	b.n	800452a <sbrk_aligned+0x1e>
 800454a:	bf00      	nop
 800454c:	20000638 	.word	0x20000638

08004550 <_malloc_r>:
 8004550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004554:	1ccd      	adds	r5, r1, #3
 8004556:	f025 0503 	bic.w	r5, r5, #3
 800455a:	3508      	adds	r5, #8
 800455c:	2d0c      	cmp	r5, #12
 800455e:	bf38      	it	cc
 8004560:	250c      	movcc	r5, #12
 8004562:	2d00      	cmp	r5, #0
 8004564:	4606      	mov	r6, r0
 8004566:	db01      	blt.n	800456c <_malloc_r+0x1c>
 8004568:	42a9      	cmp	r1, r5
 800456a:	d904      	bls.n	8004576 <_malloc_r+0x26>
 800456c:	230c      	movs	r3, #12
 800456e:	6033      	str	r3, [r6, #0]
 8004570:	2000      	movs	r0, #0
 8004572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800464c <_malloc_r+0xfc>
 800457a:	f000 f869 	bl	8004650 <__malloc_lock>
 800457e:	f8d8 3000 	ldr.w	r3, [r8]
 8004582:	461c      	mov	r4, r3
 8004584:	bb44      	cbnz	r4, 80045d8 <_malloc_r+0x88>
 8004586:	4629      	mov	r1, r5
 8004588:	4630      	mov	r0, r6
 800458a:	f7ff ffbf 	bl	800450c <sbrk_aligned>
 800458e:	1c43      	adds	r3, r0, #1
 8004590:	4604      	mov	r4, r0
 8004592:	d158      	bne.n	8004646 <_malloc_r+0xf6>
 8004594:	f8d8 4000 	ldr.w	r4, [r8]
 8004598:	4627      	mov	r7, r4
 800459a:	2f00      	cmp	r7, #0
 800459c:	d143      	bne.n	8004626 <_malloc_r+0xd6>
 800459e:	2c00      	cmp	r4, #0
 80045a0:	d04b      	beq.n	800463a <_malloc_r+0xea>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	4639      	mov	r1, r7
 80045a6:	4630      	mov	r0, r6
 80045a8:	eb04 0903 	add.w	r9, r4, r3
 80045ac:	f000 fac2 	bl	8004b34 <_sbrk_r>
 80045b0:	4581      	cmp	r9, r0
 80045b2:	d142      	bne.n	800463a <_malloc_r+0xea>
 80045b4:	6821      	ldr	r1, [r4, #0]
 80045b6:	1a6d      	subs	r5, r5, r1
 80045b8:	4629      	mov	r1, r5
 80045ba:	4630      	mov	r0, r6
 80045bc:	f7ff ffa6 	bl	800450c <sbrk_aligned>
 80045c0:	3001      	adds	r0, #1
 80045c2:	d03a      	beq.n	800463a <_malloc_r+0xea>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	442b      	add	r3, r5
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	f8d8 3000 	ldr.w	r3, [r8]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	bb62      	cbnz	r2, 800462c <_malloc_r+0xdc>
 80045d2:	f8c8 7000 	str.w	r7, [r8]
 80045d6:	e00f      	b.n	80045f8 <_malloc_r+0xa8>
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	1b52      	subs	r2, r2, r5
 80045dc:	d420      	bmi.n	8004620 <_malloc_r+0xd0>
 80045de:	2a0b      	cmp	r2, #11
 80045e0:	d917      	bls.n	8004612 <_malloc_r+0xc2>
 80045e2:	1961      	adds	r1, r4, r5
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	6025      	str	r5, [r4, #0]
 80045e8:	bf18      	it	ne
 80045ea:	6059      	strne	r1, [r3, #4]
 80045ec:	6863      	ldr	r3, [r4, #4]
 80045ee:	bf08      	it	eq
 80045f0:	f8c8 1000 	streq.w	r1, [r8]
 80045f4:	5162      	str	r2, [r4, r5]
 80045f6:	604b      	str	r3, [r1, #4]
 80045f8:	4630      	mov	r0, r6
 80045fa:	f000 f82f 	bl	800465c <__malloc_unlock>
 80045fe:	f104 000b 	add.w	r0, r4, #11
 8004602:	1d23      	adds	r3, r4, #4
 8004604:	f020 0007 	bic.w	r0, r0, #7
 8004608:	1ac2      	subs	r2, r0, r3
 800460a:	bf1c      	itt	ne
 800460c:	1a1b      	subne	r3, r3, r0
 800460e:	50a3      	strne	r3, [r4, r2]
 8004610:	e7af      	b.n	8004572 <_malloc_r+0x22>
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	42a3      	cmp	r3, r4
 8004616:	bf0c      	ite	eq
 8004618:	f8c8 2000 	streq.w	r2, [r8]
 800461c:	605a      	strne	r2, [r3, #4]
 800461e:	e7eb      	b.n	80045f8 <_malloc_r+0xa8>
 8004620:	4623      	mov	r3, r4
 8004622:	6864      	ldr	r4, [r4, #4]
 8004624:	e7ae      	b.n	8004584 <_malloc_r+0x34>
 8004626:	463c      	mov	r4, r7
 8004628:	687f      	ldr	r7, [r7, #4]
 800462a:	e7b6      	b.n	800459a <_malloc_r+0x4a>
 800462c:	461a      	mov	r2, r3
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	42a3      	cmp	r3, r4
 8004632:	d1fb      	bne.n	800462c <_malloc_r+0xdc>
 8004634:	2300      	movs	r3, #0
 8004636:	6053      	str	r3, [r2, #4]
 8004638:	e7de      	b.n	80045f8 <_malloc_r+0xa8>
 800463a:	230c      	movs	r3, #12
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	4630      	mov	r0, r6
 8004640:	f000 f80c 	bl	800465c <__malloc_unlock>
 8004644:	e794      	b.n	8004570 <_malloc_r+0x20>
 8004646:	6005      	str	r5, [r0, #0]
 8004648:	e7d6      	b.n	80045f8 <_malloc_r+0xa8>
 800464a:	bf00      	nop
 800464c:	2000063c 	.word	0x2000063c

08004650 <__malloc_lock>:
 8004650:	4801      	ldr	r0, [pc, #4]	@ (8004658 <__malloc_lock+0x8>)
 8004652:	f000 babc 	b.w	8004bce <__retarget_lock_acquire_recursive>
 8004656:	bf00      	nop
 8004658:	20000780 	.word	0x20000780

0800465c <__malloc_unlock>:
 800465c:	4801      	ldr	r0, [pc, #4]	@ (8004664 <__malloc_unlock+0x8>)
 800465e:	f000 bab7 	b.w	8004bd0 <__retarget_lock_release_recursive>
 8004662:	bf00      	nop
 8004664:	20000780 	.word	0x20000780

08004668 <std>:
 8004668:	2300      	movs	r3, #0
 800466a:	b510      	push	{r4, lr}
 800466c:	4604      	mov	r4, r0
 800466e:	e9c0 3300 	strd	r3, r3, [r0]
 8004672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004676:	6083      	str	r3, [r0, #8]
 8004678:	8181      	strh	r1, [r0, #12]
 800467a:	6643      	str	r3, [r0, #100]	@ 0x64
 800467c:	81c2      	strh	r2, [r0, #14]
 800467e:	6183      	str	r3, [r0, #24]
 8004680:	4619      	mov	r1, r3
 8004682:	2208      	movs	r2, #8
 8004684:	305c      	adds	r0, #92	@ 0x5c
 8004686:	f000 fa19 	bl	8004abc <memset>
 800468a:	4b0d      	ldr	r3, [pc, #52]	@ (80046c0 <std+0x58>)
 800468c:	6263      	str	r3, [r4, #36]	@ 0x24
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <std+0x5c>)
 8004690:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004692:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <std+0x60>)
 8004694:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004696:	4b0d      	ldr	r3, [pc, #52]	@ (80046cc <std+0x64>)
 8004698:	6323      	str	r3, [r4, #48]	@ 0x30
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <std+0x68>)
 800469c:	6224      	str	r4, [r4, #32]
 800469e:	429c      	cmp	r4, r3
 80046a0:	d006      	beq.n	80046b0 <std+0x48>
 80046a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046a6:	4294      	cmp	r4, r2
 80046a8:	d002      	beq.n	80046b0 <std+0x48>
 80046aa:	33d0      	adds	r3, #208	@ 0xd0
 80046ac:	429c      	cmp	r4, r3
 80046ae:	d105      	bne.n	80046bc <std+0x54>
 80046b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b8:	f000 ba88 	b.w	8004bcc <__retarget_lock_init_recursive>
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	bf00      	nop
 80046c0:	0800490d 	.word	0x0800490d
 80046c4:	0800492f 	.word	0x0800492f
 80046c8:	08004967 	.word	0x08004967
 80046cc:	0800498b 	.word	0x0800498b
 80046d0:	20000640 	.word	0x20000640

080046d4 <stdio_exit_handler>:
 80046d4:	4a02      	ldr	r2, [pc, #8]	@ (80046e0 <stdio_exit_handler+0xc>)
 80046d6:	4903      	ldr	r1, [pc, #12]	@ (80046e4 <stdio_exit_handler+0x10>)
 80046d8:	4803      	ldr	r0, [pc, #12]	@ (80046e8 <stdio_exit_handler+0x14>)
 80046da:	f000 b869 	b.w	80047b0 <_fwalk_sglue>
 80046de:	bf00      	nop
 80046e0:	20000064 	.word	0x20000064
 80046e4:	080055dd 	.word	0x080055dd
 80046e8:	20000074 	.word	0x20000074

080046ec <cleanup_stdio>:
 80046ec:	6841      	ldr	r1, [r0, #4]
 80046ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <cleanup_stdio+0x34>)
 80046f0:	4299      	cmp	r1, r3
 80046f2:	b510      	push	{r4, lr}
 80046f4:	4604      	mov	r4, r0
 80046f6:	d001      	beq.n	80046fc <cleanup_stdio+0x10>
 80046f8:	f000 ff70 	bl	80055dc <_fflush_r>
 80046fc:	68a1      	ldr	r1, [r4, #8]
 80046fe:	4b09      	ldr	r3, [pc, #36]	@ (8004724 <cleanup_stdio+0x38>)
 8004700:	4299      	cmp	r1, r3
 8004702:	d002      	beq.n	800470a <cleanup_stdio+0x1e>
 8004704:	4620      	mov	r0, r4
 8004706:	f000 ff69 	bl	80055dc <_fflush_r>
 800470a:	68e1      	ldr	r1, [r4, #12]
 800470c:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <cleanup_stdio+0x3c>)
 800470e:	4299      	cmp	r1, r3
 8004710:	d004      	beq.n	800471c <cleanup_stdio+0x30>
 8004712:	4620      	mov	r0, r4
 8004714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004718:	f000 bf60 	b.w	80055dc <_fflush_r>
 800471c:	bd10      	pop	{r4, pc}
 800471e:	bf00      	nop
 8004720:	20000640 	.word	0x20000640
 8004724:	200006a8 	.word	0x200006a8
 8004728:	20000710 	.word	0x20000710

0800472c <global_stdio_init.part.0>:
 800472c:	b510      	push	{r4, lr}
 800472e:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <global_stdio_init.part.0+0x30>)
 8004730:	4c0b      	ldr	r4, [pc, #44]	@ (8004760 <global_stdio_init.part.0+0x34>)
 8004732:	4a0c      	ldr	r2, [pc, #48]	@ (8004764 <global_stdio_init.part.0+0x38>)
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	4620      	mov	r0, r4
 8004738:	2200      	movs	r2, #0
 800473a:	2104      	movs	r1, #4
 800473c:	f7ff ff94 	bl	8004668 <std>
 8004740:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004744:	2201      	movs	r2, #1
 8004746:	2109      	movs	r1, #9
 8004748:	f7ff ff8e 	bl	8004668 <std>
 800474c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004750:	2202      	movs	r2, #2
 8004752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004756:	2112      	movs	r1, #18
 8004758:	f7ff bf86 	b.w	8004668 <std>
 800475c:	20000778 	.word	0x20000778
 8004760:	20000640 	.word	0x20000640
 8004764:	080046d5 	.word	0x080046d5

08004768 <__sfp_lock_acquire>:
 8004768:	4801      	ldr	r0, [pc, #4]	@ (8004770 <__sfp_lock_acquire+0x8>)
 800476a:	f000 ba30 	b.w	8004bce <__retarget_lock_acquire_recursive>
 800476e:	bf00      	nop
 8004770:	20000781 	.word	0x20000781

08004774 <__sfp_lock_release>:
 8004774:	4801      	ldr	r0, [pc, #4]	@ (800477c <__sfp_lock_release+0x8>)
 8004776:	f000 ba2b 	b.w	8004bd0 <__retarget_lock_release_recursive>
 800477a:	bf00      	nop
 800477c:	20000781 	.word	0x20000781

08004780 <__sinit>:
 8004780:	b510      	push	{r4, lr}
 8004782:	4604      	mov	r4, r0
 8004784:	f7ff fff0 	bl	8004768 <__sfp_lock_acquire>
 8004788:	6a23      	ldr	r3, [r4, #32]
 800478a:	b11b      	cbz	r3, 8004794 <__sinit+0x14>
 800478c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004790:	f7ff bff0 	b.w	8004774 <__sfp_lock_release>
 8004794:	4b04      	ldr	r3, [pc, #16]	@ (80047a8 <__sinit+0x28>)
 8004796:	6223      	str	r3, [r4, #32]
 8004798:	4b04      	ldr	r3, [pc, #16]	@ (80047ac <__sinit+0x2c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f5      	bne.n	800478c <__sinit+0xc>
 80047a0:	f7ff ffc4 	bl	800472c <global_stdio_init.part.0>
 80047a4:	e7f2      	b.n	800478c <__sinit+0xc>
 80047a6:	bf00      	nop
 80047a8:	080046ed 	.word	0x080046ed
 80047ac:	20000778 	.word	0x20000778

080047b0 <_fwalk_sglue>:
 80047b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b4:	4607      	mov	r7, r0
 80047b6:	4688      	mov	r8, r1
 80047b8:	4614      	mov	r4, r2
 80047ba:	2600      	movs	r6, #0
 80047bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047c0:	f1b9 0901 	subs.w	r9, r9, #1
 80047c4:	d505      	bpl.n	80047d2 <_fwalk_sglue+0x22>
 80047c6:	6824      	ldr	r4, [r4, #0]
 80047c8:	2c00      	cmp	r4, #0
 80047ca:	d1f7      	bne.n	80047bc <_fwalk_sglue+0xc>
 80047cc:	4630      	mov	r0, r6
 80047ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d2:	89ab      	ldrh	r3, [r5, #12]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d907      	bls.n	80047e8 <_fwalk_sglue+0x38>
 80047d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047dc:	3301      	adds	r3, #1
 80047de:	d003      	beq.n	80047e8 <_fwalk_sglue+0x38>
 80047e0:	4629      	mov	r1, r5
 80047e2:	4638      	mov	r0, r7
 80047e4:	47c0      	blx	r8
 80047e6:	4306      	orrs	r6, r0
 80047e8:	3568      	adds	r5, #104	@ 0x68
 80047ea:	e7e9      	b.n	80047c0 <_fwalk_sglue+0x10>

080047ec <iprintf>:
 80047ec:	b40f      	push	{r0, r1, r2, r3}
 80047ee:	b507      	push	{r0, r1, r2, lr}
 80047f0:	4906      	ldr	r1, [pc, #24]	@ (800480c <iprintf+0x20>)
 80047f2:	ab04      	add	r3, sp, #16
 80047f4:	6808      	ldr	r0, [r1, #0]
 80047f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80047fa:	6881      	ldr	r1, [r0, #8]
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	f000 fbc3 	bl	8004f88 <_vfiprintf_r>
 8004802:	b003      	add	sp, #12
 8004804:	f85d eb04 	ldr.w	lr, [sp], #4
 8004808:	b004      	add	sp, #16
 800480a:	4770      	bx	lr
 800480c:	20000070 	.word	0x20000070

08004810 <_puts_r>:
 8004810:	6a03      	ldr	r3, [r0, #32]
 8004812:	b570      	push	{r4, r5, r6, lr}
 8004814:	6884      	ldr	r4, [r0, #8]
 8004816:	4605      	mov	r5, r0
 8004818:	460e      	mov	r6, r1
 800481a:	b90b      	cbnz	r3, 8004820 <_puts_r+0x10>
 800481c:	f7ff ffb0 	bl	8004780 <__sinit>
 8004820:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004822:	07db      	lsls	r3, r3, #31
 8004824:	d405      	bmi.n	8004832 <_puts_r+0x22>
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	0598      	lsls	r0, r3, #22
 800482a:	d402      	bmi.n	8004832 <_puts_r+0x22>
 800482c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800482e:	f000 f9ce 	bl	8004bce <__retarget_lock_acquire_recursive>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	0719      	lsls	r1, r3, #28
 8004836:	d502      	bpl.n	800483e <_puts_r+0x2e>
 8004838:	6923      	ldr	r3, [r4, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d135      	bne.n	80048aa <_puts_r+0x9a>
 800483e:	4621      	mov	r1, r4
 8004840:	4628      	mov	r0, r5
 8004842:	f000 f8e5 	bl	8004a10 <__swsetup_r>
 8004846:	b380      	cbz	r0, 80048aa <_puts_r+0x9a>
 8004848:	f04f 35ff 	mov.w	r5, #4294967295
 800484c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800484e:	07da      	lsls	r2, r3, #31
 8004850:	d405      	bmi.n	800485e <_puts_r+0x4e>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	059b      	lsls	r3, r3, #22
 8004856:	d402      	bmi.n	800485e <_puts_r+0x4e>
 8004858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800485a:	f000 f9b9 	bl	8004bd0 <__retarget_lock_release_recursive>
 800485e:	4628      	mov	r0, r5
 8004860:	bd70      	pop	{r4, r5, r6, pc}
 8004862:	2b00      	cmp	r3, #0
 8004864:	da04      	bge.n	8004870 <_puts_r+0x60>
 8004866:	69a2      	ldr	r2, [r4, #24]
 8004868:	429a      	cmp	r2, r3
 800486a:	dc17      	bgt.n	800489c <_puts_r+0x8c>
 800486c:	290a      	cmp	r1, #10
 800486e:	d015      	beq.n	800489c <_puts_r+0x8c>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	6022      	str	r2, [r4, #0]
 8004876:	7019      	strb	r1, [r3, #0]
 8004878:	68a3      	ldr	r3, [r4, #8]
 800487a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800487e:	3b01      	subs	r3, #1
 8004880:	60a3      	str	r3, [r4, #8]
 8004882:	2900      	cmp	r1, #0
 8004884:	d1ed      	bne.n	8004862 <_puts_r+0x52>
 8004886:	2b00      	cmp	r3, #0
 8004888:	da11      	bge.n	80048ae <_puts_r+0x9e>
 800488a:	4622      	mov	r2, r4
 800488c:	210a      	movs	r1, #10
 800488e:	4628      	mov	r0, r5
 8004890:	f000 f87f 	bl	8004992 <__swbuf_r>
 8004894:	3001      	adds	r0, #1
 8004896:	d0d7      	beq.n	8004848 <_puts_r+0x38>
 8004898:	250a      	movs	r5, #10
 800489a:	e7d7      	b.n	800484c <_puts_r+0x3c>
 800489c:	4622      	mov	r2, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 f877 	bl	8004992 <__swbuf_r>
 80048a4:	3001      	adds	r0, #1
 80048a6:	d1e7      	bne.n	8004878 <_puts_r+0x68>
 80048a8:	e7ce      	b.n	8004848 <_puts_r+0x38>
 80048aa:	3e01      	subs	r6, #1
 80048ac:	e7e4      	b.n	8004878 <_puts_r+0x68>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	6022      	str	r2, [r4, #0]
 80048b4:	220a      	movs	r2, #10
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	e7ee      	b.n	8004898 <_puts_r+0x88>
	...

080048bc <puts>:
 80048bc:	4b02      	ldr	r3, [pc, #8]	@ (80048c8 <puts+0xc>)
 80048be:	4601      	mov	r1, r0
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	f7ff bfa5 	b.w	8004810 <_puts_r>
 80048c6:	bf00      	nop
 80048c8:	20000070 	.word	0x20000070

080048cc <siprintf>:
 80048cc:	b40e      	push	{r1, r2, r3}
 80048ce:	b500      	push	{lr}
 80048d0:	b09c      	sub	sp, #112	@ 0x70
 80048d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80048d4:	9002      	str	r0, [sp, #8]
 80048d6:	9006      	str	r0, [sp, #24]
 80048d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048dc:	4809      	ldr	r0, [pc, #36]	@ (8004904 <siprintf+0x38>)
 80048de:	9107      	str	r1, [sp, #28]
 80048e0:	9104      	str	r1, [sp, #16]
 80048e2:	4909      	ldr	r1, [pc, #36]	@ (8004908 <siprintf+0x3c>)
 80048e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048e8:	9105      	str	r1, [sp, #20]
 80048ea:	6800      	ldr	r0, [r0, #0]
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	a902      	add	r1, sp, #8
 80048f0:	f000 fa24 	bl	8004d3c <_svfiprintf_r>
 80048f4:	9b02      	ldr	r3, [sp, #8]
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	b01c      	add	sp, #112	@ 0x70
 80048fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004900:	b003      	add	sp, #12
 8004902:	4770      	bx	lr
 8004904:	20000070 	.word	0x20000070
 8004908:	ffff0208 	.word	0xffff0208

0800490c <__sread>:
 800490c:	b510      	push	{r4, lr}
 800490e:	460c      	mov	r4, r1
 8004910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004914:	f000 f8fc 	bl	8004b10 <_read_r>
 8004918:	2800      	cmp	r0, #0
 800491a:	bfab      	itete	ge
 800491c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800491e:	89a3      	ldrhlt	r3, [r4, #12]
 8004920:	181b      	addge	r3, r3, r0
 8004922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004926:	bfac      	ite	ge
 8004928:	6563      	strge	r3, [r4, #84]	@ 0x54
 800492a:	81a3      	strhlt	r3, [r4, #12]
 800492c:	bd10      	pop	{r4, pc}

0800492e <__swrite>:
 800492e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004932:	461f      	mov	r7, r3
 8004934:	898b      	ldrh	r3, [r1, #12]
 8004936:	05db      	lsls	r3, r3, #23
 8004938:	4605      	mov	r5, r0
 800493a:	460c      	mov	r4, r1
 800493c:	4616      	mov	r6, r2
 800493e:	d505      	bpl.n	800494c <__swrite+0x1e>
 8004940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004944:	2302      	movs	r3, #2
 8004946:	2200      	movs	r2, #0
 8004948:	f000 f8d0 	bl	8004aec <_lseek_r>
 800494c:	89a3      	ldrh	r3, [r4, #12]
 800494e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004956:	81a3      	strh	r3, [r4, #12]
 8004958:	4632      	mov	r2, r6
 800495a:	463b      	mov	r3, r7
 800495c:	4628      	mov	r0, r5
 800495e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004962:	f000 b8f7 	b.w	8004b54 <_write_r>

08004966 <__sseek>:
 8004966:	b510      	push	{r4, lr}
 8004968:	460c      	mov	r4, r1
 800496a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800496e:	f000 f8bd 	bl	8004aec <_lseek_r>
 8004972:	1c43      	adds	r3, r0, #1
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	bf15      	itete	ne
 8004978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800497a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800497e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004982:	81a3      	strheq	r3, [r4, #12]
 8004984:	bf18      	it	ne
 8004986:	81a3      	strhne	r3, [r4, #12]
 8004988:	bd10      	pop	{r4, pc}

0800498a <__sclose>:
 800498a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800498e:	f000 b89d 	b.w	8004acc <_close_r>

08004992 <__swbuf_r>:
 8004992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004994:	460e      	mov	r6, r1
 8004996:	4614      	mov	r4, r2
 8004998:	4605      	mov	r5, r0
 800499a:	b118      	cbz	r0, 80049a4 <__swbuf_r+0x12>
 800499c:	6a03      	ldr	r3, [r0, #32]
 800499e:	b90b      	cbnz	r3, 80049a4 <__swbuf_r+0x12>
 80049a0:	f7ff feee 	bl	8004780 <__sinit>
 80049a4:	69a3      	ldr	r3, [r4, #24]
 80049a6:	60a3      	str	r3, [r4, #8]
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	071a      	lsls	r2, r3, #28
 80049ac:	d501      	bpl.n	80049b2 <__swbuf_r+0x20>
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	b943      	cbnz	r3, 80049c4 <__swbuf_r+0x32>
 80049b2:	4621      	mov	r1, r4
 80049b4:	4628      	mov	r0, r5
 80049b6:	f000 f82b 	bl	8004a10 <__swsetup_r>
 80049ba:	b118      	cbz	r0, 80049c4 <__swbuf_r+0x32>
 80049bc:	f04f 37ff 	mov.w	r7, #4294967295
 80049c0:	4638      	mov	r0, r7
 80049c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	6922      	ldr	r2, [r4, #16]
 80049c8:	1a98      	subs	r0, r3, r2
 80049ca:	6963      	ldr	r3, [r4, #20]
 80049cc:	b2f6      	uxtb	r6, r6
 80049ce:	4283      	cmp	r3, r0
 80049d0:	4637      	mov	r7, r6
 80049d2:	dc05      	bgt.n	80049e0 <__swbuf_r+0x4e>
 80049d4:	4621      	mov	r1, r4
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 fe00 	bl	80055dc <_fflush_r>
 80049dc:	2800      	cmp	r0, #0
 80049de:	d1ed      	bne.n	80049bc <__swbuf_r+0x2a>
 80049e0:	68a3      	ldr	r3, [r4, #8]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	6022      	str	r2, [r4, #0]
 80049ec:	701e      	strb	r6, [r3, #0]
 80049ee:	6962      	ldr	r2, [r4, #20]
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d004      	beq.n	8004a00 <__swbuf_r+0x6e>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	07db      	lsls	r3, r3, #31
 80049fa:	d5e1      	bpl.n	80049c0 <__swbuf_r+0x2e>
 80049fc:	2e0a      	cmp	r6, #10
 80049fe:	d1df      	bne.n	80049c0 <__swbuf_r+0x2e>
 8004a00:	4621      	mov	r1, r4
 8004a02:	4628      	mov	r0, r5
 8004a04:	f000 fdea 	bl	80055dc <_fflush_r>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d0d9      	beq.n	80049c0 <__swbuf_r+0x2e>
 8004a0c:	e7d6      	b.n	80049bc <__swbuf_r+0x2a>
	...

08004a10 <__swsetup_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4b29      	ldr	r3, [pc, #164]	@ (8004ab8 <__swsetup_r+0xa8>)
 8004a14:	4605      	mov	r5, r0
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	460c      	mov	r4, r1
 8004a1a:	b118      	cbz	r0, 8004a24 <__swsetup_r+0x14>
 8004a1c:	6a03      	ldr	r3, [r0, #32]
 8004a1e:	b90b      	cbnz	r3, 8004a24 <__swsetup_r+0x14>
 8004a20:	f7ff feae 	bl	8004780 <__sinit>
 8004a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a28:	0719      	lsls	r1, r3, #28
 8004a2a:	d422      	bmi.n	8004a72 <__swsetup_r+0x62>
 8004a2c:	06da      	lsls	r2, r3, #27
 8004a2e:	d407      	bmi.n	8004a40 <__swsetup_r+0x30>
 8004a30:	2209      	movs	r2, #9
 8004a32:	602a      	str	r2, [r5, #0]
 8004a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a38:	81a3      	strh	r3, [r4, #12]
 8004a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3e:	e033      	b.n	8004aa8 <__swsetup_r+0x98>
 8004a40:	0758      	lsls	r0, r3, #29
 8004a42:	d512      	bpl.n	8004a6a <__swsetup_r+0x5a>
 8004a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a46:	b141      	cbz	r1, 8004a5a <__swsetup_r+0x4a>
 8004a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a4c:	4299      	cmp	r1, r3
 8004a4e:	d002      	beq.n	8004a56 <__swsetup_r+0x46>
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 f8cd 	bl	8004bf0 <_free_r>
 8004a56:	2300      	movs	r3, #0
 8004a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a60:	81a3      	strh	r3, [r4, #12]
 8004a62:	2300      	movs	r3, #0
 8004a64:	6063      	str	r3, [r4, #4]
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	f043 0308 	orr.w	r3, r3, #8
 8004a70:	81a3      	strh	r3, [r4, #12]
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	b94b      	cbnz	r3, 8004a8a <__swsetup_r+0x7a>
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a80:	d003      	beq.n	8004a8a <__swsetup_r+0x7a>
 8004a82:	4621      	mov	r1, r4
 8004a84:	4628      	mov	r0, r5
 8004a86:	f000 fdf7 	bl	8005678 <__smakebuf_r>
 8004a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a8e:	f013 0201 	ands.w	r2, r3, #1
 8004a92:	d00a      	beq.n	8004aaa <__swsetup_r+0x9a>
 8004a94:	2200      	movs	r2, #0
 8004a96:	60a2      	str	r2, [r4, #8]
 8004a98:	6962      	ldr	r2, [r4, #20]
 8004a9a:	4252      	negs	r2, r2
 8004a9c:	61a2      	str	r2, [r4, #24]
 8004a9e:	6922      	ldr	r2, [r4, #16]
 8004aa0:	b942      	cbnz	r2, 8004ab4 <__swsetup_r+0xa4>
 8004aa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004aa6:	d1c5      	bne.n	8004a34 <__swsetup_r+0x24>
 8004aa8:	bd38      	pop	{r3, r4, r5, pc}
 8004aaa:	0799      	lsls	r1, r3, #30
 8004aac:	bf58      	it	pl
 8004aae:	6962      	ldrpl	r2, [r4, #20]
 8004ab0:	60a2      	str	r2, [r4, #8]
 8004ab2:	e7f4      	b.n	8004a9e <__swsetup_r+0x8e>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e7f7      	b.n	8004aa8 <__swsetup_r+0x98>
 8004ab8:	20000070 	.word	0x20000070

08004abc <memset>:
 8004abc:	4402      	add	r2, r0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <memset+0xa>
 8004ac4:	4770      	bx	lr
 8004ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aca:	e7f9      	b.n	8004ac0 <memset+0x4>

08004acc <_close_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d06      	ldr	r5, [pc, #24]	@ (8004ae8 <_close_r+0x1c>)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	602b      	str	r3, [r5, #0]
 8004ad8:	f7fc f99d 	bl	8000e16 <_close>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_close_r+0x1a>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_close_r+0x1a>
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	2000077c 	.word	0x2000077c

08004aec <_lseek_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	4d07      	ldr	r5, [pc, #28]	@ (8004b0c <_lseek_r+0x20>)
 8004af0:	4604      	mov	r4, r0
 8004af2:	4608      	mov	r0, r1
 8004af4:	4611      	mov	r1, r2
 8004af6:	2200      	movs	r2, #0
 8004af8:	602a      	str	r2, [r5, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f7fc f9b2 	bl	8000e64 <_lseek>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_lseek_r+0x1e>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_lseek_r+0x1e>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	2000077c 	.word	0x2000077c

08004b10 <_read_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4d07      	ldr	r5, [pc, #28]	@ (8004b30 <_read_r+0x20>)
 8004b14:	4604      	mov	r4, r0
 8004b16:	4608      	mov	r0, r1
 8004b18:	4611      	mov	r1, r2
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	602a      	str	r2, [r5, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f7fc f940 	bl	8000da4 <_read>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_read_r+0x1e>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_read_r+0x1e>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	2000077c 	.word	0x2000077c

08004b34 <_sbrk_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4d06      	ldr	r5, [pc, #24]	@ (8004b50 <_sbrk_r+0x1c>)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	602b      	str	r3, [r5, #0]
 8004b40:	f7fc f99e 	bl	8000e80 <_sbrk>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_sbrk_r+0x1a>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_sbrk_r+0x1a>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	2000077c 	.word	0x2000077c

08004b54 <_write_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4d07      	ldr	r5, [pc, #28]	@ (8004b74 <_write_r+0x20>)
 8004b58:	4604      	mov	r4, r0
 8004b5a:	4608      	mov	r0, r1
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	2200      	movs	r2, #0
 8004b60:	602a      	str	r2, [r5, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f7fc f93b 	bl	8000dde <_write>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_write_r+0x1e>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_write_r+0x1e>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	2000077c 	.word	0x2000077c

08004b78 <__errno>:
 8004b78:	4b01      	ldr	r3, [pc, #4]	@ (8004b80 <__errno+0x8>)
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000070 	.word	0x20000070

08004b84 <__libc_init_array>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	4d0d      	ldr	r5, [pc, #52]	@ (8004bbc <__libc_init_array+0x38>)
 8004b88:	4c0d      	ldr	r4, [pc, #52]	@ (8004bc0 <__libc_init_array+0x3c>)
 8004b8a:	1b64      	subs	r4, r4, r5
 8004b8c:	10a4      	asrs	r4, r4, #2
 8004b8e:	2600      	movs	r6, #0
 8004b90:	42a6      	cmp	r6, r4
 8004b92:	d109      	bne.n	8004ba8 <__libc_init_array+0x24>
 8004b94:	4d0b      	ldr	r5, [pc, #44]	@ (8004bc4 <__libc_init_array+0x40>)
 8004b96:	4c0c      	ldr	r4, [pc, #48]	@ (8004bc8 <__libc_init_array+0x44>)
 8004b98:	f000 fe1c 	bl	80057d4 <_init>
 8004b9c:	1b64      	subs	r4, r4, r5
 8004b9e:	10a4      	asrs	r4, r4, #2
 8004ba0:	2600      	movs	r6, #0
 8004ba2:	42a6      	cmp	r6, r4
 8004ba4:	d105      	bne.n	8004bb2 <__libc_init_array+0x2e>
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
 8004ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bac:	4798      	blx	r3
 8004bae:	3601      	adds	r6, #1
 8004bb0:	e7ee      	b.n	8004b90 <__libc_init_array+0xc>
 8004bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb6:	4798      	blx	r3
 8004bb8:	3601      	adds	r6, #1
 8004bba:	e7f2      	b.n	8004ba2 <__libc_init_array+0x1e>
 8004bbc:	080059f8 	.word	0x080059f8
 8004bc0:	080059f8 	.word	0x080059f8
 8004bc4:	080059f8 	.word	0x080059f8
 8004bc8:	080059fc 	.word	0x080059fc

08004bcc <__retarget_lock_init_recursive>:
 8004bcc:	4770      	bx	lr

08004bce <__retarget_lock_acquire_recursive>:
 8004bce:	4770      	bx	lr

08004bd0 <__retarget_lock_release_recursive>:
 8004bd0:	4770      	bx	lr

08004bd2 <memcpy>:
 8004bd2:	440a      	add	r2, r1
 8004bd4:	4291      	cmp	r1, r2
 8004bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bda:	d100      	bne.n	8004bde <memcpy+0xc>
 8004bdc:	4770      	bx	lr
 8004bde:	b510      	push	{r4, lr}
 8004be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004be8:	4291      	cmp	r1, r2
 8004bea:	d1f9      	bne.n	8004be0 <memcpy+0xe>
 8004bec:	bd10      	pop	{r4, pc}
	...

08004bf0 <_free_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4605      	mov	r5, r0
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	d041      	beq.n	8004c7c <_free_r+0x8c>
 8004bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bfc:	1f0c      	subs	r4, r1, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bfb8      	it	lt
 8004c02:	18e4      	addlt	r4, r4, r3
 8004c04:	f7ff fd24 	bl	8004650 <__malloc_lock>
 8004c08:	4a1d      	ldr	r2, [pc, #116]	@ (8004c80 <_free_r+0x90>)
 8004c0a:	6813      	ldr	r3, [r2, #0]
 8004c0c:	b933      	cbnz	r3, 8004c1c <_free_r+0x2c>
 8004c0e:	6063      	str	r3, [r4, #4]
 8004c10:	6014      	str	r4, [r2, #0]
 8004c12:	4628      	mov	r0, r5
 8004c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c18:	f7ff bd20 	b.w	800465c <__malloc_unlock>
 8004c1c:	42a3      	cmp	r3, r4
 8004c1e:	d908      	bls.n	8004c32 <_free_r+0x42>
 8004c20:	6820      	ldr	r0, [r4, #0]
 8004c22:	1821      	adds	r1, r4, r0
 8004c24:	428b      	cmp	r3, r1
 8004c26:	bf01      	itttt	eq
 8004c28:	6819      	ldreq	r1, [r3, #0]
 8004c2a:	685b      	ldreq	r3, [r3, #4]
 8004c2c:	1809      	addeq	r1, r1, r0
 8004c2e:	6021      	streq	r1, [r4, #0]
 8004c30:	e7ed      	b.n	8004c0e <_free_r+0x1e>
 8004c32:	461a      	mov	r2, r3
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	b10b      	cbz	r3, 8004c3c <_free_r+0x4c>
 8004c38:	42a3      	cmp	r3, r4
 8004c3a:	d9fa      	bls.n	8004c32 <_free_r+0x42>
 8004c3c:	6811      	ldr	r1, [r2, #0]
 8004c3e:	1850      	adds	r0, r2, r1
 8004c40:	42a0      	cmp	r0, r4
 8004c42:	d10b      	bne.n	8004c5c <_free_r+0x6c>
 8004c44:	6820      	ldr	r0, [r4, #0]
 8004c46:	4401      	add	r1, r0
 8004c48:	1850      	adds	r0, r2, r1
 8004c4a:	4283      	cmp	r3, r0
 8004c4c:	6011      	str	r1, [r2, #0]
 8004c4e:	d1e0      	bne.n	8004c12 <_free_r+0x22>
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	6053      	str	r3, [r2, #4]
 8004c56:	4408      	add	r0, r1
 8004c58:	6010      	str	r0, [r2, #0]
 8004c5a:	e7da      	b.n	8004c12 <_free_r+0x22>
 8004c5c:	d902      	bls.n	8004c64 <_free_r+0x74>
 8004c5e:	230c      	movs	r3, #12
 8004c60:	602b      	str	r3, [r5, #0]
 8004c62:	e7d6      	b.n	8004c12 <_free_r+0x22>
 8004c64:	6820      	ldr	r0, [r4, #0]
 8004c66:	1821      	adds	r1, r4, r0
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	bf04      	itt	eq
 8004c6c:	6819      	ldreq	r1, [r3, #0]
 8004c6e:	685b      	ldreq	r3, [r3, #4]
 8004c70:	6063      	str	r3, [r4, #4]
 8004c72:	bf04      	itt	eq
 8004c74:	1809      	addeq	r1, r1, r0
 8004c76:	6021      	streq	r1, [r4, #0]
 8004c78:	6054      	str	r4, [r2, #4]
 8004c7a:	e7ca      	b.n	8004c12 <_free_r+0x22>
 8004c7c:	bd38      	pop	{r3, r4, r5, pc}
 8004c7e:	bf00      	nop
 8004c80:	2000063c 	.word	0x2000063c

08004c84 <__ssputs_r>:
 8004c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	688e      	ldr	r6, [r1, #8]
 8004c8a:	461f      	mov	r7, r3
 8004c8c:	42be      	cmp	r6, r7
 8004c8e:	680b      	ldr	r3, [r1, #0]
 8004c90:	4682      	mov	sl, r0
 8004c92:	460c      	mov	r4, r1
 8004c94:	4690      	mov	r8, r2
 8004c96:	d82d      	bhi.n	8004cf4 <__ssputs_r+0x70>
 8004c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ca0:	d026      	beq.n	8004cf0 <__ssputs_r+0x6c>
 8004ca2:	6965      	ldr	r5, [r4, #20]
 8004ca4:	6909      	ldr	r1, [r1, #16]
 8004ca6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004caa:	eba3 0901 	sub.w	r9, r3, r1
 8004cae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cb2:	1c7b      	adds	r3, r7, #1
 8004cb4:	444b      	add	r3, r9
 8004cb6:	106d      	asrs	r5, r5, #1
 8004cb8:	429d      	cmp	r5, r3
 8004cba:	bf38      	it	cc
 8004cbc:	461d      	movcc	r5, r3
 8004cbe:	0553      	lsls	r3, r2, #21
 8004cc0:	d527      	bpl.n	8004d12 <__ssputs_r+0x8e>
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	f7ff fc44 	bl	8004550 <_malloc_r>
 8004cc8:	4606      	mov	r6, r0
 8004cca:	b360      	cbz	r0, 8004d26 <__ssputs_r+0xa2>
 8004ccc:	6921      	ldr	r1, [r4, #16]
 8004cce:	464a      	mov	r2, r9
 8004cd0:	f7ff ff7f 	bl	8004bd2 <memcpy>
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cde:	81a3      	strh	r3, [r4, #12]
 8004ce0:	6126      	str	r6, [r4, #16]
 8004ce2:	6165      	str	r5, [r4, #20]
 8004ce4:	444e      	add	r6, r9
 8004ce6:	eba5 0509 	sub.w	r5, r5, r9
 8004cea:	6026      	str	r6, [r4, #0]
 8004cec:	60a5      	str	r5, [r4, #8]
 8004cee:	463e      	mov	r6, r7
 8004cf0:	42be      	cmp	r6, r7
 8004cf2:	d900      	bls.n	8004cf6 <__ssputs_r+0x72>
 8004cf4:	463e      	mov	r6, r7
 8004cf6:	6820      	ldr	r0, [r4, #0]
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	f000 fcf8 	bl	80056f0 <memmove>
 8004d00:	68a3      	ldr	r3, [r4, #8]
 8004d02:	1b9b      	subs	r3, r3, r6
 8004d04:	60a3      	str	r3, [r4, #8]
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	4433      	add	r3, r6
 8004d0a:	6023      	str	r3, [r4, #0]
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d12:	462a      	mov	r2, r5
 8004d14:	f000 fd28 	bl	8005768 <_realloc_r>
 8004d18:	4606      	mov	r6, r0
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d1e0      	bne.n	8004ce0 <__ssputs_r+0x5c>
 8004d1e:	6921      	ldr	r1, [r4, #16]
 8004d20:	4650      	mov	r0, sl
 8004d22:	f7ff ff65 	bl	8004bf0 <_free_r>
 8004d26:	230c      	movs	r3, #12
 8004d28:	f8ca 3000 	str.w	r3, [sl]
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d32:	81a3      	strh	r3, [r4, #12]
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295
 8004d38:	e7e9      	b.n	8004d0e <__ssputs_r+0x8a>
	...

08004d3c <_svfiprintf_r>:
 8004d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d40:	4698      	mov	r8, r3
 8004d42:	898b      	ldrh	r3, [r1, #12]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	b09d      	sub	sp, #116	@ 0x74
 8004d48:	4607      	mov	r7, r0
 8004d4a:	460d      	mov	r5, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	d510      	bpl.n	8004d72 <_svfiprintf_r+0x36>
 8004d50:	690b      	ldr	r3, [r1, #16]
 8004d52:	b973      	cbnz	r3, 8004d72 <_svfiprintf_r+0x36>
 8004d54:	2140      	movs	r1, #64	@ 0x40
 8004d56:	f7ff fbfb 	bl	8004550 <_malloc_r>
 8004d5a:	6028      	str	r0, [r5, #0]
 8004d5c:	6128      	str	r0, [r5, #16]
 8004d5e:	b930      	cbnz	r0, 8004d6e <_svfiprintf_r+0x32>
 8004d60:	230c      	movs	r3, #12
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	b01d      	add	sp, #116	@ 0x74
 8004d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d6e:	2340      	movs	r3, #64	@ 0x40
 8004d70:	616b      	str	r3, [r5, #20]
 8004d72:	2300      	movs	r3, #0
 8004d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d76:	2320      	movs	r3, #32
 8004d78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d80:	2330      	movs	r3, #48	@ 0x30
 8004d82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f20 <_svfiprintf_r+0x1e4>
 8004d86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d8a:	f04f 0901 	mov.w	r9, #1
 8004d8e:	4623      	mov	r3, r4
 8004d90:	469a      	mov	sl, r3
 8004d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d96:	b10a      	cbz	r2, 8004d9c <_svfiprintf_r+0x60>
 8004d98:	2a25      	cmp	r2, #37	@ 0x25
 8004d9a:	d1f9      	bne.n	8004d90 <_svfiprintf_r+0x54>
 8004d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8004da0:	d00b      	beq.n	8004dba <_svfiprintf_r+0x7e>
 8004da2:	465b      	mov	r3, fp
 8004da4:	4622      	mov	r2, r4
 8004da6:	4629      	mov	r1, r5
 8004da8:	4638      	mov	r0, r7
 8004daa:	f7ff ff6b 	bl	8004c84 <__ssputs_r>
 8004dae:	3001      	adds	r0, #1
 8004db0:	f000 80a7 	beq.w	8004f02 <_svfiprintf_r+0x1c6>
 8004db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004db6:	445a      	add	r2, fp
 8004db8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dba:	f89a 3000 	ldrb.w	r3, [sl]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 809f 	beq.w	8004f02 <_svfiprintf_r+0x1c6>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dce:	f10a 0a01 	add.w	sl, sl, #1
 8004dd2:	9304      	str	r3, [sp, #16]
 8004dd4:	9307      	str	r3, [sp, #28]
 8004dd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dda:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ddc:	4654      	mov	r4, sl
 8004dde:	2205      	movs	r2, #5
 8004de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de4:	484e      	ldr	r0, [pc, #312]	@ (8004f20 <_svfiprintf_r+0x1e4>)
 8004de6:	f7fb f9fb 	bl	80001e0 <memchr>
 8004dea:	9a04      	ldr	r2, [sp, #16]
 8004dec:	b9d8      	cbnz	r0, 8004e26 <_svfiprintf_r+0xea>
 8004dee:	06d0      	lsls	r0, r2, #27
 8004df0:	bf44      	itt	mi
 8004df2:	2320      	movmi	r3, #32
 8004df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004df8:	0711      	lsls	r1, r2, #28
 8004dfa:	bf44      	itt	mi
 8004dfc:	232b      	movmi	r3, #43	@ 0x2b
 8004dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e02:	f89a 3000 	ldrb.w	r3, [sl]
 8004e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e08:	d015      	beq.n	8004e36 <_svfiprintf_r+0xfa>
 8004e0a:	9a07      	ldr	r2, [sp, #28]
 8004e0c:	4654      	mov	r4, sl
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f04f 0c0a 	mov.w	ip, #10
 8004e14:	4621      	mov	r1, r4
 8004e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e1a:	3b30      	subs	r3, #48	@ 0x30
 8004e1c:	2b09      	cmp	r3, #9
 8004e1e:	d94b      	bls.n	8004eb8 <_svfiprintf_r+0x17c>
 8004e20:	b1b0      	cbz	r0, 8004e50 <_svfiprintf_r+0x114>
 8004e22:	9207      	str	r2, [sp, #28]
 8004e24:	e014      	b.n	8004e50 <_svfiprintf_r+0x114>
 8004e26:	eba0 0308 	sub.w	r3, r0, r8
 8004e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	9304      	str	r3, [sp, #16]
 8004e32:	46a2      	mov	sl, r4
 8004e34:	e7d2      	b.n	8004ddc <_svfiprintf_r+0xa0>
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	1d19      	adds	r1, r3, #4
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	9103      	str	r1, [sp, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bfbb      	ittet	lt
 8004e42:	425b      	neglt	r3, r3
 8004e44:	f042 0202 	orrlt.w	r2, r2, #2
 8004e48:	9307      	strge	r3, [sp, #28]
 8004e4a:	9307      	strlt	r3, [sp, #28]
 8004e4c:	bfb8      	it	lt
 8004e4e:	9204      	strlt	r2, [sp, #16]
 8004e50:	7823      	ldrb	r3, [r4, #0]
 8004e52:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e54:	d10a      	bne.n	8004e6c <_svfiprintf_r+0x130>
 8004e56:	7863      	ldrb	r3, [r4, #1]
 8004e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e5a:	d132      	bne.n	8004ec2 <_svfiprintf_r+0x186>
 8004e5c:	9b03      	ldr	r3, [sp, #12]
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	9203      	str	r2, [sp, #12]
 8004e64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e68:	3402      	adds	r4, #2
 8004e6a:	9305      	str	r3, [sp, #20]
 8004e6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f30 <_svfiprintf_r+0x1f4>
 8004e70:	7821      	ldrb	r1, [r4, #0]
 8004e72:	2203      	movs	r2, #3
 8004e74:	4650      	mov	r0, sl
 8004e76:	f7fb f9b3 	bl	80001e0 <memchr>
 8004e7a:	b138      	cbz	r0, 8004e8c <_svfiprintf_r+0x150>
 8004e7c:	9b04      	ldr	r3, [sp, #16]
 8004e7e:	eba0 000a 	sub.w	r0, r0, sl
 8004e82:	2240      	movs	r2, #64	@ 0x40
 8004e84:	4082      	lsls	r2, r0
 8004e86:	4313      	orrs	r3, r2
 8004e88:	3401      	adds	r4, #1
 8004e8a:	9304      	str	r3, [sp, #16]
 8004e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e90:	4824      	ldr	r0, [pc, #144]	@ (8004f24 <_svfiprintf_r+0x1e8>)
 8004e92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e96:	2206      	movs	r2, #6
 8004e98:	f7fb f9a2 	bl	80001e0 <memchr>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d036      	beq.n	8004f0e <_svfiprintf_r+0x1d2>
 8004ea0:	4b21      	ldr	r3, [pc, #132]	@ (8004f28 <_svfiprintf_r+0x1ec>)
 8004ea2:	bb1b      	cbnz	r3, 8004eec <_svfiprintf_r+0x1b0>
 8004ea4:	9b03      	ldr	r3, [sp, #12]
 8004ea6:	3307      	adds	r3, #7
 8004ea8:	f023 0307 	bic.w	r3, r3, #7
 8004eac:	3308      	adds	r3, #8
 8004eae:	9303      	str	r3, [sp, #12]
 8004eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb2:	4433      	add	r3, r6
 8004eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eb6:	e76a      	b.n	8004d8e <_svfiprintf_r+0x52>
 8004eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	e7a8      	b.n	8004e14 <_svfiprintf_r+0xd8>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	3401      	adds	r4, #1
 8004ec6:	9305      	str	r3, [sp, #20]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f04f 0c0a 	mov.w	ip, #10
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ed4:	3a30      	subs	r2, #48	@ 0x30
 8004ed6:	2a09      	cmp	r2, #9
 8004ed8:	d903      	bls.n	8004ee2 <_svfiprintf_r+0x1a6>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0c6      	beq.n	8004e6c <_svfiprintf_r+0x130>
 8004ede:	9105      	str	r1, [sp, #20]
 8004ee0:	e7c4      	b.n	8004e6c <_svfiprintf_r+0x130>
 8004ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e7f0      	b.n	8004ece <_svfiprintf_r+0x192>
 8004eec:	ab03      	add	r3, sp, #12
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	462a      	mov	r2, r5
 8004ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f2c <_svfiprintf_r+0x1f0>)
 8004ef4:	a904      	add	r1, sp, #16
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f3af 8000 	nop.w
 8004efc:	1c42      	adds	r2, r0, #1
 8004efe:	4606      	mov	r6, r0
 8004f00:	d1d6      	bne.n	8004eb0 <_svfiprintf_r+0x174>
 8004f02:	89ab      	ldrh	r3, [r5, #12]
 8004f04:	065b      	lsls	r3, r3, #25
 8004f06:	f53f af2d 	bmi.w	8004d64 <_svfiprintf_r+0x28>
 8004f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f0c:	e72c      	b.n	8004d68 <_svfiprintf_r+0x2c>
 8004f0e:	ab03      	add	r3, sp, #12
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	462a      	mov	r2, r5
 8004f14:	4b05      	ldr	r3, [pc, #20]	@ (8004f2c <_svfiprintf_r+0x1f0>)
 8004f16:	a904      	add	r1, sp, #16
 8004f18:	4638      	mov	r0, r7
 8004f1a:	f000 f9bb 	bl	8005294 <_printf_i>
 8004f1e:	e7ed      	b.n	8004efc <_svfiprintf_r+0x1c0>
 8004f20:	080059ba 	.word	0x080059ba
 8004f24:	080059c4 	.word	0x080059c4
 8004f28:	00000000 	.word	0x00000000
 8004f2c:	08004c85 	.word	0x08004c85
 8004f30:	080059c0 	.word	0x080059c0

08004f34 <__sfputc_r>:
 8004f34:	6893      	ldr	r3, [r2, #8]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	b410      	push	{r4}
 8004f3c:	6093      	str	r3, [r2, #8]
 8004f3e:	da08      	bge.n	8004f52 <__sfputc_r+0x1e>
 8004f40:	6994      	ldr	r4, [r2, #24]
 8004f42:	42a3      	cmp	r3, r4
 8004f44:	db01      	blt.n	8004f4a <__sfputc_r+0x16>
 8004f46:	290a      	cmp	r1, #10
 8004f48:	d103      	bne.n	8004f52 <__sfputc_r+0x1e>
 8004f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f4e:	f7ff bd20 	b.w	8004992 <__swbuf_r>
 8004f52:	6813      	ldr	r3, [r2, #0]
 8004f54:	1c58      	adds	r0, r3, #1
 8004f56:	6010      	str	r0, [r2, #0]
 8004f58:	7019      	strb	r1, [r3, #0]
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <__sfputs_r>:
 8004f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f64:	4606      	mov	r6, r0
 8004f66:	460f      	mov	r7, r1
 8004f68:	4614      	mov	r4, r2
 8004f6a:	18d5      	adds	r5, r2, r3
 8004f6c:	42ac      	cmp	r4, r5
 8004f6e:	d101      	bne.n	8004f74 <__sfputs_r+0x12>
 8004f70:	2000      	movs	r0, #0
 8004f72:	e007      	b.n	8004f84 <__sfputs_r+0x22>
 8004f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f78:	463a      	mov	r2, r7
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f7ff ffda 	bl	8004f34 <__sfputc_r>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d1f3      	bne.n	8004f6c <__sfputs_r+0xa>
 8004f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f88 <_vfiprintf_r>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	460d      	mov	r5, r1
 8004f8e:	b09d      	sub	sp, #116	@ 0x74
 8004f90:	4614      	mov	r4, r2
 8004f92:	4698      	mov	r8, r3
 8004f94:	4606      	mov	r6, r0
 8004f96:	b118      	cbz	r0, 8004fa0 <_vfiprintf_r+0x18>
 8004f98:	6a03      	ldr	r3, [r0, #32]
 8004f9a:	b90b      	cbnz	r3, 8004fa0 <_vfiprintf_r+0x18>
 8004f9c:	f7ff fbf0 	bl	8004780 <__sinit>
 8004fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fa2:	07d9      	lsls	r1, r3, #31
 8004fa4:	d405      	bmi.n	8004fb2 <_vfiprintf_r+0x2a>
 8004fa6:	89ab      	ldrh	r3, [r5, #12]
 8004fa8:	059a      	lsls	r2, r3, #22
 8004faa:	d402      	bmi.n	8004fb2 <_vfiprintf_r+0x2a>
 8004fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fae:	f7ff fe0e 	bl	8004bce <__retarget_lock_acquire_recursive>
 8004fb2:	89ab      	ldrh	r3, [r5, #12]
 8004fb4:	071b      	lsls	r3, r3, #28
 8004fb6:	d501      	bpl.n	8004fbc <_vfiprintf_r+0x34>
 8004fb8:	692b      	ldr	r3, [r5, #16]
 8004fba:	b99b      	cbnz	r3, 8004fe4 <_vfiprintf_r+0x5c>
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	f7ff fd26 	bl	8004a10 <__swsetup_r>
 8004fc4:	b170      	cbz	r0, 8004fe4 <_vfiprintf_r+0x5c>
 8004fc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fc8:	07dc      	lsls	r4, r3, #31
 8004fca:	d504      	bpl.n	8004fd6 <_vfiprintf_r+0x4e>
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	b01d      	add	sp, #116	@ 0x74
 8004fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd6:	89ab      	ldrh	r3, [r5, #12]
 8004fd8:	0598      	lsls	r0, r3, #22
 8004fda:	d4f7      	bmi.n	8004fcc <_vfiprintf_r+0x44>
 8004fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fde:	f7ff fdf7 	bl	8004bd0 <__retarget_lock_release_recursive>
 8004fe2:	e7f3      	b.n	8004fcc <_vfiprintf_r+0x44>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe8:	2320      	movs	r3, #32
 8004fea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ff2:	2330      	movs	r3, #48	@ 0x30
 8004ff4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051a4 <_vfiprintf_r+0x21c>
 8004ff8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ffc:	f04f 0901 	mov.w	r9, #1
 8005000:	4623      	mov	r3, r4
 8005002:	469a      	mov	sl, r3
 8005004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005008:	b10a      	cbz	r2, 800500e <_vfiprintf_r+0x86>
 800500a:	2a25      	cmp	r2, #37	@ 0x25
 800500c:	d1f9      	bne.n	8005002 <_vfiprintf_r+0x7a>
 800500e:	ebba 0b04 	subs.w	fp, sl, r4
 8005012:	d00b      	beq.n	800502c <_vfiprintf_r+0xa4>
 8005014:	465b      	mov	r3, fp
 8005016:	4622      	mov	r2, r4
 8005018:	4629      	mov	r1, r5
 800501a:	4630      	mov	r0, r6
 800501c:	f7ff ffa1 	bl	8004f62 <__sfputs_r>
 8005020:	3001      	adds	r0, #1
 8005022:	f000 80a7 	beq.w	8005174 <_vfiprintf_r+0x1ec>
 8005026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005028:	445a      	add	r2, fp
 800502a:	9209      	str	r2, [sp, #36]	@ 0x24
 800502c:	f89a 3000 	ldrb.w	r3, [sl]
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 809f 	beq.w	8005174 <_vfiprintf_r+0x1ec>
 8005036:	2300      	movs	r3, #0
 8005038:	f04f 32ff 	mov.w	r2, #4294967295
 800503c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005040:	f10a 0a01 	add.w	sl, sl, #1
 8005044:	9304      	str	r3, [sp, #16]
 8005046:	9307      	str	r3, [sp, #28]
 8005048:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800504c:	931a      	str	r3, [sp, #104]	@ 0x68
 800504e:	4654      	mov	r4, sl
 8005050:	2205      	movs	r2, #5
 8005052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005056:	4853      	ldr	r0, [pc, #332]	@ (80051a4 <_vfiprintf_r+0x21c>)
 8005058:	f7fb f8c2 	bl	80001e0 <memchr>
 800505c:	9a04      	ldr	r2, [sp, #16]
 800505e:	b9d8      	cbnz	r0, 8005098 <_vfiprintf_r+0x110>
 8005060:	06d1      	lsls	r1, r2, #27
 8005062:	bf44      	itt	mi
 8005064:	2320      	movmi	r3, #32
 8005066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800506a:	0713      	lsls	r3, r2, #28
 800506c:	bf44      	itt	mi
 800506e:	232b      	movmi	r3, #43	@ 0x2b
 8005070:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005074:	f89a 3000 	ldrb.w	r3, [sl]
 8005078:	2b2a      	cmp	r3, #42	@ 0x2a
 800507a:	d015      	beq.n	80050a8 <_vfiprintf_r+0x120>
 800507c:	9a07      	ldr	r2, [sp, #28]
 800507e:	4654      	mov	r4, sl
 8005080:	2000      	movs	r0, #0
 8005082:	f04f 0c0a 	mov.w	ip, #10
 8005086:	4621      	mov	r1, r4
 8005088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800508c:	3b30      	subs	r3, #48	@ 0x30
 800508e:	2b09      	cmp	r3, #9
 8005090:	d94b      	bls.n	800512a <_vfiprintf_r+0x1a2>
 8005092:	b1b0      	cbz	r0, 80050c2 <_vfiprintf_r+0x13a>
 8005094:	9207      	str	r2, [sp, #28]
 8005096:	e014      	b.n	80050c2 <_vfiprintf_r+0x13a>
 8005098:	eba0 0308 	sub.w	r3, r0, r8
 800509c:	fa09 f303 	lsl.w	r3, r9, r3
 80050a0:	4313      	orrs	r3, r2
 80050a2:	9304      	str	r3, [sp, #16]
 80050a4:	46a2      	mov	sl, r4
 80050a6:	e7d2      	b.n	800504e <_vfiprintf_r+0xc6>
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	1d19      	adds	r1, r3, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	9103      	str	r1, [sp, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bfbb      	ittet	lt
 80050b4:	425b      	neglt	r3, r3
 80050b6:	f042 0202 	orrlt.w	r2, r2, #2
 80050ba:	9307      	strge	r3, [sp, #28]
 80050bc:	9307      	strlt	r3, [sp, #28]
 80050be:	bfb8      	it	lt
 80050c0:	9204      	strlt	r2, [sp, #16]
 80050c2:	7823      	ldrb	r3, [r4, #0]
 80050c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80050c6:	d10a      	bne.n	80050de <_vfiprintf_r+0x156>
 80050c8:	7863      	ldrb	r3, [r4, #1]
 80050ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80050cc:	d132      	bne.n	8005134 <_vfiprintf_r+0x1ac>
 80050ce:	9b03      	ldr	r3, [sp, #12]
 80050d0:	1d1a      	adds	r2, r3, #4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	9203      	str	r2, [sp, #12]
 80050d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050da:	3402      	adds	r4, #2
 80050dc:	9305      	str	r3, [sp, #20]
 80050de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051b4 <_vfiprintf_r+0x22c>
 80050e2:	7821      	ldrb	r1, [r4, #0]
 80050e4:	2203      	movs	r2, #3
 80050e6:	4650      	mov	r0, sl
 80050e8:	f7fb f87a 	bl	80001e0 <memchr>
 80050ec:	b138      	cbz	r0, 80050fe <_vfiprintf_r+0x176>
 80050ee:	9b04      	ldr	r3, [sp, #16]
 80050f0:	eba0 000a 	sub.w	r0, r0, sl
 80050f4:	2240      	movs	r2, #64	@ 0x40
 80050f6:	4082      	lsls	r2, r0
 80050f8:	4313      	orrs	r3, r2
 80050fa:	3401      	adds	r4, #1
 80050fc:	9304      	str	r3, [sp, #16]
 80050fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005102:	4829      	ldr	r0, [pc, #164]	@ (80051a8 <_vfiprintf_r+0x220>)
 8005104:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005108:	2206      	movs	r2, #6
 800510a:	f7fb f869 	bl	80001e0 <memchr>
 800510e:	2800      	cmp	r0, #0
 8005110:	d03f      	beq.n	8005192 <_vfiprintf_r+0x20a>
 8005112:	4b26      	ldr	r3, [pc, #152]	@ (80051ac <_vfiprintf_r+0x224>)
 8005114:	bb1b      	cbnz	r3, 800515e <_vfiprintf_r+0x1d6>
 8005116:	9b03      	ldr	r3, [sp, #12]
 8005118:	3307      	adds	r3, #7
 800511a:	f023 0307 	bic.w	r3, r3, #7
 800511e:	3308      	adds	r3, #8
 8005120:	9303      	str	r3, [sp, #12]
 8005122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005124:	443b      	add	r3, r7
 8005126:	9309      	str	r3, [sp, #36]	@ 0x24
 8005128:	e76a      	b.n	8005000 <_vfiprintf_r+0x78>
 800512a:	fb0c 3202 	mla	r2, ip, r2, r3
 800512e:	460c      	mov	r4, r1
 8005130:	2001      	movs	r0, #1
 8005132:	e7a8      	b.n	8005086 <_vfiprintf_r+0xfe>
 8005134:	2300      	movs	r3, #0
 8005136:	3401      	adds	r4, #1
 8005138:	9305      	str	r3, [sp, #20]
 800513a:	4619      	mov	r1, r3
 800513c:	f04f 0c0a 	mov.w	ip, #10
 8005140:	4620      	mov	r0, r4
 8005142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005146:	3a30      	subs	r2, #48	@ 0x30
 8005148:	2a09      	cmp	r2, #9
 800514a:	d903      	bls.n	8005154 <_vfiprintf_r+0x1cc>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0c6      	beq.n	80050de <_vfiprintf_r+0x156>
 8005150:	9105      	str	r1, [sp, #20]
 8005152:	e7c4      	b.n	80050de <_vfiprintf_r+0x156>
 8005154:	fb0c 2101 	mla	r1, ip, r1, r2
 8005158:	4604      	mov	r4, r0
 800515a:	2301      	movs	r3, #1
 800515c:	e7f0      	b.n	8005140 <_vfiprintf_r+0x1b8>
 800515e:	ab03      	add	r3, sp, #12
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	462a      	mov	r2, r5
 8005164:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <_vfiprintf_r+0x228>)
 8005166:	a904      	add	r1, sp, #16
 8005168:	4630      	mov	r0, r6
 800516a:	f3af 8000 	nop.w
 800516e:	4607      	mov	r7, r0
 8005170:	1c78      	adds	r0, r7, #1
 8005172:	d1d6      	bne.n	8005122 <_vfiprintf_r+0x19a>
 8005174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005176:	07d9      	lsls	r1, r3, #31
 8005178:	d405      	bmi.n	8005186 <_vfiprintf_r+0x1fe>
 800517a:	89ab      	ldrh	r3, [r5, #12]
 800517c:	059a      	lsls	r2, r3, #22
 800517e:	d402      	bmi.n	8005186 <_vfiprintf_r+0x1fe>
 8005180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005182:	f7ff fd25 	bl	8004bd0 <__retarget_lock_release_recursive>
 8005186:	89ab      	ldrh	r3, [r5, #12]
 8005188:	065b      	lsls	r3, r3, #25
 800518a:	f53f af1f 	bmi.w	8004fcc <_vfiprintf_r+0x44>
 800518e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005190:	e71e      	b.n	8004fd0 <_vfiprintf_r+0x48>
 8005192:	ab03      	add	r3, sp, #12
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	462a      	mov	r2, r5
 8005198:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <_vfiprintf_r+0x228>)
 800519a:	a904      	add	r1, sp, #16
 800519c:	4630      	mov	r0, r6
 800519e:	f000 f879 	bl	8005294 <_printf_i>
 80051a2:	e7e4      	b.n	800516e <_vfiprintf_r+0x1e6>
 80051a4:	080059ba 	.word	0x080059ba
 80051a8:	080059c4 	.word	0x080059c4
 80051ac:	00000000 	.word	0x00000000
 80051b0:	08004f63 	.word	0x08004f63
 80051b4:	080059c0 	.word	0x080059c0

080051b8 <_printf_common>:
 80051b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051bc:	4616      	mov	r6, r2
 80051be:	4698      	mov	r8, r3
 80051c0:	688a      	ldr	r2, [r1, #8]
 80051c2:	690b      	ldr	r3, [r1, #16]
 80051c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051c8:	4293      	cmp	r3, r2
 80051ca:	bfb8      	it	lt
 80051cc:	4613      	movlt	r3, r2
 80051ce:	6033      	str	r3, [r6, #0]
 80051d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051d4:	4607      	mov	r7, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	b10a      	cbz	r2, 80051de <_printf_common+0x26>
 80051da:	3301      	adds	r3, #1
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	0699      	lsls	r1, r3, #26
 80051e2:	bf42      	ittt	mi
 80051e4:	6833      	ldrmi	r3, [r6, #0]
 80051e6:	3302      	addmi	r3, #2
 80051e8:	6033      	strmi	r3, [r6, #0]
 80051ea:	6825      	ldr	r5, [r4, #0]
 80051ec:	f015 0506 	ands.w	r5, r5, #6
 80051f0:	d106      	bne.n	8005200 <_printf_common+0x48>
 80051f2:	f104 0a19 	add.w	sl, r4, #25
 80051f6:	68e3      	ldr	r3, [r4, #12]
 80051f8:	6832      	ldr	r2, [r6, #0]
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	42ab      	cmp	r3, r5
 80051fe:	dc26      	bgt.n	800524e <_printf_common+0x96>
 8005200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	3b00      	subs	r3, #0
 8005208:	bf18      	it	ne
 800520a:	2301      	movne	r3, #1
 800520c:	0692      	lsls	r2, r2, #26
 800520e:	d42b      	bmi.n	8005268 <_printf_common+0xb0>
 8005210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005214:	4641      	mov	r1, r8
 8005216:	4638      	mov	r0, r7
 8005218:	47c8      	blx	r9
 800521a:	3001      	adds	r0, #1
 800521c:	d01e      	beq.n	800525c <_printf_common+0xa4>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	6922      	ldr	r2, [r4, #16]
 8005222:	f003 0306 	and.w	r3, r3, #6
 8005226:	2b04      	cmp	r3, #4
 8005228:	bf02      	ittt	eq
 800522a:	68e5      	ldreq	r5, [r4, #12]
 800522c:	6833      	ldreq	r3, [r6, #0]
 800522e:	1aed      	subeq	r5, r5, r3
 8005230:	68a3      	ldr	r3, [r4, #8]
 8005232:	bf0c      	ite	eq
 8005234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005238:	2500      	movne	r5, #0
 800523a:	4293      	cmp	r3, r2
 800523c:	bfc4      	itt	gt
 800523e:	1a9b      	subgt	r3, r3, r2
 8005240:	18ed      	addgt	r5, r5, r3
 8005242:	2600      	movs	r6, #0
 8005244:	341a      	adds	r4, #26
 8005246:	42b5      	cmp	r5, r6
 8005248:	d11a      	bne.n	8005280 <_printf_common+0xc8>
 800524a:	2000      	movs	r0, #0
 800524c:	e008      	b.n	8005260 <_printf_common+0xa8>
 800524e:	2301      	movs	r3, #1
 8005250:	4652      	mov	r2, sl
 8005252:	4641      	mov	r1, r8
 8005254:	4638      	mov	r0, r7
 8005256:	47c8      	blx	r9
 8005258:	3001      	adds	r0, #1
 800525a:	d103      	bne.n	8005264 <_printf_common+0xac>
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005264:	3501      	adds	r5, #1
 8005266:	e7c6      	b.n	80051f6 <_printf_common+0x3e>
 8005268:	18e1      	adds	r1, r4, r3
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	2030      	movs	r0, #48	@ 0x30
 800526e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005272:	4422      	add	r2, r4
 8005274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800527c:	3302      	adds	r3, #2
 800527e:	e7c7      	b.n	8005210 <_printf_common+0x58>
 8005280:	2301      	movs	r3, #1
 8005282:	4622      	mov	r2, r4
 8005284:	4641      	mov	r1, r8
 8005286:	4638      	mov	r0, r7
 8005288:	47c8      	blx	r9
 800528a:	3001      	adds	r0, #1
 800528c:	d0e6      	beq.n	800525c <_printf_common+0xa4>
 800528e:	3601      	adds	r6, #1
 8005290:	e7d9      	b.n	8005246 <_printf_common+0x8e>
	...

08005294 <_printf_i>:
 8005294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	7e0f      	ldrb	r7, [r1, #24]
 800529a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800529c:	2f78      	cmp	r7, #120	@ 0x78
 800529e:	4691      	mov	r9, r2
 80052a0:	4680      	mov	r8, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	469a      	mov	sl, r3
 80052a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052aa:	d807      	bhi.n	80052bc <_printf_i+0x28>
 80052ac:	2f62      	cmp	r7, #98	@ 0x62
 80052ae:	d80a      	bhi.n	80052c6 <_printf_i+0x32>
 80052b0:	2f00      	cmp	r7, #0
 80052b2:	f000 80d2 	beq.w	800545a <_printf_i+0x1c6>
 80052b6:	2f58      	cmp	r7, #88	@ 0x58
 80052b8:	f000 80b9 	beq.w	800542e <_printf_i+0x19a>
 80052bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052c4:	e03a      	b.n	800533c <_printf_i+0xa8>
 80052c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052ca:	2b15      	cmp	r3, #21
 80052cc:	d8f6      	bhi.n	80052bc <_printf_i+0x28>
 80052ce:	a101      	add	r1, pc, #4	@ (adr r1, 80052d4 <_printf_i+0x40>)
 80052d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052d4:	0800532d 	.word	0x0800532d
 80052d8:	08005341 	.word	0x08005341
 80052dc:	080052bd 	.word	0x080052bd
 80052e0:	080052bd 	.word	0x080052bd
 80052e4:	080052bd 	.word	0x080052bd
 80052e8:	080052bd 	.word	0x080052bd
 80052ec:	08005341 	.word	0x08005341
 80052f0:	080052bd 	.word	0x080052bd
 80052f4:	080052bd 	.word	0x080052bd
 80052f8:	080052bd 	.word	0x080052bd
 80052fc:	080052bd 	.word	0x080052bd
 8005300:	08005441 	.word	0x08005441
 8005304:	0800536b 	.word	0x0800536b
 8005308:	080053fb 	.word	0x080053fb
 800530c:	080052bd 	.word	0x080052bd
 8005310:	080052bd 	.word	0x080052bd
 8005314:	08005463 	.word	0x08005463
 8005318:	080052bd 	.word	0x080052bd
 800531c:	0800536b 	.word	0x0800536b
 8005320:	080052bd 	.word	0x080052bd
 8005324:	080052bd 	.word	0x080052bd
 8005328:	08005403 	.word	0x08005403
 800532c:	6833      	ldr	r3, [r6, #0]
 800532e:	1d1a      	adds	r2, r3, #4
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6032      	str	r2, [r6, #0]
 8005334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800533c:	2301      	movs	r3, #1
 800533e:	e09d      	b.n	800547c <_printf_i+0x1e8>
 8005340:	6833      	ldr	r3, [r6, #0]
 8005342:	6820      	ldr	r0, [r4, #0]
 8005344:	1d19      	adds	r1, r3, #4
 8005346:	6031      	str	r1, [r6, #0]
 8005348:	0606      	lsls	r6, r0, #24
 800534a:	d501      	bpl.n	8005350 <_printf_i+0xbc>
 800534c:	681d      	ldr	r5, [r3, #0]
 800534e:	e003      	b.n	8005358 <_printf_i+0xc4>
 8005350:	0645      	lsls	r5, r0, #25
 8005352:	d5fb      	bpl.n	800534c <_printf_i+0xb8>
 8005354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005358:	2d00      	cmp	r5, #0
 800535a:	da03      	bge.n	8005364 <_printf_i+0xd0>
 800535c:	232d      	movs	r3, #45	@ 0x2d
 800535e:	426d      	negs	r5, r5
 8005360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005364:	4859      	ldr	r0, [pc, #356]	@ (80054cc <_printf_i+0x238>)
 8005366:	230a      	movs	r3, #10
 8005368:	e011      	b.n	800538e <_printf_i+0xfa>
 800536a:	6821      	ldr	r1, [r4, #0]
 800536c:	6833      	ldr	r3, [r6, #0]
 800536e:	0608      	lsls	r0, r1, #24
 8005370:	f853 5b04 	ldr.w	r5, [r3], #4
 8005374:	d402      	bmi.n	800537c <_printf_i+0xe8>
 8005376:	0649      	lsls	r1, r1, #25
 8005378:	bf48      	it	mi
 800537a:	b2ad      	uxthmi	r5, r5
 800537c:	2f6f      	cmp	r7, #111	@ 0x6f
 800537e:	4853      	ldr	r0, [pc, #332]	@ (80054cc <_printf_i+0x238>)
 8005380:	6033      	str	r3, [r6, #0]
 8005382:	bf14      	ite	ne
 8005384:	230a      	movne	r3, #10
 8005386:	2308      	moveq	r3, #8
 8005388:	2100      	movs	r1, #0
 800538a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800538e:	6866      	ldr	r6, [r4, #4]
 8005390:	60a6      	str	r6, [r4, #8]
 8005392:	2e00      	cmp	r6, #0
 8005394:	bfa2      	ittt	ge
 8005396:	6821      	ldrge	r1, [r4, #0]
 8005398:	f021 0104 	bicge.w	r1, r1, #4
 800539c:	6021      	strge	r1, [r4, #0]
 800539e:	b90d      	cbnz	r5, 80053a4 <_printf_i+0x110>
 80053a0:	2e00      	cmp	r6, #0
 80053a2:	d04b      	beq.n	800543c <_printf_i+0x1a8>
 80053a4:	4616      	mov	r6, r2
 80053a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80053aa:	fb03 5711 	mls	r7, r3, r1, r5
 80053ae:	5dc7      	ldrb	r7, [r0, r7]
 80053b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053b4:	462f      	mov	r7, r5
 80053b6:	42bb      	cmp	r3, r7
 80053b8:	460d      	mov	r5, r1
 80053ba:	d9f4      	bls.n	80053a6 <_printf_i+0x112>
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d10b      	bne.n	80053d8 <_printf_i+0x144>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	07df      	lsls	r7, r3, #31
 80053c4:	d508      	bpl.n	80053d8 <_printf_i+0x144>
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	6861      	ldr	r1, [r4, #4]
 80053ca:	4299      	cmp	r1, r3
 80053cc:	bfde      	ittt	le
 80053ce:	2330      	movle	r3, #48	@ 0x30
 80053d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053d8:	1b92      	subs	r2, r2, r6
 80053da:	6122      	str	r2, [r4, #16]
 80053dc:	f8cd a000 	str.w	sl, [sp]
 80053e0:	464b      	mov	r3, r9
 80053e2:	aa03      	add	r2, sp, #12
 80053e4:	4621      	mov	r1, r4
 80053e6:	4640      	mov	r0, r8
 80053e8:	f7ff fee6 	bl	80051b8 <_printf_common>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d14a      	bne.n	8005486 <_printf_i+0x1f2>
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	b004      	add	sp, #16
 80053f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	f043 0320 	orr.w	r3, r3, #32
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	4833      	ldr	r0, [pc, #204]	@ (80054d0 <_printf_i+0x23c>)
 8005404:	2778      	movs	r7, #120	@ 0x78
 8005406:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	6831      	ldr	r1, [r6, #0]
 800540e:	061f      	lsls	r7, r3, #24
 8005410:	f851 5b04 	ldr.w	r5, [r1], #4
 8005414:	d402      	bmi.n	800541c <_printf_i+0x188>
 8005416:	065f      	lsls	r7, r3, #25
 8005418:	bf48      	it	mi
 800541a:	b2ad      	uxthmi	r5, r5
 800541c:	6031      	str	r1, [r6, #0]
 800541e:	07d9      	lsls	r1, r3, #31
 8005420:	bf44      	itt	mi
 8005422:	f043 0320 	orrmi.w	r3, r3, #32
 8005426:	6023      	strmi	r3, [r4, #0]
 8005428:	b11d      	cbz	r5, 8005432 <_printf_i+0x19e>
 800542a:	2310      	movs	r3, #16
 800542c:	e7ac      	b.n	8005388 <_printf_i+0xf4>
 800542e:	4827      	ldr	r0, [pc, #156]	@ (80054cc <_printf_i+0x238>)
 8005430:	e7e9      	b.n	8005406 <_printf_i+0x172>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	f023 0320 	bic.w	r3, r3, #32
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	e7f6      	b.n	800542a <_printf_i+0x196>
 800543c:	4616      	mov	r6, r2
 800543e:	e7bd      	b.n	80053bc <_printf_i+0x128>
 8005440:	6833      	ldr	r3, [r6, #0]
 8005442:	6825      	ldr	r5, [r4, #0]
 8005444:	6961      	ldr	r1, [r4, #20]
 8005446:	1d18      	adds	r0, r3, #4
 8005448:	6030      	str	r0, [r6, #0]
 800544a:	062e      	lsls	r6, r5, #24
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	d501      	bpl.n	8005454 <_printf_i+0x1c0>
 8005450:	6019      	str	r1, [r3, #0]
 8005452:	e002      	b.n	800545a <_printf_i+0x1c6>
 8005454:	0668      	lsls	r0, r5, #25
 8005456:	d5fb      	bpl.n	8005450 <_printf_i+0x1bc>
 8005458:	8019      	strh	r1, [r3, #0]
 800545a:	2300      	movs	r3, #0
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	4616      	mov	r6, r2
 8005460:	e7bc      	b.n	80053dc <_printf_i+0x148>
 8005462:	6833      	ldr	r3, [r6, #0]
 8005464:	1d1a      	adds	r2, r3, #4
 8005466:	6032      	str	r2, [r6, #0]
 8005468:	681e      	ldr	r6, [r3, #0]
 800546a:	6862      	ldr	r2, [r4, #4]
 800546c:	2100      	movs	r1, #0
 800546e:	4630      	mov	r0, r6
 8005470:	f7fa feb6 	bl	80001e0 <memchr>
 8005474:	b108      	cbz	r0, 800547a <_printf_i+0x1e6>
 8005476:	1b80      	subs	r0, r0, r6
 8005478:	6060      	str	r0, [r4, #4]
 800547a:	6863      	ldr	r3, [r4, #4]
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	2300      	movs	r3, #0
 8005480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005484:	e7aa      	b.n	80053dc <_printf_i+0x148>
 8005486:	6923      	ldr	r3, [r4, #16]
 8005488:	4632      	mov	r2, r6
 800548a:	4649      	mov	r1, r9
 800548c:	4640      	mov	r0, r8
 800548e:	47d0      	blx	sl
 8005490:	3001      	adds	r0, #1
 8005492:	d0ad      	beq.n	80053f0 <_printf_i+0x15c>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	079b      	lsls	r3, r3, #30
 8005498:	d413      	bmi.n	80054c2 <_printf_i+0x22e>
 800549a:	68e0      	ldr	r0, [r4, #12]
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	4298      	cmp	r0, r3
 80054a0:	bfb8      	it	lt
 80054a2:	4618      	movlt	r0, r3
 80054a4:	e7a6      	b.n	80053f4 <_printf_i+0x160>
 80054a6:	2301      	movs	r3, #1
 80054a8:	4632      	mov	r2, r6
 80054aa:	4649      	mov	r1, r9
 80054ac:	4640      	mov	r0, r8
 80054ae:	47d0      	blx	sl
 80054b0:	3001      	adds	r0, #1
 80054b2:	d09d      	beq.n	80053f0 <_printf_i+0x15c>
 80054b4:	3501      	adds	r5, #1
 80054b6:	68e3      	ldr	r3, [r4, #12]
 80054b8:	9903      	ldr	r1, [sp, #12]
 80054ba:	1a5b      	subs	r3, r3, r1
 80054bc:	42ab      	cmp	r3, r5
 80054be:	dcf2      	bgt.n	80054a6 <_printf_i+0x212>
 80054c0:	e7eb      	b.n	800549a <_printf_i+0x206>
 80054c2:	2500      	movs	r5, #0
 80054c4:	f104 0619 	add.w	r6, r4, #25
 80054c8:	e7f5      	b.n	80054b6 <_printf_i+0x222>
 80054ca:	bf00      	nop
 80054cc:	080059cb 	.word	0x080059cb
 80054d0:	080059dc 	.word	0x080059dc

080054d4 <__sflush_r>:
 80054d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054dc:	0716      	lsls	r6, r2, #28
 80054de:	4605      	mov	r5, r0
 80054e0:	460c      	mov	r4, r1
 80054e2:	d454      	bmi.n	800558e <__sflush_r+0xba>
 80054e4:	684b      	ldr	r3, [r1, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dc02      	bgt.n	80054f0 <__sflush_r+0x1c>
 80054ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dd48      	ble.n	8005582 <__sflush_r+0xae>
 80054f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	d045      	beq.n	8005582 <__sflush_r+0xae>
 80054f6:	2300      	movs	r3, #0
 80054f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80054fc:	682f      	ldr	r7, [r5, #0]
 80054fe:	6a21      	ldr	r1, [r4, #32]
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	d030      	beq.n	8005566 <__sflush_r+0x92>
 8005504:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	0759      	lsls	r1, r3, #29
 800550a:	d505      	bpl.n	8005518 <__sflush_r+0x44>
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005512:	b10b      	cbz	r3, 8005518 <__sflush_r+0x44>
 8005514:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	2300      	movs	r3, #0
 800551a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800551c:	6a21      	ldr	r1, [r4, #32]
 800551e:	4628      	mov	r0, r5
 8005520:	47b0      	blx	r6
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	d106      	bne.n	8005536 <__sflush_r+0x62>
 8005528:	6829      	ldr	r1, [r5, #0]
 800552a:	291d      	cmp	r1, #29
 800552c:	d82b      	bhi.n	8005586 <__sflush_r+0xb2>
 800552e:	4a2a      	ldr	r2, [pc, #168]	@ (80055d8 <__sflush_r+0x104>)
 8005530:	410a      	asrs	r2, r1
 8005532:	07d6      	lsls	r6, r2, #31
 8005534:	d427      	bmi.n	8005586 <__sflush_r+0xb2>
 8005536:	2200      	movs	r2, #0
 8005538:	6062      	str	r2, [r4, #4]
 800553a:	04d9      	lsls	r1, r3, #19
 800553c:	6922      	ldr	r2, [r4, #16]
 800553e:	6022      	str	r2, [r4, #0]
 8005540:	d504      	bpl.n	800554c <__sflush_r+0x78>
 8005542:	1c42      	adds	r2, r0, #1
 8005544:	d101      	bne.n	800554a <__sflush_r+0x76>
 8005546:	682b      	ldr	r3, [r5, #0]
 8005548:	b903      	cbnz	r3, 800554c <__sflush_r+0x78>
 800554a:	6560      	str	r0, [r4, #84]	@ 0x54
 800554c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800554e:	602f      	str	r7, [r5, #0]
 8005550:	b1b9      	cbz	r1, 8005582 <__sflush_r+0xae>
 8005552:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005556:	4299      	cmp	r1, r3
 8005558:	d002      	beq.n	8005560 <__sflush_r+0x8c>
 800555a:	4628      	mov	r0, r5
 800555c:	f7ff fb48 	bl	8004bf0 <_free_r>
 8005560:	2300      	movs	r3, #0
 8005562:	6363      	str	r3, [r4, #52]	@ 0x34
 8005564:	e00d      	b.n	8005582 <__sflush_r+0xae>
 8005566:	2301      	movs	r3, #1
 8005568:	4628      	mov	r0, r5
 800556a:	47b0      	blx	r6
 800556c:	4602      	mov	r2, r0
 800556e:	1c50      	adds	r0, r2, #1
 8005570:	d1c9      	bne.n	8005506 <__sflush_r+0x32>
 8005572:	682b      	ldr	r3, [r5, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0c6      	beq.n	8005506 <__sflush_r+0x32>
 8005578:	2b1d      	cmp	r3, #29
 800557a:	d001      	beq.n	8005580 <__sflush_r+0xac>
 800557c:	2b16      	cmp	r3, #22
 800557e:	d11e      	bne.n	80055be <__sflush_r+0xea>
 8005580:	602f      	str	r7, [r5, #0]
 8005582:	2000      	movs	r0, #0
 8005584:	e022      	b.n	80055cc <__sflush_r+0xf8>
 8005586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800558a:	b21b      	sxth	r3, r3
 800558c:	e01b      	b.n	80055c6 <__sflush_r+0xf2>
 800558e:	690f      	ldr	r7, [r1, #16]
 8005590:	2f00      	cmp	r7, #0
 8005592:	d0f6      	beq.n	8005582 <__sflush_r+0xae>
 8005594:	0793      	lsls	r3, r2, #30
 8005596:	680e      	ldr	r6, [r1, #0]
 8005598:	bf08      	it	eq
 800559a:	694b      	ldreq	r3, [r1, #20]
 800559c:	600f      	str	r7, [r1, #0]
 800559e:	bf18      	it	ne
 80055a0:	2300      	movne	r3, #0
 80055a2:	eba6 0807 	sub.w	r8, r6, r7
 80055a6:	608b      	str	r3, [r1, #8]
 80055a8:	f1b8 0f00 	cmp.w	r8, #0
 80055ac:	dde9      	ble.n	8005582 <__sflush_r+0xae>
 80055ae:	6a21      	ldr	r1, [r4, #32]
 80055b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055b2:	4643      	mov	r3, r8
 80055b4:	463a      	mov	r2, r7
 80055b6:	4628      	mov	r0, r5
 80055b8:	47b0      	blx	r6
 80055ba:	2800      	cmp	r0, #0
 80055bc:	dc08      	bgt.n	80055d0 <__sflush_r+0xfc>
 80055be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d0:	4407      	add	r7, r0
 80055d2:	eba8 0800 	sub.w	r8, r8, r0
 80055d6:	e7e7      	b.n	80055a8 <__sflush_r+0xd4>
 80055d8:	dfbffffe 	.word	0xdfbffffe

080055dc <_fflush_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	690b      	ldr	r3, [r1, #16]
 80055e0:	4605      	mov	r5, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b913      	cbnz	r3, 80055ec <_fflush_r+0x10>
 80055e6:	2500      	movs	r5, #0
 80055e8:	4628      	mov	r0, r5
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	b118      	cbz	r0, 80055f6 <_fflush_r+0x1a>
 80055ee:	6a03      	ldr	r3, [r0, #32]
 80055f0:	b90b      	cbnz	r3, 80055f6 <_fflush_r+0x1a>
 80055f2:	f7ff f8c5 	bl	8004780 <__sinit>
 80055f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f3      	beq.n	80055e6 <_fflush_r+0xa>
 80055fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005600:	07d0      	lsls	r0, r2, #31
 8005602:	d404      	bmi.n	800560e <_fflush_r+0x32>
 8005604:	0599      	lsls	r1, r3, #22
 8005606:	d402      	bmi.n	800560e <_fflush_r+0x32>
 8005608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800560a:	f7ff fae0 	bl	8004bce <__retarget_lock_acquire_recursive>
 800560e:	4628      	mov	r0, r5
 8005610:	4621      	mov	r1, r4
 8005612:	f7ff ff5f 	bl	80054d4 <__sflush_r>
 8005616:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005618:	07da      	lsls	r2, r3, #31
 800561a:	4605      	mov	r5, r0
 800561c:	d4e4      	bmi.n	80055e8 <_fflush_r+0xc>
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	059b      	lsls	r3, r3, #22
 8005622:	d4e1      	bmi.n	80055e8 <_fflush_r+0xc>
 8005624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005626:	f7ff fad3 	bl	8004bd0 <__retarget_lock_release_recursive>
 800562a:	e7dd      	b.n	80055e8 <_fflush_r+0xc>

0800562c <__swhatbuf_r>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	460c      	mov	r4, r1
 8005630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005634:	2900      	cmp	r1, #0
 8005636:	b096      	sub	sp, #88	@ 0x58
 8005638:	4615      	mov	r5, r2
 800563a:	461e      	mov	r6, r3
 800563c:	da0d      	bge.n	800565a <__swhatbuf_r+0x2e>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	bf14      	ite	ne
 800564a:	2340      	movne	r3, #64	@ 0x40
 800564c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005650:	2000      	movs	r0, #0
 8005652:	6031      	str	r1, [r6, #0]
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	b016      	add	sp, #88	@ 0x58
 8005658:	bd70      	pop	{r4, r5, r6, pc}
 800565a:	466a      	mov	r2, sp
 800565c:	f000 f862 	bl	8005724 <_fstat_r>
 8005660:	2800      	cmp	r0, #0
 8005662:	dbec      	blt.n	800563e <__swhatbuf_r+0x12>
 8005664:	9901      	ldr	r1, [sp, #4]
 8005666:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800566a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800566e:	4259      	negs	r1, r3
 8005670:	4159      	adcs	r1, r3
 8005672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005676:	e7eb      	b.n	8005650 <__swhatbuf_r+0x24>

08005678 <__smakebuf_r>:
 8005678:	898b      	ldrh	r3, [r1, #12]
 800567a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800567c:	079d      	lsls	r5, r3, #30
 800567e:	4606      	mov	r6, r0
 8005680:	460c      	mov	r4, r1
 8005682:	d507      	bpl.n	8005694 <__smakebuf_r+0x1c>
 8005684:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	2301      	movs	r3, #1
 800568e:	6163      	str	r3, [r4, #20]
 8005690:	b003      	add	sp, #12
 8005692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005694:	ab01      	add	r3, sp, #4
 8005696:	466a      	mov	r2, sp
 8005698:	f7ff ffc8 	bl	800562c <__swhatbuf_r>
 800569c:	9f00      	ldr	r7, [sp, #0]
 800569e:	4605      	mov	r5, r0
 80056a0:	4639      	mov	r1, r7
 80056a2:	4630      	mov	r0, r6
 80056a4:	f7fe ff54 	bl	8004550 <_malloc_r>
 80056a8:	b948      	cbnz	r0, 80056be <__smakebuf_r+0x46>
 80056aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ae:	059a      	lsls	r2, r3, #22
 80056b0:	d4ee      	bmi.n	8005690 <__smakebuf_r+0x18>
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	f043 0302 	orr.w	r3, r3, #2
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	e7e2      	b.n	8005684 <__smakebuf_r+0xc>
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	6020      	str	r0, [r4, #0]
 80056c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c6:	81a3      	strh	r3, [r4, #12]
 80056c8:	9b01      	ldr	r3, [sp, #4]
 80056ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056ce:	b15b      	cbz	r3, 80056e8 <__smakebuf_r+0x70>
 80056d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d4:	4630      	mov	r0, r6
 80056d6:	f000 f837 	bl	8005748 <_isatty_r>
 80056da:	b128      	cbz	r0, 80056e8 <__smakebuf_r+0x70>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	431d      	orrs	r5, r3
 80056ec:	81a5      	strh	r5, [r4, #12]
 80056ee:	e7cf      	b.n	8005690 <__smakebuf_r+0x18>

080056f0 <memmove>:
 80056f0:	4288      	cmp	r0, r1
 80056f2:	b510      	push	{r4, lr}
 80056f4:	eb01 0402 	add.w	r4, r1, r2
 80056f8:	d902      	bls.n	8005700 <memmove+0x10>
 80056fa:	4284      	cmp	r4, r0
 80056fc:	4623      	mov	r3, r4
 80056fe:	d807      	bhi.n	8005710 <memmove+0x20>
 8005700:	1e43      	subs	r3, r0, #1
 8005702:	42a1      	cmp	r1, r4
 8005704:	d008      	beq.n	8005718 <memmove+0x28>
 8005706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800570a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800570e:	e7f8      	b.n	8005702 <memmove+0x12>
 8005710:	4402      	add	r2, r0
 8005712:	4601      	mov	r1, r0
 8005714:	428a      	cmp	r2, r1
 8005716:	d100      	bne.n	800571a <memmove+0x2a>
 8005718:	bd10      	pop	{r4, pc}
 800571a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800571e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005722:	e7f7      	b.n	8005714 <memmove+0x24>

08005724 <_fstat_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d07      	ldr	r5, [pc, #28]	@ (8005744 <_fstat_r+0x20>)
 8005728:	2300      	movs	r3, #0
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	4611      	mov	r1, r2
 8005730:	602b      	str	r3, [r5, #0]
 8005732:	f7fb fb7c 	bl	8000e2e <_fstat>
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	d102      	bne.n	8005740 <_fstat_r+0x1c>
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	b103      	cbz	r3, 8005740 <_fstat_r+0x1c>
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	bd38      	pop	{r3, r4, r5, pc}
 8005742:	bf00      	nop
 8005744:	2000077c 	.word	0x2000077c

08005748 <_isatty_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4d06      	ldr	r5, [pc, #24]	@ (8005764 <_isatty_r+0x1c>)
 800574c:	2300      	movs	r3, #0
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	602b      	str	r3, [r5, #0]
 8005754:	f7fb fb7b 	bl	8000e4e <_isatty>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_isatty_r+0x1a>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_isatty_r+0x1a>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	2000077c 	.word	0x2000077c

08005768 <_realloc_r>:
 8005768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576c:	4680      	mov	r8, r0
 800576e:	4615      	mov	r5, r2
 8005770:	460c      	mov	r4, r1
 8005772:	b921      	cbnz	r1, 800577e <_realloc_r+0x16>
 8005774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005778:	4611      	mov	r1, r2
 800577a:	f7fe bee9 	b.w	8004550 <_malloc_r>
 800577e:	b92a      	cbnz	r2, 800578c <_realloc_r+0x24>
 8005780:	f7ff fa36 	bl	8004bf0 <_free_r>
 8005784:	2400      	movs	r4, #0
 8005786:	4620      	mov	r0, r4
 8005788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800578c:	f000 f81a 	bl	80057c4 <_malloc_usable_size_r>
 8005790:	4285      	cmp	r5, r0
 8005792:	4606      	mov	r6, r0
 8005794:	d802      	bhi.n	800579c <_realloc_r+0x34>
 8005796:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800579a:	d8f4      	bhi.n	8005786 <_realloc_r+0x1e>
 800579c:	4629      	mov	r1, r5
 800579e:	4640      	mov	r0, r8
 80057a0:	f7fe fed6 	bl	8004550 <_malloc_r>
 80057a4:	4607      	mov	r7, r0
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d0ec      	beq.n	8005784 <_realloc_r+0x1c>
 80057aa:	42b5      	cmp	r5, r6
 80057ac:	462a      	mov	r2, r5
 80057ae:	4621      	mov	r1, r4
 80057b0:	bf28      	it	cs
 80057b2:	4632      	movcs	r2, r6
 80057b4:	f7ff fa0d 	bl	8004bd2 <memcpy>
 80057b8:	4621      	mov	r1, r4
 80057ba:	4640      	mov	r0, r8
 80057bc:	f7ff fa18 	bl	8004bf0 <_free_r>
 80057c0:	463c      	mov	r4, r7
 80057c2:	e7e0      	b.n	8005786 <_realloc_r+0x1e>

080057c4 <_malloc_usable_size_r>:
 80057c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c8:	1f18      	subs	r0, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfbc      	itt	lt
 80057ce:	580b      	ldrlt	r3, [r1, r0]
 80057d0:	18c0      	addlt	r0, r0, r3
 80057d2:	4770      	bx	lr

080057d4 <_init>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	bf00      	nop
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr

080057e0 <_fini>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr
