
13_w5500_mqtt_publish_sensor_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007624  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  080077c4  080077c4  000087c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b44  08007b44  00009120  2**0
                  CONTENTS
  4 .ARM          00000008  08007b44  08007b44  00008b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b4c  08007b4c  00009120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b4c  08007b4c  00008b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08007b54  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  20000120  08007c74  00009120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08007c74  00009974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008448  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002439  00000000  00000000  00011598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  000139d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000682  00000000  00000000  00014248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000119a3  00000000  00000000  000148ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7a9  00000000  00000000  0002626d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b09d  00000000  00000000  00031a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008cab3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028fc  00000000  00000000  0008caf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0008f3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000120 	.word	0x20000120
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077ac 	.word	0x080077ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000124 	.word	0x20000124
 80001dc:	080077ac 	.word	0x080077ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d003      	beq.n	80002d0 <getNextPacketId+0x1c>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	e000      	b.n	80002d2 <getNextPacketId+0x1e>
 80002d0:	2301      	movs	r3, #1
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	6013      	str	r3, [r2, #0]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
}
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 80002e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e8:	b087      	sub	sp, #28
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	60f8      	str	r0, [r7, #12]
 80002ee:	60b9      	str	r1, [r7, #8]
 80002f0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295
 80002f6:	617b      	str	r3, [r7, #20]
        sent = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80002fc:	e018      	b.n	8000330 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000302:	689c      	ldr	r4, [r3, #8]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	691a      	ldr	r2, [r3, #16]
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	18d6      	adds	r6, r2, r3
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f001 fb11 	bl	8001938 <TimerLeftMS>
 8000316:	4603      	mov	r3, r0
 8000318:	68ba      	ldr	r2, [r7, #8]
 800031a:	4631      	mov	r1, r6
 800031c:	4628      	mov	r0, r5
 800031e:	47a0      	blx	r4
 8000320:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	2b00      	cmp	r3, #0
 8000326:	db0e      	blt.n	8000346 <sendPacket+0x60>
            break;
        sent += rc;
 8000328:	693a      	ldr	r2, [r7, #16]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	4413      	add	r3, r2
 800032e:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8000330:	693a      	ldr	r2, [r7, #16]
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	429a      	cmp	r2, r3
 8000336:	da07      	bge.n	8000348 <sendPacket+0x62>
 8000338:	6878      	ldr	r0, [r7, #4]
 800033a:	f001 fabb 	bl	80018b4 <TimerIsExpired>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0dc      	beq.n	80002fe <sendPacket+0x18>
 8000344:	e000      	b.n	8000348 <sendPacket+0x62>
            break;
 8000346:	bf00      	nop
    }
    if (sent == length)
 8000348:	693a      	ldr	r2, [r7, #16]
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	429a      	cmp	r2, r3
 800034e:	d10b      	bne.n	8000368 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4619      	mov	r1, r3
 800035c:	4610      	mov	r0, r2
 800035e:	f001 fad3 	bl	8001908 <TimerCountdown>
        rc = SUCCESS_;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	e002      	b.n	800036e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8000368:	f04f 33ff 	mov.w	r3, #4294967295
 800036c:	617b      	str	r3, [r7, #20]
    return rc;
 800036e:	697b      	ldr	r3, [r7, #20]
}
 8000370:	4618      	mov	r0, r3
 8000372:	371c      	adds	r7, #28
 8000374:	46bd      	mov	sp, r7
 8000376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000378 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
 8000384:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	68ba      	ldr	r2, [r7, #8]
 800038a:	655a      	str	r2, [r3, #84]	@ 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e008      	b.n	80003a4 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	697a      	ldr	r2, [r7, #20]
 8000396:	3205      	adds	r2, #5
 8000398:	2100      	movs	r1, #0
 800039a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	ddf3      	ble.n	8000392 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	6a3a      	ldr	r2, [r7, #32]
 80003ba:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80003c0:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80003c6:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	2200      	movs	r2, #0
 80003d2:	625a      	str	r2, [r3, #36]	@ 0x24
    c->ping_outstanding = 0;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	2200      	movs	r2, #0
 80003d8:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2200      	movs	r2, #0
 80003de:	651a      	str	r2, [r3, #80]	@ 0x50
	  c->next_packetid = 1;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	2201      	movs	r2, #1
 80003e4:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3358      	adds	r3, #88	@ 0x58
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 fa54 	bl	8001898 <TimerInit>
    TimerInit(&c->last_received);
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3360      	adds	r3, #96	@ 0x60
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fa4f 	bl	8001898 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8000402:	b590      	push	{r4, r7, lr}
 8000404:	b08b      	sub	sp, #44	@ 0x2c
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800040e:	2301      	movs	r3, #1
 8000410:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8000416:	2304      	movs	r3, #4
 8000418:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8000420:	f04f 33ff 	mov.w	r3, #4294967295
 8000424:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000426:	6a3b      	ldr	r3, [r7, #32]
 8000428:	3301      	adds	r3, #1
 800042a:	623b      	str	r3, [r7, #32]
 800042c:	6a3a      	ldr	r2, [r7, #32]
 800042e:	69fb      	ldr	r3, [r7, #28]
 8000430:	429a      	cmp	r2, r3
 8000432:	dd03      	ble.n	800043c <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8000434:	f04f 33ff 	mov.w	r3, #4294967295
 8000438:	61bb      	str	r3, [r7, #24]
            goto exit;
 800043a:	e021      	b.n	8000480 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000440:	685c      	ldr	r4, [r3, #4]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8000446:	f107 0117 	add.w	r1, r7, #23
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2201      	movs	r2, #1
 800044e:	47a0      	blx	r4
 8000450:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d112      	bne.n	800047e <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	7dfb      	ldrb	r3, [r7, #23]
 800045e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000462:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000464:	fb01 f303 	mul.w	r3, r1, r3
 8000468:	441a      	add	r2, r3
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800046e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000470:	01db      	lsls	r3, r3, #7
 8000472:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 8000474:	7dfb      	ldrb	r3, [r7, #23]
 8000476:	b25b      	sxtb	r3, r3
 8000478:	2b00      	cmp	r3, #0
 800047a:	dbd1      	blt.n	8000420 <decodePacket+0x1e>
exit:
 800047c:	e000      	b.n	8000480 <decodePacket+0x7e>
            goto exit;
 800047e:	bf00      	nop
    return len;
 8000480:	6a3b      	ldr	r3, [r7, #32]
}
 8000482:	4618      	mov	r0, r3
 8000484:	372c      	adds	r7, #44	@ 0x2c
 8000486:	46bd      	mov	sp, r7
 8000488:	bd90      	pop	{r4, r7, pc}

0800048a <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800048a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048c:	b089      	sub	sp, #36	@ 0x24
 800048e:	af00      	add	r7, sp, #0
 8000490:	60f8      	str	r0, [r7, #12]
 8000492:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
    int len = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80004a4:	685c      	ldr	r4, [r3, #4]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	695e      	ldr	r6, [r3, #20]
 80004ae:	68b8      	ldr	r0, [r7, #8]
 80004b0:	f001 fa42 	bl	8001938 <TimerLeftMS>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2201      	movs	r2, #1
 80004b8:	4631      	mov	r1, r6
 80004ba:	4628      	mov	r0, r5
 80004bc:	47a0      	blx	r4
 80004be:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d15d      	bne.n	8000582 <readPacket+0xf8>
        goto exit;

    len = 1;
 80004c6:	2301      	movs	r3, #1
 80004c8:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 80004ca:	68b8      	ldr	r0, [r7, #8]
 80004cc:	f001 fa34 	bl	8001938 <TimerLeftMS>
 80004d0:	4602      	mov	r2, r0
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	4619      	mov	r1, r3
 80004d8:	68f8      	ldr	r0, [r7, #12]
 80004da:	f7ff ff92 	bl	8000402 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	3301      	adds	r3, #1
 80004e4:	693a      	ldr	r2, [r7, #16]
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fed6 	bl	800129a <MQTTPacket_encode>
 80004ee:	4602      	mov	r2, r0
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	4413      	add	r3, r2
 80004f4:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	68da      	ldr	r2, [r3, #12]
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	4293      	cmp	r3, r2
 8000502:	d203      	bcs.n	800050c <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8000504:	f06f 0301 	mvn.w	r3, #1
 8000508:	61fb      	str	r3, [r7, #28]
        goto exit;
 800050a:	e03d      	b.n	8000588 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	2b00      	cmp	r3, #0
 8000510:	dd20      	ble.n	8000554 <readPacket+0xca>
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000516:	685c      	ldr	r4, [r3, #4]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	69bb      	ldr	r3, [r7, #24]
 8000522:	18d6      	adds	r6, r2, r3
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	68b8      	ldr	r0, [r7, #8]
 800052a:	f001 fa05 	bl	8001938 <TimerLeftMS>
 800052e:	4603      	mov	r3, r0
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4631      	mov	r1, r6
 8000534:	4628      	mov	r0, r5
 8000536:	47a0      	blx	r4
 8000538:	4602      	mov	r2, r0
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	429a      	cmp	r2, r3
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <readPacket+0xca>
        rc = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
        goto exit;
 8000552:	e019      	b.n	8000588 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800055c:	7d3b      	ldrb	r3, [r7, #20]
 800055e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000562:	b2db      	uxtb	r3, r3
 8000564:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00b      	beq.n	8000586 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4619      	mov	r1, r3
 800057a:	4610      	mov	r0, r2
 800057c:	f001 f9c4 	bl	8001908 <TimerCountdown>
 8000580:	e002      	b.n	8000588 <readPacket+0xfe>
        goto exit;
 8000582:	bf00      	nop
 8000584:	e000      	b.n	8000588 <readPacket+0xfe>
exit:
 8000586:	bf00      	nop
    return rc;
 8000588:	69fb      	ldr	r3, [r7, #28]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3724      	adds	r7, #36	@ 0x24
 800058e:	46bd      	mov	sp, r7
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000592 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8000592:	b480      	push	{r7}
 8000594:	b087      	sub	sp, #28
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	461a      	mov	r2, r3
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	4413      	add	r3, r2
 80005b0:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 80005b2:	e039      	b.n	8000628 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80005ba:	d103      	bne.n	80005c4 <isTopicMatched+0x32>
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80005c2:	d13a      	bne.n	800063a <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b2b      	cmp	r3, #43	@ 0x2b
 80005ca:	d009      	beq.n	80005e0 <isTopicMatched+0x4e>
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b23      	cmp	r3, #35	@ 0x23
 80005d2:	d005      	beq.n	80005e0 <isTopicMatched+0x4e>
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d12e      	bne.n	800063e <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b2b      	cmp	r3, #43	@ 0x2b
 80005e6:	d112      	bne.n	800060e <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	3301      	adds	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80005ee:	e005      	b.n	80005fc <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	3301      	adds	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	3301      	adds	r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	429a      	cmp	r2, r3
 8000602:	d20b      	bcs.n	800061c <isTopicMatched+0x8a>
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b2f      	cmp	r3, #47	@ 0x2f
 800060a:	d1f1      	bne.n	80005f0 <isTopicMatched+0x5e>
 800060c:	e006      	b.n	800061c <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b23      	cmp	r3, #35	@ 0x23
 8000614:	d102      	bne.n	800061c <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	3b01      	subs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
        curf++;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3301      	adds	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
        curn++;
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	3301      	adds	r3, #1
 8000626:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d007      	beq.n	8000640 <isTopicMatched+0xae>
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	429a      	cmp	r2, r3
 8000636:	d3bd      	bcc.n	80005b4 <isTopicMatched+0x22>
 8000638:	e002      	b.n	8000640 <isTopicMatched+0xae>
            break;
 800063a:	bf00      	nop
 800063c:	e000      	b.n	8000640 <isTopicMatched+0xae>
            break;
 800063e:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8000640:	693a      	ldr	r2, [r7, #16]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	429a      	cmp	r2, r3
 8000646:	d105      	bne.n	8000654 <isTopicMatched+0xc2>
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d101      	bne.n	8000654 <isTopicMatched+0xc2>
 8000650:	2301      	movs	r3, #1
 8000652:	e000      	b.n	8000656 <isTopicMatched+0xc4>
 8000654:	2300      	movs	r3, #0
 8000656:	b2db      	uxtb	r3, r3
}
 8000658:	4618      	mov	r0, r3
 800065a:	371c      	adds	r7, #28
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
 800067a:	e03c      	b.n	80006f6 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000680:	3205      	adds	r2, #5
 8000682:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d032      	beq.n	80006f0 <deliverMessage+0x8c>
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800068e:	3205      	adds	r2, #5
 8000690:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000694:	4619      	mov	r1, r3
 8000696:	68b8      	ldr	r0, [r7, #8]
 8000698:	f000 ffce 	bl	8001638 <MQTTPacket_equals>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d10b      	bne.n	80006ba <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006a6:	3205      	adds	r2, #5
 80006a8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006ac:	68b9      	ldr	r1, [r7, #8]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff6f 	bl	8000592 <isTopicMatched>
 80006b4:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d01a      	beq.n	80006f0 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006be:	3305      	adds	r3, #5
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	4413      	add	r3, r2
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d012      	beq.n	80006f0 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fddc 	bl	8000290 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006dc:	3305      	adds	r3, #5
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	4413      	add	r3, r2
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f107 0218 	add.w	r2, r7, #24
 80006e8:	4610      	mov	r0, r2
 80006ea:	4798      	blx	r3
                rc = SUCCESS_;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80006f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f2:	3301      	adds	r3, #1
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80006f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	ddbf      	ble.n	800067c <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000702:	d112      	bne.n	800072a <deliverMessage+0xc6>
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00e      	beq.n	800072a <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	68b9      	ldr	r1, [r7, #8]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fdbb 	bl	8000290 <NewMessageData>
        c->defaultMessageHandler(&md);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800071e:	f107 0210 	add.w	r2, r7, #16
 8000722:	4610      	mov	r0, r2
 8000724:	4798      	blx	r3
        rc = SUCCESS_;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800072a:	6a3b      	ldr	r3, [r7, #32]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <keepalive>:


int keepalive(MQTTClient* c)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    int rc = SUCCESS_;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d03e      	beq.n	80007c6 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3358      	adds	r3, #88	@ 0x58
 800074c:	4618      	mov	r0, r3
 800074e:	f001 f8b1 	bl	80018b4 <TimerIsExpired>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d107      	bne.n	8000768 <keepalive+0x34>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3360      	adds	r3, #96	@ 0x60
 800075c:	4618      	mov	r0, r3
 800075e:	f001 f8a9 	bl	80018b4 <TimerIsExpired>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d030      	beq.n	80007ca <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7f1b      	ldrb	r3, [r3, #28]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d003      	beq.n	8000778 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	e029      	b.n	80007cc <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f88b 	bl	8001898 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f8a8 	bl	80018e0 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	691a      	ldr	r2, [r3, #16]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	4619      	mov	r1, r3
 800079a:	4610      	mov	r0, r2
 800079c:	f000 fcb1 	bl	8001102 <MQTTSerialize_pingreq>
 80007a0:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS_) // send the ping packet
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dd11      	ble.n	80007cc <keepalive+0x98>
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	461a      	mov	r2, r3
 80007ae:	6939      	ldr	r1, [r7, #16]
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fd98 	bl	80002e6 <sendPacket>
 80007b6:	6178      	str	r0, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d106      	bne.n	80007cc <keepalive+0x98>
                c->ping_outstanding = 1;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2201      	movs	r2, #1
 80007c2:	771a      	strb	r2, [r3, #28]
 80007c4:	e002      	b.n	80007cc <keepalive+0x98>
        goto exit;
 80007c6:	bf00      	nop
 80007c8:	e000      	b.n	80007cc <keepalive+0x98>
        }
    }

exit:
 80007ca:	bf00      	nop
    return rc;
 80007cc:	697b      	ldr	r3, [r7, #20]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
    int i = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e008      	b.n	80007fa <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	3205      	adds	r2, #5
 80007ee:	2100      	movs	r1, #0
 80007f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	ddf3      	ble.n	80007e8 <MQTTCleanSession+0x12>
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffd3 	bl	80007d6 <MQTTCleanSession>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	b095      	sub	sp, #84	@ 0x54
 800083c:	af06      	add	r7, sp, #24
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    int len = 0,
 8000842:	2300      	movs	r3, #0
 8000844:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = SUCCESS_;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	@ 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 800084a:	6839      	ldr	r1, [r7, #0]
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff fe1c 	bl	800048a <readPacket>
 8000852:	62f8      	str	r0, [r7, #44]	@ 0x2c

    switch (packet_type)
 8000854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000856:	2b0d      	cmp	r3, #13
 8000858:	d81e      	bhi.n	8000898 <cycle+0x60>
 800085a:	a201      	add	r2, pc, #4	@ (adr r2, 8000860 <cycle+0x28>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	080009ef 	.word	0x080009ef
 8000864:	08000899 	.word	0x08000899
 8000868:	080009ef 	.word	0x080009ef
 800086c:	0800089f 	.word	0x0800089f
 8000870:	080009ef 	.word	0x080009ef
 8000874:	0800096b 	.word	0x0800096b
 8000878:	0800096b 	.word	0x0800096b
 800087c:	080009ef 	.word	0x080009ef
 8000880:	08000899 	.word	0x08000899
 8000884:	080009ef 	.word	0x080009ef
 8000888:	08000899 	.word	0x08000899
 800088c:	080009ef 	.word	0x080009ef
 8000890:	08000899 	.word	0x08000899
 8000894:	080009e7 	.word	0x080009e7
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8000898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800089a:	633b      	str	r3, [r7, #48]	@ 0x30
            goto exit;
 800089c:	e0b9      	b.n	8000a12 <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80008aa:	4616      	mov	r6, r2
 80008ac:	f107 0210 	add.w	r2, r7, #16
 80008b0:	1d15      	adds	r5, r2, #4
 80008b2:	f107 0210 	add.w	r2, r7, #16
 80008b6:	1c54      	adds	r4, r2, #1
 80008b8:	f107 010c 	add.w	r1, r7, #12
 80008bc:	f107 0210 	add.w	r2, r7, #16
 80008c0:	1c90      	adds	r0, r2, #2
 80008c2:	9604      	str	r6, [sp, #16]
 80008c4:	9303      	str	r3, [sp, #12]
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	330c      	adds	r3, #12
 80008cc:	9302      	str	r3, [sp, #8]
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	3308      	adds	r3, #8
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	462b      	mov	r3, r5
 80008de:	4622      	mov	r2, r4
 80008e0:	f000 fc1e 	bl	8001120 <MQTTDeserialize_publish>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	f040 8090 	bne.w	8000a0c <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80008f2:	f107 0210 	add.w	r2, r7, #16
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	4619      	mov	r1, r3
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff feb1 	bl	8000664 <deliverMessage>
            if (msg.qos != QOS0)
 8000902:	7c3b      	ldrb	r3, [r7, #16]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d074      	beq.n	80009f2 <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8000908:	7c3b      	ldrb	r3, [r7, #16]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d10c      	bne.n	8000928 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6918      	ldr	r0, [r3, #16]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	4619      	mov	r1, r3
 8000918:	8abb      	ldrh	r3, [r7, #20]
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2300      	movs	r3, #0
 800091e:	2204      	movs	r2, #4
 8000920:	f000 ff57 	bl	80017d2 <MQTTSerialize_ack>
 8000924:	6378      	str	r0, [r7, #52]	@ 0x34
 8000926:	e00e      	b.n	8000946 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8000928:	7c3b      	ldrb	r3, [r7, #16]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d10b      	bne.n	8000946 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6918      	ldr	r0, [r3, #16]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	4619      	mov	r1, r3
 8000938:	8abb      	ldrh	r3, [r7, #20]
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2205      	movs	r2, #5
 8000940:	f000 ff47 	bl	80017d2 <MQTTSerialize_ack>
 8000944:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 8000946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000948:	2b00      	cmp	r3, #0
 800094a:	dc03      	bgt.n	8000954 <cycle+0x11c>
                    rc = FAILURE;
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	633b      	str	r3, [r7, #48]	@ 0x30
 8000952:	e005      	b.n	8000960 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fcc4 	bl	80002e6 <sendPacket>
 800095e:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 8000960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000966:	d144      	bne.n	80009f2 <cycle+0x1ba>
                    goto exit; // there was a problem
 8000968:	e053      	b.n	8000a12 <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	695c      	ldr	r4, [r3, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	f107 020a 	add.w	r2, r7, #10
 8000976:	f107 0109 	add.w	r1, r7, #9
 800097a:	f107 0008 	add.w	r0, r7, #8
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	4623      	mov	r3, r4
 8000982:	f000 fc3f 	bl	8001204 <MQTTDeserialize_ack>
 8000986:	4603      	mov	r3, r0
 8000988:	2b01      	cmp	r3, #1
 800098a:	d003      	beq.n	8000994 <cycle+0x15c>
                rc = FAILURE;
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	633b      	str	r3, [r7, #48]	@ 0x30
 8000992:	e023      	b.n	80009dc <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6918      	ldr	r0, [r3, #16]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	4619      	mov	r1, r3
 800099e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009a0:	2b05      	cmp	r3, #5
 80009a2:	d101      	bne.n	80009a8 <cycle+0x170>
 80009a4:	2206      	movs	r2, #6
 80009a6:	e000      	b.n	80009aa <cycle+0x172>
 80009a8:	2207      	movs	r2, #7
 80009aa:	897b      	ldrh	r3, [r7, #10]
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	f000 ff0f 	bl	80017d2 <MQTTSerialize_ack>
 80009b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80009b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dc03      	bgt.n	80009c4 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80009c2:	e00b      	b.n	80009dc <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS_) // send the PUBREL packet
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fc8c 	bl	80002e6 <sendPacket>
 80009ce:	6338      	str	r0, [r7, #48]	@ 0x30
 80009d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 80009dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e2:	d108      	bne.n	80009f6 <cycle+0x1be>
                goto exit; // there was a problem
 80009e4:	e015      	b.n	8000a12 <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	771a      	strb	r2, [r3, #28]
            break;
 80009ec:	e004      	b.n	80009f8 <cycle+0x1c0>
            break;
 80009ee:	bf00      	nop
 80009f0:	e002      	b.n	80009f8 <cycle+0x1c0>
            break;
 80009f2:	bf00      	nop
 80009f4:	e000      	b.n	80009f8 <cycle+0x1c0>
            break;
 80009f6:	bf00      	nop
    }

    if (keepalive(c) != SUCCESS_) {
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fe9b 	bl	8000734 <keepalive>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
 8000a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a0a:	e002      	b.n	8000a12 <cycle+0x1da>
                goto exit;
 8000a0c:	bf00      	nop
 8000a0e:	e000      	b.n	8000a12 <cycle+0x1da>
    }

exit:
 8000a10:	bf00      	nop
    if (rc == SUCCESS_)
 8000a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <cycle+0x1e6>
        rc = packet_type;
 8000a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a1c:	e006      	b.n	8000a2c <cycle+0x1f4>
    else if (c->isconnected)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6a1b      	ldr	r3, [r3, #32]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <cycle+0x1f4>
        MQTTCloseSession(c);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fef1 	bl	800080e <MQTTCloseSession>
    return rc;
 8000a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	373c      	adds	r7, #60	@ 0x3c
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a36:	bf00      	nop

08000a38 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 ff32 	bl	80018b4 <TimerIsExpired>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10c      	bne.n	8000a70 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff feed 	bl	8000838 <cycle>
 8000a5e:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d004      	beq.n	8000a72 <waitfor+0x3a>
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	daed      	bge.n	8000a4a <waitfor+0x12>
 8000a6e:	e000      	b.n	8000a72 <waitfor+0x3a>
            break; // we timed out
 8000a70:	bf00      	nop

    return rc;
 8000a72:	697b      	ldr	r3, [r7, #20]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09e      	sub	sp, #120	@ 0x78
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8000a8e:	4a43      	ldr	r2, [pc, #268]	@ (8000b9c <MQTTConnectWithResults+0x120>)
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4611      	mov	r1, r2
 8000a96:	2258      	movs	r2, #88	@ 0x58
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f006 f886 	bl	8006baa <memcpy>
    int len = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d164      	bne.n	8000b74 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8000aaa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fef2 	bl	8001898 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 ff0e 	bl	80018e0 <TimerCountdownMS>

    if (options == 0)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d102      	bne.n	8000ad0 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	8b1b      	ldrh	r3, [r3, #24]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	7e9b      	ldrb	r3, [r3, #26]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f000 ff09 	bl	8001908 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6918      	ldr	r0, [r3, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f000 f985 	bl	8000e10 <MQTTSerialize_connect>
 8000b06:	6738      	str	r0, [r7, #112]	@ 0x70
 8000b08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	dd34      	ble.n	8000b78 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS_)  // send the connect packet
 8000b0e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b12:	461a      	mov	r2, r3
 8000b14:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff fbe5 	bl	80002e6 <sendPacket>
 8000b1c:	6778      	str	r0, [r7, #116]	@ 0x74
 8000b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d12b      	bne.n	8000b7c <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8000b24:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff ff83 	bl	8000a38 <waitfor>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d119      	bne.n	8000b6c <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	1c58      	adds	r0, r3, #1
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	695a      	ldr	r2, [r3, #20]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	f000 fa49 	bl	8000fe8 <MQTTDeserialize_connack>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d103      	bne.n	8000b64 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b62:	e00c      	b.n	8000b7e <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b6a:	e008      	b.n	8000b7e <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b72:	e004      	b.n	8000b7e <MQTTConnectWithResults+0x102>
		  goto exit;
 8000b74:	bf00      	nop
 8000b76:	e002      	b.n	8000b7e <MQTTConnectWithResults+0x102>
        goto exit;
 8000b78:	bf00      	nop
 8000b7a:	e000      	b.n	8000b7e <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8000b7c:	bf00      	nop

exit:
    if (rc == SUCCESS_)
 8000b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d105      	bne.n	8000b90 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2201      	movs	r2, #1
 8000b88:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8000b90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3778      	adds	r7, #120	@ 0x78
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	080077c4 	.word	0x080077c4

08000ba0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	461a      	mov	r2, r3
 8000bb0:	6839      	ldr	r1, [r7, #0]
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ff62 	bl	8000a7c <MQTTConnectWithResults>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8000bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc4:	b097      	sub	sp, #92	@ 0x5c
 8000bc6:	af08      	add	r7, sp, #32
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicName;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	6a1b      	ldr	r3, [r3, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f000 809b 	beq.w	8000d28 <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 8000bf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fe4e 	bl	8001898 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fe6a 	bl	80018e0 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d003      	beq.n	8000c1c <MQTTPublish+0x5a>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d106      	bne.n	8000c2a <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f7ff fb49 	bl	80002b4 <getNextPacketId>
 8000c22:	4603      	mov	r3, r0
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	469c      	mov	ip, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	469e      	mov	lr, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	785d      	ldrb	r5, [r3, #1]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8000c4c:	9206      	str	r2, [sp, #24]
 8000c4e:	9305      	str	r3, [sp, #20]
 8000c50:	ac02      	add	r4, sp, #8
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c5e:	9601      	str	r6, [sp, #4]
 8000c60:	9500      	str	r5, [sp, #0]
 8000c62:	4673      	mov	r3, lr
 8000c64:	2200      	movs	r2, #0
 8000c66:	4661      	mov	r1, ip
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f000 fd3c 	bl	80016e6 <MQTTSerialize_publish>
 8000c6e:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 8000c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dd5a      	ble.n	8000d2c <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS_) // send the subscribe packet
 8000c76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff fb31 	bl	80002e6 <sendPacket>
 8000c84:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d151      	bne.n	8000d30 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d122      	bne.n	8000cda <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8000c94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f7ff fecb 	bl	8000a38 <waitfor>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d114      	bne.n	8000cd2 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	695c      	ldr	r4, [r3, #20]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	f107 021a 	add.w	r2, r7, #26
 8000cb4:	f107 0119 	add.w	r1, r7, #25
 8000cb8:	f107 0018 	add.w	r0, r7, #24
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	f000 faa0 	bl	8001204 <MQTTDeserialize_ack>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d035      	beq.n	8000d36 <MQTTPublish+0x174>
                rc = FAILURE;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cd0:	e031      	b.n	8000d36 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cd8:	e02d      	b.n	8000d36 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d128      	bne.n	8000d34 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8000ce2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	2107      	movs	r1, #7
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff fea4 	bl	8000a38 <waitfor>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d114      	bne.n	8000d20 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	695c      	ldr	r4, [r3, #20]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	f107 0216 	add.w	r2, r7, #22
 8000d02:	f107 0115 	add.w	r1, r7, #21
 8000d06:	f107 0014 	add.w	r0, r7, #20
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	f000 fa79 	bl	8001204 <MQTTDeserialize_ack>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d00e      	beq.n	8000d36 <MQTTPublish+0x174>
                rc = FAILURE;
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d1e:	e00a      	b.n	8000d36 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d26:	e006      	b.n	8000d36 <MQTTPublish+0x174>
		    goto exit;
 8000d28:	bf00      	nop
 8000d2a:	e004      	b.n	8000d36 <MQTTPublish+0x174>
        goto exit;
 8000d2c:	bf00      	nop
 8000d2e:	e002      	b.n	8000d36 <MQTTPublish+0x174>
        goto exit; // there was a problem
 8000d30:	bf00      	nop
 8000d32:	e000      	b.n	8000d36 <MQTTPublish+0x174>
    }

exit:
 8000d34:	bf00      	nop
    if (rc == FAILURE)
 8000d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3c:	d102      	bne.n	8000d44 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff fd65 	bl	800080e <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8000d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	373c      	adds	r7, #60	@ 0x3c
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d4e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8000d4e:	b590      	push	{r4, r7, lr}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7a1b      	ldrb	r3, [r3, #8]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d102      	bne.n	8000d68 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000d62:	230c      	movs	r3, #12
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e005      	b.n	8000d74 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7a1b      	ldrb	r3, [r3, #8]
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d101      	bne.n	8000d74 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8000d70:	230a      	movs	r3, #10
 8000d72:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	330c      	adds	r3, #12
 8000d78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d7c:	f000 fc43 	bl	8001606 <MQTTstrlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	3302      	adds	r3, #2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7edb      	ldrb	r3, [r3, #27]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d013      	beq.n	8000dba <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3324      	adds	r3, #36	@ 0x24
 8000d96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d9a:	f000 fc34 	bl	8001606 <MQTTstrlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	1c9c      	adds	r4, r3, #2
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3330      	adds	r3, #48	@ 0x30
 8000da6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000daa:	f000 fc2c 	bl	8001606 <MQTTstrlen>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4423      	add	r3, r4
 8000db2:	3302      	adds	r3, #2
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d103      	bne.n	8000dca <MQTTSerialize_connectLength+0x7c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00a      	beq.n	8000de0 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3340      	adds	r3, #64	@ 0x40
 8000dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000dd2:	f000 fc18 	bl	8001606 <MQTTstrlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	3302      	adds	r3, #2
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d103      	bne.n	8000df0 <MQTTSerialize_connectLength+0xa2>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00a      	beq.n	8000e06 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	334c      	adds	r3, #76	@ 0x4c
 8000df4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000df8:	f000 fc05 	bl	8001606 <MQTTstrlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	3302      	adds	r3, #2
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd90      	pop	{r4, r7, pc}

08000e10 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff8b 	bl	8000d4e <MQTTSerialize_connectLength>
 8000e38:	6238      	str	r0, [r7, #32]
 8000e3a:	6a38      	ldr	r0, [r7, #32]
 8000e3c:	f000 fa98 	bl	8001370 <MQTTPacket_len>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	4293      	cmp	r3, r2
 8000e46:	da03      	bge.n	8000e50 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000e48:	f06f 0301 	mvn.w	r3, #1
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8000e4e:	e0c2      	b.n	8000fd6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000e54:	7e3b      	ldrb	r3, [r7, #24]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f362 1307 	bfi	r3, r2, #4, #4
 8000e5c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000e5e:	7e3a      	ldrb	r2, [r7, #24]
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fb11 	bl	800148e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	6a39      	ldr	r1, [r7, #32]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fa12 	bl	800129a <MQTTPacket_encode>
 8000e76:	4602      	mov	r2, r0
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7a1b      	ldrb	r3, [r3, #8]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d10c      	bne.n	8000ea0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4955      	ldr	r1, [pc, #340]	@ (8000fe0 <MQTTSerialize_connect+0x1d0>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fb3c 	bl	800150a <writeCString>
		writeChar(&ptr, (char) 4);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2104      	movs	r1, #4
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 faf8 	bl	800148e <writeChar>
 8000e9e:	e00b      	b.n	8000eb8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	494f      	ldr	r1, [pc, #316]	@ (8000fe4 <MQTTSerialize_connect+0x1d4>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fb2f 	bl	800150a <writeCString>
		writeChar(&ptr, (char) 3);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 faeb 	bl	800148e <writeChar>
	}

	flags.all = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7e9b      	ldrb	r3, [r3, #26]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	7d3b      	ldrb	r3, [r7, #20]
 8000ec8:	f362 0341 	bfi	r3, r2, #1, #1
 8000ecc:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7edb      	ldrb	r3, [r3, #27]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bf14      	ite	ne
 8000ed6:	2301      	movne	r3, #1
 8000ed8:	2300      	moveq	r3, #0
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	7d3b      	ldrb	r3, [r7, #20]
 8000ede:	f362 0382 	bfi	r3, r2, #2, #1
 8000ee2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000ee4:	7d3b      	ldrb	r3, [r7, #20]
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	7d3b      	ldrb	r3, [r7, #20]
 8000efe:	f362 03c4 	bfi	r3, r2, #3, #2
 8000f02:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	7d3b      	ldrb	r3, [r7, #20]
 8000f12:	f362 1345 	bfi	r3, r2, #5, #1
 8000f16:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d103      	bne.n	8000f28 <MQTTSerialize_connect+0x118>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8000f28:	7d3b      	ldrb	r3, [r7, #20]
 8000f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f2e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <MQTTSerialize_connect+0x130>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8000f40:	7d3b      	ldrb	r3, [r7, #20]
 8000f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f46:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8000f48:	7d3a      	ldrb	r2, [r7, #20]
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fa9c 	bl	800148e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	8b1b      	ldrh	r3, [r3, #24]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 faa8 	bl	80014b8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f107 001c 	add.w	r0, r7, #28
 8000f6e:	330c      	adds	r3, #12
 8000f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f72:	f000 fae9 	bl	8001548 <writeMQTTString>
	if (options->willFlag)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7edb      	ldrb	r3, [r3, #27]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00d      	beq.n	8000f9a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f107 001c 	add.w	r0, r7, #28
 8000f84:	3324      	adds	r3, #36	@ 0x24
 8000f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f88:	f000 fade 	bl	8001548 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f107 001c 	add.w	r0, r7, #28
 8000f92:	3330      	adds	r3, #48	@ 0x30
 8000f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f96:	f000 fad7 	bl	8001548 <writeMQTTString>
	}
	if (flags.bits.username)
 8000f9a:	7d3b      	ldrb	r3, [r7, #20]
 8000f9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f107 001c 	add.w	r0, r7, #28
 8000fac:	3340      	adds	r3, #64	@ 0x40
 8000fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb0:	f000 faca 	bl	8001548 <writeMQTTString>
	if (flags.bits.password)
 8000fb4:	7d3b      	ldrb	r3, [r7, #20]
 8000fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f107 001c 	add.w	r0, r7, #28
 8000fc6:	334c      	adds	r3, #76	@ 0x4c
 8000fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fca:	f000 fabd 	bl	8001548 <writeMQTTString>

	rc = ptr - buf;
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3728      	adds	r7, #40	@ 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	0800781c 	.word	0x0800781c
 8000fe4:	08007824 	.word	0x08007824

08000fe8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fa29 	bl	8001466 <readChar>
 8001014:	4603      	mov	r3, r0
 8001016:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8001018:	7f3b      	ldrb	r3, [r7, #28]
 800101a:	f023 030f 	bic.w	r3, r3, #15
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b20      	cmp	r3, #32
 8001022:	d12e      	bne.n	8001082 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	f107 0214 	add.w	r2, r7, #20
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f9e9 	bl	8001404 <MQTTPacket_decodeBuf>
 8001032:	6278      	str	r0, [r7, #36]	@ 0x24
 8001034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4413      	add	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4413      	add	r3, r2
 8001042:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6a3a      	ldr	r2, [r7, #32]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b01      	cmp	r3, #1
 800104c:	dd1b      	ble.n	8001086 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fa07 	bl	8001466 <readChar>
 8001058:	4603      	mov	r3, r0
 800105a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800105c:	7c3b      	ldrb	r3, [r7, #16]
 800105e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f9f9 	bl	8001466 <readChar>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001080:	e002      	b.n	8001088 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001082:	bf00      	nop
 8001084:	e000      	b.n	8001088 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001086:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800108a:	4618      	mov	r0, r3
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b088      	sub	sp, #32
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	4613      	mov	r3, r2
 800109e:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	dc03      	bgt.n	80010bc <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80010b4:	f06f 0301 	mvn.w	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
		goto exit;
 80010ba:	e01d      	b.n	80010f8 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	7e3b      	ldrb	r3, [r7, #24]
 80010ca:	f362 1307 	bfi	r3, r2, #4, #4
 80010ce:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80010d0:	7e3a      	ldrb	r2, [r7, #24]
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f9d8 	bl	800148e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f8d9 	bl	800129a <MQTTPacket_encode>
 80010e8:	4602      	mov	r2, r0
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	4413      	add	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80010f8:	69fb      	ldr	r3, [r7, #28]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800110c:	220c      	movs	r2, #12
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ffbe 	bl	8001092 <MQTTSerialize_zero>
 8001116:	4603      	mov	r3, r0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001134:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f98d 	bl	8001466 <readChar>
 800114c:	4603      	mov	r3, r0
 800114e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8001150:	7f3b      	ldrb	r3, [r7, #28]
 8001152:	f023 030f 	bic.w	r3, r3, #15
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b30      	cmp	r3, #48	@ 0x30
 800115a:	d14b      	bne.n	80011f4 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800115c:	7f3b      	ldrb	r3, [r7, #28]
 800115e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800116a:	7f3b      	ldrb	r3, [r7, #28]
 800116c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001170:	b2db      	uxtb	r3, r3
 8001172:	461a      	mov	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8001178:	7f3b      	ldrb	r3, [r7, #28]
 800117a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f107 0214 	add.w	r2, r7, #20
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f938 	bl	8001404 <MQTTPacket_decodeBuf>
 8001194:	6278      	str	r0, [r7, #36]	@ 0x24
 8001196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	4413      	add	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	4413      	add	r3, r2
 80011a4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	6a3a      	ldr	r2, [r7, #32]
 80011ac:	4619      	mov	r1, r3
 80011ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011b0:	f000 f9f8 	bl	80015a4 <readMQTTLenString>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d01e      	beq.n	80011f8 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6a3a      	ldr	r2, [r7, #32]
 80011be:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db19      	blt.n	80011f8 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	dd08      	ble.n	80011de <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f92d 	bl	8001430 <readInt>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	6a3a      	ldr	r2, [r7, #32]
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011e6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ec:	601a      	str	r2, [r3, #0]
	rc = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f2:	e002      	b.n	80011fa <MQTTDeserialize_publish+0xda>
		goto exit;
 80011f4:	bf00      	nop
 80011f6:	e000      	b.n	80011fa <MQTTDeserialize_publish+0xda>
		goto exit;
 80011f8:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3728      	adds	r7, #40	@ 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f91d 	bl	8001466 <readChar>
 800122c:	4603      	mov	r3, r0
 800122e:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8001230:	7f3b      	ldrb	r3, [r7, #28]
 8001232:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800123e:	7f3b      	ldrb	r3, [r7, #28]
 8001240:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	f107 0214 	add.w	r2, r7, #20
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f8d5 	bl	8001404 <MQTTPacket_decodeBuf>
 800125a:	6278      	str	r0, [r7, #36]	@ 0x24
 800125c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4413      	add	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4413      	add	r3, r2
 800126a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	dd0b      	ble.n	800128e <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f8d8 	bl	8001430 <readInt>
 8001280:	4603      	mov	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
 800128c:	e000      	b.n	8001290 <MQTTDeserialize_ack+0x8c>
		goto exit;
 800128e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001292:	4618      	mov	r0, r3
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	425a      	negs	r2, r3
 80012ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80012b4:	bf58      	it	pl
 80012b6:	4253      	negpl	r3, r2
 80012b8:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da00      	bge.n	80012c2 <MQTTPacket_encode+0x28>
 80012c0:	337f      	adds	r3, #127	@ 0x7f
 80012c2:	11db      	asrs	r3, r3, #7
 80012c4:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dd03      	ble.n	80012d4 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012d2:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60fa      	str	r2, [r7, #12]
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	7afa      	ldrb	r2, [r7, #11]
 80012e2:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	dcde      	bgt.n	80012a8 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	3301      	adds	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b04      	cmp	r3, #4
 8001320:	dd03      	ble.n	800132a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	60fb      	str	r3, [r7, #12]
			goto exit;
 8001328:	e01d      	b.n	8001366 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800132a:	f107 020b 	add.w	r2, r7, #11
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2101      	movs	r1, #1
 8001332:	4610      	mov	r0, r2
 8001334:	4798      	blx	r3
 8001336:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d112      	bne.n	8001364 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	7afb      	ldrb	r3, [r7, #11]
 8001344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001348:	6979      	ldr	r1, [r7, #20]
 800134a:	fb01 f303 	mul.w	r3, r1, r3
 800134e:	441a      	add	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	01db      	lsls	r3, r3, #7
 8001358:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	dbd6      	blt.n	8001310 <MQTTPacket_decode+0x18>
exit:
 8001362:	e000      	b.n	8001366 <MQTTPacket_decode+0x6e>
			goto exit;
 8001364:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8001366:	693b      	ldr	r3, [r7, #16]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3301      	adds	r3, #1
 800137c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b7f      	cmp	r3, #127	@ 0x7f
 8001382:	dc03      	bgt.n	800138c <MQTTPacket_len+0x1c>
		rem_len += 1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3301      	adds	r3, #1
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	e012      	b.n	80013b2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001392:	da03      	bge.n	800139c <MQTTPacket_len+0x2c>
		rem_len += 2;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3302      	adds	r3, #2
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e00a      	b.n	80013b2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <MQTTPacket_len+0x50>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	dc03      	bgt.n	80013ac <MQTTPacket_len+0x3c>
		rem_len += 3;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3303      	adds	r3, #3
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e002      	b.n	80013b2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3304      	adds	r3, #4
 80013b0:	607b      	str	r3, [r7, #4]
	return rem_len;
 80013b2:	687b      	ldr	r3, [r7, #4]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	001ffffe 	.word	0x001ffffe

080013c4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	e00a      	b.n	80013ea <bufchar+0x26>
		*c = *bufptr++;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <bufchar+0x3c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	4909      	ldr	r1, [pc, #36]	@ (8001400 <bufchar+0x3c>)
 80013dc:	600a      	str	r2, [r1, #0]
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf0      	blt.n	80013d4 <bufchar+0x10>
	return count;
 80013f2:	683b      	ldr	r3, [r7, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	2000013c 	.word	0x2000013c

08001404 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800140e:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <MQTTPacket_decodeBuf+0x24>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <MQTTPacket_decodeBuf+0x28>)
 8001418:	f7ff ff6e 	bl	80012f8 <MQTTPacket_decode>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000013c 	.word	0x2000013c
 800142c:	080013c5 	.word	0x080013c5

08001430 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	3201      	adds	r2, #1
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	4413      	add	r3, r2
 800144c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1c9a      	adds	r2, r3, #2
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	601a      	str	r2, [r3, #0]
	return len;
 8001458:	68bb      	ldr	r3, [r7, #8]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	601a      	str	r2, [r3, #0]
	return c;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	601a      	str	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	da00      	bge.n	80014ca <writeInt+0x12>
 80014c8:	33ff      	adds	r3, #255	@ 0xff
 80014ca:	121b      	asrs	r3, r3, #8
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	425a      	negs	r2, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	bf58      	it	pl
 80014ea:	4253      	negpl	r3, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8001514:	6838      	ldr	r0, [r7, #0]
 8001516:	f7fe fe63 	bl	80001e0 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800151e:	68f9      	ldr	r1, [r7, #12]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffc9 	bl	80014b8 <writeInt>
	memcpy(*pptr, string, len);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	6839      	ldr	r1, [r7, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fb3b 	bl	8006baa <memcpy>
	*pptr += len;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	441a      	add	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	4638      	mov	r0, r7
 8001552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	dd12      	ble.n	8001582 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4619      	mov	r1, r3
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff ffa9 	bl	80014b8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4618      	mov	r0, r3
 8001570:	f005 fb1b 	bl	8006baa <memcpy>
		*pptr += mqttstring.lenstring.len;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	441a      	add	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8001580:	e00c      	b.n	800159c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff ffbc 	bl	800150a <writeCString>
}
 8001592:	e003      	b.n	800159c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8001594:	2100      	movs	r1, #0
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff ff8e 	bl	80014b8 <writeInt>
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	dd1a      	ble.n	80015f6 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80015c0:	68b8      	ldr	r0, [r7, #8]
 80015c2:	f7ff ff35 	bl	8001430 <readInt>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	6852      	ldr	r2, [r2, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d30c      	bcc.n	80015f6 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	6852      	ldr	r2, [r2, #4]
 80015ec:	441a      	add	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	601a      	str	r2, [r3, #0]
			rc = 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 80015fc:	697b      	ldr	r3, [r7, #20]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fdde 	bl	80001e0 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e001      	b.n	800162e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	617b      	str	r3, [r7, #20]
	return rc;
 800162e:	697b      	ldr	r3, [r7, #20]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
		blen = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00a      	beq.n	8001668 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fdbf 	bl	80001e0 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e005      	b.n	8001674 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7fe fdb3 	bl	80001e0 <strlen>
 800167a:	4603      	mov	r3, r0
 800167c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	429a      	cmp	r2, r3
 8001684:	d10a      	bne.n	800169c <MQTTPacket_equals+0x64>
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	461a      	mov	r2, r3
 800168a:	6839      	ldr	r1, [r7, #0]
 800168c:	6938      	ldr	r0, [r7, #16]
 800168e:	f005 f9f7 	bl	8006a80 <strncmp>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <MQTTPacket_equals+0x64>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <MQTTPacket_equals+0x66>
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	4638      	mov	r0, r7
 80016b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80016b8:	463b      	mov	r3, r7
 80016ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016be:	f7ff ffa2 	bl	8001606 <MQTTstrlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	1c9a      	adds	r2, r3, #2
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	4413      	add	r3, r2
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4413      	add	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	dd02      	ble.n	80016dc <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3302      	adds	r3, #2
 80016da:	617b      	str	r3, [r7, #20]
	return len;
 80016dc:	697b      	ldr	r3, [r7, #20]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b08a      	sub	sp, #40	@ 0x28
 80016ea:	af02      	add	r7, sp, #8
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4613      	mov	r3, r2
 80016f4:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8001706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800170e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f7ff ffc8 	bl	80016a6 <MQTTSerialize_publishLength>
 8001716:	61b8      	str	r0, [r7, #24]
 8001718:	69b8      	ldr	r0, [r7, #24]
 800171a:	f7ff fe29 	bl	8001370 <MQTTPacket_len>
 800171e:	4602      	mov	r2, r0
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4293      	cmp	r3, r2
 8001724:	da03      	bge.n	800172e <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001726:	f06f 0301 	mvn.w	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800172c:	e04c      	b.n	80017c8 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800172e:	7c3b      	ldrb	r3, [r7, #16]
 8001730:	2203      	movs	r2, #3
 8001732:	f362 1307 	bfi	r3, r2, #4, #4
 8001736:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	b2da      	uxtb	r2, r3
 8001740:	7c3b      	ldrb	r3, [r7, #16]
 8001742:	f362 03c3 	bfi	r3, r2, #3, #1
 8001746:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	7c3b      	ldrb	r3, [r7, #16]
 8001752:	f362 0342 	bfi	r3, r2, #1, #2
 8001756:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8001758:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	b2da      	uxtb	r2, r3
 8001762:	7c3b      	ldrb	r3, [r7, #16]
 8001764:	f362 0300 	bfi	r3, r2, #0, #1
 8001768:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800176a:	7c3a      	ldrb	r2, [r7, #16]
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe8b 	bl	800148e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fd8c 	bl	800129a <MQTTPacket_encode>
 8001782:	4602      	mov	r2, r0
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	4413      	add	r3, r2
 8001788:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800178a:	f107 0014 	add.w	r0, r7, #20
 800178e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001794:	f7ff fed8 	bl	8001548 <writeMQTTString>

	if (qos > 0)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	dd06      	ble.n	80017ac <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800179e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fe86 	bl	80014b8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80017b2:	4618      	mov	r0, r3
 80017b4:	f005 f9f9 	bl	8006baa <memcpy>
	ptr += payloadlen;
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017bc:	4413      	add	r3, r2
 80017be:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80017c8:	69fb      	ldr	r3, [r7, #28]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b088      	sub	sp, #32
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	4611      	mov	r1, r2
 80017de:	461a      	mov	r2, r3
 80017e0:	460b      	mov	r3, r1
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	4613      	mov	r3, r2
 80017e6:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	dc03      	bgt.n	8001802 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80017fa:	f06f 0301 	mvn.w	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001800:	e037      	b.n	8001872 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	b2da      	uxtb	r2, r3
 800180a:	7e3b      	ldrb	r3, [r7, #24]
 800180c:	f362 1307 	bfi	r3, r2, #4, #4
 8001810:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	7e3b      	ldrb	r3, [r7, #24]
 800181c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001820:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b06      	cmp	r3, #6
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	b2da      	uxtb	r2, r3
 8001834:	7e3b      	ldrb	r3, [r7, #24]
 8001836:	f362 0342 	bfi	r3, r2, #1, #2
 800183a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800183c:	7e3a      	ldrb	r2, [r7, #24]
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fe22 	bl	800148e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2102      	movs	r1, #2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fd23 	bl	800129a <MQTTPacket_encode>
 8001854:	4602      	mov	r2, r0
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	4413      	add	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800185c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fe27 	bl	80014b8 <writeInt>
	rc = ptr - buf;
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001872:	69fb      	ldr	r3, [r7, #28]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	MilliTimer++;
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <MilliTimer_Handler+0x18>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a03      	ldr	r2, [pc, #12]	@ (8001894 <MilliTimer_Handler+0x18>)
 8001888:	6013      	str	r3, [r2, #0]
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	20000140 	.word	0x20000140

08001898 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	605a      	str	r2, [r3, #4]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <TimerIsExpired+0x28>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	0fdb      	lsrs	r3, r3, #31
 80018cc:	b2db      	uxtb	r3, r3
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000140 	.word	0x20000140

080018e0 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <TimerCountdownMS+0x24>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	441a      	add	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	605a      	str	r2, [r3, #4]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000140 	.word	0x20000140

08001908 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001918:	fb03 f202 	mul.w	r2, r3, r2
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <TimerCountdown+0x2c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	441a      	add	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	605a      	str	r2, [r3, #4]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000140 	.word	0x20000140

08001938 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <TimerLeftMS+0x28>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000140 	.word	0x20000140

08001964 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <NewNetwork+0x30>)
 8001978:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a06      	ldr	r2, [pc, #24]	@ (8001998 <NewNetwork+0x34>)
 800197e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a06      	ldr	r2, [pc, #24]	@ (800199c <NewNetwork+0x38>)
 8001984:	60da      	str	r2, [r3, #12]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	080019a1 	.word	0x080019a1
 8001998:	080019fb 	.word	0x080019fb
 800199c:	08001a43 	.word	0x08001a43

080019a0 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	3301      	adds	r3, #1
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 fda7 	bl	8005510 <WIZCHIP_READ>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b17      	cmp	r3, #23
 80019c6:	d113      	bne.n	80019f0 <w5x00_read+0x50>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 ff41 	bl	8005856 <getSn_RX_RSR>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00a      	beq.n	80019f0 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	b292      	uxth	r2, r2
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f9be 	bl	8004d68 <recv>
 80019ec:	4603      	mov	r3, r0
 80019ee:	e000      	b.n	80019f2 <w5x00_read+0x52>

	return SOCK_ERROR;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	3301      	adds	r3, #1
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fd7a 	bl	8005510 <WIZCHIP_READ>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b17      	cmp	r3, #23
 8001a20:	d10a      	bne.n	8001a38 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 f8a2 	bl	8004b78 <send>
 8001a34:	4603      	mov	r3, r0
 8001a36:	e000      	b.n	8001a3a <w5x00_write+0x40>

	return SOCK_ERROR;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 f81b 	bl	8004a8c <disconnect>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8001a6c:	f243 0339 	movw	r3, #12345	@ 0x3039
 8001a70:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b2d8      	uxtb	r0, r3
 8001a78:	8afa      	ldrh	r2, [r7, #22]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	f002 fda7 	bl	80045d0 <socket>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e00d      	b.n	8001aae <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	88fa      	ldrh	r2, [r7, #6]
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 ff19 	bl	80048d4 <connect>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d001      	beq.n	8001aac <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e000      	b.n	8001aae <ConnectNetwork+0x50>

	return SOCK_OK;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <pa1_adc_init+0x58>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac0:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <pa1_adc_init+0x58>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <pa1_adc_init+0x5c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a11      	ldr	r2, [pc, #68]	@ (8001b14 <pa1_adc_init+0x5c>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <pa1_adc_init+0x5c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b14 <pa1_adc_init+0x5c>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <pa1_adc_init+0x58>)
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <pa1_adc_init+0x58>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aea:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <pa1_adc_init+0x60>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <pa1_adc_init+0x60>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <pa1_adc_init+0x60>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a06      	ldr	r2, [pc, #24]	@ (8001b18 <pa1_adc_init+0x60>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6093      	str	r3, [r2, #8]

}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40012000 	.word	0x40012000

08001b1c <start_conversion>:


void start_conversion(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <start_conversion+0x28>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <start_conversion+0x28>)
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <start_conversion+0x28>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <start_conversion+0x28>)
 8001b32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b36:	6093      	str	r3, [r2, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40012000 	.word	0x40012000

08001b48 <adc_read>:


uint32_t adc_read(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 8001b4c:	bf00      	nop
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <adc_read+0x20>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f9      	beq.n	8001b4e <adc_read+0x6>

	/*Read converted value*/
	return (ADC1->DR);
 8001b5a:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <adc_read+0x20>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40012000 	.word	0x40012000

08001b6c <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <button_init+0x34>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <button_init+0x34>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <button_init+0x38>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a08      	ldr	r2, [pc, #32]	@ (8001ba4 <button_init+0x38>)
 8001b82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001b86:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <button_init+0x38>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <button_init+0x38>)
 8001b8e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001b92:	6013      	str	r3, [r2, #0]

}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020800 	.word	0x40020800

08001ba8 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <fpu_enable+0x50>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb2:	4a11      	ldr	r2, [pc, #68]	@ (8001bf8 <fpu_enable+0x50>)
 8001bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <fpu_enable+0x50>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <fpu_enable+0x50>)
 8001bc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <fpu_enable+0x50>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <fpu_enable+0x50>)
 8001bd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <fpu_enable+0x50>)
 8001bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be2:	4a05      	ldr	r2, [pc, #20]	@ (8001bf8 <fpu_enable+0x50>)
 8001be4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <check_cable_connection>:


wiz_PhyConf current_phy_conf;

void check_cable_connection(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	uint8_t cable_status;

	do{

		printf("\r\nGetting cable status...\r\n");
 8001c02:	480e      	ldr	r0, [pc, #56]	@ (8001c3c <check_cable_connection+0x40>)
 8001c04:	f004 fe00 	bl	8006808 <puts>
		ctlwizchip(CW_GET_PHYLINK,(void *)&cable_status);
 8001c08:	1dfb      	adds	r3, r7, #7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	200f      	movs	r0, #15
 8001c0e:	f004 f847 	bl	8005ca0 <ctlwizchip>

		if(cable_status ==  PHY_LINK_OFF)
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d106      	bne.n	8001c26 <check_cable_connection+0x2a>
		{
			printf("No cable detected ...\r\n");
 8001c18:	4809      	ldr	r0, [pc, #36]	@ (8001c40 <check_cable_connection+0x44>)
 8001c1a:	f004 fdf5 	bl	8006808 <puts>
			delay(1000);
 8001c1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c22:	f000 fe09 	bl	8002838 <delay>
		}

	}while(cable_status ==  PHY_LINK_OFF);
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ea      	beq.n	8001c02 <check_cable_connection+0x6>

	printf("Cable connected...\r\n");
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <check_cable_connection+0x48>)
 8001c2e:	f004 fdeb 	bl	8006808 <puts>

}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	0800782c 	.word	0x0800782c
 8001c40:	08007848 	.word	0x08007848
 8001c44:	08007860 	.word	0x08007860

08001c48 <display_phy_config>:

void display_phy_config(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_conf;
	ctlwizchip(CW_GET_PHYCONF,(void*)&phy_conf);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	200b      	movs	r0, #11
 8001c54:	f004 f824 	bl	8005ca0 <ctlwizchip>

	if(phy_conf.by == PHY_CONFBY_HW)
 8001c58:	793b      	ldrb	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <display_phy_config+0x1e>
	{
		printf("\n\rPHY is currently configured by hardware.");
 8001c5e:	4816      	ldr	r0, [pc, #88]	@ (8001cb8 <display_phy_config+0x70>)
 8001c60:	f004 fd6a 	bl	8006738 <iprintf>
 8001c64:	e002      	b.n	8001c6c <display_phy_config+0x24>
	}
	else{
		printf("\n\rPHY is currently configured by software.");
 8001c66:	4815      	ldr	r0, [pc, #84]	@ (8001cbc <display_phy_config+0x74>)
 8001c68:	f004 fd66 	bl	8006738 <iprintf>

	}
	printf("\r\nSTATUS: Autonegotiation %s",(phy_conf.mode == PHY_MODE_AUTONEGO) ? "Enabled" : "Disabled");
 8001c6c:	797b      	ldrb	r3, [r7, #5]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <display_phy_config+0x2e>
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <display_phy_config+0x78>)
 8001c74:	e000      	b.n	8001c78 <display_phy_config+0x30>
 8001c76:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <display_phy_config+0x7c>)
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4813      	ldr	r0, [pc, #76]	@ (8001cc8 <display_phy_config+0x80>)
 8001c7c:	f004 fd5c 	bl	8006738 <iprintf>
	printf("\r\nSTATUS: Duplex Mode: %s",(phy_conf.duplex == PHY_DUPLEX_FULL) ? "Full Duplex" : "Half Duplex");
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <display_phy_config+0x42>
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <display_phy_config+0x84>)
 8001c88:	e000      	b.n	8001c8c <display_phy_config+0x44>
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <display_phy_config+0x88>)
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4811      	ldr	r0, [pc, #68]	@ (8001cd4 <display_phy_config+0x8c>)
 8001c90:	f004 fd52 	bl	8006738 <iprintf>
	printf("\r\nSTATUS: Speed: %dMbps",(phy_conf.speed == PHY_SPEED_10) ? 10 : 100);
 8001c94:	79bb      	ldrb	r3, [r7, #6]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <display_phy_config+0x56>
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	e000      	b.n	8001ca0 <display_phy_config+0x58>
 8001c9e:	2364      	movs	r3, #100	@ 0x64
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480d      	ldr	r0, [pc, #52]	@ (8001cd8 <display_phy_config+0x90>)
 8001ca4:	f004 fd48 	bl	8006738 <iprintf>
  printf("\r\n...");
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <display_phy_config+0x94>)
 8001caa:	f004 fd45 	bl	8006738 <iprintf>

}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08007874 	.word	0x08007874
 8001cbc:	080078a0 	.word	0x080078a0
 8001cc0:	080078cc 	.word	0x080078cc
 8001cc4:	080078d4 	.word	0x080078d4
 8001cc8:	080078e0 	.word	0x080078e0
 8001ccc:	08007900 	.word	0x08007900
 8001cd0:	0800790c 	.word	0x0800790c
 8001cd4:	08007918 	.word	0x08007918
 8001cd8:	08007934 	.word	0x08007934
 8001cdc:	0800794c 	.word	0x0800794c

08001ce0 <handle_error>:

void handle_error(const char * message)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	printf("ERROR: %s\r\n",message);
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <handle_error+0x14>)
 8001cec:	f004 fd24 	bl	8006738 <iprintf>

	while(1){
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <handle_error+0x10>
 8001cf4:	08007954 	.word	0x08007954

08001cf8 <main>:
		//Do something e.g. blink LED
	}
}
int main()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af04      	add	r7, sp, #16
	/*Enable FPU*/
	fpu_enable();
 8001cfe:	f7ff ff53 	bl	8001ba8 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 8001d02:	f000 fddb 	bl	80028bc <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 8001d06:	f000 fe11 	bl	800292c <debug_uart_init>

	/*Initialize Push button*/
	button_init();
 8001d0a:	f7ff ff2f 	bl	8001b6c <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 8001d0e:	f7ff fed3 	bl	8001ab8 <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 8001d12:	f7ff ff03 	bl	8001b1c <start_conversion>

    wizchip_cs_pin_init();
 8001d16:	f000 feb7 	bl	8002a88 <wizchip_cs_pin_init>
    w5500_spi_init();
 8001d1a:	f000 ff37 	bl	8002b8c <w5500_spi_init>
    w5500_init();
 8001d1e:	f000 ff61 	bl	8002be4 <w5500_init>

    display_phy_config();
 8001d22:	f7ff ff91 	bl	8001c48 <display_phy_config>

    current_phy_conf.by =  PHY_CONFBY_SW;
 8001d26:	4b3f      	ldr	r3, [pc, #252]	@ (8001e24 <main+0x12c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
    current_phy_conf.duplex =  PHY_DUPLEX_FULL;
 8001d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e24 <main+0x12c>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	70da      	strb	r2, [r3, #3]
    current_phy_conf.mode   =  PHY_MODE_AUTONEGO;
 8001d32:	4b3c      	ldr	r3, [pc, #240]	@ (8001e24 <main+0x12c>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	705a      	strb	r2, [r3, #1]
    current_phy_conf.speed =  PHY_SPEED_10;
 8001d38:	4b3a      	ldr	r3, [pc, #232]	@ (8001e24 <main+0x12c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	709a      	strb	r2, [r3, #2]

    ctlwizchip(CW_SET_PHYCONF,(void*)&current_phy_conf);
 8001d3e:	4939      	ldr	r1, [pc, #228]	@ (8001e24 <main+0x12c>)
 8001d40:	200a      	movs	r0, #10
 8001d42:	f003 ffad 	bl	8005ca0 <ctlwizchip>

    check_cable_connection();
 8001d46:	f7ff ff59 	bl	8001bfc <check_cable_connection>

    display_phy_config();
 8001d4a:	f7ff ff7d 	bl	8001c48 <display_phy_config>

    printf("\n\r*****************************MQTTClient Initialization*******************\r\n");
 8001d4e:	4836      	ldr	r0, [pc, #216]	@ (8001e28 <main+0x130>)
 8001d50:	f004 fd5a 	bl	8006808 <puts>

    /*Configure the client connection data*/
    connect_data.MQTTVersion =  3;
 8001d54:	4b35      	ldr	r3, [pc, #212]	@ (8001e2c <main+0x134>)
 8001d56:	2203      	movs	r2, #3
 8001d58:	721a      	strb	r2, [r3, #8]
    connect_data.willFlag = 0;
 8001d5a:	4b34      	ldr	r3, [pc, #208]	@ (8001e2c <main+0x134>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	76da      	strb	r2, [r3, #27]
    connect_data.clientID.cstring = "eexpert015";
 8001d60:	4b32      	ldr	r3, [pc, #200]	@ (8001e2c <main+0x134>)
 8001d62:	4a33      	ldr	r2, [pc, #204]	@ (8001e30 <main+0x138>)
 8001d64:	60da      	str	r2, [r3, #12]
    connect_data.keepAliveInterval = 60;
 8001d66:	4b31      	ldr	r3, [pc, #196]	@ (8001e2c <main+0x134>)
 8001d68:	223c      	movs	r2, #60	@ 0x3c
 8001d6a:	831a      	strh	r2, [r3, #24]
    connect_data.cleansession =  1;
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e2c <main+0x134>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	769a      	strb	r2, [r3, #26]


    NewNetwork(&network,1);
 8001d72:	2101      	movs	r1, #1
 8001d74:	482f      	ldr	r0, [pc, #188]	@ (8001e34 <main+0x13c>)
 8001d76:	f7ff fdf5 	bl	8001964 <NewNetwork>

    printf("Connecting to MQTT Broker...\r\n");
 8001d7a:	482f      	ldr	r0, [pc, #188]	@ (8001e38 <main+0x140>)
 8001d7c:	f004 fd44 	bl	8006808 <puts>

    if(ConnectNetwork(&network,broker_ip,broker_port) != SOCK_OK)
 8001d80:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <main+0x144>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	492e      	ldr	r1, [pc, #184]	@ (8001e40 <main+0x148>)
 8001d88:	482a      	ldr	r0, [pc, #168]	@ (8001e34 <main+0x13c>)
 8001d8a:	f7ff fe68 	bl	8001a5e <ConnectNetwork>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d002      	beq.n	8001d9a <main+0xa2>
    {
    	handle_error("Cannot connect to broker.");
 8001d94:	482b      	ldr	r0, [pc, #172]	@ (8001e44 <main+0x14c>)
 8001d96:	f7ff ffa3 	bl	8001ce0 <handle_error>
    }


     /*Initialize the client with the network parameters*/
    MQTTClientInit(&mqtt_client, &network, 1000, tx_buffer,sizeof(tx_buffer), rx_buffer, sizeof(rx_buffer));
 8001d9a:	2380      	movs	r3, #128	@ 0x80
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <main+0x150>)
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2380      	movs	r3, #128	@ 0x80
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <main+0x154>)
 8001da8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dac:	4921      	ldr	r1, [pc, #132]	@ (8001e34 <main+0x13c>)
 8001dae:	4828      	ldr	r0, [pc, #160]	@ (8001e50 <main+0x158>)
 8001db0:	f7fe fae2 	bl	8000378 <MQTTClientInit>

    printf("Sending MQTT Connect Packet...\r\n");
 8001db4:	4827      	ldr	r0, [pc, #156]	@ (8001e54 <main+0x15c>)
 8001db6:	f004 fd27 	bl	8006808 <puts>

    /*Attempt to connect with the broker*/

    if(MQTTConnect(&mqtt_client,&connect_data) != 0 )
 8001dba:	491c      	ldr	r1, [pc, #112]	@ (8001e2c <main+0x134>)
 8001dbc:	4824      	ldr	r0, [pc, #144]	@ (8001e50 <main+0x158>)
 8001dbe:	f7fe feef 	bl	8000ba0 <MQTTConnect>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <main+0xd6>
    {
    	handle_error("MQTT connection failed.");
 8001dc8:	4823      	ldr	r0, [pc, #140]	@ (8001e58 <main+0x160>)
 8001dca:	f7ff ff89 	bl	8001ce0 <handle_error>

    }

    printf("MQTT Connection successful.\n\r");
 8001dce:	4823      	ldr	r0, [pc, #140]	@ (8001e5c <main+0x164>)
 8001dd0:	f004 fcb2 	bl	8006738 <iprintf>

	while(1)
	{
		/*Read the ADC*/
		 uint16_t sensor_data =  adc_read();
 8001dd4:	f7ff feb8 	bl	8001b48 <adc_read>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	82fb      	strh	r3, [r7, #22]

		/*Convert sensor data to string for MQTT payload*/
		 char payload_buff[16];
		 snprintf(payload_buff,sizeof(payload_buff),"%u",sensor_data);
 8001ddc:	8afb      	ldrh	r3, [r7, #22]
 8001dde:	1d38      	adds	r0, r7, #4
 8001de0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e60 <main+0x168>)
 8001de2:	2110      	movs	r1, #16
 8001de4:	f004 fd18 	bl	8006818 <sniprintf>

		/*Configure MQTT message*/
		 mqtt_msg.qos =  QOS0;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <main+0x16c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
		 mqtt_msg.retained = 0;
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <main+0x16c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	705a      	strb	r2, [r3, #1]
		 mqtt_msg.dup = 0;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <main+0x16c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	709a      	strb	r2, [r3, #2]
		 mqtt_msg.payload =  payload_buff;
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001e64 <main+0x16c>)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	6093      	str	r3, [r2, #8]
		 mqtt_msg.payloadlen =  strlen(payload_buff);
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe f9ec 	bl	80001e0 <strlen>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a16      	ldr	r2, [pc, #88]	@ (8001e64 <main+0x16c>)
 8001e0c:	60d3      	str	r3, [r2, #12]

         /*Publish message to a specific topic*/
		MQTTPublish(&mqtt_client, "eexpert11/topic1", &mqtt_msg);
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <main+0x16c>)
 8001e10:	4915      	ldr	r1, [pc, #84]	@ (8001e68 <main+0x170>)
 8001e12:	480f      	ldr	r0, [pc, #60]	@ (8001e50 <main+0x158>)
 8001e14:	f7fe fed5 	bl	8000bc2 <MQTTPublish>
		delay(1000);
 8001e18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e1c:	f000 fd0c 	bl	8002838 <delay>
	{
 8001e20:	bf00      	nop
 8001e22:	e7d7      	b.n	8001dd4 <main+0xdc>
 8001e24:	200002cc 	.word	0x200002cc
 8001e28:	08007960 	.word	0x08007960
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	080079b0 	.word	0x080079b0
 8001e34:	200001ac 	.word	0x200001ac
 8001e38:	080079bc 	.word	0x080079bc
 8001e3c:	2000005c 	.word	0x2000005c
 8001e40:	20000058 	.word	0x20000058
 8001e44:	080079dc 	.word	0x080079dc
 8001e48:	2000024c 	.word	0x2000024c
 8001e4c:	200001cc 	.word	0x200001cc
 8001e50:	20000144 	.word	0x20000144
 8001e54:	080079f8 	.word	0x080079f8
 8001e58:	08007a18 	.word	0x08007a18
 8001e5c:	08007a30 	.word	0x08007a30
 8001e60:	08007a50 	.word	0x08007a50
 8001e64:	200001bc 	.word	0x200001bc
 8001e68:	08007a54 	.word	0x08007a54

08001e6c <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8001e70:	4b3e      	ldr	r3, [pc, #248]	@ (8001f6c <spi1_gpio_init+0x100>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e74:	4a3d      	ldr	r2, [pc, #244]	@ (8001f6c <spi1_gpio_init+0x100>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 8001e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a3b      	ldr	r2, [pc, #236]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001e82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e86:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8001e88:	4b39      	ldr	r3, [pc, #228]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a38      	ldr	r2, [pc, #224]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001e8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e92:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8001e94:	4b36      	ldr	r3, [pc, #216]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a35      	ldr	r2, [pc, #212]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001e9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e9e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8001ea0:	4b33      	ldr	r3, [pc, #204]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a32      	ldr	r2, [pc, #200]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001ea6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001eaa:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8001eac:	4b30      	ldr	r3, [pc, #192]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2f      	ldr	r2, [pc, #188]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001eb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eb6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ec2:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a29      	ldr	r2, [pc, #164]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ece:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8001ed0:	4b27      	ldr	r3, [pc, #156]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a26      	ldr	r2, [pc, #152]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001ed6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001eda:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8001edc:	4b24      	ldr	r3, [pc, #144]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001ee2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ee6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 8001ee8:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a20      	ldr	r2, [pc, #128]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001eee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ef2:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a1a      	ldr	r2, [pc, #104]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f06:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 8001f0c:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a17      	ldr	r2, [pc, #92]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f16:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 8001f18:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f1e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001f22:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a11      	ldr	r2, [pc, #68]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a0e      	ldr	r2, [pc, #56]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f36:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001f3a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a0b      	ldr	r2, [pc, #44]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f46:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4a08      	ldr	r2, [pc, #32]	@ (8001f70 <spi1_gpio_init+0x104>)
 8001f4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f52:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <spi1_gpio_init+0x100>)
 8001f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f58:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <spi1_gpio_init+0x100>)
 8001f5a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f5e:	6453      	str	r3, [r2, #68]	@ 0x44

}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <spi_init+0x12>
	{
		return DEV_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e05a      	b.n	800203c <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28

	if(hspi->State == SPI_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <spi_init+0x26>
	{
		spi1_gpio_init();
 8001f96:	f7ff ff69 	bl	8001e6c <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fb0:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffe:	ea42 0103 	orr.w	r1, r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	f003 0104 	and.w	r1, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	f003 0210 	and.w	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->State =  SPI_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   return DEV_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <spi_transmit>:




StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code;// = DEV_OK;
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	83fb      	strh	r3, [r7, #30]
	tickstart = get_tick();
 8002058:	f000 fc0c 	bl	8002874 <get_tick>
 800205c:	61b8      	str	r0, [r7, #24]



	if((p_data == NULL) || (size  == 0))
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <spi_transmit+0x26>
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <spi_transmit+0x2a>
	{

		return DEV_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e106      	b.n	800227c <spi_transmit+0x238>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2203      	movs	r2, #3
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	88fa      	ldrh	r2, [r7, #6]
 8002086:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	865a      	strh	r2, [r3, #50]	@ 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  0;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  0;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	875a      	strh	r2, [r3, #58]	@ 0x3a


	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020a8:	d10f      	bne.n	80020ca <spi_transmit+0x86>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020b8:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020c8:	601a      	str	r2, [r3, #0]

	}



	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d4:	2b40      	cmp	r3, #64	@ 0x40
 80020d6:	d007      	beq.n	80020e8 <spi_transmit+0xa4>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020e6:	601a      	str	r2, [r3, #0]
	}

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f2:	2b40      	cmp	r3, #64	@ 0x40
 80020f4:	d007      	beq.n	8002106 <spi_transmit+0xc2>
	  {

			SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002104:	601a      	str	r2, [r3, #0]

	  }

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800210e:	d14e      	bne.n	80021ae <spi_transmit+0x16a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <spi_transmit+0xda>
 8002118:	8bfb      	ldrh	r3, [r7, #30]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d141      	bne.n	80021a2 <spi_transmit+0x15e>
		{
			hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002122:	881a      	ldrh	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212e:	1c9a      	adds	r2, r3, #2
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	865a      	strh	r2, [r3, #50]	@ 0x32
		}

		while(hspi->TxXferCount> 0)
 8002142:	e02e      	b.n	80021a2 <spi_transmit+0x15e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d012      	beq.n	8002178 <spi_transmit+0x134>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	1c9a      	adds	r2, r3, #2
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002176:	e014      	b.n	80021a2 <spi_transmit+0x15e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8002178:	f000 fb7c 	bl	8002874 <get_tick>
 800217c:	4602      	mov	r2, r0
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d803      	bhi.n	8002190 <spi_transmit+0x14c>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d102      	bne.n	8002196 <spi_transmit+0x152>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <spi_transmit+0x15e>
		         {
					hspi->State = SPI_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return DEV_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e06c      	b.n	800227c <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1cb      	bne.n	8002144 <spi_transmit+0x100>
 80021ac:	e051      	b.n	8002252 <spi_transmit+0x20e>
	}


	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <spi_transmit+0x178>
 80021b6:	8bfb      	ldrh	r3, [r7, #30]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d145      	bne.n	8002248 <spi_transmit+0x204>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) =  *((const uint8_t *)hspi->pTxBuffPtr);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	330c      	adds	r3, #12
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	865a      	strh	r2, [r3, #50]	@ 0x32
		}
		while(hspi->TxXferCount> 0)
 80021e2:	e031      	b.n	8002248 <spi_transmit+0x204>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d013      	beq.n	800221a <spi_transmit+0x1d6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*(const uint8_t *)hspi->pTxBuffPtr);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	330c      	adds	r3, #12
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002218:	e016      	b.n	8002248 <spi_transmit+0x204>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 800221a:	f000 fb2b 	bl	8002874 <get_tick>
 800221e:	4602      	mov	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d803      	bhi.n	8002232 <spi_transmit+0x1ee>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d102      	bne.n	8002238 <spi_transmit+0x1f4>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <spi_transmit+0x204>
		         {
					error_code = DEV_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	e019      	b.n	800227c <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1c8      	bne.n	80021e4 <spi_transmit+0x1a0>
			}
		}

	}

	  __IO uint32_t tmpreg_ovr = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->DR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->SR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]

		hspi->State =  SPI_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <spi_transmit+0x236>
	{
		return DEV_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <spi_transmit+0x238>
	}
	else
	{
		return DEV_OK;
 800227a:	2300      	movs	r3, #0

	}

}
 800227c:	4618      	mov	r0, r3
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]



	if(hspi->State != SPI_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d007      	beq.n	80022b2 <spi_receive+0x2e>
	{
		error_code = DEV_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	e0d1      	b.n	8002456 <spi_receive+0x1d2>
	}

	  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022ba:	d112      	bne.n	80022e2 <spi_receive+0x5e>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10e      	bne.n	80022e2 <spi_receive+0x5e>
	  {
	    hspi->State = SPI_STATE_BUSY_RX;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2204      	movs	r2, #4
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
	    return spi_transmit_receive(hspi, p_data, p_data, size, timeout);
 80022cc:	88fa      	ldrh	r2, [r7, #6]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	4613      	mov	r3, r2
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f8c0 	bl	800245e <spi_transmit_receive>
 80022de:	4603      	mov	r3, r0
 80022e0:	e0b9      	b.n	8002456 <spi_receive+0x1d2>
	  }

		tickstart = get_tick();
 80022e2:	f000 fac7 	bl	8002874 <get_tick>
 80022e6:	6138      	str	r0, [r7, #16]

	if((p_data == NULL) || (size  == 0))
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <spi_receive+0x70>
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <spi_receive+0x80>
	{
		error_code =  DEV_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 8002300:	7dfb      	ldrb	r3, [r7, #23]
 8002302:	e0a8      	b.n	8002456 <spi_receive+0x1d2>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2204      	movs	r2, #4
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  size;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	875a      	strh	r2, [r3, #58]	@ 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  0;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  0;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	865a      	strh	r2, [r3, #50]	@ 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002340:	2b40      	cmp	r3, #64	@ 0x40
 8002342:	d007      	beq.n	8002354 <spi_receive+0xd0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002352:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d16c      	bne.n	8002436 <spi_receive+0x1b2>
	{
		while(hspi->RxXferCount > 0)
 800235c:	e033      	b.n	80023c6 <spi_receive+0x142>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <spi_receive+0x114>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f103 020c 	add.w	r2, r3, #12
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002378:	7812      	ldrb	r2, [r2, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8002396:	e016      	b.n	80023c6 <spi_receive+0x142>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8002398:	f000 fa6c 	bl	8002874 <get_tick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d803      	bhi.n	80023b0 <spi_receive+0x12c>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ae:	d102      	bne.n	80023b6 <spi_receive+0x132>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d107      	bne.n	80023c6 <spi_receive+0x142>
		         {
					error_code = DEV_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	e047      	b.n	8002456 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1c6      	bne.n	800235e <spi_receive+0xda>
 80023d0:	e036      	b.n	8002440 <spi_receive+0x1bc>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <spi_receive+0x184>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ea:	b292      	uxth	r2, r2
 80023ec:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f2:	1c9a      	adds	r2, r3, #2
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8002406:	e016      	b.n	8002436 <spi_receive+0x1b2>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8002408:	f000 fa34 	bl	8002874 <get_tick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d803      	bhi.n	8002420 <spi_receive+0x19c>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d102      	bne.n	8002426 <spi_receive+0x1a2>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <spi_receive+0x1b2>
		         {
					error_code = DEV_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	e00f      	b.n	8002456 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1c8      	bne.n	80023d2 <spi_receive+0x14e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <spi_receive+0x1c8>
	{
		error_code = DEV_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return error_code;
 8002454:	7dfb      	ldrb	r3, [r7, #23]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <spi_transmit_receive>:


StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b08a      	sub	sp, #40	@ 0x28
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 800246c:	2301      	movs	r3, #1
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
	  StatusTypeDef        error_code = DEV_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 8002476:	f000 f9fd 	bl	8002874 <get_tick>
 800247a:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002482:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	635a      	str	r2, [r3, #52]	@ 0x34
	  hspi->RxXferCount = size;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	887a      	ldrh	r2, [r7, #2]
 800249e:	875a      	strh	r2, [r3, #58]	@ 0x3a
	  hspi->RxXferSize  = size;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	871a      	strh	r2, [r3, #56]	@ 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi->TxXferCount = size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	865a      	strh	r2, [r3, #50]	@ 0x32
	  hspi->TxXferSize  = size;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	887a      	ldrh	r2, [r7, #2]
 80024b6:	861a      	strh	r2, [r3, #48]	@ 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c2:	2b40      	cmp	r3, #64	@ 0x40
 80024c4:	d007      	beq.n	80024d6 <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024d4:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024de:	d17e      	bne.n	80025de <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <spi_transmit_receive+0x90>
 80024e8:	8a7b      	ldrh	r3, [r7, #18]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d16c      	bne.n	80025c8 <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	881a      	ldrh	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fe:	1c9a      	adds	r2, r3, #2
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002512:	e059      	b.n	80025c8 <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d01b      	beq.n	800255a <spi_transmit_receive+0xfc>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d016      	beq.n	800255a <spi_transmit_receive+0xfc>
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	2b01      	cmp	r3, #1
 8002530:	d113      	bne.n	800255a <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	881a      	ldrh	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002542:	1c9a      	adds	r2, r3, #2
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d019      	beq.n	800259c <spi_transmit_receive+0x13e>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d014      	beq.n	800259c <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257c:	b292      	uxth	r2, r2
 800257e:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002584:	1c9a      	adds	r2, r3, #2
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8002598:	2301      	movs	r3, #1
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 800259c:	f000 f96a 	bl	8002874 <get_tick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d80d      	bhi.n	80025c8 <spi_transmit_receive+0x16a>
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d009      	beq.n	80025c8 <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 80025c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025c6:	e08f      	b.n	80026e8 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1a0      	bne.n	8002514 <spi_transmit_receive+0xb6>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d19b      	bne.n	8002514 <spi_transmit_receive+0xb6>
 80025dc:	e082      	b.n	80026e4 <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <spi_transmit_receive+0x18e>
 80025e6:	8a7b      	ldrh	r3, [r7, #18]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d171      	bne.n	80026d0 <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	330c      	adds	r3, #12
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002612:	e05d      	b.n	80026d0 <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01c      	beq.n	800265c <spi_transmit_receive+0x1fe>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d017      	beq.n	800265c <spi_transmit_receive+0x1fe>
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	2b01      	cmp	r3, #1
 8002630:	d114      	bne.n	800265c <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	330c      	adds	r3, #12
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d019      	beq.n	800269e <spi_transmit_receive+0x240>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d014      	beq.n	800269e <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 800269a:	2301      	movs	r3, #1
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 800269e:	f000 f8e9 	bl	8002874 <get_tick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d803      	bhi.n	80026b6 <spi_transmit_receive+0x258>
 80026ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d102      	bne.n	80026bc <spi_transmit_receive+0x25e>
 80026b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 80026ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026ce:	e00b      	b.n	80026e8 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d19c      	bne.n	8002614 <spi_transmit_receive+0x1b6>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d197      	bne.n	8002614 <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 80026e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3728      	adds	r7, #40	@ 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e00a      	b.n	8002718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002702:	f3af 8000 	nop.w
 8002706:	4601      	mov	r1, r0
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	60ba      	str	r2, [r7, #8]
 800270e:	b2ca      	uxtb	r2, r1
 8002710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	dbf0      	blt.n	8002702 <_read+0x12>
	}

return len;
 8002720:	687b      	ldr	r3, [r7, #4]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e009      	b.n	8002750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f8e5 	bl	8002914 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	dbf1      	blt.n	800273c <_write+0x12>
	}
	return len;
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_close>:

int _close(int file)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
	return -1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800278a:	605a      	str	r2, [r3, #4]
	return 0;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <_isatty>:

int _isatty(int file)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	return 1;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
	return 0;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d4:	4a14      	ldr	r2, [pc, #80]	@ (8002828 <_sbrk+0x5c>)
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <_sbrk+0x60>)
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e0:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <_sbrk+0x64>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <_sbrk+0x64>)
 80027ea:	4a12      	ldr	r2, [pc, #72]	@ (8002834 <_sbrk+0x68>)
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ee:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d207      	bcs.n	800280c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027fc:	f004 f9a8 	bl	8006b50 <__errno>
 8002800:	4603      	mov	r3, r0
 8002802:	220c      	movs	r2, #12
 8002804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	e009      	b.n	8002820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002812:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <_sbrk+0x64>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	4a05      	ldr	r2, [pc, #20]	@ (8002830 <_sbrk+0x64>)
 800281c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20020000 	.word	0x20020000
 800282c:	00000400 	.word	0x00000400
 8002830:	200002d0 	.word	0x200002d0
 8002834:	20000978 	.word	0x20000978

08002838 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8002840:	f000 f818 	bl	8002874 <get_tick>
 8002844:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d002      	beq.n	8002858 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8002858:	bf00      	nop
 800285a:	f000 f80b 	bl	8002874 <get_tick>
 800285e:	4602      	mov	r2, r0
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	429a      	cmp	r2, r3
 8002868:	d8f7      	bhi.n	800285a <delay+0x22>

}
 800286a:	bf00      	nop
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <get_tick>:

uint32_t get_tick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <get_tick+0x24>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a06      	ldr	r2, [pc, #24]	@ (800289c <get_tick+0x28>)
 8002882:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002884:	b662      	cpsie	i
}
 8002886:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8002888:	4b04      	ldr	r3, [pc, #16]	@ (800289c <get_tick+0x28>)
 800288a:	681b      	ldr	r3, [r3, #0]

}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	200002d4 	.word	0x200002d4
 800289c:	200002d8 	.word	0x200002d8

080028a0 <tick_increment>:
static void tick_increment(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 80028a4:	4b04      	ldr	r3, [pc, #16]	@ (80028b8 <tick_increment+0x18>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	4a03      	ldr	r2, [pc, #12]	@ (80028b8 <tick_increment+0x18>)
 80028ac:	6013      	str	r3, [r2, #0]
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	200002d4 	.word	0x200002d4

080028bc <timebase_init>:
void timebase_init(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028c0:	b672      	cpsid	i
}
 80028c2:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <timebase_init+0x44>)
 80028c6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80028ca:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <timebase_init+0x44>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <timebase_init+0x44>)
 80028d4:	2204      	movs	r2, #4
 80028d6:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <timebase_init+0x44>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a08      	ldr	r2, [pc, #32]	@ (8002900 <timebase_init+0x44>)
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <timebase_init+0x44>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a05      	ldr	r2, [pc, #20]	@ (8002900 <timebase_init+0x44>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028f0:	b662      	cpsie	i
}
 80028f2:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	tick_increment();
 8002908:	f7ff ffca 	bl	80028a0 <tick_increment>
	MilliTimer_Handler();
 800290c:	f7fe ffb6 	bl	800187c <MilliTimer_Handler>
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}

08002914 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f84f 	bl	80029c0 <uart_write>
	return ch;
 8002922:	687b      	ldr	r3, [r7, #4]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <debug_uart_init>:

void debug_uart_init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8002930:	4b1f      	ldr	r3, [pc, #124]	@ (80029b0 <debug_uart_init+0x84>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002934:	4a1e      	ldr	r2, [pc, #120]	@ (80029b0 <debug_uart_init+0x84>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 800293c:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <debug_uart_init+0x88>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <debug_uart_init+0x88>)
 8002942:	f023 0310 	bic.w	r3, r3, #16
 8002946:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8002948:	4b1a      	ldr	r3, [pc, #104]	@ (80029b4 <debug_uart_init+0x88>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a19      	ldr	r2, [pc, #100]	@ (80029b4 <debug_uart_init+0x88>)
 800294e:	f043 0320 	orr.w	r3, r3, #32
 8002952:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8002954:	4b17      	ldr	r3, [pc, #92]	@ (80029b4 <debug_uart_init+0x88>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a16      	ldr	r2, [pc, #88]	@ (80029b4 <debug_uart_init+0x88>)
 800295a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800295e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8002960:	4b14      	ldr	r3, [pc, #80]	@ (80029b4 <debug_uart_init+0x88>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a13      	ldr	r2, [pc, #76]	@ (80029b4 <debug_uart_init+0x88>)
 8002966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800296a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 800296c:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <debug_uart_init+0x88>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4a10      	ldr	r2, [pc, #64]	@ (80029b4 <debug_uart_init+0x88>)
 8002972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002976:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8002978:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <debug_uart_init+0x88>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <debug_uart_init+0x88>)
 800297e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002982:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8002984:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <debug_uart_init+0x84>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	4a09      	ldr	r2, [pc, #36]	@ (80029b0 <debug_uart_init+0x84>)
 800298a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298e:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8002990:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002994:	4808      	ldr	r0, [pc, #32]	@ (80029b8 <debug_uart_init+0x8c>)
 8002996:	f000 f83f 	bl	8002a18 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 800299a:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <debug_uart_init+0x90>)
 800299c:	2208      	movs	r2, #8
 800299e:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 80029a0:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <debug_uart_init+0x90>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a05      	ldr	r2, [pc, #20]	@ (80029bc <debug_uart_init+0x90>)
 80029a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029aa:	60d3      	str	r3, [r2, #12]
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020000 	.word	0x40020000
 80029b8:	00f42400 	.word	0x00f42400
 80029bc:	40004400 	.word	0x40004400

080029c0 <uart_write>:



static void uart_write(int ch)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80029c8:	bf00      	nop
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <uart_write+0x2c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f9      	beq.n	80029ca <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <uart_write+0x2c>)
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	6053      	str	r3, [r2, #4]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40004400 	.word	0x40004400

080029f0 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	085a      	lsrs	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	441a      	add	r2, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	b29b      	uxth	r3, r3
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8002a22:	6839      	ldr	r1, [r7, #0]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ffe3 	bl	80029f0 <compute_uart_bd>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <uart_set_baudrate+0x24>)
 8002a30:	609a      	str	r2, [r3, #8]
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40004400 	.word	0x40004400

08002a40 <ip_assigned_callback>:

volatile bool is_ip_assigned =  false;


void ip_assigned_callback(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <ip_assigned_callback+0x14>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	200007cc 	.word	0x200007cc

08002a58 <ip_update_callback>:

void ip_update_callback(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <ip_update_callback+0x14>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	200007cc 	.word	0x200007cc

08002a70 <ip_conflict_callback>:
void ip_conflict_callback(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
	is_ip_assigned =  false;
 8002a74:	4b03      	ldr	r3, [pc, #12]	@ (8002a84 <ip_conflict_callback+0x14>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	200007cc 	.word	0x200007cc

08002a88 <wizchip_cs_pin_init>:
    .dhcp =  NETINFO_DHCP
};
/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <wizchip_cs_pin_init+0x34>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <wizchip_cs_pin_init+0x34>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 8002a98:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <wizchip_cs_pin_init+0x38>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a08      	ldr	r2, [pc, #32]	@ (8002ac0 <wizchip_cs_pin_init+0x38>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <wizchip_cs_pin_init+0x38>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a05      	ldr	r2, [pc, #20]	@ (8002ac0 <wizchip_cs_pin_init+0x38>)
 8002aaa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002aae:	6013      	str	r3, [r2, #0]

}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <wizchip_pin_cs_select>:
/*Select W5500 by pulling CS pin low*/
void wizchip_pin_cs_select(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 8002ac8:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <wizchip_pin_cs_select+0x1c>)
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <wizchip_pin_cs_select+0x1c>)
 8002ace:	f023 0310 	bic.w	r3, r3, #16
 8002ad2:	6153      	str	r3, [r2, #20]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <wizchip_pin_cs_deselect>:

/*Unselect W5500 by pulling CS pin high*/
void wizchip_pin_cs_deselect(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <wizchip_pin_cs_deselect+0x1c>)
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <wizchip_pin_cs_deselect+0x1c>)
 8002aee:	f043 0310 	orr.w	r3, r3, #16
 8002af2:	6153      	str	r3, [r2, #20]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40020000 	.word	0x40020000

08002b04 <wizchip_read_burst>:

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);
 8002b10:	887a      	ldrh	r2, [r7, #2]
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4803      	ldr	r0, [pc, #12]	@ (8002b28 <wizchip_read_burst+0x24>)
 8002b1a:	f7ff fbb3 	bl	8002284 <spi_receive>

}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200002dc 	.word	0x200002dc

08002b2c <wizchip_read_byte>:

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
 8002b32:	1dfb      	adds	r3, r7, #7
 8002b34:	2101      	movs	r1, #1
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ffe4 	bl	8002b04 <wizchip_read_burst>
	return byte;
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <wizchip_write_burst>:
/*Spi write multiple bytes*/
void wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);
 8002b54:	887a      	ldrh	r2, [r7, #2]
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4803      	ldr	r0, [pc, #12]	@ (8002b6c <wizchip_write_burst+0x24>)
 8002b5e:	f7ff fa71 	bl	8002044 <spi_transmit>

}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200002dc 	.word	0x200002dc

08002b70 <wizchip_write_byte>:

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
	wizchip_write_burst(&byte,sizeof(byte));
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ffe2 	bl	8002b48 <wizchip_write_burst>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <w5500_spi_init>:
 void w5500_spi_init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <w5500_spi_init+0x50>)
 8002b92:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <w5500_spi_init+0x54>)
 8002b94:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b96:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <w5500_spi_init+0x50>)
 8002b98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b9c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <w5500_spi_init+0x50>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <w5500_spi_init+0x50>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 8002baa:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <w5500_spi_init+0x50>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <w5500_spi_init+0x50>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <w5500_spi_init+0x50>)
 8002bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bbc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bbe:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <w5500_spi_init+0x50>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bc4:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <w5500_spi_init+0x50>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bca:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <w5500_spi_init+0x50>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Initialize spi*/
	spi_init(&hspi1);
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <w5500_spi_init+0x50>)
 8002bd2:	f7ff f9cf 	bl	8001f74 <spi_init>

}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200002dc 	.word	0x200002dc
 8002be0:	40013000 	.word	0x40013000

08002be4 <w5500_init>:


 void w5500_init(void)
 {
 8002be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be6:	b093      	sub	sp, #76	@ 0x4c
 8002be8:	af0a      	add	r7, sp, #40	@ 0x28
     //Set RX and TX Buffer sizes

	 /*Set 2KB buffer for each of the 8 sockets*/
	 uint8_t rx_tx_buff_sizes[]= {2,2,2,2,2,2,2,2};
 8002bea:	4a4a      	ldr	r2, [pc, #296]	@ (8002d14 <w5500_init+0x130>)
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bf4:	e883 0003 	stmia.w	r3, {r0, r1}

	 /*Initialize the W5500 with the RX and TX buffer sizes*/
	 wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8002bf8:	f107 0214 	add.w	r2, r7, #20
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 f978 	bl	8005ef8 <wizchip_init>

	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_pin_cs_select,wizchip_pin_cs_deselect);
 8002c08:	4943      	ldr	r1, [pc, #268]	@ (8002d18 <w5500_init+0x134>)
 8002c0a:	4844      	ldr	r0, [pc, #272]	@ (8002d1c <w5500_init+0x138>)
 8002c0c:	f002 ffca 	bl	8005ba4 <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
 8002c10:	4943      	ldr	r1, [pc, #268]	@ (8002d20 <w5500_init+0x13c>)
 8002c12:	4844      	ldr	r0, [pc, #272]	@ (8002d24 <w5500_init+0x140>)
 8002c14:	f002 ffec 	bl	8005bf0 <reg_wizchip_spi_cbfunc>
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 8002c18:	4943      	ldr	r1, [pc, #268]	@ (8002d28 <w5500_init+0x144>)
 8002c1a:	4844      	ldr	r0, [pc, #272]	@ (8002d2c <w5500_init+0x148>)
 8002c1c:	f003 f814 	bl	8005c48 <reg_wizchip_spiburst_cbfunc>

	 /*Set MAC Address*/
	 setSHAR(net_info.mac);
 8002c20:	2206      	movs	r2, #6
 8002c22:	4943      	ldr	r1, [pc, #268]	@ (8002d30 <w5500_init+0x14c>)
 8002c24:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002c28:	f002 fd6c 	bl	8005704 <WIZCHIP_WRITE_BUF>

	 /*Initialize DHCP*/
	 DHCP_init(DHCP_SOCKET,dhcp_buffer);
 8002c2c:	4941      	ldr	r1, [pc, #260]	@ (8002d34 <w5500_init+0x150>)
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f001 fbaa 	bl	8004388 <DHCP_init>

	 //Register DHCP Callbacks
	 reg_dhcp_cbfunc(ip_assigned_callback,ip_update_callback,ip_conflict_callback);
 8002c34:	4a40      	ldr	r2, [pc, #256]	@ (8002d38 <w5500_init+0x154>)
 8002c36:	4941      	ldr	r1, [pc, #260]	@ (8002d3c <w5500_init+0x158>)
 8002c38:	4841      	ldr	r0, [pc, #260]	@ (8002d40 <w5500_init+0x15c>)
 8002c3a:	f000 f903 	bl	8002e44 <reg_dhcp_cbfunc>

	 /*Wait for IP assignment from DHCP*/
	 uint16_t timeout_counter =  10000;
 8002c3e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002c42:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002c44:	e004      	b.n	8002c50 <w5500_init+0x6c>
	 {
		 DHCP_run();
 8002c46:	f001 f9e7 	bl	8004018 <DHCP_run>
		 timeout_counter--;
 8002c4a:	8bfb      	ldrh	r3, [r7, #30]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002c50:	4b3c      	ldr	r3, [pc, #240]	@ (8002d44 <w5500_init+0x160>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f083 0301 	eor.w	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <w5500_init+0x82>
 8002c60:	8bfb      	ldrh	r3, [r7, #30]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ef      	bne.n	8002c46 <w5500_init+0x62>
	 }

	 if(!is_ip_assigned)
 8002c66:	4b37      	ldr	r3, [pc, #220]	@ (8002d44 <w5500_init+0x160>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f083 0301 	eor.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d149      	bne.n	8002d0a <w5500_init+0x126>
	 {
		 return;
	 }

	 /*Get network settings from DHCP*/
	 getIPfromDHCP(net_info.ip);
 8002c76:	4834      	ldr	r0, [pc, #208]	@ (8002d48 <w5500_init+0x164>)
 8002c78:	f001 fc30 	bl	80044dc <getIPfromDHCP>
	 getGWfromDHCP(net_info.gw);
 8002c7c:	4833      	ldr	r0, [pc, #204]	@ (8002d4c <w5500_init+0x168>)
 8002c7e:	f001 fc4d 	bl	800451c <getGWfromDHCP>
	 getSNfromDHCP(net_info.sn);
 8002c82:	4833      	ldr	r0, [pc, #204]	@ (8002d50 <w5500_init+0x16c>)
 8002c84:	f001 fc6a 	bl	800455c <getSNfromDHCP>


	/* Format and print the assigned IP, Gateway, and Subnet mask */
	sprintf(temp_buffer,
		"IP Address:  %d.%d.%d.%d\r\nGateway:  %d.%d.%d.%d\r\nSubnet mask: %d.%d.%d.%d\r\n",
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002c88:	4b29      	ldr	r3, [pc, #164]	@ (8002d30 <w5500_init+0x14c>)
 8002c8a:	799b      	ldrb	r3, [r3, #6]
	sprintf(temp_buffer,
 8002c8c:	469c      	mov	ip, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002c8e:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <w5500_init+0x14c>)
 8002c90:	79db      	ldrb	r3, [r3, #7]
	sprintf(temp_buffer,
 8002c92:	469e      	mov	lr, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002c94:	4b26      	ldr	r3, [pc, #152]	@ (8002d30 <w5500_init+0x14c>)
 8002c96:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(temp_buffer,
 8002c98:	461a      	mov	r2, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002c9a:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <w5500_init+0x14c>)
 8002c9c:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(temp_buffer,
 8002c9e:	4619      	mov	r1, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002ca0:	4b23      	ldr	r3, [pc, #140]	@ (8002d30 <w5500_init+0x14c>)
 8002ca2:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(temp_buffer,
 8002ca4:	4618      	mov	r0, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002ca6:	4b22      	ldr	r3, [pc, #136]	@ (8002d30 <w5500_init+0x14c>)
 8002ca8:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(temp_buffer,
 8002caa:	461c      	mov	r4, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002cac:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <w5500_init+0x14c>)
 8002cae:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(temp_buffer,
 8002cb0:	461d      	mov	r5, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d30 <w5500_init+0x14c>)
 8002cb4:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(temp_buffer,
 8002cb6:	461e      	mov	r6, r3
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <w5500_init+0x14c>)
 8002cba:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(temp_buffer,
 8002cbc:	60fb      	str	r3, [r7, #12]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <w5500_init+0x14c>)
 8002cc0:	7adb      	ldrb	r3, [r3, #11]
	sprintf(temp_buffer,
 8002cc2:	60bb      	str	r3, [r7, #8]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <w5500_init+0x14c>)
 8002cc6:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(temp_buffer,
 8002cc8:	607b      	str	r3, [r7, #4]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002cca:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <w5500_init+0x14c>)
 8002ccc:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(temp_buffer,
 8002cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	9308      	str	r3, [sp, #32]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	9307      	str	r3, [sp, #28]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	9306      	str	r3, [sp, #24]
 8002cdc:	9605      	str	r6, [sp, #20]
 8002cde:	9504      	str	r5, [sp, #16]
 8002ce0:	9403      	str	r4, [sp, #12]
 8002ce2:	9002      	str	r0, [sp, #8]
 8002ce4:	9101      	str	r1, [sp, #4]
 8002ce6:	9200      	str	r2, [sp, #0]
 8002ce8:	4673      	mov	r3, lr
 8002cea:	4662      	mov	r2, ip
 8002cec:	4919      	ldr	r1, [pc, #100]	@ (8002d54 <w5500_init+0x170>)
 8002cee:	481a      	ldr	r0, [pc, #104]	@ (8002d58 <w5500_init+0x174>)
 8002cf0:	f003 fdc6 	bl	8006880 <siprintf>
	);

    printf("*************Network Information************************\r\n");
 8002cf4:	4819      	ldr	r0, [pc, #100]	@ (8002d5c <w5500_init+0x178>)
 8002cf6:	f003 fd87 	bl	8006808 <puts>
    printf("%s", temp_buffer);
 8002cfa:	4917      	ldr	r1, [pc, #92]	@ (8002d58 <w5500_init+0x174>)
 8002cfc:	4818      	ldr	r0, [pc, #96]	@ (8002d60 <w5500_init+0x17c>)
 8002cfe:	f003 fd1b 	bl	8006738 <iprintf>

    /*Apply the network configurations to the W5500*/
    wizchip_setnetinfo(&net_info);
 8002d02:	480b      	ldr	r0, [pc, #44]	@ (8002d30 <w5500_init+0x14c>)
 8002d04:	f003 fb68 	bl	80063d8 <wizchip_setnetinfo>
 8002d08:	e000      	b.n	8002d0c <w5500_init+0x128>
		 return;
 8002d0a:	bf00      	nop

 }
 8002d0c:	3724      	adds	r7, #36	@ 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d12:	bf00      	nop
 8002d14:	08007af4 	.word	0x08007af4
 8002d18:	08002ae5 	.word	0x08002ae5
 8002d1c:	08002ac5 	.word	0x08002ac5
 8002d20:	08002b71 	.word	0x08002b71
 8002d24:	08002b2d 	.word	0x08002b2d
 8002d28:	08002b49 	.word	0x08002b49
 8002d2c:	08002b05 	.word	0x08002b05
 8002d30:	20000060 	.word	0x20000060
 8002d34:	200003cc 	.word	0x200003cc
 8002d38:	08002a71 	.word	0x08002a71
 8002d3c:	08002a59 	.word	0x08002a59
 8002d40:	08002a41 	.word	0x08002a41
 8002d44:	200007cc 	.word	0x200007cc
 8002d48:	20000066 	.word	0x20000066
 8002d4c:	2000006e 	.word	0x2000006e
 8002d50:	2000006a 	.word	0x2000006a
 8002d54:	08007a68 	.word	0x08007a68
 8002d58:	20000320 	.word	0x20000320
 8002d5c:	08007ab4 	.word	0x08007ab4
 8002d60:	08007af0 	.word	0x08007af0

08002d64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d64:	480d      	ldr	r0, [pc, #52]	@ (8002d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d66:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d6c:	480c      	ldr	r0, [pc, #48]	@ (8002da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d6e:	490d      	ldr	r1, [pc, #52]	@ (8002da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d70:	4a0d      	ldr	r2, [pc, #52]	@ (8002da8 <LoopForever+0xe>)
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d74:	e002      	b.n	8002d7c <LoopCopyDataInit>

08002d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7a:	3304      	adds	r3, #4

08002d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d80:	d3f9      	bcc.n	8002d76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d82:	4a0a      	ldr	r2, [pc, #40]	@ (8002dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d84:	4c0a      	ldr	r4, [pc, #40]	@ (8002db0 <LoopForever+0x16>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d88:	e001      	b.n	8002d8e <LoopFillZerobss>

08002d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d8c:	3204      	adds	r2, #4

08002d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d90:	d3fb      	bcc.n	8002d8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d92:	f003 fee3 	bl	8006b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d96:	f7fe ffaf 	bl	8001cf8 <main>

08002d9a <LoopForever>:

LoopForever:
    b LoopForever
 8002d9a:	e7fe      	b.n	8002d9a <LoopForever>
  ldr   r0, =_estack
 8002d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da4:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8002da8:	08007b54 	.word	0x08007b54
  ldr r2, =_sbss
 8002dac:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8002db0:	20000974 	.word	0x20000974

08002db4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002db4:	e7fe      	b.n	8002db4 <ADC_IRQHandler>
	...

08002db8 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	4909      	ldr	r1, [pc, #36]	@ (8002de4 <default_ip_assign+0x2c>)
 8002dc0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002dc4:	f002 fc9e 	bl	8005704 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8002dc8:	2204      	movs	r2, #4
 8002dca:	4907      	ldr	r1, [pc, #28]	@ (8002de8 <default_ip_assign+0x30>)
 8002dcc:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002dd0:	f002 fc98 	bl	8005704 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	4905      	ldr	r1, [pc, #20]	@ (8002dec <default_ip_assign+0x34>)
 8002dd8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ddc:	f002 fc92 	bl	8005704 <WIZCHIP_WRITE_BUF>
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200007dc 	.word	0x200007dc
 8002de8:	200007e4 	.word	0x200007e4
 8002dec:	200007e0 	.word	0x200007e0

08002df0 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8002df4:	2180      	movs	r1, #128	@ 0x80
 8002df6:	2000      	movs	r0, #0
 8002df8:	f002 fbd6 	bl	80055a8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f002 fb87 	bl	8005510 <WIZCHIP_READ>
   default_ip_assign();
 8002e02:	f7ff ffd9 	bl	8002db8 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8002e06:	2206      	movs	r2, #6
 8002e08:	4903      	ldr	r1, [pc, #12]	@ (8002e18 <default_ip_update+0x28>)
 8002e0a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002e0e:	f002 fc79 	bl	8005704 <WIZCHIP_WRITE_BUF>
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200007fc 	.word	0x200007fc

08002e1c <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8002e20:	2180      	movs	r1, #128	@ 0x80
 8002e22:	2000      	movs	r0, #0
 8002e24:	f002 fbc0 	bl	80055a8 <WIZCHIP_WRITE>
	getMR(); // for delay
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f002 fb71 	bl	8005510 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8002e2e:	2206      	movs	r2, #6
 8002e30:	4903      	ldr	r1, [pc, #12]	@ (8002e40 <default_ip_conflict+0x24>)
 8002e32:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002e36:	f002 fc65 	bl	8005704 <WIZCHIP_WRITE_BUF>
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200007fc 	.word	0x200007fc

08002e44 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8002e50:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <reg_dhcp_cbfunc+0x50>)
 8002e52:	4a11      	ldr	r2, [pc, #68]	@ (8002e98 <reg_dhcp_cbfunc+0x54>)
 8002e54:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8002e56:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <reg_dhcp_cbfunc+0x58>)
 8002e58:	4a11      	ldr	r2, [pc, #68]	@ (8002ea0 <reg_dhcp_cbfunc+0x5c>)
 8002e5a:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <reg_dhcp_cbfunc+0x60>)
 8002e5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ea8 <reg_dhcp_cbfunc+0x64>)
 8002e60:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <reg_dhcp_cbfunc+0x2a>
 8002e68:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <reg_dhcp_cbfunc+0x50>)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <reg_dhcp_cbfunc+0x36>
 8002e74:	4a09      	ldr	r2, [pc, #36]	@ (8002e9c <reg_dhcp_cbfunc+0x58>)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <reg_dhcp_cbfunc+0x42>
 8002e80:	4a08      	ldr	r2, [pc, #32]	@ (8002ea4 <reg_dhcp_cbfunc+0x60>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000088 	.word	0x20000088
 8002e98:	08002db9 	.word	0x08002db9
 8002e9c:	2000008c 	.word	0x2000008c
 8002ea0:	08002df1 	.word	0x08002df1
 8002ea4:	20000090 	.word	0x20000090
 8002ea8:	08002e1d 	.word	0x08002e1d

08002eac <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	2206      	movs	r2, #6
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002ebc:	f002 fbc2 	bl	8005644 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8002ec0:	4b72      	ldr	r3, [pc, #456]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8002ec8:	4b70      	ldr	r3, [pc, #448]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8002ed0:	4b6e      	ldr	r3, [pc, #440]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2206      	movs	r2, #6
 8002ed6:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8002ed8:	4b6c      	ldr	r3, [pc, #432]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2200      	movs	r2, #0
 8002ede:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8002ee8:	4b69      	ldr	r3, [pc, #420]	@ (8003090 <makeDHCPMSG+0x1e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0e1b      	lsrs	r3, r3, #24
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8002ef4:	4b66      	ldr	r3, [pc, #408]	@ (8003090 <makeDHCPMSG+0x1e4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0c1a      	lsrs	r2, r3, #16
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3301      	adds	r3, #1
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8002f02:	4b63      	ldr	r3, [pc, #396]	@ (8003090 <makeDHCPMSG+0x1e4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	0a1a      	lsrs	r2, r3, #8
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8002f10:	4b5f      	ldr	r3, [pc, #380]	@ (8003090 <makeDHCPMSG+0x1e4>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3303      	adds	r3, #3
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8002f1c:	4b5b      	ldr	r3, [pc, #364]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2200      	movs	r2, #0
 8002f22:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8002f24:	4b59      	ldr	r3, [pc, #356]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330a      	adds	r3, #10
 8002f2a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2280      	movs	r2, #128	@ 0x80
 8002f30:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8002f3a:	4b54      	ldr	r3, [pc, #336]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8002f42:	4b52      	ldr	r3, [pc, #328]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2200      	movs	r2, #0
 8002f48:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8002f4a:	4b50      	ldr	r3, [pc, #320]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8002f52:	4b4e      	ldr	r3, [pc, #312]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8002f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8002f62:	4b4a      	ldr	r3, [pc, #296]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8002f6a:	4b48      	ldr	r3, [pc, #288]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8002f72:	4b46      	ldr	r3, [pc, #280]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2200      	movs	r2, #0
 8002f78:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8002f7a:	4b44      	ldr	r3, [pc, #272]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8002f82:	4b42      	ldr	r3, [pc, #264]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8002f8a:	4b40      	ldr	r3, [pc, #256]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8002f92:	4b3e      	ldr	r3, [pc, #248]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8002f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8002faa:	4b38      	ldr	r3, [pc, #224]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8002fb2:	4b36      	ldr	r3, [pc, #216]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8002fba:	4b34      	ldr	r3, [pc, #208]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a35      	ldr	r2, [pc, #212]	@ (8003094 <makeDHCPMSG+0x1e8>)
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8002fc4:	4b31      	ldr	r3, [pc, #196]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a32      	ldr	r2, [pc, #200]	@ (8003094 <makeDHCPMSG+0x1e8>)
 8002fca:	7852      	ldrb	r2, [r2, #1]
 8002fcc:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8002fce:	4b2f      	ldr	r3, [pc, #188]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a30      	ldr	r2, [pc, #192]	@ (8003094 <makeDHCPMSG+0x1e8>)
 8002fd4:	7892      	ldrb	r2, [r2, #2]
 8002fd6:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8003094 <makeDHCPMSG+0x1e8>)
 8002fde:	78d2      	ldrb	r2, [r2, #3]
 8002fe0:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8002fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a2b      	ldr	r2, [pc, #172]	@ (8003094 <makeDHCPMSG+0x1e8>)
 8002fe8:	7912      	ldrb	r2, [r2, #4]
 8002fea:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8002fee:	4b27      	ldr	r3, [pc, #156]	@ (800308c <makeDHCPMSG+0x1e0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a28      	ldr	r2, [pc, #160]	@ (8003094 <makeDHCPMSG+0x1e8>)
 8002ff4:	7952      	ldrb	r2, [r2, #5]
 8002ff6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8002ffa:	2306      	movs	r3, #6
 8002ffc:	73fb      	strb	r3, [r7, #15]
 8002ffe:	e008      	b.n	8003012 <makeDHCPMSG+0x166>
 8003000:	4b22      	ldr	r3, [pc, #136]	@ (800308c <makeDHCPMSG+0x1e0>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	4413      	add	r3, r2
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	3301      	adds	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d9f3      	bls.n	8003000 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e009      	b.n	8003032 <makeDHCPMSG+0x186>
 800301e:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <makeDHCPMSG+0x1e0>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	4413      	add	r3, r2
 8003026:	2200      	movs	r2, #0
 8003028:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	3301      	adds	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b3f      	cmp	r3, #63	@ 0x3f
 8003036:	d9f2      	bls.n	800301e <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e009      	b.n	8003052 <makeDHCPMSG+0x1a6>
 800303e:	4b13      	ldr	r3, [pc, #76]	@ (800308c <makeDHCPMSG+0x1e0>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	4413      	add	r3, r2
 8003046:	2200      	movs	r2, #0
 8003048:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	3301      	adds	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	daf1      	bge.n	800303e <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 800305a:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <makeDHCPMSG+0x1e0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2263      	movs	r2, #99	@ 0x63
 8003060:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8003064:	4b09      	ldr	r3, [pc, #36]	@ (800308c <makeDHCPMSG+0x1e0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2282      	movs	r2, #130	@ 0x82
 800306a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800306e:	4b07      	ldr	r3, [pc, #28]	@ (800308c <makeDHCPMSG+0x1e0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2253      	movs	r2, #83	@ 0x53
 8003074:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <makeDHCPMSG+0x1e0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2263      	movs	r2, #99	@ 0x63
 800307e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200007f8 	.word	0x200007f8
 8003090:	200007f4 	.word	0x200007f4
 8003094:	200007fc 	.word	0x200007fc

08003098 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8003098:	b5b0      	push	{r4, r5, r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 80030a2:	f7ff ff03 	bl	8002eac <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80030a6:	4b56      	ldr	r3, [pc, #344]	@ (8003200 <send_DHCP_DISCOVER+0x168>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80030ac:	4b54      	ldr	r3, [pc, #336]	@ (8003200 <send_DHCP_DISCOVER+0x168>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80030b2:	4b53      	ldr	r3, [pc, #332]	@ (8003200 <send_DHCP_DISCOVER+0x168>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80030b8:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <send_DHCP_DISCOVER+0x168>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 80030be:	4b51      	ldr	r3, [pc, #324]	@ (8003204 <send_DHCP_DISCOVER+0x16c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 80030c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003204 <send_DHCP_DISCOVER+0x16c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 80030ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003204 <send_DHCP_DISCOVER+0x16c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 80030d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003204 <send_DHCP_DISCOVER+0x16c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 80030d6:	2304      	movs	r3, #4
 80030d8:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80030da:	4b4b      	ldr	r3, [pc, #300]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	88bb      	ldrh	r3, [r7, #4]
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	80b9      	strh	r1, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	2235      	movs	r2, #53	@ 0x35
 80030e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80030ec:	4b46      	ldr	r3, [pc, #280]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	88bb      	ldrh	r3, [r7, #4]
 80030f2:	1c59      	adds	r1, r3, #1
 80030f4:	80b9      	strh	r1, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80030fe:	4b42      	ldr	r3, [pc, #264]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	88bb      	ldrh	r3, [r7, #4]
 8003104:	1c59      	adds	r1, r3, #1
 8003106:	80b9      	strh	r1, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	2201      	movs	r2, #1
 800310c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003110:	4b3d      	ldr	r3, [pc, #244]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	1c59      	adds	r1, r3, #1
 8003118:	80b9      	strh	r1, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	223d      	movs	r2, #61	@ 0x3d
 800311e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003122:	4b39      	ldr	r3, [pc, #228]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	88bb      	ldrh	r3, [r7, #4]
 8003128:	1c59      	adds	r1, r3, #1
 800312a:	80b9      	strh	r1, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	2207      	movs	r2, #7
 8003130:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003134:	4b34      	ldr	r3, [pc, #208]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	88bb      	ldrh	r3, [r7, #4]
 800313a:	1c59      	adds	r1, r3, #1
 800313c:	80b9      	strh	r1, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	2201      	movs	r2, #1
 8003142:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8003146:	4b30      	ldr	r3, [pc, #192]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	88bb      	ldrh	r3, [r7, #4]
 800314c:	1c59      	adds	r1, r3, #1
 800314e:	80b9      	strh	r1, [r7, #4]
 8003150:	4618      	mov	r0, r3
 8003152:	4b2e      	ldr	r3, [pc, #184]	@ (800320c <send_DHCP_DISCOVER+0x174>)
 8003154:	7819      	ldrb	r1, [r3, #0]
 8003156:	1813      	adds	r3, r2, r0
 8003158:	460a      	mov	r2, r1
 800315a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800315e:	4b2a      	ldr	r3, [pc, #168]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	88bb      	ldrh	r3, [r7, #4]
 8003164:	1c59      	adds	r1, r3, #1
 8003166:	80b9      	strh	r1, [r7, #4]
 8003168:	4618      	mov	r0, r3
 800316a:	4b28      	ldr	r3, [pc, #160]	@ (800320c <send_DHCP_DISCOVER+0x174>)
 800316c:	7859      	ldrb	r1, [r3, #1]
 800316e:	1813      	adds	r3, r2, r0
 8003170:	460a      	mov	r2, r1
 8003172:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003176:	4b24      	ldr	r3, [pc, #144]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	88bb      	ldrh	r3, [r7, #4]
 800317c:	1c59      	adds	r1, r3, #1
 800317e:	80b9      	strh	r1, [r7, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	4b22      	ldr	r3, [pc, #136]	@ (800320c <send_DHCP_DISCOVER+0x174>)
 8003184:	7899      	ldrb	r1, [r3, #2]
 8003186:	1813      	adds	r3, r2, r0
 8003188:	460a      	mov	r2, r1
 800318a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800318e:	4b1e      	ldr	r3, [pc, #120]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	88bb      	ldrh	r3, [r7, #4]
 8003194:	1c59      	adds	r1, r3, #1
 8003196:	80b9      	strh	r1, [r7, #4]
 8003198:	4618      	mov	r0, r3
 800319a:	4b1c      	ldr	r3, [pc, #112]	@ (800320c <send_DHCP_DISCOVER+0x174>)
 800319c:	78d9      	ldrb	r1, [r3, #3]
 800319e:	1813      	adds	r3, r2, r0
 80031a0:	460a      	mov	r2, r1
 80031a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80031a6:	4b18      	ldr	r3, [pc, #96]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	88bb      	ldrh	r3, [r7, #4]
 80031ac:	1c59      	adds	r1, r3, #1
 80031ae:	80b9      	strh	r1, [r7, #4]
 80031b0:	4618      	mov	r0, r3
 80031b2:	4b16      	ldr	r3, [pc, #88]	@ (800320c <send_DHCP_DISCOVER+0x174>)
 80031b4:	7919      	ldrb	r1, [r3, #4]
 80031b6:	1813      	adds	r3, r2, r0
 80031b8:	460a      	mov	r2, r1
 80031ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80031be:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	88bb      	ldrh	r3, [r7, #4]
 80031c4:	1c59      	adds	r1, r3, #1
 80031c6:	80b9      	strh	r1, [r7, #4]
 80031c8:	4618      	mov	r0, r3
 80031ca:	4b10      	ldr	r3, [pc, #64]	@ (800320c <send_DHCP_DISCOVER+0x174>)
 80031cc:	7959      	ldrb	r1, [r3, #5]
 80031ce:	1813      	adds	r3, r2, r0
 80031d0:	460a      	mov	r2, r1
 80031d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80031d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	88bb      	ldrh	r3, [r7, #4]
 80031dc:	1c59      	adds	r1, r3, #1
 80031de:	80b9      	strh	r1, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	220c      	movs	r2, #12
 80031e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80031e8:	4b07      	ldr	r3, [pc, #28]	@ (8003208 <send_DHCP_DISCOVER+0x170>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	88bb      	ldrh	r3, [r7, #4]
 80031ee:	1c59      	adds	r1, r3, #1
 80031f0:	80b9      	strh	r1, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	80fb      	strh	r3, [r7, #6]
 80031fe:	e017      	b.n	8003230 <send_DHCP_DISCOVER+0x198>
 8003200:	200007d0 	.word	0x200007d0
 8003204:	200007d4 	.word	0x200007d4
 8003208:	200007f8 	.word	0x200007f8
 800320c:	200007fc 	.word	0x200007fc
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8003210:	88f9      	ldrh	r1, [r7, #6]
 8003212:	4b80      	ldr	r3, [pc, #512]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	88bb      	ldrh	r3, [r7, #4]
 8003218:	1c58      	adds	r0, r3, #1
 800321a:	80b8      	strh	r0, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	4b7e      	ldr	r3, [pc, #504]	@ (8003418 <send_DHCP_DISCOVER+0x380>)
 8003220:	5c59      	ldrb	r1, [r3, r1]
 8003222:	1813      	adds	r3, r2, r0
 8003224:	460a      	mov	r2, r1
 8003226:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	3301      	adds	r3, #1
 800322e:	80fb      	strh	r3, [r7, #6]
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	4a79      	ldr	r2, [pc, #484]	@ (8003418 <send_DHCP_DISCOVER+0x380>)
 8003234:	5cd3      	ldrb	r3, [r2, r3]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ea      	bne.n	8003210 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800323a:	4b78      	ldr	r3, [pc, #480]	@ (800341c <send_DHCP_DISCOVER+0x384>)
 800323c:	78db      	ldrb	r3, [r3, #3]
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4b74      	ldr	r3, [pc, #464]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 8003244:	681c      	ldr	r4, [r3, #0]
 8003246:	88bb      	ldrh	r3, [r7, #4]
 8003248:	1c59      	adds	r1, r3, #1
 800324a:	80b9      	strh	r1, [r7, #4]
 800324c:	461d      	mov	r5, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f001 f9a4 	bl	800459c <NibbleToHex>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	1963      	adds	r3, r4, r5
 800325a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800325e:	4b6f      	ldr	r3, [pc, #444]	@ (800341c <send_DHCP_DISCOVER+0x384>)
 8003260:	78da      	ldrb	r2, [r3, #3]
 8003262:	4b6c      	ldr	r3, [pc, #432]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 8003264:	681c      	ldr	r4, [r3, #0]
 8003266:	88bb      	ldrh	r3, [r7, #4]
 8003268:	1c59      	adds	r1, r3, #1
 800326a:	80b9      	strh	r1, [r7, #4]
 800326c:	461d      	mov	r5, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f001 f994 	bl	800459c <NibbleToHex>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	1963      	adds	r3, r4, r5
 800327a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800327e:	4b67      	ldr	r3, [pc, #412]	@ (800341c <send_DHCP_DISCOVER+0x384>)
 8003280:	791b      	ldrb	r3, [r3, #4]
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4b63      	ldr	r3, [pc, #396]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 8003288:	681c      	ldr	r4, [r3, #0]
 800328a:	88bb      	ldrh	r3, [r7, #4]
 800328c:	1c59      	adds	r1, r3, #1
 800328e:	80b9      	strh	r1, [r7, #4]
 8003290:	461d      	mov	r5, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f001 f982 	bl	800459c <NibbleToHex>
 8003298:	4603      	mov	r3, r0
 800329a:	461a      	mov	r2, r3
 800329c:	1963      	adds	r3, r4, r5
 800329e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80032a2:	4b5e      	ldr	r3, [pc, #376]	@ (800341c <send_DHCP_DISCOVER+0x384>)
 80032a4:	791a      	ldrb	r2, [r3, #4]
 80032a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 80032a8:	681c      	ldr	r4, [r3, #0]
 80032aa:	88bb      	ldrh	r3, [r7, #4]
 80032ac:	1c59      	adds	r1, r3, #1
 80032ae:	80b9      	strh	r1, [r7, #4]
 80032b0:	461d      	mov	r5, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f001 f972 	bl	800459c <NibbleToHex>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	1963      	adds	r3, r4, r5
 80032be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80032c2:	4b56      	ldr	r3, [pc, #344]	@ (800341c <send_DHCP_DISCOVER+0x384>)
 80032c4:	795b      	ldrb	r3, [r3, #5]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b52      	ldr	r3, [pc, #328]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 80032cc:	681c      	ldr	r4, [r3, #0]
 80032ce:	88bb      	ldrh	r3, [r7, #4]
 80032d0:	1c59      	adds	r1, r3, #1
 80032d2:	80b9      	strh	r1, [r7, #4]
 80032d4:	461d      	mov	r5, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f001 f960 	bl	800459c <NibbleToHex>
 80032dc:	4603      	mov	r3, r0
 80032de:	461a      	mov	r2, r3
 80032e0:	1963      	adds	r3, r4, r5
 80032e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80032e6:	4b4d      	ldr	r3, [pc, #308]	@ (800341c <send_DHCP_DISCOVER+0x384>)
 80032e8:	795a      	ldrb	r2, [r3, #5]
 80032ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 80032ec:	681c      	ldr	r4, [r3, #0]
 80032ee:	88bb      	ldrh	r3, [r7, #4]
 80032f0:	1c59      	adds	r1, r3, #1
 80032f2:	80b9      	strh	r1, [r7, #4]
 80032f4:	461d      	mov	r5, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f001 f950 	bl	800459c <NibbleToHex>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	1963      	adds	r3, r4, r5
 8003302:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	b2d9      	uxtb	r1, r3
 800330a:	4b42      	ldr	r3, [pc, #264]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	88b8      	ldrh	r0, [r7, #4]
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	3307      	adds	r3, #7
 8003314:	1ac3      	subs	r3, r0, r3
 8003316:	3106      	adds	r1, #6
 8003318:	b2c9      	uxtb	r1, r1
 800331a:	4413      	add	r3, r2
 800331c:	460a      	mov	r2, r1
 800331e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8003322:	4b3c      	ldr	r3, [pc, #240]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	88bb      	ldrh	r3, [r7, #4]
 8003328:	1c59      	adds	r1, r3, #1
 800332a:	80b9      	strh	r1, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	2237      	movs	r2, #55	@ 0x37
 8003330:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8003334:	4b37      	ldr	r3, [pc, #220]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	88bb      	ldrh	r3, [r7, #4]
 800333a:	1c59      	adds	r1, r3, #1
 800333c:	80b9      	strh	r1, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	2206      	movs	r2, #6
 8003342:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8003346:	4b33      	ldr	r3, [pc, #204]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	88bb      	ldrh	r3, [r7, #4]
 800334c:	1c59      	adds	r1, r3, #1
 800334e:	80b9      	strh	r1, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	2201      	movs	r2, #1
 8003354:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8003358:	4b2e      	ldr	r3, [pc, #184]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	88bb      	ldrh	r3, [r7, #4]
 800335e:	1c59      	adds	r1, r3, #1
 8003360:	80b9      	strh	r1, [r7, #4]
 8003362:	4413      	add	r3, r2
 8003364:	2203      	movs	r2, #3
 8003366:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 800336a:	4b2a      	ldr	r3, [pc, #168]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	88bb      	ldrh	r3, [r7, #4]
 8003370:	1c59      	adds	r1, r3, #1
 8003372:	80b9      	strh	r1, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	2206      	movs	r2, #6
 8003378:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800337c:	4b25      	ldr	r3, [pc, #148]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	88bb      	ldrh	r3, [r7, #4]
 8003382:	1c59      	adds	r1, r3, #1
 8003384:	80b9      	strh	r1, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	220f      	movs	r2, #15
 800338a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800338e:	4b21      	ldr	r3, [pc, #132]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	88bb      	ldrh	r3, [r7, #4]
 8003394:	1c59      	adds	r1, r3, #1
 8003396:	80b9      	strh	r1, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	223a      	movs	r2, #58	@ 0x3a
 800339c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80033a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	88bb      	ldrh	r3, [r7, #4]
 80033a6:	1c59      	adds	r1, r3, #1
 80033a8:	80b9      	strh	r1, [r7, #4]
 80033aa:	4413      	add	r3, r2
 80033ac:	223b      	movs	r2, #59	@ 0x3b
 80033ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80033b2:	4b18      	ldr	r3, [pc, #96]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	88bb      	ldrh	r3, [r7, #4]
 80033b8:	1c59      	adds	r1, r3, #1
 80033ba:	80b9      	strh	r1, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	22ff      	movs	r2, #255	@ 0xff
 80033c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80033c4:	88bb      	ldrh	r3, [r7, #4]
 80033c6:	80fb      	strh	r3, [r7, #6]
 80033c8:	e009      	b.n	80033de <send_DHCP_DISCOVER+0x346>
 80033ca:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	4413      	add	r3, r2
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	3301      	adds	r3, #1
 80033dc:	80fb      	strh	r3, [r7, #6]
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80033e4:	d3f1      	bcc.n	80033ca <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 80033e6:	23ff      	movs	r3, #255	@ 0xff
 80033e8:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80033ea:	23ff      	movs	r3, #255	@ 0xff
 80033ec:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80033ee:	23ff      	movs	r3, #255	@ 0xff
 80033f0:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80033f2:	23ff      	movs	r3, #255	@ 0xff
 80033f4:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80033f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <send_DHCP_DISCOVER+0x388>)
 80033f8:	7818      	ldrb	r0, [r3, #0]
 80033fa:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <send_DHCP_DISCOVER+0x37c>)
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	463b      	mov	r3, r7
 8003400:	2243      	movs	r2, #67	@ 0x43
 8003402:	9200      	str	r2, [sp, #0]
 8003404:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8003408:	f001 fd62 	bl	8004ed0 <sendto>
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bdb0      	pop	{r4, r5, r7, pc}
 8003414:	200007f8 	.word	0x200007f8
 8003418:	20000080 	.word	0x20000080
 800341c:	200007fc 	.word	0x200007fc
 8003420:	200007cd 	.word	0x200007cd

08003424 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8003424:	b5b0      	push	{r4, r5, r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800342e:	f7ff fd3d 	bl	8002eac <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8003432:	4b1b      	ldr	r3, [pc, #108]	@ (80034a0 <send_DHCP_REQUEST+0x7c>)
 8003434:	f993 3000 	ldrsb.w	r3, [r3]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d004      	beq.n	8003446 <send_DHCP_REQUEST+0x22>
 800343c:	4b18      	ldr	r3, [pc, #96]	@ (80034a0 <send_DHCP_REQUEST+0x7c>)
 800343e:	f993 3000 	ldrsb.w	r3, [r3]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d134      	bne.n	80034b0 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8003446:	4b17      	ldr	r3, [pc, #92]	@ (80034a4 <send_DHCP_REQUEST+0x80>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330a      	adds	r3, #10
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003450:	4b14      	ldr	r3, [pc, #80]	@ (80034a4 <send_DHCP_REQUEST+0x80>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330a      	adds	r3, #10
 8003456:	3301      	adds	r3, #1
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 800345c:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <send_DHCP_REQUEST+0x80>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a11      	ldr	r2, [pc, #68]	@ (80034a8 <send_DHCP_REQUEST+0x84>)
 8003462:	7812      	ldrb	r2, [r2, #0]
 8003464:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8003466:	4b0f      	ldr	r3, [pc, #60]	@ (80034a4 <send_DHCP_REQUEST+0x80>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a0f      	ldr	r2, [pc, #60]	@ (80034a8 <send_DHCP_REQUEST+0x84>)
 800346c:	7852      	ldrb	r2, [r2, #1]
 800346e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <send_DHCP_REQUEST+0x80>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a0c      	ldr	r2, [pc, #48]	@ (80034a8 <send_DHCP_REQUEST+0x84>)
 8003476:	7892      	ldrb	r2, [r2, #2]
 8003478:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800347a:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <send_DHCP_REQUEST+0x80>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a0a      	ldr	r2, [pc, #40]	@ (80034a8 <send_DHCP_REQUEST+0x84>)
 8003480:	78d2      	ldrb	r2, [r2, #3]
 8003482:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <send_DHCP_REQUEST+0x88>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <send_DHCP_REQUEST+0x88>)
 800348c:	785b      	ldrb	r3, [r3, #1]
 800348e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <send_DHCP_REQUEST+0x88>)
 8003492:	789b      	ldrb	r3, [r3, #2]
 8003494:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8003496:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <send_DHCP_REQUEST+0x88>)
 8003498:	78db      	ldrb	r3, [r3, #3]
 800349a:	71fb      	strb	r3, [r7, #7]
 800349c:	e010      	b.n	80034c0 <send_DHCP_REQUEST+0x9c>
 800349e:	bf00      	nop
 80034a0:	200007ec 	.word	0x200007ec
 80034a4:	200007f8 	.word	0x200007f8
 80034a8:	200007dc 	.word	0x200007dc
 80034ac:	200007d0 	.word	0x200007d0
   }
   else
   {
   	ip[0] = 255;
 80034b0:	23ff      	movs	r3, #255	@ 0xff
 80034b2:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80034b4:	23ff      	movs	r3, #255	@ 0xff
 80034b6:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80034b8:	23ff      	movs	r3, #255	@ 0xff
 80034ba:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80034bc:	23ff      	movs	r3, #255	@ 0xff
 80034be:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80034c0:	2304      	movs	r3, #4
 80034c2:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80034c4:	4b8d      	ldr	r3, [pc, #564]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	897b      	ldrh	r3, [r7, #10]
 80034ca:	1c59      	adds	r1, r3, #1
 80034cc:	8179      	strh	r1, [r7, #10]
 80034ce:	4413      	add	r3, r2
 80034d0:	2235      	movs	r2, #53	@ 0x35
 80034d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80034d6:	4b89      	ldr	r3, [pc, #548]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	897b      	ldrh	r3, [r7, #10]
 80034dc:	1c59      	adds	r1, r3, #1
 80034de:	8179      	strh	r1, [r7, #10]
 80034e0:	4413      	add	r3, r2
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80034e8:	4b84      	ldr	r3, [pc, #528]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	897b      	ldrh	r3, [r7, #10]
 80034ee:	1c59      	adds	r1, r3, #1
 80034f0:	8179      	strh	r1, [r7, #10]
 80034f2:	4413      	add	r3, r2
 80034f4:	2203      	movs	r2, #3
 80034f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80034fa:	4b80      	ldr	r3, [pc, #512]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	897b      	ldrh	r3, [r7, #10]
 8003500:	1c59      	adds	r1, r3, #1
 8003502:	8179      	strh	r1, [r7, #10]
 8003504:	4413      	add	r3, r2
 8003506:	223d      	movs	r2, #61	@ 0x3d
 8003508:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800350c:	4b7b      	ldr	r3, [pc, #492]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	897b      	ldrh	r3, [r7, #10]
 8003512:	1c59      	adds	r1, r3, #1
 8003514:	8179      	strh	r1, [r7, #10]
 8003516:	4413      	add	r3, r2
 8003518:	2207      	movs	r2, #7
 800351a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800351e:	4b77      	ldr	r3, [pc, #476]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	1c59      	adds	r1, r3, #1
 8003526:	8179      	strh	r1, [r7, #10]
 8003528:	4413      	add	r3, r2
 800352a:	2201      	movs	r2, #1
 800352c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8003530:	4b72      	ldr	r3, [pc, #456]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	897b      	ldrh	r3, [r7, #10]
 8003536:	1c59      	adds	r1, r3, #1
 8003538:	8179      	strh	r1, [r7, #10]
 800353a:	4618      	mov	r0, r3
 800353c:	4b70      	ldr	r3, [pc, #448]	@ (8003700 <send_DHCP_REQUEST+0x2dc>)
 800353e:	7819      	ldrb	r1, [r3, #0]
 8003540:	1813      	adds	r3, r2, r0
 8003542:	460a      	mov	r2, r1
 8003544:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003548:	4b6c      	ldr	r3, [pc, #432]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	897b      	ldrh	r3, [r7, #10]
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	8179      	strh	r1, [r7, #10]
 8003552:	4618      	mov	r0, r3
 8003554:	4b6a      	ldr	r3, [pc, #424]	@ (8003700 <send_DHCP_REQUEST+0x2dc>)
 8003556:	7859      	ldrb	r1, [r3, #1]
 8003558:	1813      	adds	r3, r2, r0
 800355a:	460a      	mov	r2, r1
 800355c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003560:	4b66      	ldr	r3, [pc, #408]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	1c59      	adds	r1, r3, #1
 8003568:	8179      	strh	r1, [r7, #10]
 800356a:	4618      	mov	r0, r3
 800356c:	4b64      	ldr	r3, [pc, #400]	@ (8003700 <send_DHCP_REQUEST+0x2dc>)
 800356e:	7899      	ldrb	r1, [r3, #2]
 8003570:	1813      	adds	r3, r2, r0
 8003572:	460a      	mov	r2, r1
 8003574:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003578:	4b60      	ldr	r3, [pc, #384]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	897b      	ldrh	r3, [r7, #10]
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	8179      	strh	r1, [r7, #10]
 8003582:	4618      	mov	r0, r3
 8003584:	4b5e      	ldr	r3, [pc, #376]	@ (8003700 <send_DHCP_REQUEST+0x2dc>)
 8003586:	78d9      	ldrb	r1, [r3, #3]
 8003588:	1813      	adds	r3, r2, r0
 800358a:	460a      	mov	r2, r1
 800358c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003590:	4b5a      	ldr	r3, [pc, #360]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	897b      	ldrh	r3, [r7, #10]
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	8179      	strh	r1, [r7, #10]
 800359a:	4618      	mov	r0, r3
 800359c:	4b58      	ldr	r3, [pc, #352]	@ (8003700 <send_DHCP_REQUEST+0x2dc>)
 800359e:	7919      	ldrb	r1, [r3, #4]
 80035a0:	1813      	adds	r3, r2, r0
 80035a2:	460a      	mov	r2, r1
 80035a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80035a8:	4b54      	ldr	r3, [pc, #336]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	897b      	ldrh	r3, [r7, #10]
 80035ae:	1c59      	adds	r1, r3, #1
 80035b0:	8179      	strh	r1, [r7, #10]
 80035b2:	4618      	mov	r0, r3
 80035b4:	4b52      	ldr	r3, [pc, #328]	@ (8003700 <send_DHCP_REQUEST+0x2dc>)
 80035b6:	7959      	ldrb	r1, [r3, #5]
 80035b8:	1813      	adds	r3, r2, r0
 80035ba:	460a      	mov	r2, r1
 80035bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	2bff      	cmp	r3, #255	@ 0xff
 80035c4:	f040 8084 	bne.w	80036d0 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80035c8:	4b4c      	ldr	r3, [pc, #304]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	897b      	ldrh	r3, [r7, #10]
 80035ce:	1c59      	adds	r1, r3, #1
 80035d0:	8179      	strh	r1, [r7, #10]
 80035d2:	4413      	add	r3, r2
 80035d4:	2232      	movs	r2, #50	@ 0x32
 80035d6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80035da:	4b48      	ldr	r3, [pc, #288]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	897b      	ldrh	r3, [r7, #10]
 80035e0:	1c59      	adds	r1, r3, #1
 80035e2:	8179      	strh	r1, [r7, #10]
 80035e4:	4413      	add	r3, r2
 80035e6:	2204      	movs	r2, #4
 80035e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80035ec:	4b43      	ldr	r3, [pc, #268]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	897b      	ldrh	r3, [r7, #10]
 80035f2:	1c59      	adds	r1, r3, #1
 80035f4:	8179      	strh	r1, [r7, #10]
 80035f6:	4618      	mov	r0, r3
 80035f8:	4b42      	ldr	r3, [pc, #264]	@ (8003704 <send_DHCP_REQUEST+0x2e0>)
 80035fa:	7819      	ldrb	r1, [r3, #0]
 80035fc:	1813      	adds	r3, r2, r0
 80035fe:	460a      	mov	r2, r1
 8003600:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003604:	4b3d      	ldr	r3, [pc, #244]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	897b      	ldrh	r3, [r7, #10]
 800360a:	1c59      	adds	r1, r3, #1
 800360c:	8179      	strh	r1, [r7, #10]
 800360e:	4618      	mov	r0, r3
 8003610:	4b3c      	ldr	r3, [pc, #240]	@ (8003704 <send_DHCP_REQUEST+0x2e0>)
 8003612:	7859      	ldrb	r1, [r3, #1]
 8003614:	1813      	adds	r3, r2, r0
 8003616:	460a      	mov	r2, r1
 8003618:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800361c:	4b37      	ldr	r3, [pc, #220]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	897b      	ldrh	r3, [r7, #10]
 8003622:	1c59      	adds	r1, r3, #1
 8003624:	8179      	strh	r1, [r7, #10]
 8003626:	4618      	mov	r0, r3
 8003628:	4b36      	ldr	r3, [pc, #216]	@ (8003704 <send_DHCP_REQUEST+0x2e0>)
 800362a:	7899      	ldrb	r1, [r3, #2]
 800362c:	1813      	adds	r3, r2, r0
 800362e:	460a      	mov	r2, r1
 8003630:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003634:	4b31      	ldr	r3, [pc, #196]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	897b      	ldrh	r3, [r7, #10]
 800363a:	1c59      	adds	r1, r3, #1
 800363c:	8179      	strh	r1, [r7, #10]
 800363e:	4618      	mov	r0, r3
 8003640:	4b30      	ldr	r3, [pc, #192]	@ (8003704 <send_DHCP_REQUEST+0x2e0>)
 8003642:	78d9      	ldrb	r1, [r3, #3]
 8003644:	1813      	adds	r3, r2, r0
 8003646:	460a      	mov	r2, r1
 8003648:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800364c:	4b2b      	ldr	r3, [pc, #172]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	897b      	ldrh	r3, [r7, #10]
 8003652:	1c59      	adds	r1, r3, #1
 8003654:	8179      	strh	r1, [r7, #10]
 8003656:	4413      	add	r3, r2
 8003658:	2236      	movs	r2, #54	@ 0x36
 800365a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800365e:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	897b      	ldrh	r3, [r7, #10]
 8003664:	1c59      	adds	r1, r3, #1
 8003666:	8179      	strh	r1, [r7, #10]
 8003668:	4413      	add	r3, r2
 800366a:	2204      	movs	r2, #4
 800366c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003670:	4b22      	ldr	r3, [pc, #136]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	897b      	ldrh	r3, [r7, #10]
 8003676:	1c59      	adds	r1, r3, #1
 8003678:	8179      	strh	r1, [r7, #10]
 800367a:	4618      	mov	r0, r3
 800367c:	4b22      	ldr	r3, [pc, #136]	@ (8003708 <send_DHCP_REQUEST+0x2e4>)
 800367e:	7819      	ldrb	r1, [r3, #0]
 8003680:	1813      	adds	r3, r2, r0
 8003682:	460a      	mov	r2, r1
 8003684:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003688:	4b1c      	ldr	r3, [pc, #112]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	897b      	ldrh	r3, [r7, #10]
 800368e:	1c59      	adds	r1, r3, #1
 8003690:	8179      	strh	r1, [r7, #10]
 8003692:	4618      	mov	r0, r3
 8003694:	4b1c      	ldr	r3, [pc, #112]	@ (8003708 <send_DHCP_REQUEST+0x2e4>)
 8003696:	7859      	ldrb	r1, [r3, #1]
 8003698:	1813      	adds	r3, r2, r0
 800369a:	460a      	mov	r2, r1
 800369c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80036a0:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	897b      	ldrh	r3, [r7, #10]
 80036a6:	1c59      	adds	r1, r3, #1
 80036a8:	8179      	strh	r1, [r7, #10]
 80036aa:	4618      	mov	r0, r3
 80036ac:	4b16      	ldr	r3, [pc, #88]	@ (8003708 <send_DHCP_REQUEST+0x2e4>)
 80036ae:	7899      	ldrb	r1, [r3, #2]
 80036b0:	1813      	adds	r3, r2, r0
 80036b2:	460a      	mov	r2, r1
 80036b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80036b8:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	897b      	ldrh	r3, [r7, #10]
 80036be:	1c59      	adds	r1, r3, #1
 80036c0:	8179      	strh	r1, [r7, #10]
 80036c2:	4618      	mov	r0, r3
 80036c4:	4b10      	ldr	r3, [pc, #64]	@ (8003708 <send_DHCP_REQUEST+0x2e4>)
 80036c6:	78d9      	ldrb	r1, [r3, #3]
 80036c8:	1813      	adds	r3, r2, r0
 80036ca:	460a      	mov	r2, r1
 80036cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	897b      	ldrh	r3, [r7, #10]
 80036d6:	1c59      	adds	r1, r3, #1
 80036d8:	8179      	strh	r1, [r7, #10]
 80036da:	4413      	add	r3, r2
 80036dc:	220c      	movs	r2, #12
 80036de:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <send_DHCP_REQUEST+0x2d8>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	897b      	ldrh	r3, [r7, #10]
 80036e8:	1c59      	adds	r1, r3, #1
 80036ea:	8179      	strh	r1, [r7, #10]
 80036ec:	4413      	add	r3, r2
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e019      	b.n	800372e <send_DHCP_REQUEST+0x30a>
 80036fa:	bf00      	nop
 80036fc:	200007f8 	.word	0x200007f8
 8003700:	200007fc 	.word	0x200007fc
 8003704:	200007dc 	.word	0x200007dc
 8003708:	200007d0 	.word	0x200007d0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800370c:	4b86      	ldr	r3, [pc, #536]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	897b      	ldrh	r3, [r7, #10]
 8003712:	1c59      	adds	r1, r3, #1
 8003714:	8179      	strh	r1, [r7, #10]
 8003716:	4618      	mov	r0, r3
 8003718:	4984      	ldr	r1, [pc, #528]	@ (800392c <send_DHCP_REQUEST+0x508>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	440b      	add	r3, r1
 800371e:	7819      	ldrb	r1, [r3, #0]
 8003720:	1813      	adds	r3, r2, r0
 8003722:	460a      	mov	r2, r1
 8003724:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	4a7f      	ldr	r2, [pc, #508]	@ (800392c <send_DHCP_REQUEST+0x508>)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e8      	bne.n	800370c <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800373a:	4b7d      	ldr	r3, [pc, #500]	@ (8003930 <send_DHCP_REQUEST+0x50c>)
 800373c:	78db      	ldrb	r3, [r3, #3]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4b79      	ldr	r3, [pc, #484]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 8003744:	681c      	ldr	r4, [r3, #0]
 8003746:	897b      	ldrh	r3, [r7, #10]
 8003748:	1c59      	adds	r1, r3, #1
 800374a:	8179      	strh	r1, [r7, #10]
 800374c:	461d      	mov	r5, r3
 800374e:	4610      	mov	r0, r2
 8003750:	f000 ff24 	bl	800459c <NibbleToHex>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	1963      	adds	r3, r4, r5
 800375a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800375e:	4b74      	ldr	r3, [pc, #464]	@ (8003930 <send_DHCP_REQUEST+0x50c>)
 8003760:	78da      	ldrb	r2, [r3, #3]
 8003762:	4b71      	ldr	r3, [pc, #452]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 8003764:	681c      	ldr	r4, [r3, #0]
 8003766:	897b      	ldrh	r3, [r7, #10]
 8003768:	1c59      	adds	r1, r3, #1
 800376a:	8179      	strh	r1, [r7, #10]
 800376c:	461d      	mov	r5, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f000 ff14 	bl	800459c <NibbleToHex>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	1963      	adds	r3, r4, r5
 800377a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800377e:	4b6c      	ldr	r3, [pc, #432]	@ (8003930 <send_DHCP_REQUEST+0x50c>)
 8003780:	791b      	ldrb	r3, [r3, #4]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b68      	ldr	r3, [pc, #416]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 8003788:	681c      	ldr	r4, [r3, #0]
 800378a:	897b      	ldrh	r3, [r7, #10]
 800378c:	1c59      	adds	r1, r3, #1
 800378e:	8179      	strh	r1, [r7, #10]
 8003790:	461d      	mov	r5, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f000 ff02 	bl	800459c <NibbleToHex>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	1963      	adds	r3, r4, r5
 800379e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80037a2:	4b63      	ldr	r3, [pc, #396]	@ (8003930 <send_DHCP_REQUEST+0x50c>)
 80037a4:	791a      	ldrb	r2, [r3, #4]
 80037a6:	4b60      	ldr	r3, [pc, #384]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 80037a8:	681c      	ldr	r4, [r3, #0]
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	1c59      	adds	r1, r3, #1
 80037ae:	8179      	strh	r1, [r7, #10]
 80037b0:	461d      	mov	r5, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 fef2 	bl	800459c <NibbleToHex>
 80037b8:	4603      	mov	r3, r0
 80037ba:	461a      	mov	r2, r3
 80037bc:	1963      	adds	r3, r4, r5
 80037be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80037c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003930 <send_DHCP_REQUEST+0x50c>)
 80037c4:	795b      	ldrb	r3, [r3, #5]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4b57      	ldr	r3, [pc, #348]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 80037cc:	681c      	ldr	r4, [r3, #0]
 80037ce:	897b      	ldrh	r3, [r7, #10]
 80037d0:	1c59      	adds	r1, r3, #1
 80037d2:	8179      	strh	r1, [r7, #10]
 80037d4:	461d      	mov	r5, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f000 fee0 	bl	800459c <NibbleToHex>
 80037dc:	4603      	mov	r3, r0
 80037de:	461a      	mov	r2, r3
 80037e0:	1963      	adds	r3, r4, r5
 80037e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80037e6:	4b52      	ldr	r3, [pc, #328]	@ (8003930 <send_DHCP_REQUEST+0x50c>)
 80037e8:	795a      	ldrb	r2, [r3, #5]
 80037ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 80037ec:	681c      	ldr	r4, [r3, #0]
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	1c59      	adds	r1, r3, #1
 80037f2:	8179      	strh	r1, [r7, #10]
 80037f4:	461d      	mov	r5, r3
 80037f6:	4610      	mov	r0, r2
 80037f8:	f000 fed0 	bl	800459c <NibbleToHex>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	1963      	adds	r3, r4, r5
 8003802:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	b2d9      	uxtb	r1, r3
 800380a:	4b47      	ldr	r3, [pc, #284]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	8978      	ldrh	r0, [r7, #10]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3307      	adds	r3, #7
 8003814:	1ac3      	subs	r3, r0, r3
 8003816:	3106      	adds	r1, #6
 8003818:	b2c9      	uxtb	r1, r1
 800381a:	4413      	add	r3, r2
 800381c:	460a      	mov	r2, r1
 800381e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8003822:	4b41      	ldr	r3, [pc, #260]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	897b      	ldrh	r3, [r7, #10]
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	8179      	strh	r1, [r7, #10]
 800382c:	4413      	add	r3, r2
 800382e:	2237      	movs	r2, #55	@ 0x37
 8003830:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8003834:	4b3c      	ldr	r3, [pc, #240]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	897b      	ldrh	r3, [r7, #10]
 800383a:	1c59      	adds	r1, r3, #1
 800383c:	8179      	strh	r1, [r7, #10]
 800383e:	4413      	add	r3, r2
 8003840:	2208      	movs	r2, #8
 8003842:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8003846:	4b38      	ldr	r3, [pc, #224]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	1c59      	adds	r1, r3, #1
 800384e:	8179      	strh	r1, [r7, #10]
 8003850:	4413      	add	r3, r2
 8003852:	2201      	movs	r2, #1
 8003854:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8003858:	4b33      	ldr	r3, [pc, #204]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	897b      	ldrh	r3, [r7, #10]
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	8179      	strh	r1, [r7, #10]
 8003862:	4413      	add	r3, r2
 8003864:	2203      	movs	r2, #3
 8003866:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 800386a:	4b2f      	ldr	r3, [pc, #188]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	897b      	ldrh	r3, [r7, #10]
 8003870:	1c59      	adds	r1, r3, #1
 8003872:	8179      	strh	r1, [r7, #10]
 8003874:	4413      	add	r3, r2
 8003876:	2206      	movs	r2, #6
 8003878:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800387c:	4b2a      	ldr	r3, [pc, #168]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	897b      	ldrh	r3, [r7, #10]
 8003882:	1c59      	adds	r1, r3, #1
 8003884:	8179      	strh	r1, [r7, #10]
 8003886:	4413      	add	r3, r2
 8003888:	220f      	movs	r2, #15
 800388a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800388e:	4b26      	ldr	r3, [pc, #152]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	897b      	ldrh	r3, [r7, #10]
 8003894:	1c59      	adds	r1, r3, #1
 8003896:	8179      	strh	r1, [r7, #10]
 8003898:	4413      	add	r3, r2
 800389a:	223a      	movs	r2, #58	@ 0x3a
 800389c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80038a0:	4b21      	ldr	r3, [pc, #132]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	897b      	ldrh	r3, [r7, #10]
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	8179      	strh	r1, [r7, #10]
 80038aa:	4413      	add	r3, r2
 80038ac:	223b      	movs	r2, #59	@ 0x3b
 80038ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80038b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	1c59      	adds	r1, r3, #1
 80038ba:	8179      	strh	r1, [r7, #10]
 80038bc:	4413      	add	r3, r2
 80038be:	221f      	movs	r2, #31
 80038c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80038c4:	4b18      	ldr	r3, [pc, #96]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	897b      	ldrh	r3, [r7, #10]
 80038ca:	1c59      	adds	r1, r3, #1
 80038cc:	8179      	strh	r1, [r7, #10]
 80038ce:	4413      	add	r3, r2
 80038d0:	2221      	movs	r2, #33	@ 0x21
 80038d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80038d6:	4b14      	ldr	r3, [pc, #80]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	897b      	ldrh	r3, [r7, #10]
 80038dc:	1c59      	adds	r1, r3, #1
 80038de:	8179      	strh	r1, [r7, #10]
 80038e0:	4413      	add	r3, r2
 80038e2:	22ff      	movs	r2, #255	@ 0xff
 80038e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80038e8:	897b      	ldrh	r3, [r7, #10]
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e009      	b.n	8003902 <send_DHCP_REQUEST+0x4de>
 80038ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	33ec      	adds	r3, #236	@ 0xec
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3301      	adds	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003908:	dbf1      	blt.n	80038ee <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800390a:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <send_DHCP_REQUEST+0x510>)
 800390c:	7818      	ldrb	r0, [r3, #0]
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <send_DHCP_REQUEST+0x504>)
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	1d3b      	adds	r3, r7, #4
 8003914:	2243      	movs	r2, #67	@ 0x43
 8003916:	9200      	str	r2, [sp, #0]
 8003918:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800391c:	f001 fad8 	bl	8004ed0 <sendto>

}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bdb0      	pop	{r4, r5, r7, pc}
 8003928:	200007f8 	.word	0x200007f8
 800392c:	20000080 	.word	0x20000080
 8003930:	200007fc 	.word	0x200007fc
 8003934:	200007cd 	.word	0x200007cd

08003938 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8003942:	f7ff fab3 	bl	8002eac <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003946:	2304      	movs	r3, #4
 8003948:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800394a:	4b9f      	ldr	r3, [pc, #636]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330a      	adds	r3, #10
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003954:	4b9c      	ldr	r3, [pc, #624]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330a      	adds	r3, #10
 800395a:	3301      	adds	r3, #1
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003960:	4b99      	ldr	r3, [pc, #612]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	897b      	ldrh	r3, [r7, #10]
 8003966:	1c59      	adds	r1, r3, #1
 8003968:	8179      	strh	r1, [r7, #10]
 800396a:	4413      	add	r3, r2
 800396c:	2235      	movs	r2, #53	@ 0x35
 800396e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003972:	4b95      	ldr	r3, [pc, #596]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	897b      	ldrh	r3, [r7, #10]
 8003978:	1c59      	adds	r1, r3, #1
 800397a:	8179      	strh	r1, [r7, #10]
 800397c:	4413      	add	r3, r2
 800397e:	2201      	movs	r2, #1
 8003980:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8003984:	4b90      	ldr	r3, [pc, #576]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	897b      	ldrh	r3, [r7, #10]
 800398a:	1c59      	adds	r1, r3, #1
 800398c:	8179      	strh	r1, [r7, #10]
 800398e:	4413      	add	r3, r2
 8003990:	2204      	movs	r2, #4
 8003992:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003996:	4b8c      	ldr	r3, [pc, #560]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	897b      	ldrh	r3, [r7, #10]
 800399c:	1c59      	adds	r1, r3, #1
 800399e:	8179      	strh	r1, [r7, #10]
 80039a0:	4413      	add	r3, r2
 80039a2:	223d      	movs	r2, #61	@ 0x3d
 80039a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80039a8:	4b87      	ldr	r3, [pc, #540]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	897b      	ldrh	r3, [r7, #10]
 80039ae:	1c59      	adds	r1, r3, #1
 80039b0:	8179      	strh	r1, [r7, #10]
 80039b2:	4413      	add	r3, r2
 80039b4:	2207      	movs	r2, #7
 80039b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80039ba:	4b83      	ldr	r3, [pc, #524]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	1c59      	adds	r1, r3, #1
 80039c2:	8179      	strh	r1, [r7, #10]
 80039c4:	4413      	add	r3, r2
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80039cc:	4b7e      	ldr	r3, [pc, #504]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	1c59      	adds	r1, r3, #1
 80039d4:	8179      	strh	r1, [r7, #10]
 80039d6:	4618      	mov	r0, r3
 80039d8:	4b7c      	ldr	r3, [pc, #496]	@ (8003bcc <send_DHCP_DECLINE+0x294>)
 80039da:	7819      	ldrb	r1, [r3, #0]
 80039dc:	1813      	adds	r3, r2, r0
 80039de:	460a      	mov	r2, r1
 80039e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80039e4:	4b78      	ldr	r3, [pc, #480]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	897b      	ldrh	r3, [r7, #10]
 80039ea:	1c59      	adds	r1, r3, #1
 80039ec:	8179      	strh	r1, [r7, #10]
 80039ee:	4618      	mov	r0, r3
 80039f0:	4b76      	ldr	r3, [pc, #472]	@ (8003bcc <send_DHCP_DECLINE+0x294>)
 80039f2:	7859      	ldrb	r1, [r3, #1]
 80039f4:	1813      	adds	r3, r2, r0
 80039f6:	460a      	mov	r2, r1
 80039f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80039fc:	4b72      	ldr	r3, [pc, #456]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	897b      	ldrh	r3, [r7, #10]
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	8179      	strh	r1, [r7, #10]
 8003a06:	4618      	mov	r0, r3
 8003a08:	4b70      	ldr	r3, [pc, #448]	@ (8003bcc <send_DHCP_DECLINE+0x294>)
 8003a0a:	7899      	ldrb	r1, [r3, #2]
 8003a0c:	1813      	adds	r3, r2, r0
 8003a0e:	460a      	mov	r2, r1
 8003a10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003a14:	4b6c      	ldr	r3, [pc, #432]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	897b      	ldrh	r3, [r7, #10]
 8003a1a:	1c59      	adds	r1, r3, #1
 8003a1c:	8179      	strh	r1, [r7, #10]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	4b6a      	ldr	r3, [pc, #424]	@ (8003bcc <send_DHCP_DECLINE+0x294>)
 8003a22:	78d9      	ldrb	r1, [r3, #3]
 8003a24:	1813      	adds	r3, r2, r0
 8003a26:	460a      	mov	r2, r1
 8003a28:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003a2c:	4b66      	ldr	r3, [pc, #408]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	897b      	ldrh	r3, [r7, #10]
 8003a32:	1c59      	adds	r1, r3, #1
 8003a34:	8179      	strh	r1, [r7, #10]
 8003a36:	4618      	mov	r0, r3
 8003a38:	4b64      	ldr	r3, [pc, #400]	@ (8003bcc <send_DHCP_DECLINE+0x294>)
 8003a3a:	7919      	ldrb	r1, [r3, #4]
 8003a3c:	1813      	adds	r3, r2, r0
 8003a3e:	460a      	mov	r2, r1
 8003a40:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003a44:	4b60      	ldr	r3, [pc, #384]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	897b      	ldrh	r3, [r7, #10]
 8003a4a:	1c59      	adds	r1, r3, #1
 8003a4c:	8179      	strh	r1, [r7, #10]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	4b5e      	ldr	r3, [pc, #376]	@ (8003bcc <send_DHCP_DECLINE+0x294>)
 8003a52:	7959      	ldrb	r1, [r3, #5]
 8003a54:	1813      	adds	r3, r2, r0
 8003a56:	460a      	mov	r2, r1
 8003a58:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	1c59      	adds	r1, r3, #1
 8003a64:	8179      	strh	r1, [r7, #10]
 8003a66:	4413      	add	r3, r2
 8003a68:	2232      	movs	r2, #50	@ 0x32
 8003a6a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003a6e:	4b56      	ldr	r3, [pc, #344]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	897b      	ldrh	r3, [r7, #10]
 8003a74:	1c59      	adds	r1, r3, #1
 8003a76:	8179      	strh	r1, [r7, #10]
 8003a78:	4413      	add	r3, r2
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003a80:	4b51      	ldr	r3, [pc, #324]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	897b      	ldrh	r3, [r7, #10]
 8003a86:	1c59      	adds	r1, r3, #1
 8003a88:	8179      	strh	r1, [r7, #10]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	4b50      	ldr	r3, [pc, #320]	@ (8003bd0 <send_DHCP_DECLINE+0x298>)
 8003a8e:	7819      	ldrb	r1, [r3, #0]
 8003a90:	1813      	adds	r3, r2, r0
 8003a92:	460a      	mov	r2, r1
 8003a94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003a98:	4b4b      	ldr	r3, [pc, #300]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	897b      	ldrh	r3, [r7, #10]
 8003a9e:	1c59      	adds	r1, r3, #1
 8003aa0:	8179      	strh	r1, [r7, #10]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd0 <send_DHCP_DECLINE+0x298>)
 8003aa6:	7859      	ldrb	r1, [r3, #1]
 8003aa8:	1813      	adds	r3, r2, r0
 8003aaa:	460a      	mov	r2, r1
 8003aac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003ab0:	4b45      	ldr	r3, [pc, #276]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	1c59      	adds	r1, r3, #1
 8003ab8:	8179      	strh	r1, [r7, #10]
 8003aba:	4618      	mov	r0, r3
 8003abc:	4b44      	ldr	r3, [pc, #272]	@ (8003bd0 <send_DHCP_DECLINE+0x298>)
 8003abe:	7899      	ldrb	r1, [r3, #2]
 8003ac0:	1813      	adds	r3, r2, r0
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	897b      	ldrh	r3, [r7, #10]
 8003ace:	1c59      	adds	r1, r3, #1
 8003ad0:	8179      	strh	r1, [r7, #10]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd0 <send_DHCP_DECLINE+0x298>)
 8003ad6:	78d9      	ldrb	r1, [r3, #3]
 8003ad8:	1813      	adds	r3, r2, r0
 8003ada:	460a      	mov	r2, r1
 8003adc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003ae0:	4b39      	ldr	r3, [pc, #228]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	897b      	ldrh	r3, [r7, #10]
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	8179      	strh	r1, [r7, #10]
 8003aea:	4413      	add	r3, r2
 8003aec:	2236      	movs	r2, #54	@ 0x36
 8003aee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003af2:	4b35      	ldr	r3, [pc, #212]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	897b      	ldrh	r3, [r7, #10]
 8003af8:	1c59      	adds	r1, r3, #1
 8003afa:	8179      	strh	r1, [r7, #10]
 8003afc:	4413      	add	r3, r2
 8003afe:	2204      	movs	r2, #4
 8003b00:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003b04:	4b30      	ldr	r3, [pc, #192]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	8179      	strh	r1, [r7, #10]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	4b30      	ldr	r3, [pc, #192]	@ (8003bd4 <send_DHCP_DECLINE+0x29c>)
 8003b12:	7819      	ldrb	r1, [r3, #0]
 8003b14:	1813      	adds	r3, r2, r0
 8003b16:	460a      	mov	r2, r1
 8003b18:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	897b      	ldrh	r3, [r7, #10]
 8003b22:	1c59      	adds	r1, r3, #1
 8003b24:	8179      	strh	r1, [r7, #10]
 8003b26:	4618      	mov	r0, r3
 8003b28:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <send_DHCP_DECLINE+0x29c>)
 8003b2a:	7859      	ldrb	r1, [r3, #1]
 8003b2c:	1813      	adds	r3, r2, r0
 8003b2e:	460a      	mov	r2, r1
 8003b30:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003b34:	4b24      	ldr	r3, [pc, #144]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	897b      	ldrh	r3, [r7, #10]
 8003b3a:	1c59      	adds	r1, r3, #1
 8003b3c:	8179      	strh	r1, [r7, #10]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <send_DHCP_DECLINE+0x29c>)
 8003b42:	7899      	ldrb	r1, [r3, #2]
 8003b44:	1813      	adds	r3, r2, r0
 8003b46:	460a      	mov	r2, r1
 8003b48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	897b      	ldrh	r3, [r7, #10]
 8003b52:	1c59      	adds	r1, r3, #1
 8003b54:	8179      	strh	r1, [r7, #10]
 8003b56:	4618      	mov	r0, r3
 8003b58:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd4 <send_DHCP_DECLINE+0x29c>)
 8003b5a:	78d9      	ldrb	r1, [r3, #3]
 8003b5c:	1813      	adds	r3, r2, r0
 8003b5e:	460a      	mov	r2, r1
 8003b60:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8003b64:	4b18      	ldr	r3, [pc, #96]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	897b      	ldrh	r3, [r7, #10]
 8003b6a:	1c59      	adds	r1, r3, #1
 8003b6c:	8179      	strh	r1, [r7, #10]
 8003b6e:	4413      	add	r3, r2
 8003b70:	22ff      	movs	r2, #255	@ 0xff
 8003b72:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003b76:	897b      	ldrh	r3, [r7, #10]
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e009      	b.n	8003b90 <send_DHCP_DECLINE+0x258>
 8003b7c:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	33ec      	adds	r3, #236	@ 0xec
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003b96:	dbf1      	blt.n	8003b7c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8003b98:	23ff      	movs	r3, #255	@ 0xff
 8003b9a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8003b9c:	23ff      	movs	r3, #255	@ 0xff
 8003b9e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003ba0:	23ff      	movs	r3, #255	@ 0xff
 8003ba2:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003ba4:	23ff      	movs	r3, #255	@ 0xff
 8003ba6:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <send_DHCP_DECLINE+0x2a0>)
 8003baa:	7818      	ldrb	r0, [r3, #0]
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <send_DHCP_DECLINE+0x290>)
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	1d3b      	adds	r3, r7, #4
 8003bb2:	2243      	movs	r2, #67	@ 0x43
 8003bb4:	9200      	str	r2, [sp, #0]
 8003bb6:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8003bba:	f001 f989 	bl	8004ed0 <sendto>
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200007f8 	.word	0x200007f8
 8003bcc:	200007fc 	.word	0x200007fc
 8003bd0:	200007dc 	.word	0x200007dc
 8003bd4:	200007d0 	.word	0x200007d0
 8003bd8:	200007cd 	.word	0x200007cd

08003bdc <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b089      	sub	sp, #36	@ 0x24
 8003be0:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8003be6:	4ba1      	ldr	r3, [pc, #644]	@ (8003e6c <parseDHCPMSG+0x290>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fe33 	bl	8005856 <getSn_RX_RSR>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	823b      	strh	r3, [r7, #16]
 8003bf4:	8a3b      	ldrh	r3, [r7, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d011      	beq.n	8003c1e <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8003bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8003e6c <parseDHCPMSG+0x290>)
 8003bfc:	7818      	ldrb	r0, [r3, #0]
 8003bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8003e70 <parseDHCPMSG+0x294>)
 8003c00:	6819      	ldr	r1, [r3, #0]
 8003c02:	1d3c      	adds	r4, r7, #4
 8003c04:	8a3a      	ldrh	r2, [r7, #16]
 8003c06:	1cbb      	adds	r3, r7, #2
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	f001 fa94 	bl	8005138 <recvfrom>
 8003c10:	4603      	mov	r3, r0
 8003c12:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	2b43      	cmp	r3, #67	@ 0x43
 8003c18:	f040 81ed 	bne.w	8003ff6 <parseDHCPMSG+0x41a>
 8003c1c:	e001      	b.n	8003c22 <parseDHCPMSG+0x46>
   else return 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e1eb      	b.n	8003ffa <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003c22:	4b93      	ldr	r3, [pc, #588]	@ (8003e70 <parseDHCPMSG+0x294>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	7f1a      	ldrb	r2, [r3, #28]
 8003c28:	4b92      	ldr	r3, [pc, #584]	@ (8003e74 <parseDHCPMSG+0x298>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d124      	bne.n	8003c7a <parseDHCPMSG+0x9e>
 8003c30:	4b8f      	ldr	r3, [pc, #572]	@ (8003e70 <parseDHCPMSG+0x294>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	7f5a      	ldrb	r2, [r3, #29]
 8003c36:	4b8f      	ldr	r3, [pc, #572]	@ (8003e74 <parseDHCPMSG+0x298>)
 8003c38:	785b      	ldrb	r3, [r3, #1]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d11d      	bne.n	8003c7a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003c3e:	4b8c      	ldr	r3, [pc, #560]	@ (8003e70 <parseDHCPMSG+0x294>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	7f9a      	ldrb	r2, [r3, #30]
 8003c44:	4b8b      	ldr	r3, [pc, #556]	@ (8003e74 <parseDHCPMSG+0x298>)
 8003c46:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d116      	bne.n	8003c7a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003c4c:	4b88      	ldr	r3, [pc, #544]	@ (8003e70 <parseDHCPMSG+0x294>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	7fda      	ldrb	r2, [r3, #31]
 8003c52:	4b88      	ldr	r3, [pc, #544]	@ (8003e74 <parseDHCPMSG+0x298>)
 8003c54:	78db      	ldrb	r3, [r3, #3]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d10f      	bne.n	8003c7a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003c5a:	4b85      	ldr	r3, [pc, #532]	@ (8003e70 <parseDHCPMSG+0x294>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003c62:	4b84      	ldr	r3, [pc, #528]	@ (8003e74 <parseDHCPMSG+0x298>)
 8003c64:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d107      	bne.n	8003c7a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003c6a:	4b81      	ldr	r3, [pc, #516]	@ (8003e70 <parseDHCPMSG+0x294>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003c72:	4b80      	ldr	r3, [pc, #512]	@ (8003e74 <parseDHCPMSG+0x298>)
 8003c74:	795b      	ldrb	r3, [r3, #5]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d001      	beq.n	8003c7e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e1bd      	b.n	8003ffa <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8003c7e:	4b7e      	ldr	r3, [pc, #504]	@ (8003e78 <parseDHCPMSG+0x29c>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10b      	bne.n	8003c9e <parseDHCPMSG+0xc2>
 8003c86:	4b7c      	ldr	r3, [pc, #496]	@ (8003e78 <parseDHCPMSG+0x29c>)
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <parseDHCPMSG+0xc2>
 8003c8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003e78 <parseDHCPMSG+0x29c>)
 8003c90:	789b      	ldrb	r3, [r3, #2]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <parseDHCPMSG+0xc2>
 8003c96:	4b78      	ldr	r3, [pc, #480]	@ (8003e78 <parseDHCPMSG+0x29c>)
 8003c98:	78db      	ldrb	r3, [r3, #3]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d029      	beq.n	8003cf2 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003c9e:	793a      	ldrb	r2, [r7, #4]
 8003ca0:	4b75      	ldr	r3, [pc, #468]	@ (8003e78 <parseDHCPMSG+0x29c>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d10e      	bne.n	8003cc6 <parseDHCPMSG+0xea>
 8003ca8:	797a      	ldrb	r2, [r7, #5]
 8003caa:	4b73      	ldr	r3, [pc, #460]	@ (8003e78 <parseDHCPMSG+0x29c>)
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d109      	bne.n	8003cc6 <parseDHCPMSG+0xea>
 8003cb2:	79ba      	ldrb	r2, [r7, #6]
 8003cb4:	4b70      	ldr	r3, [pc, #448]	@ (8003e78 <parseDHCPMSG+0x29c>)
 8003cb6:	789b      	ldrb	r3, [r3, #2]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d104      	bne.n	8003cc6 <parseDHCPMSG+0xea>
 8003cbc:	79fa      	ldrb	r2, [r7, #7]
 8003cbe:	4b6e      	ldr	r3, [pc, #440]	@ (8003e78 <parseDHCPMSG+0x29c>)
 8003cc0:	78db      	ldrb	r3, [r3, #3]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d015      	beq.n	8003cf2 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003cc6:	793a      	ldrb	r2, [r7, #4]
 8003cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8003e7c <parseDHCPMSG+0x2a0>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d10e      	bne.n	8003cee <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003cd0:	797a      	ldrb	r2, [r7, #5]
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e7c <parseDHCPMSG+0x2a0>)
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d109      	bne.n	8003cee <parseDHCPMSG+0x112>
 8003cda:	79ba      	ldrb	r2, [r7, #6]
 8003cdc:	4b67      	ldr	r3, [pc, #412]	@ (8003e7c <parseDHCPMSG+0x2a0>)
 8003cde:	789b      	ldrb	r3, [r3, #2]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d104      	bne.n	8003cee <parseDHCPMSG+0x112>
 8003ce4:	79fa      	ldrb	r2, [r7, #7]
 8003ce6:	4b65      	ldr	r3, [pc, #404]	@ (8003e7c <parseDHCPMSG+0x2a0>)
 8003ce8:	78db      	ldrb	r3, [r3, #3]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d001      	beq.n	8003cf2 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e183      	b.n	8003ffa <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8003cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8003e70 <parseDHCPMSG+0x294>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	33f0      	adds	r3, #240	@ 0xf0
 8003cfc:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8003cfe:	8a3b      	ldrh	r3, [r7, #16]
 8003d00:	3bf0      	subs	r3, #240	@ 0xf0
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4413      	add	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8003d08:	e170      	b.n	8003fec <parseDHCPMSG+0x410>

			switch ( *p ) {
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b36      	cmp	r3, #54	@ 0x36
 8003d10:	dc76      	bgt.n	8003e00 <parseDHCPMSG+0x224>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f2c0 815d 	blt.w	8003fd2 <parseDHCPMSG+0x3f6>
 8003d18:	2b36      	cmp	r3, #54	@ 0x36
 8003d1a:	f200 815a 	bhi.w	8003fd2 <parseDHCPMSG+0x3f6>
 8003d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <parseDHCPMSG+0x148>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003e0d 	.word	0x08003e0d
 8003d28:	08003e2d 	.word	0x08003e2d
 8003d2c:	08003fd3 	.word	0x08003fd3
 8003d30:	08003e85 	.word	0x08003e85
 8003d34:	08003fd3 	.word	0x08003fd3
 8003d38:	08003fd3 	.word	0x08003fd3
 8003d3c:	08003ed1 	.word	0x08003ed1
 8003d40:	08003fd3 	.word	0x08003fd3
 8003d44:	08003fd3 	.word	0x08003fd3
 8003d48:	08003fd3 	.word	0x08003fd3
 8003d4c:	08003fd3 	.word	0x08003fd3
 8003d50:	08003fd3 	.word	0x08003fd3
 8003d54:	08003fd3 	.word	0x08003fd3
 8003d58:	08003fd3 	.word	0x08003fd3
 8003d5c:	08003fd3 	.word	0x08003fd3
 8003d60:	08003fd3 	.word	0x08003fd3
 8003d64:	08003fd3 	.word	0x08003fd3
 8003d68:	08003fd3 	.word	0x08003fd3
 8003d6c:	08003fd3 	.word	0x08003fd3
 8003d70:	08003fd3 	.word	0x08003fd3
 8003d74:	08003fd3 	.word	0x08003fd3
 8003d78:	08003fd3 	.word	0x08003fd3
 8003d7c:	08003fd3 	.word	0x08003fd3
 8003d80:	08003fd3 	.word	0x08003fd3
 8003d84:	08003fd3 	.word	0x08003fd3
 8003d88:	08003fd3 	.word	0x08003fd3
 8003d8c:	08003fd3 	.word	0x08003fd3
 8003d90:	08003fd3 	.word	0x08003fd3
 8003d94:	08003fd3 	.word	0x08003fd3
 8003d98:	08003fd3 	.word	0x08003fd3
 8003d9c:	08003fd3 	.word	0x08003fd3
 8003da0:	08003fd3 	.word	0x08003fd3
 8003da4:	08003fd3 	.word	0x08003fd3
 8003da8:	08003fd3 	.word	0x08003fd3
 8003dac:	08003fd3 	.word	0x08003fd3
 8003db0:	08003fd3 	.word	0x08003fd3
 8003db4:	08003fd3 	.word	0x08003fd3
 8003db8:	08003fd3 	.word	0x08003fd3
 8003dbc:	08003fd3 	.word	0x08003fd3
 8003dc0:	08003fd3 	.word	0x08003fd3
 8003dc4:	08003fd3 	.word	0x08003fd3
 8003dc8:	08003fd3 	.word	0x08003fd3
 8003dcc:	08003fd3 	.word	0x08003fd3
 8003dd0:	08003fd3 	.word	0x08003fd3
 8003dd4:	08003fd3 	.word	0x08003fd3
 8003dd8:	08003fd3 	.word	0x08003fd3
 8003ddc:	08003fd3 	.word	0x08003fd3
 8003de0:	08003fd3 	.word	0x08003fd3
 8003de4:	08003fd3 	.word	0x08003fd3
 8003de8:	08003fd3 	.word	0x08003fd3
 8003dec:	08003fd3 	.word	0x08003fd3
 8003df0:	08003f1d 	.word	0x08003f1d
 8003df4:	08003fd3 	.word	0x08003fd3
 8003df8:	08003e15 	.word	0x08003e15
 8003dfc:	08003f79 	.word	0x08003f79
 8003e00:	2bff      	cmp	r3, #255	@ 0xff
 8003e02:	f040 80e6 	bne.w	8003fd2 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	617b      	str	r3, [r7, #20]
   				break;
 8003e0a:	e0ef      	b.n	8003fec <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
   				break;
 8003e12:	e0eb      	b.n	8003fec <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3301      	adds	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
   				p++;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	617a      	str	r2, [r7, #20]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	74fb      	strb	r3, [r7, #19]
   				break;
 8003e2a:	e0df      	b.n	8003fec <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
   				p++;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	3301      	adds	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	617a      	str	r2, [r7, #20]
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	4b0f      	ldr	r3, [pc, #60]	@ (8003e80 <parseDHCPMSG+0x2a4>)
 8003e42:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	617a      	str	r2, [r7, #20]
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e80 <parseDHCPMSG+0x2a4>)
 8003e4e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	617a      	str	r2, [r7, #20]
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <parseDHCPMSG+0x2a4>)
 8003e5a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	617a      	str	r2, [r7, #20]
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <parseDHCPMSG+0x2a4>)
 8003e66:	70da      	strb	r2, [r3, #3]
   				break;
 8003e68:	e0c0      	b.n	8003fec <parseDHCPMSG+0x410>
 8003e6a:	bf00      	nop
 8003e6c:	200007cd 	.word	0x200007cd
 8003e70:	200007f8 	.word	0x200007f8
 8003e74:	200007fc 	.word	0x200007fc
 8003e78:	200007d0 	.word	0x200007d0
 8003e7c:	200007d4 	.word	0x200007d4
 8003e80:	200007e4 	.word	0x200007e4
   			case routersOnSubnet :
   				p++;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3301      	adds	r3, #1
 8003e88:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	617a      	str	r2, [r7, #20]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	617a      	str	r2, [r7, #20]
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	4b59      	ldr	r3, [pc, #356]	@ (8004004 <parseDHCPMSG+0x428>)
 8003e9e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	617a      	str	r2, [r7, #20]
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	4b56      	ldr	r3, [pc, #344]	@ (8004004 <parseDHCPMSG+0x428>)
 8003eaa:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	617a      	str	r2, [r7, #20]
 8003eb2:	781a      	ldrb	r2, [r3, #0]
 8003eb4:	4b53      	ldr	r3, [pc, #332]	@ (8004004 <parseDHCPMSG+0x428>)
 8003eb6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	617a      	str	r2, [r7, #20]
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	4b50      	ldr	r3, [pc, #320]	@ (8004004 <parseDHCPMSG+0x428>)
 8003ec2:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
 8003ec6:	3b04      	subs	r3, #4
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4413      	add	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
   				break;
 8003ece:	e08d      	b.n	8003fec <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	617a      	str	r2, [r7, #20]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	617a      	str	r2, [r7, #20]
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	4b47      	ldr	r3, [pc, #284]	@ (8004008 <parseDHCPMSG+0x42c>)
 8003eea:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	617a      	str	r2, [r7, #20]
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	4b44      	ldr	r3, [pc, #272]	@ (8004008 <parseDHCPMSG+0x42c>)
 8003ef6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	617a      	str	r2, [r7, #20]
 8003efe:	781a      	ldrb	r2, [r3, #0]
 8003f00:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <parseDHCPMSG+0x42c>)
 8003f02:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	617a      	str	r2, [r7, #20]
 8003f0a:	781a      	ldrb	r2, [r3, #0]
 8003f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8004008 <parseDHCPMSG+0x42c>)
 8003f0e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	3b04      	subs	r3, #4
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4413      	add	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
   				break;
 8003f1a:	e067      	b.n	8003fec <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	617a      	str	r2, [r7, #20]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	617a      	str	r2, [r7, #20]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b35      	ldr	r3, [pc, #212]	@ (800400c <parseDHCPMSG+0x430>)
 8003f38:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003f3a:	4b34      	ldr	r3, [pc, #208]	@ (800400c <parseDHCPMSG+0x430>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	1c59      	adds	r1, r3, #1
 8003f44:	6179      	str	r1, [r7, #20]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	4413      	add	r3, r2
 8003f4a:	4a30      	ldr	r2, [pc, #192]	@ (800400c <parseDHCPMSG+0x430>)
 8003f4c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800400c <parseDHCPMSG+0x430>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	021a      	lsls	r2, r3, #8
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	1c59      	adds	r1, r3, #1
 8003f58:	6179      	str	r1, [r7, #20]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	4a2b      	ldr	r2, [pc, #172]	@ (800400c <parseDHCPMSG+0x430>)
 8003f60:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003f62:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <parseDHCPMSG+0x430>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	021a      	lsls	r2, r3, #8
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	1c59      	adds	r1, r3, #1
 8003f6c:	6179      	str	r1, [r7, #20]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	4413      	add	r3, r2
 8003f72:	4a26      	ldr	r2, [pc, #152]	@ (800400c <parseDHCPMSG+0x430>)
 8003f74:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8003f76:	e039      	b.n	8003fec <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	617a      	str	r2, [r7, #20]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	617a      	str	r2, [r7, #20]
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	4b1f      	ldr	r3, [pc, #124]	@ (8004010 <parseDHCPMSG+0x434>)
 8003f92:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	617a      	str	r2, [r7, #20]
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004010 <parseDHCPMSG+0x434>)
 8003f9e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	617a      	str	r2, [r7, #20]
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <parseDHCPMSG+0x434>)
 8003faa:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	617a      	str	r2, [r7, #20]
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	4b16      	ldr	r3, [pc, #88]	@ (8004010 <parseDHCPMSG+0x434>)
 8003fb6:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8003fb8:	793a      	ldrb	r2, [r7, #4]
 8003fba:	4b16      	ldr	r3, [pc, #88]	@ (8004014 <parseDHCPMSG+0x438>)
 8003fbc:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8003fbe:	797a      	ldrb	r2, [r7, #5]
 8003fc0:	4b14      	ldr	r3, [pc, #80]	@ (8004014 <parseDHCPMSG+0x438>)
 8003fc2:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8003fc4:	79ba      	ldrb	r2, [r7, #6]
 8003fc6:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <parseDHCPMSG+0x438>)
 8003fc8:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8003fca:	79fa      	ldrb	r2, [r7, #7]
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <parseDHCPMSG+0x438>)
 8003fce:	70da      	strb	r2, [r3, #3]
   				break;
 8003fd0:	e00c      	b.n	8003fec <parseDHCPMSG+0x410>
   			default :
   				p++;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	617a      	str	r2, [r7, #20]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8003fe2:	7afb      	ldrb	r3, [r7, #11]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
   				break;
 8003fea:	bf00      	nop
		while ( p < e ) {
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	f4ff ae8a 	bcc.w	8003d0a <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8003ff6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd90      	pop	{r4, r7, pc}
 8004002:	bf00      	nop
 8004004:	200007e0 	.word	0x200007e0
 8004008:	200007e8 	.word	0x200007e8
 800400c:	20000078 	.word	0x20000078
 8004010:	200007d0 	.word	0x200007d0
 8004014:	200007d4 	.word	0x200007d4

08004018 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800401e:	4b7f      	ldr	r3, [pc, #508]	@ (800421c <DHCP_run+0x204>)
 8004020:	f993 3000 	ldrsb.w	r3, [r3]
 8004024:	2b06      	cmp	r3, #6
 8004026:	d101      	bne.n	800402c <DHCP_run+0x14>
 8004028:	2305      	movs	r3, #5
 800402a:	e0f3      	b.n	8004214 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 800402c:	4b7c      	ldr	r3, [pc, #496]	@ (8004220 <DHCP_run+0x208>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	3301      	adds	r3, #1
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fa68 	bl	8005510 <WIZCHIP_READ>
 8004040:	4603      	mov	r3, r0
 8004042:	2b22      	cmp	r3, #34	@ 0x22
 8004044:	d006      	beq.n	8004054 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8004046:	4b76      	ldr	r3, [pc, #472]	@ (8004220 <DHCP_run+0x208>)
 8004048:	7818      	ldrb	r0, [r3, #0]
 800404a:	2300      	movs	r3, #0
 800404c:	2244      	movs	r2, #68	@ 0x44
 800404e:	2102      	movs	r1, #2
 8004050:	f000 fabe 	bl	80045d0 <socket>

	ret = DHCP_RUNNING;
 8004054:	2301      	movs	r3, #1
 8004056:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8004058:	f7ff fdc0 	bl	8003bdc <parseDHCPMSG>
 800405c:	4603      	mov	r3, r0
 800405e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8004060:	4b6e      	ldr	r3, [pc, #440]	@ (800421c <DHCP_run+0x204>)
 8004062:	f993 3000 	ldrsb.w	r3, [r3]
 8004066:	2b04      	cmp	r3, #4
 8004068:	f200 80d0 	bhi.w	800420c <DHCP_run+0x1f4>
 800406c:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <DHCP_run+0x5c>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004089 	.word	0x08004089
 8004078:	080040ad 	.word	0x080040ad
 800407c:	080040f1 	.word	0x080040f1
 8004080:	08004141 	.word	0x08004141
 8004084:	0800419b 	.word	0x0800419b
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8004088:	4b66      	ldr	r3, [pc, #408]	@ (8004224 <DHCP_run+0x20c>)
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800408e:	4b65      	ldr	r3, [pc, #404]	@ (8004224 <DHCP_run+0x20c>)
 8004090:	2200      	movs	r2, #0
 8004092:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8004094:	4b63      	ldr	r3, [pc, #396]	@ (8004224 <DHCP_run+0x20c>)
 8004096:	2200      	movs	r2, #0
 8004098:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800409a:	4b62      	ldr	r3, [pc, #392]	@ (8004224 <DHCP_run+0x20c>)
 800409c:	2200      	movs	r2, #0
 800409e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80040a0:	f7fe fffa 	bl	8003098 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 80040a4:	4b5d      	ldr	r3, [pc, #372]	@ (800421c <DHCP_run+0x204>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
   		break;
 80040aa:	e0b2      	b.n	8004212 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 80040ac:	79bb      	ldrb	r3, [r7, #6]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d119      	bne.n	80040e6 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80040b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004228 <DHCP_run+0x210>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	7c1a      	ldrb	r2, [r3, #16]
 80040b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004224 <DHCP_run+0x20c>)
 80040ba:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80040bc:	4b5a      	ldr	r3, [pc, #360]	@ (8004228 <DHCP_run+0x210>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	7c5a      	ldrb	r2, [r3, #17]
 80040c2:	4b58      	ldr	r3, [pc, #352]	@ (8004224 <DHCP_run+0x20c>)
 80040c4:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80040c6:	4b58      	ldr	r3, [pc, #352]	@ (8004228 <DHCP_run+0x210>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	7c9a      	ldrb	r2, [r3, #18]
 80040cc:	4b55      	ldr	r3, [pc, #340]	@ (8004224 <DHCP_run+0x20c>)
 80040ce:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80040d0:	4b55      	ldr	r3, [pc, #340]	@ (8004228 <DHCP_run+0x210>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	7cda      	ldrb	r2, [r3, #19]
 80040d6:	4b53      	ldr	r3, [pc, #332]	@ (8004224 <DHCP_run+0x20c>)
 80040d8:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80040da:	f7ff f9a3 	bl	8003424 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80040de:	4b4f      	ldr	r3, [pc, #316]	@ (800421c <DHCP_run+0x204>)
 80040e0:	2202      	movs	r2, #2
 80040e2:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80040e4:	e095      	b.n	8004212 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80040e6:	f000 f8b1 	bl	800424c <check_DHCP_timeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
         break;
 80040ee:	e090      	b.n	8004212 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80040f0:	79bb      	ldrb	r3, [r7, #6]
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d116      	bne.n	8004124 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80040f6:	f000 f909 	bl	800430c <check_DHCP_leasedIP>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8004100:	4b4a      	ldr	r3, [pc, #296]	@ (800422c <DHCP_run+0x214>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4798      	blx	r3
					reset_DHCP_timeout();
 8004106:	f000 f9d3 	bl	80044b0 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800410a:	4b44      	ldr	r3, [pc, #272]	@ (800421c <DHCP_run+0x204>)
 800410c:	2203      	movs	r2, #3
 800410e:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8004110:	e07f      	b.n	8004212 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8004112:	f000 f9cd 	bl	80044b0 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8004116:	4b46      	ldr	r3, [pc, #280]	@ (8004230 <DHCP_run+0x218>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 800411c:	4b3f      	ldr	r3, [pc, #252]	@ (800421c <DHCP_run+0x204>)
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
		break;
 8004122:	e076      	b.n	8004212 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8004124:	79bb      	ldrb	r3, [r7, #6]
 8004126:	2b06      	cmp	r3, #6
 8004128:	d105      	bne.n	8004136 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 800412a:	f000 f9c1 	bl	80044b0 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800412e:	4b3b      	ldr	r3, [pc, #236]	@ (800421c <DHCP_run+0x204>)
 8004130:	2201      	movs	r2, #1
 8004132:	701a      	strb	r2, [r3, #0]
		break;
 8004134:	e06d      	b.n	8004212 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8004136:	f000 f889 	bl	800424c <check_DHCP_timeout>
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
		break;
 800413e:	e068      	b.n	8004212 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8004140:	2304      	movs	r3, #4
 8004142:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8004144:	4b3b      	ldr	r3, [pc, #236]	@ (8004234 <DHCP_run+0x21c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d060      	beq.n	8004210 <DHCP_run+0x1f8>
 800414e:	4b39      	ldr	r3, [pc, #228]	@ (8004234 <DHCP_run+0x21c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	085a      	lsrs	r2, r3, #1
 8004154:	4b38      	ldr	r3, [pc, #224]	@ (8004238 <DHCP_run+0x220>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d259      	bcs.n	8004210 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8004160:	4b30      	ldr	r3, [pc, #192]	@ (8004224 <DHCP_run+0x20c>)
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	4b35      	ldr	r3, [pc, #212]	@ (800423c <DHCP_run+0x224>)
 8004166:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8004168:	4b2e      	ldr	r3, [pc, #184]	@ (8004224 <DHCP_run+0x20c>)
 800416a:	785a      	ldrb	r2, [r3, #1]
 800416c:	4b33      	ldr	r3, [pc, #204]	@ (800423c <DHCP_run+0x224>)
 800416e:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8004170:	4b2c      	ldr	r3, [pc, #176]	@ (8004224 <DHCP_run+0x20c>)
 8004172:	789a      	ldrb	r2, [r3, #2]
 8004174:	4b31      	ldr	r3, [pc, #196]	@ (800423c <DHCP_run+0x224>)
 8004176:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8004178:	4b2a      	ldr	r3, [pc, #168]	@ (8004224 <DHCP_run+0x20c>)
 800417a:	78da      	ldrb	r2, [r3, #3]
 800417c:	4b2f      	ldr	r3, [pc, #188]	@ (800423c <DHCP_run+0x224>)
 800417e:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8004180:	4b2f      	ldr	r3, [pc, #188]	@ (8004240 <DHCP_run+0x228>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	4a2e      	ldr	r2, [pc, #184]	@ (8004240 <DHCP_run+0x228>)
 8004188:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800418a:	f7ff f94b 	bl	8003424 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800418e:	f000 f98f 	bl	80044b0 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8004192:	4b22      	ldr	r3, [pc, #136]	@ (800421c <DHCP_run+0x204>)
 8004194:	2204      	movs	r2, #4
 8004196:	701a      	strb	r2, [r3, #0]
			}
		break;
 8004198:	e03a      	b.n	8004210 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800419a:	2304      	movs	r3, #4
 800419c:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800419e:	79bb      	ldrb	r3, [r7, #6]
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	d125      	bne.n	80041f0 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 80041a4:	4b27      	ldr	r3, [pc, #156]	@ (8004244 <DHCP_run+0x22c>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80041aa:	4b24      	ldr	r3, [pc, #144]	@ (800423c <DHCP_run+0x224>)
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004224 <DHCP_run+0x20c>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d111      	bne.n	80041da <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80041b6:	4b21      	ldr	r3, [pc, #132]	@ (800423c <DHCP_run+0x224>)
 80041b8:	785a      	ldrb	r2, [r3, #1]
 80041ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004224 <DHCP_run+0x20c>)
 80041bc:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10b      	bne.n	80041da <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80041c2:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <DHCP_run+0x224>)
 80041c4:	789a      	ldrb	r2, [r3, #2]
 80041c6:	4b17      	ldr	r3, [pc, #92]	@ (8004224 <DHCP_run+0x20c>)
 80041c8:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d105      	bne.n	80041da <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80041ce:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <DHCP_run+0x224>)
 80041d0:	78da      	ldrb	r2, [r3, #3]
 80041d2:	4b14      	ldr	r3, [pc, #80]	@ (8004224 <DHCP_run+0x20c>)
 80041d4:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d004      	beq.n	80041e4 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 80041da:	2303      	movs	r3, #3
 80041dc:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80041de:	4b1a      	ldr	r3, [pc, #104]	@ (8004248 <DHCP_run+0x230>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80041e4:	f000 f964 	bl	80044b0 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80041e8:	4b0c      	ldr	r3, [pc, #48]	@ (800421c <DHCP_run+0x204>)
 80041ea:	2203      	movs	r2, #3
 80041ec:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80041ee:	e010      	b.n	8004212 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80041f0:	79bb      	ldrb	r3, [r7, #6]
 80041f2:	2b06      	cmp	r3, #6
 80041f4:	d105      	bne.n	8004202 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80041f6:	f000 f95b 	bl	80044b0 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80041fa:	4b08      	ldr	r3, [pc, #32]	@ (800421c <DHCP_run+0x204>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
	   	break;
 8004200:	e007      	b.n	8004212 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8004202:	f000 f823 	bl	800424c <check_DHCP_timeout>
 8004206:	4603      	mov	r3, r0
 8004208:	71fb      	strb	r3, [r7, #7]
	   	break;
 800420a:	e002      	b.n	8004212 <DHCP_run+0x1fa>
		default :
   		break;
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <DHCP_run+0x1fa>
		break;
 8004210:	bf00      	nop
	}

	return ret;
 8004212:	79fb      	ldrb	r3, [r7, #7]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	200007ec 	.word	0x200007ec
 8004220:	200007cd 	.word	0x200007cd
 8004224:	200007dc 	.word	0x200007dc
 8004228:	200007f8 	.word	0x200007f8
 800422c:	20000088 	.word	0x20000088
 8004230:	20000090 	.word	0x20000090
 8004234:	20000078 	.word	0x20000078
 8004238:	200007f0 	.word	0x200007f0
 800423c:	200007d8 	.word	0x200007d8
 8004240:	200007f4 	.word	0x200007f4
 8004244:	200007ed 	.word	0x200007ed
 8004248:	2000008c 	.word	0x2000008c

0800424c <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8004252:	2301      	movs	r3, #1
 8004254:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8004256:	4b29      	ldr	r3, [pc, #164]	@ (80042fc <check_DHCP_timeout+0xb0>)
 8004258:	f993 3000 	ldrsb.w	r3, [r3]
 800425c:	2b01      	cmp	r3, #1
 800425e:	dc2d      	bgt.n	80042bc <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8004260:	4b27      	ldr	r3, [pc, #156]	@ (8004300 <check_DHCP_timeout+0xb4>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b27      	ldr	r3, [pc, #156]	@ (8004304 <check_DHCP_timeout+0xb8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d242      	bcs.n	80042f2 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 800426c:	4b26      	ldr	r3, [pc, #152]	@ (8004308 <check_DHCP_timeout+0xbc>)
 800426e:	f993 3000 	ldrsb.w	r3, [r3]
 8004272:	2b04      	cmp	r3, #4
 8004274:	d00c      	beq.n	8004290 <check_DHCP_timeout+0x44>
 8004276:	2b04      	cmp	r3, #4
 8004278:	dc0d      	bgt.n	8004296 <check_DHCP_timeout+0x4a>
 800427a:	2b01      	cmp	r3, #1
 800427c:	d002      	beq.n	8004284 <check_DHCP_timeout+0x38>
 800427e:	2b02      	cmp	r3, #2
 8004280:	d003      	beq.n	800428a <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8004282:	e008      	b.n	8004296 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8004284:	f7fe ff08 	bl	8003098 <send_DHCP_DISCOVER>
				break;
 8004288:	e006      	b.n	8004298 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800428a:	f7ff f8cb 	bl	8003424 <send_DHCP_REQUEST>
				break;
 800428e:	e003      	b.n	8004298 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8004290:	f7ff f8c8 	bl	8003424 <send_DHCP_REQUEST>
				break;
 8004294:	e000      	b.n	8004298 <check_DHCP_timeout+0x4c>
				break;
 8004296:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8004298:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <check_DHCP_timeout+0xb8>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800429e:	4b19      	ldr	r3, [pc, #100]	@ (8004304 <check_DHCP_timeout+0xb8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330a      	adds	r3, #10
 80042a4:	4a16      	ldr	r2, [pc, #88]	@ (8004300 <check_DHCP_timeout+0xb4>)
 80042a6:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80042a8:	4b14      	ldr	r3, [pc, #80]	@ (80042fc <check_DHCP_timeout+0xb0>)
 80042aa:	f993 3000 	ldrsb.w	r3, [r3]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	3301      	adds	r3, #1
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	b25a      	sxtb	r2, r3
 80042b6:	4b11      	ldr	r3, [pc, #68]	@ (80042fc <check_DHCP_timeout+0xb0>)
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e01a      	b.n	80042f2 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 80042bc:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <check_DHCP_timeout+0xbc>)
 80042be:	f993 3000 	ldrsb.w	r3, [r3]
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d00c      	beq.n	80042e0 <check_DHCP_timeout+0x94>
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	dc10      	bgt.n	80042ec <check_DHCP_timeout+0xa0>
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d002      	beq.n	80042d4 <check_DHCP_timeout+0x88>
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d006      	beq.n	80042e0 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80042d2:	e00b      	b.n	80042ec <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 80042d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <check_DHCP_timeout+0xbc>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80042da:	2300      	movs	r3, #0
 80042dc:	71fb      	strb	r3, [r7, #7]
				break;
 80042de:	e006      	b.n	80042ee <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 80042e0:	f7fe feda 	bl	8003098 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80042e4:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <check_DHCP_timeout+0xbc>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
				break;
 80042ea:	e000      	b.n	80042ee <check_DHCP_timeout+0xa2>
				break;
 80042ec:	bf00      	nop
		}
		reset_DHCP_timeout();
 80042ee:	f000 f8df 	bl	80044b0 <reset_DHCP_timeout>
	}
	return ret;
 80042f2:	79fb      	ldrb	r3, [r7, #7]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	200007ed 	.word	0x200007ed
 8004300:	2000007c 	.word	0x2000007c
 8004304:	200007f0 	.word	0x200007f0
 8004308:	200007ec 	.word	0x200007ec

0800430c <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8004312:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004316:	f001 f8fb 	bl	8005510 <WIZCHIP_READ>
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800431e:	2103      	movs	r1, #3
 8004320:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004324:	f001 f940 	bl	80055a8 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8004328:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <check_DHCP_leasedIP+0x6c>)
 800432a:	7818      	ldrb	r0, [r3, #0]
 800432c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	4b12      	ldr	r3, [pc, #72]	@ (800437c <check_DHCP_leasedIP+0x70>)
 8004334:	2211      	movs	r2, #17
 8004336:	4912      	ldr	r1, [pc, #72]	@ (8004380 <check_DHCP_leasedIP+0x74>)
 8004338:	f000 fdca 	bl	8004ed0 <sendto>
 800433c:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	4619      	mov	r1, r3
 8004342:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004346:	f001 f92f 	bl	80055a8 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f113 0f0d 	cmn.w	r3, #13
 8004350:	d101      	bne.n	8004356 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8004352:	2301      	movs	r3, #1
 8004354:	e00c      	b.n	8004370 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8004356:	f7ff faef 	bl	8003938 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 800435a:	4b0a      	ldr	r3, [pc, #40]	@ (8004384 <check_DHCP_leasedIP+0x78>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8004360:	bf00      	nop
 8004362:	4b08      	ldr	r3, [pc, #32]	@ (8004384 <check_DHCP_leasedIP+0x78>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d9f9      	bls.n	8004362 <check_DHCP_leasedIP+0x56>

		return 0;
 800436e:	2300      	movs	r3, #0
	}
}	
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	200007cd 	.word	0x200007cd
 800437c:	200007dc 	.word	0x200007dc
 8004380:	08007afc 	.word	0x08007afc
 8004384:	200007f0 	.word	0x200007f0

08004388 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8004398:	2206      	movs	r2, #6
 800439a:	493f      	ldr	r1, [pc, #252]	@ (8004498 <DHCP_init+0x110>)
 800439c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80043a0:	f001 f950 	bl	8005644 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80043a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004498 <DHCP_init+0x110>)
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004498 <DHCP_init+0x110>)
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	4b39      	ldr	r3, [pc, #228]	@ (8004498 <DHCP_init+0x110>)
 80043b2:	789b      	ldrb	r3, [r3, #2]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	4b37      	ldr	r3, [pc, #220]	@ (8004498 <DHCP_init+0x110>)
 80043ba:	78db      	ldrb	r3, [r3, #3]
 80043bc:	4313      	orrs	r3, r2
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	4b35      	ldr	r3, [pc, #212]	@ (8004498 <DHCP_init+0x110>)
 80043c2:	791b      	ldrb	r3, [r3, #4]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	4b33      	ldr	r3, [pc, #204]	@ (8004498 <DHCP_init+0x110>)
 80043ca:	795b      	ldrb	r3, [r3, #5]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d117      	bne.n	8004404 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 80043d4:	4b30      	ldr	r3, [pc, #192]	@ (8004498 <DHCP_init+0x110>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 80043da:	4b2f      	ldr	r3, [pc, #188]	@ (8004498 <DHCP_init+0x110>)
 80043dc:	2208      	movs	r2, #8
 80043de:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 80043e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004498 <DHCP_init+0x110>)
 80043e2:	22dc      	movs	r2, #220	@ 0xdc
 80043e4:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 80043e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004498 <DHCP_init+0x110>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 80043ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004498 <DHCP_init+0x110>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 80043f2:	4b29      	ldr	r3, [pc, #164]	@ (8004498 <DHCP_init+0x110>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 80043f8:	2206      	movs	r2, #6
 80043fa:	4927      	ldr	r1, [pc, #156]	@ (8004498 <DHCP_init+0x110>)
 80043fc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004400:	f001 f980 	bl	8005704 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8004404:	4a25      	ldr	r2, [pc, #148]	@ (800449c <DHCP_init+0x114>)
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800440a:	4a25      	ldr	r2, [pc, #148]	@ (80044a0 <DHCP_init+0x118>)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8004410:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <DHCP_init+0x11c>)
 8004412:	4a25      	ldr	r2, [pc, #148]	@ (80044a8 <DHCP_init+0x120>)
 8004414:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8004416:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <DHCP_init+0x110>)
 8004418:	78db      	ldrb	r3, [r3, #3]
 800441a:	461a      	mov	r2, r3
 800441c:	4b21      	ldr	r3, [pc, #132]	@ (80044a4 <DHCP_init+0x11c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4413      	add	r3, r2
 8004422:	4a20      	ldr	r2, [pc, #128]	@ (80044a4 <DHCP_init+0x11c>)
 8004424:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8004426:	4b1c      	ldr	r3, [pc, #112]	@ (8004498 <DHCP_init+0x110>)
 8004428:	791b      	ldrb	r3, [r3, #4]
 800442a:	461a      	mov	r2, r3
 800442c:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <DHCP_init+0x11c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4413      	add	r3, r2
 8004432:	4a1c      	ldr	r2, [pc, #112]	@ (80044a4 <DHCP_init+0x11c>)
 8004434:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8004436:	4b18      	ldr	r3, [pc, #96]	@ (8004498 <DHCP_init+0x110>)
 8004438:	795b      	ldrb	r3, [r3, #5]
 800443a:	461a      	mov	r2, r3
 800443c:	4b19      	ldr	r3, [pc, #100]	@ (80044a4 <DHCP_init+0x11c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4413      	add	r3, r2
 8004442:	4a18      	ldr	r2, [pc, #96]	@ (80044a4 <DHCP_init+0x11c>)
 8004444:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8004446:	4b14      	ldr	r3, [pc, #80]	@ (8004498 <DHCP_init+0x110>)
 8004448:	78da      	ldrb	r2, [r3, #3]
 800444a:	4b13      	ldr	r3, [pc, #76]	@ (8004498 <DHCP_init+0x110>)
 800444c:	791b      	ldrb	r3, [r3, #4]
 800444e:	4053      	eors	r3, r2
 8004450:	b2da      	uxtb	r2, r3
 8004452:	4b11      	ldr	r3, [pc, #68]	@ (8004498 <DHCP_init+0x110>)
 8004454:	795b      	ldrb	r3, [r3, #5]
 8004456:	4053      	eors	r3, r2
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	4b11      	ldr	r3, [pc, #68]	@ (80044a4 <DHCP_init+0x11c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4413      	add	r3, r2
 8004462:	4a10      	ldr	r2, [pc, #64]	@ (80044a4 <DHCP_init+0x11c>)
 8004464:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8004466:	f107 030c 	add.w	r3, r7, #12
 800446a:	2204      	movs	r2, #4
 800446c:	4619      	mov	r1, r3
 800446e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004472:	f001 f947 	bl	8005704 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8004476:	f107 030c 	add.w	r3, r7, #12
 800447a:	2204      	movs	r2, #4
 800447c:	4619      	mov	r1, r3
 800447e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004482:	f001 f93f 	bl	8005704 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8004486:	f000 f813 	bl	80044b0 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800448a:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <DHCP_init+0x124>)
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	200007fc 	.word	0x200007fc
 800449c:	200007cd 	.word	0x200007cd
 80044a0:	200007f8 	.word	0x200007f8
 80044a4:	200007f4 	.word	0x200007f4
 80044a8:	12345678 	.word	0x12345678
 80044ac:	200007ec 	.word	0x200007ec

080044b0 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80044b4:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <reset_DHCP_timeout+0x20>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80044ba:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <reset_DHCP_timeout+0x24>)
 80044bc:	220a      	movs	r2, #10
 80044be:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80044c0:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <reset_DHCP_timeout+0x28>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	701a      	strb	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	200007f0 	.word	0x200007f0
 80044d4:	2000007c 	.word	0x2000007c
 80044d8:	200007ed 	.word	0x200007ed

080044dc <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 80044e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <getIPfromDHCP+0x3c>)
 80044e6:	781a      	ldrb	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3301      	adds	r3, #1
 80044f0:	4a09      	ldr	r2, [pc, #36]	@ (8004518 <getIPfromDHCP+0x3c>)
 80044f2:	7852      	ldrb	r2, [r2, #1]
 80044f4:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3302      	adds	r3, #2
 80044fa:	4a07      	ldr	r2, [pc, #28]	@ (8004518 <getIPfromDHCP+0x3c>)
 80044fc:	7892      	ldrb	r2, [r2, #2]
 80044fe:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3303      	adds	r3, #3
 8004504:	4a04      	ldr	r2, [pc, #16]	@ (8004518 <getIPfromDHCP+0x3c>)
 8004506:	78d2      	ldrb	r2, [r2, #3]
 8004508:	701a      	strb	r2, [r3, #0]
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	200007dc 	.word	0x200007dc

0800451c <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8004524:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <getGWfromDHCP+0x3c>)
 8004526:	781a      	ldrb	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3301      	adds	r3, #1
 8004530:	4a09      	ldr	r2, [pc, #36]	@ (8004558 <getGWfromDHCP+0x3c>)
 8004532:	7852      	ldrb	r2, [r2, #1]
 8004534:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3302      	adds	r3, #2
 800453a:	4a07      	ldr	r2, [pc, #28]	@ (8004558 <getGWfromDHCP+0x3c>)
 800453c:	7892      	ldrb	r2, [r2, #2]
 800453e:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3303      	adds	r3, #3
 8004544:	4a04      	ldr	r2, [pc, #16]	@ (8004558 <getGWfromDHCP+0x3c>)
 8004546:	78d2      	ldrb	r2, [r2, #3]
 8004548:	701a      	strb	r2, [r3, #0]
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	200007e0 	.word	0x200007e0

0800455c <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8004564:	4b0c      	ldr	r3, [pc, #48]	@ (8004598 <getSNfromDHCP+0x3c>)
 8004566:	781a      	ldrb	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3301      	adds	r3, #1
 8004570:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <getSNfromDHCP+0x3c>)
 8004572:	7852      	ldrb	r2, [r2, #1]
 8004574:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3302      	adds	r3, #2
 800457a:	4a07      	ldr	r2, [pc, #28]	@ (8004598 <getSNfromDHCP+0x3c>)
 800457c:	7892      	ldrb	r2, [r2, #2]
 800457e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3303      	adds	r3, #3
 8004584:	4a04      	ldr	r2, [pc, #16]	@ (8004598 <getSNfromDHCP+0x3c>)
 8004586:	78d2      	ldrb	r2, [r2, #3]
 8004588:	701a      	strb	r2, [r3, #0]
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	200007e4 	.word	0x200007e4

0800459c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	2b09      	cmp	r3, #9
 80045b2:	d803      	bhi.n	80045bc <NibbleToHex+0x20>
    return nibble + '0';
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	3330      	adds	r3, #48	@ 0x30
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e002      	b.n	80045c2 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	3337      	adds	r3, #55	@ 0x37
 80045c0:	b2db      	uxtb	r3, r3
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4604      	mov	r4, r0
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4623      	mov	r3, r4
 80045e0:	71fb      	strb	r3, [r7, #7]
 80045e2:	4603      	mov	r3, r0
 80045e4:	71bb      	strb	r3, [r7, #6]
 80045e6:	460b      	mov	r3, r1
 80045e8:	80bb      	strh	r3, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d902      	bls.n	80045fa <socket+0x2a>
 80045f4:	f04f 33ff 	mov.w	r3, #4294967295
 80045f8:	e0f0      	b.n	80047dc <socket+0x20c>
	switch(protocol)
 80045fa:	79bb      	ldrb	r3, [r7, #6]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d005      	beq.n	800460c <socket+0x3c>
 8004600:	2b00      	cmp	r3, #0
 8004602:	dd11      	ble.n	8004628 <socket+0x58>
 8004604:	3b02      	subs	r3, #2
 8004606:	2b02      	cmp	r3, #2
 8004608:	d80e      	bhi.n	8004628 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800460a:	e011      	b.n	8004630 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800460c:	f107 030c 	add.w	r3, r7, #12
 8004610:	2204      	movs	r2, #4
 8004612:	4619      	mov	r1, r3
 8004614:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004618:	f001 f814 	bl	8005644 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <socket+0x5e>
 8004622:	f06f 0302 	mvn.w	r3, #2
 8004626:	e0d9      	b.n	80047dc <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004628:	f06f 0304 	mvn.w	r3, #4
 800462c:	e0d6      	b.n	80047dc <socket+0x20c>
	    break;
 800462e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <socket+0x70>
 800463a:	f06f 0305 	mvn.w	r3, #5
 800463e:	e0cd      	b.n	80047dc <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d028      	beq.n	8004698 <socket+0xc8>
	{
   	switch(protocol)
 8004646:	79bb      	ldrb	r3, [r7, #6]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d002      	beq.n	8004652 <socket+0x82>
 800464c:	2b02      	cmp	r3, #2
 800464e:	d008      	beq.n	8004662 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004650:	e022      	b.n	8004698 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11a      	bne.n	8004692 <socket+0xc2>
 800465c:	f06f 0305 	mvn.w	r3, #5
 8004660:	e0bc      	b.n	80047dc <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d006      	beq.n	800467a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800466c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db02      	blt.n	800467a <socket+0xaa>
 8004674:	f06f 0305 	mvn.w	r3, #5
 8004678:	e0b0      	b.n	80047dc <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004688:	2b00      	cmp	r3, #0
 800468a:	db04      	blt.n	8004696 <socket+0xc6>
 800468c:	f06f 0305 	mvn.w	r3, #5
 8004690:	e0a4      	b.n	80047dc <socket+0x20c>
   	      break;
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <socket+0xc8>
   	      break;
 8004696:	bf00      	nop
   	}
   }
	close(sn);
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f8ac 	bl	80047f8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	3301      	adds	r3, #1
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4618      	mov	r0, r3
 80046aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ae:	f023 030f 	bic.w	r3, r3, #15
 80046b2:	b25a      	sxtb	r2, r3
 80046b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	b25b      	sxtb	r3, r3
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	4619      	mov	r1, r3
 80046c0:	f000 ff72 	bl	80055a8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80046c4:	88bb      	ldrh	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d110      	bne.n	80046ec <socket+0x11c>
	{
	   port = sock_any_port++;
 80046ca:	4b46      	ldr	r3, [pc, #280]	@ (80047e4 <socket+0x214>)
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	b291      	uxth	r1, r2
 80046d2:	4a44      	ldr	r2, [pc, #272]	@ (80047e4 <socket+0x214>)
 80046d4:	8011      	strh	r1, [r2, #0]
 80046d6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80046d8:	4b42      	ldr	r3, [pc, #264]	@ (80047e4 <socket+0x214>)
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <socket+0x11c>
 80046e4:	4b3f      	ldr	r3, [pc, #252]	@ (80047e4 <socket+0x214>)
 80046e6:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80046ea:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	3301      	adds	r3, #1
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046f8:	461a      	mov	r2, r3
 80046fa:	88bb      	ldrh	r3, [r7, #4]
 80046fc:	0a1b      	lsrs	r3, r3, #8
 80046fe:	b29b      	uxth	r3, r3
 8004700:	b2db      	uxtb	r3, r3
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f000 ff4f 	bl	80055a8 <WIZCHIP_WRITE>
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	3301      	adds	r3, #1
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004716:	461a      	mov	r2, r3
 8004718:	88bb      	ldrh	r3, [r7, #4]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 ff42 	bl	80055a8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	3301      	adds	r3, #1
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004730:	2101      	movs	r1, #1
 8004732:	4618      	mov	r0, r3
 8004734:	f000 ff38 	bl	80055a8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004738:	bf00      	nop
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	3301      	adds	r3, #1
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fee2 	bl	8005510 <WIZCHIP_READ>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f3      	bne.n	800473a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	2201      	movs	r2, #1
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	b21b      	sxth	r3, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	b21a      	sxth	r2, r3
 8004760:	4b21      	ldr	r3, [pc, #132]	@ (80047e8 <socket+0x218>)
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b21b      	sxth	r3, r3
 8004766:	4013      	ands	r3, r2
 8004768:	b21b      	sxth	r3, r3
 800476a:	b29a      	uxth	r2, r3
 800476c:	4b1e      	ldr	r3, [pc, #120]	@ (80047e8 <socket+0x218>)
 800476e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	f003 0201 	and.w	r2, r3, #1
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	b21a      	sxth	r2, r3
 800477e:	4b1a      	ldr	r3, [pc, #104]	@ (80047e8 <socket+0x218>)
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b21b      	sxth	r3, r3
 8004784:	4313      	orrs	r3, r2
 8004786:	b21b      	sxth	r3, r3
 8004788:	b29a      	uxth	r2, r3
 800478a:	4b17      	ldr	r3, [pc, #92]	@ (80047e8 <socket+0x218>)
 800478c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	2201      	movs	r2, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	b21b      	sxth	r3, r3
 8004798:	43db      	mvns	r3, r3
 800479a:	b21a      	sxth	r2, r3
 800479c:	4b13      	ldr	r3, [pc, #76]	@ (80047ec <socket+0x21c>)
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	b21b      	sxth	r3, r3
 80047a2:	4013      	ands	r3, r2
 80047a4:	b21b      	sxth	r3, r3
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	4b10      	ldr	r3, [pc, #64]	@ (80047ec <socket+0x21c>)
 80047aa:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <socket+0x220>)
 80047b0:	2100      	movs	r1, #0
 80047b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	4a0e      	ldr	r2, [pc, #56]	@ (80047f4 <socket+0x224>)
 80047ba:	2100      	movs	r1, #0
 80047bc:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80047be:	bf00      	nop
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	3301      	adds	r3, #1
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fe9f 	bl	8005510 <WIZCHIP_READ>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f3      	beq.n	80047c0 <socket+0x1f0>
   return (int8_t)sn;
 80047d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd90      	pop	{r4, r7, pc}
 80047e4:	20000094 	.word	0x20000094
 80047e8:	20000802 	.word	0x20000802
 80047ec:	20000804 	.word	0x20000804
 80047f0:	20000808 	.word	0x20000808
 80047f4:	20000818 	.word	0x20000818

080047f8 <close>:

int8_t close(uint8_t sn)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d902      	bls.n	800480e <close+0x16>
 8004808:	f04f 33ff 	mov.w	r3, #4294967295
 800480c:	e055      	b.n	80048ba <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	3301      	adds	r3, #1
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800481a:	2110      	movs	r1, #16
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fec3 	bl	80055a8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004822:	bf00      	nop
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	3301      	adds	r3, #1
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fe6d 	bl	8005510 <WIZCHIP_READ>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f3      	bne.n	8004824 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	3301      	adds	r3, #1
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004848:	211f      	movs	r1, #31
 800484a:	4618      	mov	r0, r3
 800484c:	f000 feac 	bl	80055a8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	2201      	movs	r2, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	b21b      	sxth	r3, r3
 800485a:	43db      	mvns	r3, r3
 800485c:	b21a      	sxth	r2, r3
 800485e:	4b19      	ldr	r3, [pc, #100]	@ (80048c4 <close+0xcc>)
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b21b      	sxth	r3, r3
 8004864:	4013      	ands	r3, r2
 8004866:	b21b      	sxth	r3, r3
 8004868:	b29a      	uxth	r2, r3
 800486a:	4b16      	ldr	r3, [pc, #88]	@ (80048c4 <close+0xcc>)
 800486c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	2201      	movs	r2, #1
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	b21b      	sxth	r3, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	b21a      	sxth	r2, r3
 800487c:	4b12      	ldr	r3, [pc, #72]	@ (80048c8 <close+0xd0>)
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b21b      	sxth	r3, r3
 8004882:	4013      	ands	r3, r2
 8004884:	b21b      	sxth	r3, r3
 8004886:	b29a      	uxth	r2, r3
 8004888:	4b0f      	ldr	r3, [pc, #60]	@ (80048c8 <close+0xd0>)
 800488a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	4a0f      	ldr	r2, [pc, #60]	@ (80048cc <close+0xd4>)
 8004890:	2100      	movs	r1, #0
 8004892:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	4a0d      	ldr	r2, [pc, #52]	@ (80048d0 <close+0xd8>)
 800489a:	2100      	movs	r1, #0
 800489c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800489e:	bf00      	nop
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	3301      	adds	r3, #1
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fe2f 	bl	8005510 <WIZCHIP_READ>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f3      	bne.n	80048a0 <close+0xa8>
	return SOCK_OK;
 80048b8:	2301      	movs	r3, #1
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000802 	.word	0x20000802
 80048c8:	20000804 	.word	0x20000804
 80048cc:	20000808 	.word	0x20000808
 80048d0:	20000818 	.word	0x20000818

080048d4 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	6039      	str	r1, [r7, #0]
 80048de:	71fb      	strb	r3, [r7, #7]
 80048e0:	4613      	mov	r3, r2
 80048e2:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d902      	bls.n	80048f0 <connect+0x1c>
 80048ea:	f04f 33ff 	mov.w	r3, #4294967295
 80048ee:	e0c6      	b.n	8004a7e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	3301      	adds	r3, #1
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fe09 	bl	8005510 <WIZCHIP_READ>
 80048fe:	4603      	mov	r3, r0
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	2b01      	cmp	r3, #1
 8004906:	d002      	beq.n	800490e <connect+0x3a>
 8004908:	f06f 0304 	mvn.w	r3, #4
 800490c:	e0b7      	b.n	8004a7e <connect+0x1aa>
   CHECK_SOCKINIT();
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	3301      	adds	r3, #1
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fdf8 	bl	8005510 <WIZCHIP_READ>
 8004920:	4603      	mov	r3, r0
 8004922:	2b13      	cmp	r3, #19
 8004924:	d002      	beq.n	800492c <connect+0x58>
 8004926:	f06f 0302 	mvn.w	r3, #2
 800492a:	e0a8      	b.n	8004a7e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	3201      	adds	r2, #1
 800493a:	7812      	ldrb	r2, [r2, #0]
 800493c:	4413      	add	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	3202      	adds	r2, #2
 8004948:	7812      	ldrb	r2, [r2, #0]
 800494a:	4413      	add	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	3203      	adds	r2, #3
 8004956:	7812      	ldrb	r2, [r2, #0]
 8004958:	4413      	add	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d002      	beq.n	800496a <connect+0x96>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <connect+0x9c>
 800496a:	f06f 030b 	mvn.w	r3, #11
 800496e:	e086      	b.n	8004a7e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004970:	88bb      	ldrh	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <connect+0xa8>
 8004976:	f06f 030a 	mvn.w	r3, #10
 800497a:	e080      	b.n	8004a7e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	3301      	adds	r3, #1
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004988:	2204      	movs	r2, #4
 800498a:	6839      	ldr	r1, [r7, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f000 feb9 	bl	8005704 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	3301      	adds	r3, #1
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800499e:	461a      	mov	r2, r3
 80049a0:	88bb      	ldrh	r3, [r7, #4]
 80049a2:	0a1b      	lsrs	r3, r3, #8
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 fdfc 	bl	80055a8 <WIZCHIP_WRITE>
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	3301      	adds	r3, #1
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80049bc:	461a      	mov	r2, r3
 80049be:	88bb      	ldrh	r3, [r7, #4]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f000 fdef 	bl	80055a8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	3301      	adds	r3, #1
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049d6:	2104      	movs	r1, #4
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fde5 	bl	80055a8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80049de:	bf00      	nop
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	3301      	adds	r3, #1
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fd8f 	bl	8005510 <WIZCHIP_READ>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f3      	bne.n	80049e0 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80049f8:	4b23      	ldr	r3, [pc, #140]	@ (8004a88 <connect+0x1b4>)
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	fa42 f303 	asr.w	r3, r2, r3
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d02b      	beq.n	8004a64 <connect+0x190>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e036      	b.n	8004a7e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	3301      	adds	r3, #1
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fd77 	bl	8005510 <WIZCHIP_READ>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00c      	beq.n	8004a46 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	3301      	adds	r3, #1
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a38:	2108      	movs	r1, #8
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fdb4 	bl	80055a8 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8004a40:	f06f 030c 	mvn.w	r3, #12
 8004a44:	e01b      	b.n	8004a7e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fd5c 	bl	8005510 <WIZCHIP_READ>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d102      	bne.n	8004a64 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8004a5e:	f06f 0303 	mvn.w	r3, #3
 8004a62:	e00c      	b.n	8004a7e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	3301      	adds	r3, #1
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fd4d 	bl	8005510 <WIZCHIP_READ>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b17      	cmp	r3, #23
 8004a7a:	d1c9      	bne.n	8004a10 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8004a7c:	2301      	movs	r3, #1
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000802 	.word	0x20000802

08004a8c <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d902      	bls.n	8004aa2 <disconnect+0x16>
 8004a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa0:	e062      	b.n	8004b68 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fd30 	bl	8005510 <WIZCHIP_READ>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d002      	beq.n	8004ac0 <disconnect+0x34>
 8004aba:	f06f 0304 	mvn.w	r3, #4
 8004abe:	e053      	b.n	8004b68 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004acc:	2108      	movs	r1, #8
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fd6a 	bl	80055a8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004ad4:	bf00      	nop
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	3301      	adds	r3, #1
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fd14 	bl	8005510 <WIZCHIP_READ>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f3      	bne.n	8004ad6 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	2201      	movs	r2, #1
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	b21b      	sxth	r3, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	b21a      	sxth	r2, r3
 8004afc:	4b1c      	ldr	r3, [pc, #112]	@ (8004b70 <disconnect+0xe4>)
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b21b      	sxth	r3, r3
 8004b02:	4013      	ands	r3, r2
 8004b04:	b21b      	sxth	r3, r3
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	4b19      	ldr	r3, [pc, #100]	@ (8004b70 <disconnect+0xe4>)
 8004b0a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004b0c:	4b19      	ldr	r3, [pc, #100]	@ (8004b74 <disconnect+0xe8>)
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	fa42 f303 	asr.w	r3, r2, r3
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <disconnect+0xc2>
 8004b20:	2300      	movs	r3, #0
 8004b22:	e021      	b.n	8004b68 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	3301      	adds	r3, #1
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fced 	bl	8005510 <WIZCHIP_READ>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d006      	beq.n	8004b4e <disconnect+0xc2>
	   {
	      close(sn);
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fe58 	bl	80047f8 <close>
	      return SOCKERR_TIMEOUT;
 8004b48:	f06f 030c 	mvn.w	r3, #12
 8004b4c:	e00c      	b.n	8004b68 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	3301      	adds	r3, #1
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fcd8 	bl	8005510 <WIZCHIP_READ>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1de      	bne.n	8004b24 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8004b66:	2301      	movs	r3, #1
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000804 	.word	0x20000804
 8004b74:	20000802 	.word	0x20000802

08004b78 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	6039      	str	r1, [r7, #0]
 8004b82:	71fb      	strb	r3, [r7, #7]
 8004b84:	4613      	mov	r3, r2
 8004b86:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d902      	bls.n	8004b9c <send+0x24>
 8004b96:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9a:	e0dd      	b.n	8004d58 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fcb3 	bl	8005510 <WIZCHIP_READ>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d002      	beq.n	8004bba <send+0x42>
 8004bb4:	f06f 0304 	mvn.w	r3, #4
 8004bb8:	e0ce      	b.n	8004d58 <send+0x1e0>
   CHECK_SOCKDATA();
 8004bba:	88bb      	ldrh	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <send+0x4e>
 8004bc0:	f06f 030d 	mvn.w	r3, #13
 8004bc4:	e0c8      	b.n	8004d58 <send+0x1e0>
   tmp = getSn_SR(sn);
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	3301      	adds	r3, #1
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fc9c 	bl	8005510 <WIZCHIP_READ>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b17      	cmp	r3, #23
 8004be0:	d005      	beq.n	8004bee <send+0x76>
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b1c      	cmp	r3, #28
 8004be6:	d002      	beq.n	8004bee <send+0x76>
 8004be8:	f06f 0306 	mvn.w	r3, #6
 8004bec:	e0b4      	b.n	8004d58 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8004bee:	4b5c      	ldr	r3, [pc, #368]	@ (8004d60 <send+0x1e8>)
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	fa42 f303 	asr.w	r3, r2, r3
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d039      	beq.n	8004c76 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	3301      	adds	r3, #1
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fc7e 	bl	8005510 <WIZCHIP_READ>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d019      	beq.n	8004c5a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004c32:	2110      	movs	r1, #16
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fcb7 	bl	80055a8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	b21b      	sxth	r3, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	b21a      	sxth	r2, r3
 8004c48:	4b45      	ldr	r3, [pc, #276]	@ (8004d60 <send+0x1e8>)
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b21b      	sxth	r3, r3
 8004c4e:	4013      	ands	r3, r2
 8004c50:	b21b      	sxth	r3, r3
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	4b42      	ldr	r3, [pc, #264]	@ (8004d60 <send+0x1e8>)
 8004c56:	801a      	strh	r2, [r3, #0]
 8004c58:	e00d      	b.n	8004c76 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <send+0xfa>
      {
         close(sn);
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fdc6 	bl	80047f8 <close>
         return SOCKERR_TIMEOUT;
 8004c6c:	f06f 030c 	mvn.w	r3, #12
 8004c70:	e072      	b.n	8004d58 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e070      	b.n	8004d58 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fc44 	bl	8005510 <WIZCHIP_READ>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	029b      	lsls	r3, r3, #10
 8004c8c:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004c8e:	88ba      	ldrh	r2, [r7, #4]
 8004c90:	89bb      	ldrh	r3, [r7, #12]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d901      	bls.n	8004c9a <send+0x122>
 8004c96:	89bb      	ldrh	r3, [r7, #12]
 8004c98:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fd91 	bl	80057c4 <getSn_TX_FSR>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	3301      	adds	r3, #1
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fc2c 	bl	8005510 <WIZCHIP_READ>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b17      	cmp	r3, #23
 8004cc0:	d009      	beq.n	8004cd6 <send+0x15e>
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	2b1c      	cmp	r3, #28
 8004cc6:	d006      	beq.n	8004cd6 <send+0x15e>
      {
         close(sn);
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fd94 	bl	80047f8 <close>
         return SOCKERR_SOCKSTATUS;
 8004cd0:	f06f 0306 	mvn.w	r3, #6
 8004cd4:	e040      	b.n	8004d58 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004cd6:	4b23      	ldr	r3, [pc, #140]	@ (8004d64 <send+0x1ec>)
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	fa42 f303 	asr.w	r3, r2, r3
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <send+0x17e>
 8004cea:	88ba      	ldrh	r2, [r7, #4]
 8004cec:	89bb      	ldrh	r3, [r7, #12]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d901      	bls.n	8004cf6 <send+0x17e>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e030      	b.n	8004d58 <send+0x1e0>
      if(len <= freesize) break;
 8004cf6:	88ba      	ldrh	r2, [r7, #4]
 8004cf8:	89bb      	ldrh	r3, [r7, #12]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d900      	bls.n	8004d00 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8004cfe:	e7cc      	b.n	8004c9a <send+0x122>
      if(len <= freesize) break;
 8004d00:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004d02:	88ba      	ldrh	r2, [r7, #4]
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fded 	bl	80058e8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	3301      	adds	r3, #1
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fc43 	bl	80055a8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004d22:	bf00      	nop
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	3301      	adds	r3, #1
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fbed 	bl	8005510 <WIZCHIP_READ>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f3      	bne.n	8004d24 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	b21a      	sxth	r2, r3
 8004d46:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <send+0x1e8>)
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	b21b      	sxth	r3, r3
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	b21b      	sxth	r3, r3
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	4b03      	ldr	r3, [pc, #12]	@ (8004d60 <send+0x1e8>)
 8004d54:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004d56:	88bb      	ldrh	r3, [r7, #4]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000804 	.word	0x20000804
 8004d64:	20000802 	.word	0x20000802

08004d68 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	6039      	str	r1, [r7, #0]
 8004d72:	71fb      	strb	r3, [r7, #7]
 8004d74:	4613      	mov	r3, r2
 8004d76:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d902      	bls.n	8004d8c <recv+0x24>
 8004d86:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8a:	e09b      	b.n	8004ec4 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	3301      	adds	r3, #1
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fbbb 	bl	8005510 <WIZCHIP_READ>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d002      	beq.n	8004daa <recv+0x42>
 8004da4:	f06f 0304 	mvn.w	r3, #4
 8004da8:	e08c      	b.n	8004ec4 <recv+0x15c>
   CHECK_SOCKDATA();
 8004daa:	88bb      	ldrh	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <recv+0x4e>
 8004db0:	f06f 030d 	mvn.w	r3, #13
 8004db4:	e086      	b.n	8004ec4 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	3301      	adds	r3, #1
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fba4 	bl	8005510 <WIZCHIP_READ>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	029b      	lsls	r3, r3, #10
 8004dcc:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004dce:	89ba      	ldrh	r2, [r7, #12]
 8004dd0:	88bb      	ldrh	r3, [r7, #4]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d201      	bcs.n	8004dda <recv+0x72>
 8004dd6:	89bb      	ldrh	r3, [r7, #12]
 8004dd8:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fd3a 	bl	8005856 <getSn_RX_RSR>
 8004de2:	4603      	mov	r3, r0
 8004de4:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	3301      	adds	r3, #1
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fb8c 	bl	8005510 <WIZCHIP_READ>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b17      	cmp	r3, #23
 8004e00:	d026      	beq.n	8004e50 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b1c      	cmp	r3, #28
 8004e06:	d11c      	bne.n	8004e42 <recv+0xda>
            {
               if(recvsize != 0) break;
 8004e08:	89bb      	ldrh	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d133      	bne.n	8004e76 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fcd7 	bl	80057c4 <getSn_TX_FSR>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461c      	mov	r4, r3
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	3301      	adds	r3, #1
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fb72 	bl	8005510 <WIZCHIP_READ>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	029b      	lsls	r3, r3, #10
 8004e30:	429c      	cmp	r4, r3
 8004e32:	d10d      	bne.n	8004e50 <recv+0xe8>
               {
                  close(sn);
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fcde 	bl	80047f8 <close>
                  return SOCKERR_SOCKSTATUS;
 8004e3c:	f06f 0306 	mvn.w	r3, #6
 8004e40:	e040      	b.n	8004ec4 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fcd7 	bl	80047f8 <close>
               return SOCKERR_SOCKSTATUS;
 8004e4a:	f06f 0306 	mvn.w	r3, #6
 8004e4e:	e039      	b.n	8004ec4 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004e50:	4b1e      	ldr	r3, [pc, #120]	@ (8004ecc <recv+0x164>)
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	fa42 f303 	asr.w	r3, r2, r3
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <recv+0x106>
 8004e64:	89bb      	ldrh	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <recv+0x106>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e02a      	b.n	8004ec4 <recv+0x15c>
         if(recvsize != 0) break;
 8004e6e:	89bb      	ldrh	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8004e74:	e7b1      	b.n	8004dda <recv+0x72>
               if(recvsize != 0) break;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <recv+0x114>
         if(recvsize != 0) break;
 8004e7a:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004e7c:	89ba      	ldrh	r2, [r7, #12]
 8004e7e:	88bb      	ldrh	r3, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d201      	bcs.n	8004e88 <recv+0x120>
 8004e84:	89bb      	ldrh	r3, [r7, #12]
 8004e86:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004e88:	88ba      	ldrh	r2, [r7, #4]
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fd84 	bl	800599c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	3301      	adds	r3, #1
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ea0:	2140      	movs	r1, #64	@ 0x40
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fb80 	bl	80055a8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004ea8:	bf00      	nop
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	3301      	adds	r3, #1
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fb2a 	bl	8005510 <WIZCHIP_READ>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f3      	bne.n	8004eaa <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004ec2:	88bb      	ldrh	r3, [r7, #4]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd90      	pop	{r4, r7, pc}
 8004ecc:	20000802 	.word	0x20000802

08004ed0 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d902      	bls.n	8004ef6 <sendto+0x26>
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef4:	e11a      	b.n	800512c <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	3301      	adds	r3, #1
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fb06 	bl	8005510 <WIZCHIP_READ>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	3b02      	subs	r3, #2
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d902      	bls.n	8004f16 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004f10:	f06f 0304 	mvn.w	r3, #4
 8004f14:	e10a      	b.n	800512c <sendto+0x25c>
         break;
 8004f16:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004f18:	89bb      	ldrh	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <sendto+0x54>
 8004f1e:	f06f 030d 	mvn.w	r3, #13
 8004f22:	e103      	b.n	800512c <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	3201      	adds	r2, #1
 8004f32:	7812      	ldrb	r2, [r2, #0]
 8004f34:	4413      	add	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	3202      	adds	r2, #2
 8004f40:	7812      	ldrb	r2, [r2, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	3203      	adds	r2, #3
 8004f4e:	7812      	ldrb	r2, [r2, #0]
 8004f50:	4413      	add	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10e      	bne.n	8004f78 <sendto+0xa8>
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	3301      	adds	r3, #1
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fad4 	bl	8005510 <WIZCHIP_READ>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d002      	beq.n	8004f78 <sendto+0xa8>
 8004f72:	f06f 030b 	mvn.w	r3, #11
 8004f76:	e0d9      	b.n	800512c <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8004f78:	8c3b      	ldrh	r3, [r7, #32]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10e      	bne.n	8004f9c <sendto+0xcc>
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	3301      	adds	r3, #1
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fac2 	bl	8005510 <WIZCHIP_READ>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d002      	beq.n	8004f9c <sendto+0xcc>
 8004f96:	f06f 030a 	mvn.w	r3, #10
 8004f9a:	e0c7      	b.n	800512c <sendto+0x25c>
   tmp = getSn_SR(sn);
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fab1 	bl	8005510 <WIZCHIP_READ>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	2b42      	cmp	r3, #66	@ 0x42
 8004fb6:	d008      	beq.n	8004fca <sendto+0xfa>
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	2b22      	cmp	r3, #34	@ 0x22
 8004fbc:	d005      	beq.n	8004fca <sendto+0xfa>
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	2b32      	cmp	r3, #50	@ 0x32
 8004fc2:	d002      	beq.n	8004fca <sendto+0xfa>
 8004fc4:	f06f 0306 	mvn.w	r3, #6
 8004fc8:	e0b0      	b.n	800512c <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	3301      	adds	r3, #1
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fb92 	bl	8005704 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fec:	461a      	mov	r2, r3
 8004fee:	8c3b      	ldrh	r3, [r7, #32]
 8004ff0:	0a1b      	lsrs	r3, r3, #8
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f000 fad5 	bl	80055a8 <WIZCHIP_WRITE>
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	3301      	adds	r3, #1
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800500a:	461a      	mov	r2, r3
 800500c:	8c3b      	ldrh	r3, [r7, #32]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fac8 	bl	80055a8 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	3301      	adds	r3, #1
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fa73 	bl	8005510 <WIZCHIP_READ>
 800502a:	4603      	mov	r3, r0
 800502c:	029b      	lsls	r3, r3, #10
 800502e:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005030:	89ba      	ldrh	r2, [r7, #12]
 8005032:	8abb      	ldrh	r3, [r7, #20]
 8005034:	429a      	cmp	r2, r3
 8005036:	d901      	bls.n	800503c <sendto+0x16c>
 8005038:	8abb      	ldrh	r3, [r7, #20]
 800503a:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fbc0 	bl	80057c4 <getSn_TX_FSR>
 8005044:	4603      	mov	r3, r0
 8005046:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	3301      	adds	r3, #1
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fa5b 	bl	8005510 <WIZCHIP_READ>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <sendto+0x196>
 8005060:	f06f 0303 	mvn.w	r3, #3
 8005064:	e062      	b.n	800512c <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005066:	4b33      	ldr	r3, [pc, #204]	@ (8005134 <sendto+0x264>)
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	fa42 f303 	asr.w	r3, r2, r3
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <sendto+0x1b6>
 800507a:	89ba      	ldrh	r2, [r7, #12]
 800507c:	8abb      	ldrh	r3, [r7, #20]
 800507e:	429a      	cmp	r2, r3
 8005080:	d901      	bls.n	8005086 <sendto+0x1b6>
 8005082:	2300      	movs	r3, #0
 8005084:	e052      	b.n	800512c <sendto+0x25c>
      if(len <= freesize) break;
 8005086:	89ba      	ldrh	r2, [r7, #12]
 8005088:	8abb      	ldrh	r3, [r7, #20]
 800508a:	429a      	cmp	r2, r3
 800508c:	d900      	bls.n	8005090 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 800508e:	e7d5      	b.n	800503c <sendto+0x16c>
      if(len <= freesize) break;
 8005090:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8005092:	89ba      	ldrh	r2, [r7, #12]
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fc25 	bl	80058e8 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	3301      	adds	r3, #1
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80050aa:	2120      	movs	r1, #32
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fa7b 	bl	80055a8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80050b2:	bf00      	nop
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	3301      	adds	r3, #1
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fa25 	bl	8005510 <WIZCHIP_READ>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f3      	bne.n	80050b4 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	3301      	adds	r3, #1
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fa19 	bl	8005510 <WIZCHIP_READ>
 80050de:	4603      	mov	r3, r0
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00c      	beq.n	800510a <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	3301      	adds	r3, #1
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80050fc:	2110      	movs	r1, #16
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fa52 	bl	80055a8 <WIZCHIP_WRITE>
         break;
 8005104:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005106:	89bb      	ldrh	r3, [r7, #12]
 8005108:	e010      	b.n	800512c <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0db      	beq.n	80050cc <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	3301      	adds	r3, #1
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005120:	2108      	movs	r1, #8
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fa40 	bl	80055a8 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8005128:	f06f 030c 	mvn.w	r3, #12
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000802 	.word	0x20000802

08005138 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af00      	add	r7, sp, #0
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	4603      	mov	r3, r0
 8005144:	73fb      	strb	r3, [r7, #15]
 8005146:	4613      	mov	r3, r2
 8005148:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800514a:	2300      	movs	r3, #0
 800514c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d902      	bls.n	800515a <recvfrom+0x22>
 8005154:	f04f 33ff 	mov.w	r3, #4294967295
 8005158:	e1d2      	b.n	8005500 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	3301      	adds	r3, #1
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f9d4 	bl	8005510 <WIZCHIP_READ>
 8005168:	4603      	mov	r3, r0
 800516a:	777b      	strb	r3, [r7, #29]
 800516c:	7f7b      	ldrb	r3, [r7, #29]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	3b02      	subs	r3, #2
 8005174:	2b02      	cmp	r3, #2
 8005176:	d902      	bls.n	800517e <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005178:	f06f 0304 	mvn.w	r3, #4
 800517c:	e1c0      	b.n	8005500 <recvfrom+0x3c8>
         break;
 800517e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005180:	89bb      	ldrh	r3, [r7, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <recvfrom+0x54>
 8005186:	f06f 030d 	mvn.w	r3, #13
 800518a:	e1b9      	b.n	8005500 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	4a87      	ldr	r2, [pc, #540]	@ (80053ac <recvfrom+0x274>)
 8005190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d128      	bne.n	80051ea <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fb5b 	bl	8005856 <getSn_RX_RSR>
 80051a0:	4603      	mov	r3, r0
 80051a2:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	3301      	adds	r3, #1
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f9ad 	bl	8005510 <WIZCHIP_READ>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <recvfrom+0x8a>
 80051bc:	f06f 0303 	mvn.w	r3, #3
 80051c0:	e19e      	b.n	8005500 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80051c2:	4b7b      	ldr	r3, [pc, #492]	@ (80053b0 <recvfrom+0x278>)
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	fa42 f303 	asr.w	r3, r2, r3
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <recvfrom+0xa8>
 80051d6:	8bfb      	ldrh	r3, [r7, #30]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <recvfrom+0xa8>
 80051dc:	2300      	movs	r3, #0
 80051de:	e18f      	b.n	8005500 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 80051e0:	8bfb      	ldrh	r3, [r7, #30]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d100      	bne.n	80051e8 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80051e6:	e7d7      	b.n	8005198 <recvfrom+0x60>
         if(pack_len != 0) break;
 80051e8:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80051ea:	7f7b      	ldrb	r3, [r7, #29]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d078      	beq.n	80052e6 <recvfrom+0x1ae>
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	f300 8140 	bgt.w	800547a <recvfrom+0x342>
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d003      	beq.n	8005206 <recvfrom+0xce>
 80051fe:	2b03      	cmp	r3, #3
 8005200:	f000 80da 	beq.w	80053b8 <recvfrom+0x280>
 8005204:	e139      	b.n	800547a <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	4a68      	ldr	r2, [pc, #416]	@ (80053ac <recvfrom+0x274>)
 800520a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d151      	bne.n	80052b6 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8005212:	f107 0114 	add.w	r1, r7, #20
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2208      	movs	r2, #8
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fbbe 	bl	800599c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	3301      	adds	r3, #1
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800522c:	2140      	movs	r1, #64	@ 0x40
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f9ba 	bl	80055a8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005234:	bf00      	nop
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	3301      	adds	r3, #1
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f964 	bl	8005510 <WIZCHIP_READ>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f3      	bne.n	8005236 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800524e:	7d3a      	ldrb	r2, [r7, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3301      	adds	r3, #1
 8005258:	7d7a      	ldrb	r2, [r7, #21]
 800525a:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3302      	adds	r3, #2
 8005260:	7dba      	ldrb	r2, [r7, #22]
 8005262:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3303      	adds	r3, #3
 8005268:	7dfa      	ldrb	r2, [r7, #23]
 800526a:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800526c:	7e3b      	ldrb	r3, [r7, #24]
 800526e:	461a      	mov	r2, r3
 8005270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005272:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	b29b      	uxth	r3, r3
 800527c:	7e7a      	ldrb	r2, [r7, #25]
 800527e:	4413      	add	r3, r2
 8005280:	b29a      	uxth	r2, r3
 8005282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005284:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8005286:	7eba      	ldrb	r2, [r7, #26]
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	4611      	mov	r1, r2
 800528c:	4a47      	ldr	r2, [pc, #284]	@ (80053ac <recvfrom+0x274>)
 800528e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	4a45      	ldr	r2, [pc, #276]	@ (80053ac <recvfrom+0x274>)
 8005296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	b29a      	uxth	r2, r3
 800529e:	7efb      	ldrb	r3, [r7, #27]
 80052a0:	4619      	mov	r1, r3
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	440a      	add	r2, r1
 80052a6:	b291      	uxth	r1, r2
 80052a8:	4a40      	ldr	r2, [pc, #256]	@ (80053ac <recvfrom+0x274>)
 80052aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	4a40      	ldr	r2, [pc, #256]	@ (80053b4 <recvfrom+0x27c>)
 80052b2:	2180      	movs	r1, #128	@ 0x80
 80052b4:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	4a3c      	ldr	r2, [pc, #240]	@ (80053ac <recvfrom+0x274>)
 80052ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052be:	89ba      	ldrh	r2, [r7, #12]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d202      	bcs.n	80052ca <recvfrom+0x192>
 80052c4:	89bb      	ldrh	r3, [r7, #12]
 80052c6:	83fb      	strh	r3, [r7, #30]
 80052c8:	e004      	b.n	80052d4 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	4a37      	ldr	r2, [pc, #220]	@ (80053ac <recvfrom+0x274>)
 80052ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d2:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80052d4:	8bfb      	ldrh	r3, [r7, #30]
 80052d6:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80052d8:	8bfa      	ldrh	r2, [r7, #30]
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fb5c 	bl	800599c <wiz_recv_data>
			break;
 80052e4:	e0d5      	b.n	8005492 <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	4a30      	ldr	r2, [pc, #192]	@ (80053ac <recvfrom+0x274>)
 80052ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d145      	bne.n	800537e <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 80052f2:	f107 0114 	add.w	r1, r7, #20
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2202      	movs	r2, #2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fb4e 	bl	800599c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	3301      	adds	r3, #1
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800530c:	2140      	movs	r1, #64	@ 0x40
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f94a 	bl	80055a8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005314:	bf00      	nop
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	3301      	adds	r3, #1
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f8f4 	bl	8005510 <WIZCHIP_READ>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f3      	bne.n	8005316 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800532e:	7d3a      	ldrb	r2, [r7, #20]
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	4611      	mov	r1, r2
 8005334:	4a1d      	ldr	r2, [pc, #116]	@ (80053ac <recvfrom+0x274>)
 8005336:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	4a1b      	ldr	r2, [pc, #108]	@ (80053ac <recvfrom+0x274>)
 800533e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	b29b      	uxth	r3, r3
 8005346:	7d7a      	ldrb	r2, [r7, #21]
 8005348:	4413      	add	r3, r2
 800534a:	b29a      	uxth	r2, r3
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	3a02      	subs	r2, #2
 8005350:	b291      	uxth	r1, r2
 8005352:	4a16      	ldr	r2, [pc, #88]	@ (80053ac <recvfrom+0x274>)
 8005354:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	4a14      	ldr	r2, [pc, #80]	@ (80053ac <recvfrom+0x274>)
 800535c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005360:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8005364:	4293      	cmp	r3, r2
 8005366:	d906      	bls.n	8005376 <recvfrom+0x23e>
   			{
   			   close(sn);
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fa44 	bl	80047f8 <close>
   			   return SOCKFATAL_PACKLEN;
 8005370:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8005374:	e0c4      	b.n	8005500 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	4a0e      	ldr	r2, [pc, #56]	@ (80053b4 <recvfrom+0x27c>)
 800537a:	2180      	movs	r1, #128	@ 0x80
 800537c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	4a0a      	ldr	r2, [pc, #40]	@ (80053ac <recvfrom+0x274>)
 8005382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005386:	89ba      	ldrh	r2, [r7, #12]
 8005388:	429a      	cmp	r2, r3
 800538a:	d202      	bcs.n	8005392 <recvfrom+0x25a>
 800538c:	89bb      	ldrh	r3, [r7, #12]
 800538e:	83fb      	strh	r3, [r7, #30]
 8005390:	e004      	b.n	800539c <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	4a05      	ldr	r2, [pc, #20]	@ (80053ac <recvfrom+0x274>)
 8005396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800539a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800539c:	8bfa      	ldrh	r2, [r7, #30]
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fafa 	bl	800599c <wiz_recv_data>
		   break;
 80053a8:	e073      	b.n	8005492 <recvfrom+0x35a>
 80053aa:	bf00      	nop
 80053ac:	20000808 	.word	0x20000808
 80053b0:	20000802 	.word	0x20000802
 80053b4:	20000818 	.word	0x20000818
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	4a53      	ldr	r2, [pc, #332]	@ (8005508 <recvfrom+0x3d0>)
 80053bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d144      	bne.n	800544e <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 80053c4:	f107 0114 	add.w	r1, r7, #20
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2206      	movs	r2, #6
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fae5 	bl	800599c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	3301      	adds	r3, #1
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80053de:	2140      	movs	r1, #64	@ 0x40
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f8e1 	bl	80055a8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80053e6:	bf00      	nop
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	3301      	adds	r3, #1
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f88b 	bl	8005510 <WIZCHIP_READ>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f3      	bne.n	80053e8 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8005400:	7d3a      	ldrb	r2, [r7, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3301      	adds	r3, #1
 800540a:	7d7a      	ldrb	r2, [r7, #21]
 800540c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3302      	adds	r3, #2
 8005412:	7dba      	ldrb	r2, [r7, #22]
 8005414:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3303      	adds	r3, #3
 800541a:	7dfa      	ldrb	r2, [r7, #23]
 800541c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800541e:	7e3a      	ldrb	r2, [r7, #24]
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	4611      	mov	r1, r2
 8005424:	4a38      	ldr	r2, [pc, #224]	@ (8005508 <recvfrom+0x3d0>)
 8005426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	4a36      	ldr	r2, [pc, #216]	@ (8005508 <recvfrom+0x3d0>)
 800542e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	b29a      	uxth	r2, r3
 8005436:	7e7b      	ldrb	r3, [r7, #25]
 8005438:	4619      	mov	r1, r3
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	440a      	add	r2, r1
 800543e:	b291      	uxth	r1, r2
 8005440:	4a31      	ldr	r2, [pc, #196]	@ (8005508 <recvfrom+0x3d0>)
 8005442:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	4a30      	ldr	r2, [pc, #192]	@ (800550c <recvfrom+0x3d4>)
 800544a:	2180      	movs	r1, #128	@ 0x80
 800544c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	4a2d      	ldr	r2, [pc, #180]	@ (8005508 <recvfrom+0x3d0>)
 8005452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005456:	89ba      	ldrh	r2, [r7, #12]
 8005458:	429a      	cmp	r2, r3
 800545a:	d202      	bcs.n	8005462 <recvfrom+0x32a>
 800545c:	89bb      	ldrh	r3, [r7, #12]
 800545e:	83fb      	strh	r3, [r7, #30]
 8005460:	e004      	b.n	800546c <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	4a28      	ldr	r2, [pc, #160]	@ (8005508 <recvfrom+0x3d0>)
 8005466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800546a:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800546c:	8bfa      	ldrh	r2, [r7, #30]
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fa92 	bl	800599c <wiz_recv_data>
			break;
 8005478:	e00b      	b.n	8005492 <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800547a:	8bfa      	ldrh	r2, [r7, #30]
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fae5 	bl	8005a50 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	491f      	ldr	r1, [pc, #124]	@ (8005508 <recvfrom+0x3d0>)
 800548a:	8bfa      	ldrh	r2, [r7, #30]
 800548c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8005490:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	3301      	adds	r3, #1
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800549e:	2140      	movs	r1, #64	@ 0x40
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 f881 	bl	80055a8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80054a6:	bf00      	nop
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	3301      	adds	r3, #1
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f82b 	bl	8005510 <WIZCHIP_READ>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f3      	bne.n	80054a8 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	4a11      	ldr	r2, [pc, #68]	@ (8005508 <recvfrom+0x3d0>)
 80054c4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	8bfa      	ldrh	r2, [r7, #30]
 80054cc:	1a8a      	subs	r2, r1, r2
 80054ce:	b291      	uxth	r1, r2
 80054d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005508 <recvfrom+0x3d0>)
 80054d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005508 <recvfrom+0x3d0>)
 80054da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	4a09      	ldr	r2, [pc, #36]	@ (800550c <recvfrom+0x3d4>)
 80054e6:	5cd2      	ldrb	r2, [r2, r3]
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	b2d1      	uxtb	r1, r2
 80054f0:	4a06      	ldr	r2, [pc, #24]	@ (800550c <recvfrom+0x3d4>)
 80054f2:	54d1      	strb	r1, [r2, r3]
 80054f4:	e003      	b.n	80054fe <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	4a04      	ldr	r2, [pc, #16]	@ (800550c <recvfrom+0x3d4>)
 80054fa:	2100      	movs	r1, #0
 80054fc:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80054fe:	8bfb      	ldrh	r3, [r7, #30]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20000808 	.word	0x20000808
 800550c:	20000818 	.word	0x20000818

08005510 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8005518:	4b22      	ldr	r3, [pc, #136]	@ (80055a4 <WIZCHIP_READ+0x94>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800551e:	4b21      	ldr	r3, [pc, #132]	@ (80055a4 <WIZCHIP_READ+0x94>)
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005524:	4b1f      	ldr	r3, [pc, #124]	@ (80055a4 <WIZCHIP_READ+0x94>)
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <WIZCHIP_READ+0x24>
 800552c:	4b1d      	ldr	r3, [pc, #116]	@ (80055a4 <WIZCHIP_READ+0x94>)
 800552e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005530:	2b00      	cmp	r3, #0
 8005532:	d114      	bne.n	800555e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005534:	4b1b      	ldr	r3, [pc, #108]	@ (80055a4 <WIZCHIP_READ+0x94>)
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	0c12      	lsrs	r2, r2, #16
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	4610      	mov	r0, r2
 8005540:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005542:	4b18      	ldr	r3, [pc, #96]	@ (80055a4 <WIZCHIP_READ+0x94>)
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	0a12      	lsrs	r2, r2, #8
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	4610      	mov	r0, r2
 800554e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005550:	4b14      	ldr	r3, [pc, #80]	@ (80055a4 <WIZCHIP_READ+0x94>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	4610      	mov	r0, r2
 800555a:	4798      	blx	r3
 800555c:	e011      	b.n	8005582 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	0c1b      	lsrs	r3, r3, #16
 8005562:	b2db      	uxtb	r3, r3
 8005564:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	0a1b      	lsrs	r3, r3, #8
 800556a:	b2db      	uxtb	r3, r3
 800556c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005574:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <WIZCHIP_READ+0x94>)
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	f107 020c 	add.w	r2, r7, #12
 800557c:	2103      	movs	r1, #3
 800557e:	4610      	mov	r0, r2
 8005580:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8005582:	4b08      	ldr	r3, [pc, #32]	@ (80055a4 <WIZCHIP_READ+0x94>)
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	4798      	blx	r3
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800558c:	4b05      	ldr	r3, [pc, #20]	@ (80055a4 <WIZCHIP_READ+0x94>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005592:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <WIZCHIP_READ+0x94>)
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	4798      	blx	r3
   return ret;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000098 	.word	0x20000098

080055a8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80055b4:	4b22      	ldr	r3, [pc, #136]	@ (8005640 <WIZCHIP_WRITE+0x98>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80055ba:	4b21      	ldr	r3, [pc, #132]	@ (8005640 <WIZCHIP_WRITE+0x98>)
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f043 0304 	orr.w	r3, r3, #4
 80055c6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80055c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005640 <WIZCHIP_WRITE+0x98>)
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d119      	bne.n	8005604 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80055d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005640 <WIZCHIP_WRITE+0x98>)
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	0c12      	lsrs	r2, r2, #16
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	4610      	mov	r0, r2
 80055dc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80055de:	4b18      	ldr	r3, [pc, #96]	@ (8005640 <WIZCHIP_WRITE+0x98>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	0a12      	lsrs	r2, r2, #8
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	4610      	mov	r0, r2
 80055ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80055ec:	4b14      	ldr	r3, [pc, #80]	@ (8005640 <WIZCHIP_WRITE+0x98>)
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	4610      	mov	r0, r2
 80055f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80055f8:	4b11      	ldr	r3, [pc, #68]	@ (8005640 <WIZCHIP_WRITE+0x98>)
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	4610      	mov	r0, r2
 8005600:	4798      	blx	r3
 8005602:	e013      	b.n	800562c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	0c1b      	lsrs	r3, r3, #16
 8005608:	b2db      	uxtb	r3, r3
 800560a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	b2db      	uxtb	r3, r3
 8005612:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800561e:	4b08      	ldr	r3, [pc, #32]	@ (8005640 <WIZCHIP_WRITE+0x98>)
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	f107 020c 	add.w	r2, r7, #12
 8005626:	2104      	movs	r1, #4
 8005628:	4610      	mov	r0, r2
 800562a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800562c:	4b04      	ldr	r3, [pc, #16]	@ (8005640 <WIZCHIP_WRITE+0x98>)
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005632:	4b03      	ldr	r3, [pc, #12]	@ (8005640 <WIZCHIP_WRITE+0x98>)
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	4798      	blx	r3
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20000098 	.word	0x20000098

08005644 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005644:	b590      	push	{r4, r7, lr}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005652:	4b2b      	ldr	r3, [pc, #172]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005658:	4b29      	ldr	r3, [pc, #164]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800565e:	4b28      	ldr	r3, [pc, #160]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <WIZCHIP_READ_BUF+0x2a>
 8005666:	4b26      	ldr	r3, [pc, #152]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	2b00      	cmp	r3, #0
 800566c:	d126      	bne.n	80056bc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800566e:	4b24      	ldr	r3, [pc, #144]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	0c12      	lsrs	r2, r2, #16
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	4610      	mov	r0, r2
 800567a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800567c:	4b20      	ldr	r3, [pc, #128]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	0a12      	lsrs	r2, r2, #8
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	4610      	mov	r0, r2
 8005688:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800568a:	4b1d      	ldr	r3, [pc, #116]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	4610      	mov	r0, r2
 8005694:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005696:	2300      	movs	r3, #0
 8005698:	82fb      	strh	r3, [r7, #22]
 800569a:	e00a      	b.n	80056b2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800569c:	4b18      	ldr	r3, [pc, #96]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	8afa      	ldrh	r2, [r7, #22]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	188c      	adds	r4, r1, r2
 80056a6:	4798      	blx	r3
 80056a8:	4603      	mov	r3, r0
 80056aa:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80056ac:	8afb      	ldrh	r3, [r7, #22]
 80056ae:	3301      	adds	r3, #1
 80056b0:	82fb      	strh	r3, [r7, #22]
 80056b2:	8afa      	ldrh	r2, [r7, #22]
 80056b4:	88fb      	ldrh	r3, [r7, #6]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d3f0      	bcc.n	800569c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80056ba:	e017      	b.n	80056ec <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	0c1b      	lsrs	r3, r3, #16
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80056d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 80056d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d6:	f107 0210 	add.w	r2, r7, #16
 80056da:	2103      	movs	r1, #3
 80056dc:	4610      	mov	r0, r2
 80056de:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80056e0:	4b07      	ldr	r3, [pc, #28]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 80056e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e4:	88fa      	ldrh	r2, [r7, #6]
 80056e6:	4611      	mov	r1, r2
 80056e8:	68b8      	ldr	r0, [r7, #8]
 80056ea:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80056ec:	4b04      	ldr	r3, [pc, #16]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80056f2:	4b03      	ldr	r3, [pc, #12]	@ (8005700 <WIZCHIP_READ_BUF+0xbc>)
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	4798      	blx	r3
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd90      	pop	{r4, r7, pc}
 8005700:	20000098 	.word	0x20000098

08005704 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005712:	4b2b      	ldr	r3, [pc, #172]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005718:	4b29      	ldr	r3, [pc, #164]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f043 0304 	orr.w	r3, r3, #4
 8005724:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005726:	4b26      	ldr	r3, [pc, #152]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d126      	bne.n	800577c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800572e:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	0c12      	lsrs	r2, r2, #16
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	4610      	mov	r0, r2
 800573a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800573c:	4b20      	ldr	r3, [pc, #128]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	0a12      	lsrs	r2, r2, #8
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	4610      	mov	r0, r2
 8005748:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800574a:	4b1d      	ldr	r3, [pc, #116]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	4610      	mov	r0, r2
 8005754:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005756:	2300      	movs	r3, #0
 8005758:	82fb      	strh	r3, [r7, #22]
 800575a:	e00a      	b.n	8005772 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800575c:	4b18      	ldr	r3, [pc, #96]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	8afa      	ldrh	r2, [r7, #22]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	440a      	add	r2, r1
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	4610      	mov	r0, r2
 800576a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800576c:	8afb      	ldrh	r3, [r7, #22]
 800576e:	3301      	adds	r3, #1
 8005770:	82fb      	strh	r3, [r7, #22]
 8005772:	8afa      	ldrh	r2, [r7, #22]
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	429a      	cmp	r2, r3
 8005778:	d3f0      	bcc.n	800575c <WIZCHIP_WRITE_BUF+0x58>
 800577a:	e017      	b.n	80057ac <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	b2db      	uxtb	r3, r3
 8005782:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	0a1b      	lsrs	r3, r3, #8
 8005788:	b2db      	uxtb	r3, r3
 800578a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005792:	4b0b      	ldr	r3, [pc, #44]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	f107 0210 	add.w	r2, r7, #16
 800579a:	2103      	movs	r1, #3
 800579c:	4610      	mov	r0, r2
 800579e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80057a0:	4b07      	ldr	r3, [pc, #28]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 80057a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	4611      	mov	r1, r2
 80057a8:	68b8      	ldr	r0, [r7, #8]
 80057aa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80057ac:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80057b2:	4b03      	ldr	r3, [pc, #12]	@ (80057c0 <WIZCHIP_WRITE_BUF+0xbc>)
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	4798      	blx	r3
}
 80057b8:	bf00      	nop
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000098 	.word	0x20000098

080057c4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	81fb      	strh	r3, [r7, #14]
 80057d2:	2300      	movs	r3, #0
 80057d4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	3301      	adds	r3, #1
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fe94 	bl	8005510 <WIZCHIP_READ>
 80057e8:	4603      	mov	r3, r0
 80057ea:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80057ec:	89bb      	ldrh	r3, [r7, #12]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	b29c      	uxth	r4, r3
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	3301      	adds	r3, #1
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fe86 	bl	8005510 <WIZCHIP_READ>
 8005804:	4603      	mov	r3, r0
 8005806:	4423      	add	r3, r4
 8005808:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800580a:	89bb      	ldrh	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d019      	beq.n	8005844 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	3301      	adds	r3, #1
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fe77 	bl	8005510 <WIZCHIP_READ>
 8005822:	4603      	mov	r3, r0
 8005824:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005826:	89fb      	ldrh	r3, [r7, #14]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	b29c      	uxth	r4, r3
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	3301      	adds	r3, #1
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fe69 	bl	8005510 <WIZCHIP_READ>
 800583e:	4603      	mov	r3, r0
 8005840:	4423      	add	r3, r4
 8005842:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005844:	89fa      	ldrh	r2, [r7, #14]
 8005846:	89bb      	ldrh	r3, [r7, #12]
 8005848:	429a      	cmp	r2, r3
 800584a:	d1c4      	bne.n	80057d6 <getSn_TX_FSR+0x12>
   return val;
 800584c:	89fb      	ldrh	r3, [r7, #14]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	bd90      	pop	{r4, r7, pc}

08005856 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8005856:	b590      	push	{r4, r7, lr}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	4603      	mov	r3, r0
 800585e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005860:	2300      	movs	r3, #0
 8005862:	81fb      	strh	r3, [r7, #14]
 8005864:	2300      	movs	r3, #0
 8005866:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	3301      	adds	r3, #1
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fe4b 	bl	8005510 <WIZCHIP_READ>
 800587a:	4603      	mov	r3, r0
 800587c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800587e:	89bb      	ldrh	r3, [r7, #12]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	b29c      	uxth	r4, r3
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	3301      	adds	r3, #1
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fe3d 	bl	8005510 <WIZCHIP_READ>
 8005896:	4603      	mov	r3, r0
 8005898:	4423      	add	r3, r4
 800589a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800589c:	89bb      	ldrh	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d019      	beq.n	80058d6 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	3301      	adds	r3, #1
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff fe2e 	bl	8005510 <WIZCHIP_READ>
 80058b4:	4603      	mov	r3, r0
 80058b6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80058b8:	89fb      	ldrh	r3, [r7, #14]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	b29c      	uxth	r4, r3
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	3301      	adds	r3, #1
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff fe20 	bl	8005510 <WIZCHIP_READ>
 80058d0:	4603      	mov	r3, r0
 80058d2:	4423      	add	r3, r4
 80058d4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80058d6:	89fa      	ldrh	r2, [r7, #14]
 80058d8:	89bb      	ldrh	r3, [r7, #12]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d1c4      	bne.n	8005868 <getSn_RX_RSR+0x12>
   return val;
 80058de:	89fb      	ldrh	r3, [r7, #14]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}

080058e8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80058e8:	b590      	push	{r4, r7, lr}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	4603      	mov	r3, r0
 80058f0:	6039      	str	r1, [r7, #0]
 80058f2:	71fb      	strb	r3, [r7, #7]
 80058f4:	4613      	mov	r3, r2
 80058f6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005900:	88bb      	ldrh	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d046      	beq.n	8005994 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	3301      	adds	r3, #1
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fdfc 	bl	8005510 <WIZCHIP_READ>
 8005918:	4603      	mov	r3, r0
 800591a:	021b      	lsls	r3, r3, #8
 800591c:	b29c      	uxth	r4, r3
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	3301      	adds	r3, #1
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fdf0 	bl	8005510 <WIZCHIP_READ>
 8005930:	4603      	mov	r3, r0
 8005932:	4423      	add	r3, r4
 8005934:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8005936:	89fb      	ldrh	r3, [r7, #14]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	79fa      	ldrb	r2, [r7, #7]
 800593c:	0092      	lsls	r2, r2, #2
 800593e:	3202      	adds	r2, #2
 8005940:	00d2      	lsls	r2, r2, #3
 8005942:	4413      	add	r3, r2
 8005944:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8005946:	88bb      	ldrh	r3, [r7, #4]
 8005948:	461a      	mov	r2, r3
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	68b8      	ldr	r0, [r7, #8]
 800594e:	f7ff fed9 	bl	8005704 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8005952:	89fa      	ldrh	r2, [r7, #14]
 8005954:	88bb      	ldrh	r3, [r7, #4]
 8005956:	4413      	add	r3, r2
 8005958:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	3301      	adds	r3, #1
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005966:	461a      	mov	r2, r3
 8005968:	89fb      	ldrh	r3, [r7, #14]
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	b29b      	uxth	r3, r3
 800596e:	b2db      	uxtb	r3, r3
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f7ff fe18 	bl	80055a8 <WIZCHIP_WRITE>
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	3301      	adds	r3, #1
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005984:	461a      	mov	r2, r3
 8005986:	89fb      	ldrh	r3, [r7, #14]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f7ff fe0b 	bl	80055a8 <WIZCHIP_WRITE>
 8005992:	e000      	b.n	8005996 <wiz_send_data+0xae>
   if(len == 0)  return;
 8005994:	bf00      	nop
}
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	bd90      	pop	{r4, r7, pc}

0800599c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800599c:	b590      	push	{r4, r7, lr}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	6039      	str	r1, [r7, #0]
 80059a6:	71fb      	strb	r3, [r7, #7]
 80059a8:	4613      	mov	r3, r2
 80059aa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80059b4:	88bb      	ldrh	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d046      	beq.n	8005a48 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	3301      	adds	r3, #1
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fda2 	bl	8005510 <WIZCHIP_READ>
 80059cc:	4603      	mov	r3, r0
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	b29c      	uxth	r4, r3
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	3301      	adds	r3, #1
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fd96 	bl	8005510 <WIZCHIP_READ>
 80059e4:	4603      	mov	r3, r0
 80059e6:	4423      	add	r3, r4
 80059e8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80059ea:	89fb      	ldrh	r3, [r7, #14]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	79fa      	ldrb	r2, [r7, #7]
 80059f0:	0092      	lsls	r2, r2, #2
 80059f2:	3203      	adds	r2, #3
 80059f4:	00d2      	lsls	r2, r2, #3
 80059f6:	4413      	add	r3, r2
 80059f8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80059fa:	88bb      	ldrh	r3, [r7, #4]
 80059fc:	461a      	mov	r2, r3
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	68b8      	ldr	r0, [r7, #8]
 8005a02:	f7ff fe1f 	bl	8005644 <WIZCHIP_READ_BUF>
   ptr += len;
 8005a06:	89fa      	ldrh	r2, [r7, #14]
 8005a08:	88bb      	ldrh	r3, [r7, #4]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	3301      	adds	r3, #1
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	89fb      	ldrh	r3, [r7, #14]
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f7ff fdbe 	bl	80055a8 <WIZCHIP_WRITE>
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	3301      	adds	r3, #1
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005a38:	461a      	mov	r2, r3
 8005a3a:	89fb      	ldrh	r3, [r7, #14]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7ff fdb1 	bl	80055a8 <WIZCHIP_WRITE>
 8005a46:	e000      	b.n	8005a4a <wiz_recv_data+0xae>
   if(len == 0) return;
 8005a48:	bf00      	nop
}
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd90      	pop	{r4, r7, pc}

08005a50 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8005a50:	b590      	push	{r4, r7, lr}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	460a      	mov	r2, r1
 8005a5a:	71fb      	strb	r3, [r7, #7]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	3301      	adds	r3, #1
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff fd4d 	bl	8005510 <WIZCHIP_READ>
 8005a76:	4603      	mov	r3, r0
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	b29c      	uxth	r4, r3
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	3301      	adds	r3, #1
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff fd41 	bl	8005510 <WIZCHIP_READ>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	4423      	add	r3, r4
 8005a92:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8005a94:	89fa      	ldrh	r2, [r7, #14]
 8005a96:	88bb      	ldrh	r3, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	89fb      	ldrh	r3, [r7, #14]
 8005aac:	0a1b      	lsrs	r3, r3, #8
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7ff fd77 	bl	80055a8 <WIZCHIP_WRITE>
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	3301      	adds	r3, #1
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	89fb      	ldrh	r3, [r7, #14]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7ff fd6a 	bl	80055a8 <WIZCHIP_WRITE>
}
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd90      	pop	{r4, r7, pc}

08005adc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	bf00      	nop
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005aea:	b480      	push	{r7}
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	bf00      	nop
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	bf00      	nop
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005b06:	b480      	push	{r7}
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70fb      	strb	r3, [r7, #3]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	78fa      	ldrb	r2, [r7, #3]
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	2300      	movs	r3, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	71fb      	strb	r3, [r7, #7]
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	807b      	strh	r3, [r7, #2]
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	807b      	strh	r3, [r7, #2]
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <reg_wizchip_cs_cbfunc+0x16>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005bba:	4b0a      	ldr	r3, [pc, #40]	@ (8005be4 <reg_wizchip_cs_cbfunc+0x40>)
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8005be8 <reg_wizchip_cs_cbfunc+0x44>)
 8005bbe:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005bc0:	4b08      	ldr	r3, [pc, #32]	@ (8005be4 <reg_wizchip_cs_cbfunc+0x40>)
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bec <reg_wizchip_cs_cbfunc+0x48>)
 8005bc4:	619a      	str	r2, [r3, #24]
 8005bc6:	e006      	b.n	8005bd6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005bc8:	4a06      	ldr	r2, [pc, #24]	@ (8005be4 <reg_wizchip_cs_cbfunc+0x40>)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005bce:	4a05      	ldr	r2, [pc, #20]	@ (8005be4 <reg_wizchip_cs_cbfunc+0x40>)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6193      	str	r3, [r2, #24]
   }
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000098 	.word	0x20000098
 8005be8:	08005af9 	.word	0x08005af9
 8005bec:	08005b07 	.word	0x08005b07

08005bf0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005bfa:	bf00      	nop
 8005bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005c3c <reg_wizchip_spi_cbfunc+0x4c>)
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f9      	beq.n	8005bfc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <reg_wizchip_spi_cbfunc+0x24>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005c14:	4b09      	ldr	r3, [pc, #36]	@ (8005c3c <reg_wizchip_spi_cbfunc+0x4c>)
 8005c16:	4a0a      	ldr	r2, [pc, #40]	@ (8005c40 <reg_wizchip_spi_cbfunc+0x50>)
 8005c18:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005c1a:	4b08      	ldr	r3, [pc, #32]	@ (8005c3c <reg_wizchip_spi_cbfunc+0x4c>)
 8005c1c:	4a09      	ldr	r2, [pc, #36]	@ (8005c44 <reg_wizchip_spi_cbfunc+0x54>)
 8005c1e:	621a      	str	r2, [r3, #32]
 8005c20:	e006      	b.n	8005c30 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005c22:	4a06      	ldr	r2, [pc, #24]	@ (8005c3c <reg_wizchip_spi_cbfunc+0x4c>)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005c28:	4a04      	ldr	r2, [pc, #16]	@ (8005c3c <reg_wizchip_spi_cbfunc+0x4c>)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6213      	str	r3, [r2, #32]
   }
}
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000098 	.word	0x20000098
 8005c40:	08005b4d 	.word	0x08005b4d
 8005c44:	08005b5d 	.word	0x08005b5d

08005c48 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005c52:	bf00      	nop
 8005c54:	4b0f      	ldr	r3, [pc, #60]	@ (8005c94 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0f9      	beq.n	8005c54 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <reg_wizchip_spiburst_cbfunc+0x24>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d106      	bne.n	8005c7a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005c6c:	4b09      	ldr	r3, [pc, #36]	@ (8005c94 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c98 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005c70:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005c72:	4b08      	ldr	r3, [pc, #32]	@ (8005c94 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005c74:	4a09      	ldr	r2, [pc, #36]	@ (8005c9c <reg_wizchip_spiburst_cbfunc+0x54>)
 8005c76:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c78:	e006      	b.n	8005c88 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005c7a:	4a06      	ldr	r2, [pc, #24]	@ (8005c94 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005c80:	4a04      	ldr	r2, [pc, #16]	@ (8005c94 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	20000098 	.word	0x20000098
 8005c98:	08005b73 	.word	0x08005b73
 8005c9c:	08005b8b 	.word	0x08005b8b

08005ca0 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	6039      	str	r1, [r7, #0]
 8005caa:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	2b0f      	cmp	r3, #15
 8005cbc:	f200 80c5 	bhi.w	8005e4a <ctlwizchip+0x1aa>
 8005cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <ctlwizchip+0x28>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005d09 	.word	0x08005d09
 8005ccc:	08005d0f 	.word	0x08005d0f
 8005cd0:	08005d3b 	.word	0x08005d3b
 8005cd4:	08005d2f 	.word	0x08005d2f
 8005cd8:	08005d49 	.word	0x08005d49
 8005cdc:	08005d55 	.word	0x08005d55
 8005ce0:	08005d63 	.word	0x08005d63
 8005ce4:	08005d89 	.word	0x08005d89
 8005ce8:	08005dab 	.word	0x08005dab
 8005cec:	08005def 	.word	0x08005def
 8005cf0:	08005df5 	.word	0x08005df5
 8005cf4:	08005dfd 	.word	0x08005dfd
 8005cf8:	08005e51 	.word	0x08005e51
 8005cfc:	08005e05 	.word	0x08005e05
 8005d00:	08005e13 	.word	0x08005e13
 8005d04:	08005e2f 	.word	0x08005e2f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005d08:	f000 f8aa 	bl	8005e60 <wizchip_sw_reset>
         break;
 8005d0c:	e0a1      	b.n	8005e52 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4611      	mov	r1, r2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 f8e7 	bl	8005ef8 <wizchip_init>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	e092      	b.n	8005e54 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f96c 	bl	8006010 <wizchip_clrinterrupt>
         break;
 8005d38:	e08b      	b.n	8005e52 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005d3a:	f000 f99d 	bl	8006078 <wizchip_getinterrupt>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	461a      	mov	r2, r3
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	801a      	strh	r2, [r3, #0]
         break;
 8005d46:	e084      	b.n	8005e52 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 f9b8 	bl	80060c2 <wizchip_setinterruptmask>
         break;         
 8005d52:	e07e      	b.n	8005e52 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005d54:	f000 f9d0 	bl	80060f8 <wizchip_getinterruptmask>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	801a      	strh	r2, [r3, #0]
         break;
 8005d60:	e077      	b.n	8005e52 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005d72:	f7ff fc19 	bl	80055a8 <WIZCHIP_WRITE>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005d82:	f7ff fc11 	bl	80055a8 <WIZCHIP_WRITE>
         break;
 8005d86:	e064      	b.n	8005e52 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005d88:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005d8c:	f7ff fbc0 	bl	8005510 <WIZCHIP_READ>
 8005d90:	4603      	mov	r3, r0
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	b29c      	uxth	r4, r3
 8005d96:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005d9a:	f7ff fbb9 	bl	8005510 <WIZCHIP_READ>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4423      	add	r3, r4
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	801a      	strh	r2, [r3, #0]
         break;
 8005da8:	e053      	b.n	8005e52 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005daa:	4b2c      	ldr	r3, [pc, #176]	@ (8005e5c <ctlwizchip+0x1bc>)
 8005dac:	789a      	ldrb	r2, [r3, #2]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	4a29      	ldr	r2, [pc, #164]	@ (8005e5c <ctlwizchip+0x1bc>)
 8005db8:	78d2      	ldrb	r2, [r2, #3]
 8005dba:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	4a26      	ldr	r2, [pc, #152]	@ (8005e5c <ctlwizchip+0x1bc>)
 8005dc2:	7912      	ldrb	r2, [r2, #4]
 8005dc4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	3303      	adds	r3, #3
 8005dca:	4a24      	ldr	r2, [pc, #144]	@ (8005e5c <ctlwizchip+0x1bc>)
 8005dcc:	7952      	ldrb	r2, [r2, #5]
 8005dce:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4a21      	ldr	r2, [pc, #132]	@ (8005e5c <ctlwizchip+0x1bc>)
 8005dd6:	7992      	ldrb	r2, [r2, #6]
 8005dd8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	3305      	adds	r3, #5
 8005dde:	4a1f      	ldr	r2, [pc, #124]	@ (8005e5c <ctlwizchip+0x1bc>)
 8005de0:	79d2      	ldrb	r2, [r2, #7]
 8005de2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	3306      	adds	r3, #6
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
         break;
 8005dec:	e031      	b.n	8005e52 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005dee:	f000 f9d5 	bl	800619c <wizphy_reset>
         break;
 8005df2:	e02e      	b.n	8005e52 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005df4:	6838      	ldr	r0, [r7, #0]
 8005df6:	f000 f9f8 	bl	80061ea <wizphy_setphyconf>
         break;
 8005dfa:	e02a      	b.n	8005e52 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005dfc:	6838      	ldr	r0, [r7, #0]
 8005dfe:	f000 fa37 	bl	8006270 <wizphy_getphyconf>
         break;
 8005e02:	e026      	b.n	8005e52 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fa9b 	bl	8006344 <wizphy_setphypmode>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	e020      	b.n	8005e54 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005e12:	f000 f9aa 	bl	800616a <wizphy_getphypmode>
 8005e16:	4603      	mov	r3, r0
 8005e18:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	2bff      	cmp	r3, #255	@ 0xff
 8005e1e:	d102      	bne.n	8005e26 <ctlwizchip+0x186>
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	e016      	b.n	8005e54 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	7dfa      	ldrb	r2, [r7, #23]
 8005e2a:	701a      	strb	r2, [r3, #0]
         break;
 8005e2c:	e011      	b.n	8005e52 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005e2e:	f000 f986 	bl	800613e <wizphy_getphylink>
 8005e32:	4603      	mov	r3, r0
 8005e34:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	2bff      	cmp	r3, #255	@ 0xff
 8005e3a:	d102      	bne.n	8005e42 <ctlwizchip+0x1a2>
 8005e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e40:	e008      	b.n	8005e54 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	7dfa      	ldrb	r2, [r7, #23]
 8005e46:	701a      	strb	r2, [r3, #0]
         break;
 8005e48:	e003      	b.n	8005e52 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4e:	e001      	b.n	8005e54 <ctlwizchip+0x1b4>
         break;
 8005e50:	bf00      	nop
   }
   return 0;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd90      	pop	{r4, r7, pc}
 8005e5c:	20000098 	.word	0x20000098

08005e60 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005e66:	1d3b      	adds	r3, r7, #4
 8005e68:	2206      	movs	r2, #6
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005e70:	f7ff fbe8 	bl	8005644 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005e74:	f107 0314 	add.w	r3, r7, #20
 8005e78:	2204      	movs	r2, #4
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005e80:	f7ff fbe0 	bl	8005644 <WIZCHIP_READ_BUF>
 8005e84:	f107 0310 	add.w	r3, r7, #16
 8005e88:	2204      	movs	r2, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005e90:	f7ff fbd8 	bl	8005644 <WIZCHIP_READ_BUF>
 8005e94:	f107 030c 	add.w	r3, r7, #12
 8005e98:	2204      	movs	r2, #4
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005ea0:	f7ff fbd0 	bl	8005644 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005ea4:	2180      	movs	r1, #128	@ 0x80
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	f7ff fb7e 	bl	80055a8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005eac:	2000      	movs	r0, #0
 8005eae:	f7ff fb2f 	bl	8005510 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005eb2:	1d3b      	adds	r3, r7, #4
 8005eb4:	2206      	movs	r2, #6
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005ebc:	f7ff fc22 	bl	8005704 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005ec0:	f107 0314 	add.w	r3, r7, #20
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005ecc:	f7ff fc1a 	bl	8005704 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005ed0:	f107 0310 	add.w	r3, r7, #16
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005edc:	f7ff fc12 	bl	8005704 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005ee0:	f107 030c 	add.w	r3, r7, #12
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005eec:	f7ff fc0a 	bl	8005704 <WIZCHIP_WRITE_BUF>
}
 8005ef0:	bf00      	nop
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005f06:	f7ff ffab 	bl	8005e60 <wizchip_sw_reset>
   if(txsize)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d03b      	beq.n	8005f88 <wizchip_init+0x90>
   {
      tmp = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	73fb      	strb	r3, [r7, #15]
 8005f18:	e015      	b.n	8005f46 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	781a      	ldrb	r2, [r3, #0]
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	4413      	add	r3, r2
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	dd02      	ble.n	8005f3a <wizchip_init+0x42>
 8005f34:	f04f 33ff 	mov.w	r3, #4294967295
 8005f38:	e066      	b.n	8006008 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	3301      	adds	r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	73fb      	strb	r3, [r7, #15]
 8005f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f4a:	2b07      	cmp	r3, #7
 8005f4c:	dde5      	ble.n	8005f1a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
 8005f52:	e015      	b.n	8005f80 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005f62:	4618      	mov	r0, r3
 8005f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f7ff fb1a 	bl	80055a8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	73fb      	strb	r3, [r7, #15]
 8005f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f84:	2b07      	cmp	r3, #7
 8005f86:	dde5      	ble.n	8005f54 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d03b      	beq.n	8006006 <wizchip_init+0x10e>
   {
      tmp = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f92:	2300      	movs	r3, #0
 8005f94:	73fb      	strb	r3, [r7, #15]
 8005f96:	e015      	b.n	8005fc4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	781a      	ldrb	r2, [r3, #0]
 8005fa2:	7bbb      	ldrb	r3, [r7, #14]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fae:	2b10      	cmp	r3, #16
 8005fb0:	dd02      	ble.n	8005fb8 <wizchip_init+0xc0>
 8005fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb6:	e027      	b.n	8006008 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	73fb      	strb	r3, [r7, #15]
 8005fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc8:	2b07      	cmp	r3, #7
 8005fca:	dde5      	ble.n	8005f98 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e015      	b.n	8005ffe <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	3301      	adds	r3, #1
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	4413      	add	r3, r2
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	4619      	mov	r1, r3
 8005fee:	f7ff fadb 	bl	80055a8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	73fb      	strb	r3, [r7, #15]
 8005ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006002:	2b07      	cmp	r3, #7
 8006004:	dde5      	ble.n	8005fd2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	0a1b      	lsrs	r3, r3, #8
 8006022:	b29b      	uxth	r3, r3
 8006024:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	f023 030f 	bic.w	r3, r3, #15
 800602c:	b2db      	uxtb	r3, r3
 800602e:	4619      	mov	r1, r3
 8006030:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8006034:	f7ff fab8 	bl	80055a8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]
 800603c:	e014      	b.n	8006068 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800603e:	7bba      	ldrb	r2, [r7, #14]
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	fa42 f303 	asr.w	r3, r2, r3
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <wizchip_clrinterrupt+0x52>
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	3301      	adds	r3, #1
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800605a:	211f      	movs	r1, #31
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff faa3 	bl	80055a8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	3301      	adds	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	2b07      	cmp	r3, #7
 800606c:	d9e7      	bls.n	800603e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800608a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 800608e:	f7ff fa3f 	bl	8005510 <WIZCHIP_READ>
 8006092:	4603      	mov	r3, r0
 8006094:	f023 030f 	bic.w	r3, r3, #15
 8006098:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800609a:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 800609e:	f7ff fa37 	bl	8005510 <WIZCHIP_READ>
 80060a2:	4603      	mov	r3, r0
 80060a4:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80060a6:	79bb      	ldrb	r3, [r7, #6]
 80060a8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80060aa:	88bb      	ldrh	r3, [r7, #4]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	4413      	add	r3, r2
 80060b6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80060b8:	88bb      	ldrh	r3, [r7, #4]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	4603      	mov	r3, r0
 80060ca:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	4619      	mov	r1, r3
 80060dc:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80060e0:	f7ff fa62 	bl	80055a8 <WIZCHIP_WRITE>
   setSIMR(simr);
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	4619      	mov	r1, r3
 80060e8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80060ec:	f7ff fa5c 	bl	80055a8 <WIZCHIP_WRITE>
#endif   
}
 80060f0:	bf00      	nop
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800610a:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800610e:	f7ff f9ff 	bl	8005510 <WIZCHIP_READ>
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8006116:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800611a:	f7ff f9f9 	bl	8005510 <WIZCHIP_READ>
 800611e:	4603      	mov	r3, r0
 8006120:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8006122:	79bb      	ldrb	r3, [r7, #6]
 8006124:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006126:	88bb      	ldrh	r3, [r7, #4]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	b29a      	uxth	r2, r3
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	b29b      	uxth	r3, r3
 8006130:	4413      	add	r3, r2
 8006132:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006134:	88bb      	ldrh	r3, [r7, #4]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8006144:	2300      	movs	r3, #0
 8006146:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006148:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800614c:	f7ff f9e0 	bl	8005510 <WIZCHIP_READ>
 8006150:	4603      	mov	r3, r0
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800615a:	2301      	movs	r3, #1
 800615c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800615e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8006174:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006178:	f7ff f9ca 	bl	8005510 <WIZCHIP_READ>
 800617c:	4603      	mov	r3, r0
 800617e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006182:	2b30      	cmp	r3, #48	@ 0x30
 8006184:	d102      	bne.n	800618c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8006186:	2301      	movs	r3, #1
 8006188:	71fb      	strb	r3, [r7, #7]
 800618a:	e001      	b.n	8006190 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800618c:	2300      	movs	r3, #0
 800618e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8006190:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80061a2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80061a6:	f7ff f9b3 	bl	8005510 <WIZCHIP_READ>
 80061aa:	4603      	mov	r3, r0
 80061ac:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061b4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80061b6:	79fb      	ldrb	r3, [r7, #7]
 80061b8:	4619      	mov	r1, r3
 80061ba:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80061be:	f7ff f9f3 	bl	80055a8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80061c2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80061c6:	f7ff f9a3 	bl	8005510 <WIZCHIP_READ>
 80061ca:	4603      	mov	r3, r0
 80061cc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80061d4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	4619      	mov	r1, r3
 80061da:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80061de:	f7ff f9e3 	bl	80055a8 <WIZCHIP_WRITE>
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d104      	bne.n	8006208 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006204:	73fb      	strb	r3, [r7, #15]
 8006206:	e003      	b.n	8006210 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800620e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d104      	bne.n	8006222 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800621e:	73fb      	strb	r3, [r7, #15]
 8006220:	e019      	b.n	8006256 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	78db      	ldrb	r3, [r3, #3]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d10d      	bne.n	8006246 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	789b      	ldrb	r3, [r3, #2]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d104      	bne.n	800623c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	f043 0318 	orr.w	r3, r3, #24
 8006238:	73fb      	strb	r3, [r7, #15]
 800623a:	e00c      	b.n	8006256 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	f043 0308 	orr.w	r3, r3, #8
 8006242:	73fb      	strb	r3, [r7, #15]
 8006244:	e007      	b.n	8006256 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	789b      	ldrb	r3, [r3, #2]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d103      	bne.n	8006256 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	f043 0310 	orr.w	r3, r3, #16
 8006254:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	4619      	mov	r1, r3
 800625a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800625e:	f7ff f9a3 	bl	80055a8 <WIZCHIP_WRITE>
   wizphy_reset();
 8006262:	f7ff ff9b 	bl	800619c <wizphy_reset>
}
 8006266:	bf00      	nop
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800627c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006280:	f7ff f946 	bl	8005510 <WIZCHIP_READ>
 8006284:	4603      	mov	r3, r0
 8006286:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	119b      	asrs	r3, r3, #6
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	b2da      	uxtb	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800629e:	2b20      	cmp	r3, #32
 80062a0:	d001      	beq.n	80062a6 <wizphy_getphyconf+0x36>
 80062a2:	2b38      	cmp	r3, #56	@ 0x38
 80062a4:	d103      	bne.n	80062ae <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	705a      	strb	r2, [r3, #1]
         break;
 80062ac:	e003      	b.n	80062b6 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	705a      	strb	r2, [r3, #1]
         break;
 80062b4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062bc:	3b10      	subs	r3, #16
 80062be:	2b10      	cmp	r3, #16
 80062c0:	bf8c      	ite	hi
 80062c2:	2201      	movhi	r2, #1
 80062c4:	2200      	movls	r2, #0
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	2a00      	cmp	r2, #0
 80062ca:	d10f      	bne.n	80062ec <wizphy_getphyconf+0x7c>
 80062cc:	4a1b      	ldr	r2, [pc, #108]	@ (800633c <wizphy_getphyconf+0xcc>)
 80062ce:	fa22 f303 	lsr.w	r3, r2, r3
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bf14      	ite	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	2300      	moveq	r3, #0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	709a      	strb	r2, [r3, #2]
         break;
 80062ea:	e003      	b.n	80062f4 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	709a      	strb	r2, [r3, #2]
         break;
 80062f2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062fa:	3b08      	subs	r3, #8
 80062fc:	2b18      	cmp	r3, #24
 80062fe:	bf8c      	ite	hi
 8006300:	2201      	movhi	r2, #1
 8006302:	2200      	movls	r2, #0
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	2a00      	cmp	r2, #0
 8006308:	d10f      	bne.n	800632a <wizphy_getphyconf+0xba>
 800630a:	4a0d      	ldr	r2, [pc, #52]	@ (8006340 <wizphy_getphyconf+0xd0>)
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	bf14      	ite	ne
 8006318:	2301      	movne	r3, #1
 800631a:	2300      	moveq	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	70da      	strb	r2, [r3, #3]
         break;
 8006328:	e003      	b.n	8006332 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	70da      	strb	r2, [r3, #3]
         break;
 8006330:	bf00      	nop
   }
}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	00010101 	.word	0x00010101
 8006340:	01010001 	.word	0x01010001

08006344 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8006352:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006356:	f7ff f8db 	bl	8005510 <WIZCHIP_READ>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <wizphy_setphypmode+0x2a>
 8006368:	f04f 33ff 	mov.w	r3, #4294967295
 800636c:	e030      	b.n	80063d0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006374:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d104      	bne.n	8006386 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	e003      	b.n	800638e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800638c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	4619      	mov	r1, r3
 8006392:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006396:	f7ff f907 	bl	80055a8 <WIZCHIP_WRITE>
   wizphy_reset();
 800639a:	f7ff feff 	bl	800619c <wizphy_reset>
   tmp = getPHYCFGR();
 800639e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80063a2:	f7ff f8b5 	bl	8005510 <WIZCHIP_READ>
 80063a6:	4603      	mov	r3, r0
 80063a8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d106      	bne.n	80063be <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <wizphy_setphypmode+0x88>
 80063ba:	2300      	movs	r3, #0
 80063bc:	e008      	b.n	80063d0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <wizphy_setphypmode+0x88>
 80063c8:	2300      	movs	r3, #0
 80063ca:	e001      	b.n	80063d0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80063cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2206      	movs	r2, #6
 80063e4:	4619      	mov	r1, r3
 80063e6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80063ea:	f7ff f98b 	bl	8005704 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	330e      	adds	r3, #14
 80063f2:	2204      	movs	r2, #4
 80063f4:	4619      	mov	r1, r3
 80063f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80063fa:	f7ff f983 	bl	8005704 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	330a      	adds	r3, #10
 8006402:	2204      	movs	r2, #4
 8006404:	4619      	mov	r1, r3
 8006406:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800640a:	f7ff f97b 	bl	8005704 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3306      	adds	r3, #6
 8006412:	2204      	movs	r2, #4
 8006414:	4619      	mov	r1, r3
 8006416:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800641a:	f7ff f973 	bl	8005704 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	7c9a      	ldrb	r2, [r3, #18]
 8006422:	4b0b      	ldr	r3, [pc, #44]	@ (8006450 <wizchip_setnetinfo+0x78>)
 8006424:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	7cda      	ldrb	r2, [r3, #19]
 800642a:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <wizchip_setnetinfo+0x78>)
 800642c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	7d1a      	ldrb	r2, [r3, #20]
 8006432:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <wizchip_setnetinfo+0x78>)
 8006434:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	7d5a      	ldrb	r2, [r3, #21]
 800643a:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <wizchip_setnetinfo+0x78>)
 800643c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	7d9a      	ldrb	r2, [r3, #22]
 8006442:	4b04      	ldr	r3, [pc, #16]	@ (8006454 <wizchip_setnetinfo+0x7c>)
 8006444:	701a      	strb	r2, [r3, #0]
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20000820 	.word	0x20000820
 8006454:	20000824 	.word	0x20000824

08006458 <sbrk_aligned>:
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	4e0f      	ldr	r6, [pc, #60]	@ (8006498 <sbrk_aligned+0x40>)
 800645c:	460c      	mov	r4, r1
 800645e:	6831      	ldr	r1, [r6, #0]
 8006460:	4605      	mov	r5, r0
 8006462:	b911      	cbnz	r1, 800646a <sbrk_aligned+0x12>
 8006464:	f000 fb52 	bl	8006b0c <_sbrk_r>
 8006468:	6030      	str	r0, [r6, #0]
 800646a:	4621      	mov	r1, r4
 800646c:	4628      	mov	r0, r5
 800646e:	f000 fb4d 	bl	8006b0c <_sbrk_r>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d103      	bne.n	800647e <sbrk_aligned+0x26>
 8006476:	f04f 34ff 	mov.w	r4, #4294967295
 800647a:	4620      	mov	r0, r4
 800647c:	bd70      	pop	{r4, r5, r6, pc}
 800647e:	1cc4      	adds	r4, r0, #3
 8006480:	f024 0403 	bic.w	r4, r4, #3
 8006484:	42a0      	cmp	r0, r4
 8006486:	d0f8      	beq.n	800647a <sbrk_aligned+0x22>
 8006488:	1a21      	subs	r1, r4, r0
 800648a:	4628      	mov	r0, r5
 800648c:	f000 fb3e 	bl	8006b0c <_sbrk_r>
 8006490:	3001      	adds	r0, #1
 8006492:	d1f2      	bne.n	800647a <sbrk_aligned+0x22>
 8006494:	e7ef      	b.n	8006476 <sbrk_aligned+0x1e>
 8006496:	bf00      	nop
 8006498:	20000828 	.word	0x20000828

0800649c <_malloc_r>:
 800649c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a0:	1ccd      	adds	r5, r1, #3
 80064a2:	f025 0503 	bic.w	r5, r5, #3
 80064a6:	3508      	adds	r5, #8
 80064a8:	2d0c      	cmp	r5, #12
 80064aa:	bf38      	it	cc
 80064ac:	250c      	movcc	r5, #12
 80064ae:	2d00      	cmp	r5, #0
 80064b0:	4606      	mov	r6, r0
 80064b2:	db01      	blt.n	80064b8 <_malloc_r+0x1c>
 80064b4:	42a9      	cmp	r1, r5
 80064b6:	d904      	bls.n	80064c2 <_malloc_r+0x26>
 80064b8:	230c      	movs	r3, #12
 80064ba:	6033      	str	r3, [r6, #0]
 80064bc:	2000      	movs	r0, #0
 80064be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006598 <_malloc_r+0xfc>
 80064c6:	f000 f869 	bl	800659c <__malloc_lock>
 80064ca:	f8d8 3000 	ldr.w	r3, [r8]
 80064ce:	461c      	mov	r4, r3
 80064d0:	bb44      	cbnz	r4, 8006524 <_malloc_r+0x88>
 80064d2:	4629      	mov	r1, r5
 80064d4:	4630      	mov	r0, r6
 80064d6:	f7ff ffbf 	bl	8006458 <sbrk_aligned>
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	4604      	mov	r4, r0
 80064de:	d158      	bne.n	8006592 <_malloc_r+0xf6>
 80064e0:	f8d8 4000 	ldr.w	r4, [r8]
 80064e4:	4627      	mov	r7, r4
 80064e6:	2f00      	cmp	r7, #0
 80064e8:	d143      	bne.n	8006572 <_malloc_r+0xd6>
 80064ea:	2c00      	cmp	r4, #0
 80064ec:	d04b      	beq.n	8006586 <_malloc_r+0xea>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	4639      	mov	r1, r7
 80064f2:	4630      	mov	r0, r6
 80064f4:	eb04 0903 	add.w	r9, r4, r3
 80064f8:	f000 fb08 	bl	8006b0c <_sbrk_r>
 80064fc:	4581      	cmp	r9, r0
 80064fe:	d142      	bne.n	8006586 <_malloc_r+0xea>
 8006500:	6821      	ldr	r1, [r4, #0]
 8006502:	1a6d      	subs	r5, r5, r1
 8006504:	4629      	mov	r1, r5
 8006506:	4630      	mov	r0, r6
 8006508:	f7ff ffa6 	bl	8006458 <sbrk_aligned>
 800650c:	3001      	adds	r0, #1
 800650e:	d03a      	beq.n	8006586 <_malloc_r+0xea>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	442b      	add	r3, r5
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	f8d8 3000 	ldr.w	r3, [r8]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	bb62      	cbnz	r2, 8006578 <_malloc_r+0xdc>
 800651e:	f8c8 7000 	str.w	r7, [r8]
 8006522:	e00f      	b.n	8006544 <_malloc_r+0xa8>
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	1b52      	subs	r2, r2, r5
 8006528:	d420      	bmi.n	800656c <_malloc_r+0xd0>
 800652a:	2a0b      	cmp	r2, #11
 800652c:	d917      	bls.n	800655e <_malloc_r+0xc2>
 800652e:	1961      	adds	r1, r4, r5
 8006530:	42a3      	cmp	r3, r4
 8006532:	6025      	str	r5, [r4, #0]
 8006534:	bf18      	it	ne
 8006536:	6059      	strne	r1, [r3, #4]
 8006538:	6863      	ldr	r3, [r4, #4]
 800653a:	bf08      	it	eq
 800653c:	f8c8 1000 	streq.w	r1, [r8]
 8006540:	5162      	str	r2, [r4, r5]
 8006542:	604b      	str	r3, [r1, #4]
 8006544:	4630      	mov	r0, r6
 8006546:	f000 f82f 	bl	80065a8 <__malloc_unlock>
 800654a:	f104 000b 	add.w	r0, r4, #11
 800654e:	1d23      	adds	r3, r4, #4
 8006550:	f020 0007 	bic.w	r0, r0, #7
 8006554:	1ac2      	subs	r2, r0, r3
 8006556:	bf1c      	itt	ne
 8006558:	1a1b      	subne	r3, r3, r0
 800655a:	50a3      	strne	r3, [r4, r2]
 800655c:	e7af      	b.n	80064be <_malloc_r+0x22>
 800655e:	6862      	ldr	r2, [r4, #4]
 8006560:	42a3      	cmp	r3, r4
 8006562:	bf0c      	ite	eq
 8006564:	f8c8 2000 	streq.w	r2, [r8]
 8006568:	605a      	strne	r2, [r3, #4]
 800656a:	e7eb      	b.n	8006544 <_malloc_r+0xa8>
 800656c:	4623      	mov	r3, r4
 800656e:	6864      	ldr	r4, [r4, #4]
 8006570:	e7ae      	b.n	80064d0 <_malloc_r+0x34>
 8006572:	463c      	mov	r4, r7
 8006574:	687f      	ldr	r7, [r7, #4]
 8006576:	e7b6      	b.n	80064e6 <_malloc_r+0x4a>
 8006578:	461a      	mov	r2, r3
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	42a3      	cmp	r3, r4
 800657e:	d1fb      	bne.n	8006578 <_malloc_r+0xdc>
 8006580:	2300      	movs	r3, #0
 8006582:	6053      	str	r3, [r2, #4]
 8006584:	e7de      	b.n	8006544 <_malloc_r+0xa8>
 8006586:	230c      	movs	r3, #12
 8006588:	6033      	str	r3, [r6, #0]
 800658a:	4630      	mov	r0, r6
 800658c:	f000 f80c 	bl	80065a8 <__malloc_unlock>
 8006590:	e794      	b.n	80064bc <_malloc_r+0x20>
 8006592:	6005      	str	r5, [r0, #0]
 8006594:	e7d6      	b.n	8006544 <_malloc_r+0xa8>
 8006596:	bf00      	nop
 8006598:	2000082c 	.word	0x2000082c

0800659c <__malloc_lock>:
 800659c:	4801      	ldr	r0, [pc, #4]	@ (80065a4 <__malloc_lock+0x8>)
 800659e:	f000 bb02 	b.w	8006ba6 <__retarget_lock_acquire_recursive>
 80065a2:	bf00      	nop
 80065a4:	20000970 	.word	0x20000970

080065a8 <__malloc_unlock>:
 80065a8:	4801      	ldr	r0, [pc, #4]	@ (80065b0 <__malloc_unlock+0x8>)
 80065aa:	f000 bafd 	b.w	8006ba8 <__retarget_lock_release_recursive>
 80065ae:	bf00      	nop
 80065b0:	20000970 	.word	0x20000970

080065b4 <std>:
 80065b4:	2300      	movs	r3, #0
 80065b6:	b510      	push	{r4, lr}
 80065b8:	4604      	mov	r4, r0
 80065ba:	e9c0 3300 	strd	r3, r3, [r0]
 80065be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065c2:	6083      	str	r3, [r0, #8]
 80065c4:	8181      	strh	r1, [r0, #12]
 80065c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80065c8:	81c2      	strh	r2, [r0, #14]
 80065ca:	6183      	str	r3, [r0, #24]
 80065cc:	4619      	mov	r1, r3
 80065ce:	2208      	movs	r2, #8
 80065d0:	305c      	adds	r0, #92	@ 0x5c
 80065d2:	f000 fa4d 	bl	8006a70 <memset>
 80065d6:	4b0d      	ldr	r3, [pc, #52]	@ (800660c <std+0x58>)
 80065d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80065da:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <std+0x5c>)
 80065dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065de:	4b0d      	ldr	r3, [pc, #52]	@ (8006614 <std+0x60>)
 80065e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006618 <std+0x64>)
 80065e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80065e6:	4b0d      	ldr	r3, [pc, #52]	@ (800661c <std+0x68>)
 80065e8:	6224      	str	r4, [r4, #32]
 80065ea:	429c      	cmp	r4, r3
 80065ec:	d006      	beq.n	80065fc <std+0x48>
 80065ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065f2:	4294      	cmp	r4, r2
 80065f4:	d002      	beq.n	80065fc <std+0x48>
 80065f6:	33d0      	adds	r3, #208	@ 0xd0
 80065f8:	429c      	cmp	r4, r3
 80065fa:	d105      	bne.n	8006608 <std+0x54>
 80065fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006604:	f000 bace 	b.w	8006ba4 <__retarget_lock_init_recursive>
 8006608:	bd10      	pop	{r4, pc}
 800660a:	bf00      	nop
 800660c:	080068c1 	.word	0x080068c1
 8006610:	080068e3 	.word	0x080068e3
 8006614:	0800691b 	.word	0x0800691b
 8006618:	0800693f 	.word	0x0800693f
 800661c:	20000830 	.word	0x20000830

08006620 <stdio_exit_handler>:
 8006620:	4a02      	ldr	r2, [pc, #8]	@ (800662c <stdio_exit_handler+0xc>)
 8006622:	4903      	ldr	r1, [pc, #12]	@ (8006630 <stdio_exit_handler+0x10>)
 8006624:	4803      	ldr	r0, [pc, #12]	@ (8006634 <stdio_exit_handler+0x14>)
 8006626:	f000 b869 	b.w	80066fc <_fwalk_sglue>
 800662a:	bf00      	nop
 800662c:	200000c4 	.word	0x200000c4
 8006630:	080075b5 	.word	0x080075b5
 8006634:	200000d4 	.word	0x200000d4

08006638 <cleanup_stdio>:
 8006638:	6841      	ldr	r1, [r0, #4]
 800663a:	4b0c      	ldr	r3, [pc, #48]	@ (800666c <cleanup_stdio+0x34>)
 800663c:	4299      	cmp	r1, r3
 800663e:	b510      	push	{r4, lr}
 8006640:	4604      	mov	r4, r0
 8006642:	d001      	beq.n	8006648 <cleanup_stdio+0x10>
 8006644:	f000 ffb6 	bl	80075b4 <_fflush_r>
 8006648:	68a1      	ldr	r1, [r4, #8]
 800664a:	4b09      	ldr	r3, [pc, #36]	@ (8006670 <cleanup_stdio+0x38>)
 800664c:	4299      	cmp	r1, r3
 800664e:	d002      	beq.n	8006656 <cleanup_stdio+0x1e>
 8006650:	4620      	mov	r0, r4
 8006652:	f000 ffaf 	bl	80075b4 <_fflush_r>
 8006656:	68e1      	ldr	r1, [r4, #12]
 8006658:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <cleanup_stdio+0x3c>)
 800665a:	4299      	cmp	r1, r3
 800665c:	d004      	beq.n	8006668 <cleanup_stdio+0x30>
 800665e:	4620      	mov	r0, r4
 8006660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006664:	f000 bfa6 	b.w	80075b4 <_fflush_r>
 8006668:	bd10      	pop	{r4, pc}
 800666a:	bf00      	nop
 800666c:	20000830 	.word	0x20000830
 8006670:	20000898 	.word	0x20000898
 8006674:	20000900 	.word	0x20000900

08006678 <global_stdio_init.part.0>:
 8006678:	b510      	push	{r4, lr}
 800667a:	4b0b      	ldr	r3, [pc, #44]	@ (80066a8 <global_stdio_init.part.0+0x30>)
 800667c:	4c0b      	ldr	r4, [pc, #44]	@ (80066ac <global_stdio_init.part.0+0x34>)
 800667e:	4a0c      	ldr	r2, [pc, #48]	@ (80066b0 <global_stdio_init.part.0+0x38>)
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	4620      	mov	r0, r4
 8006684:	2200      	movs	r2, #0
 8006686:	2104      	movs	r1, #4
 8006688:	f7ff ff94 	bl	80065b4 <std>
 800668c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006690:	2201      	movs	r2, #1
 8006692:	2109      	movs	r1, #9
 8006694:	f7ff ff8e 	bl	80065b4 <std>
 8006698:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800669c:	2202      	movs	r2, #2
 800669e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a2:	2112      	movs	r1, #18
 80066a4:	f7ff bf86 	b.w	80065b4 <std>
 80066a8:	20000968 	.word	0x20000968
 80066ac:	20000830 	.word	0x20000830
 80066b0:	08006621 	.word	0x08006621

080066b4 <__sfp_lock_acquire>:
 80066b4:	4801      	ldr	r0, [pc, #4]	@ (80066bc <__sfp_lock_acquire+0x8>)
 80066b6:	f000 ba76 	b.w	8006ba6 <__retarget_lock_acquire_recursive>
 80066ba:	bf00      	nop
 80066bc:	20000971 	.word	0x20000971

080066c0 <__sfp_lock_release>:
 80066c0:	4801      	ldr	r0, [pc, #4]	@ (80066c8 <__sfp_lock_release+0x8>)
 80066c2:	f000 ba71 	b.w	8006ba8 <__retarget_lock_release_recursive>
 80066c6:	bf00      	nop
 80066c8:	20000971 	.word	0x20000971

080066cc <__sinit>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	4604      	mov	r4, r0
 80066d0:	f7ff fff0 	bl	80066b4 <__sfp_lock_acquire>
 80066d4:	6a23      	ldr	r3, [r4, #32]
 80066d6:	b11b      	cbz	r3, 80066e0 <__sinit+0x14>
 80066d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066dc:	f7ff bff0 	b.w	80066c0 <__sfp_lock_release>
 80066e0:	4b04      	ldr	r3, [pc, #16]	@ (80066f4 <__sinit+0x28>)
 80066e2:	6223      	str	r3, [r4, #32]
 80066e4:	4b04      	ldr	r3, [pc, #16]	@ (80066f8 <__sinit+0x2c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f5      	bne.n	80066d8 <__sinit+0xc>
 80066ec:	f7ff ffc4 	bl	8006678 <global_stdio_init.part.0>
 80066f0:	e7f2      	b.n	80066d8 <__sinit+0xc>
 80066f2:	bf00      	nop
 80066f4:	08006639 	.word	0x08006639
 80066f8:	20000968 	.word	0x20000968

080066fc <_fwalk_sglue>:
 80066fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006700:	4607      	mov	r7, r0
 8006702:	4688      	mov	r8, r1
 8006704:	4614      	mov	r4, r2
 8006706:	2600      	movs	r6, #0
 8006708:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800670c:	f1b9 0901 	subs.w	r9, r9, #1
 8006710:	d505      	bpl.n	800671e <_fwalk_sglue+0x22>
 8006712:	6824      	ldr	r4, [r4, #0]
 8006714:	2c00      	cmp	r4, #0
 8006716:	d1f7      	bne.n	8006708 <_fwalk_sglue+0xc>
 8006718:	4630      	mov	r0, r6
 800671a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800671e:	89ab      	ldrh	r3, [r5, #12]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d907      	bls.n	8006734 <_fwalk_sglue+0x38>
 8006724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006728:	3301      	adds	r3, #1
 800672a:	d003      	beq.n	8006734 <_fwalk_sglue+0x38>
 800672c:	4629      	mov	r1, r5
 800672e:	4638      	mov	r0, r7
 8006730:	47c0      	blx	r8
 8006732:	4306      	orrs	r6, r0
 8006734:	3568      	adds	r5, #104	@ 0x68
 8006736:	e7e9      	b.n	800670c <_fwalk_sglue+0x10>

08006738 <iprintf>:
 8006738:	b40f      	push	{r0, r1, r2, r3}
 800673a:	b507      	push	{r0, r1, r2, lr}
 800673c:	4906      	ldr	r1, [pc, #24]	@ (8006758 <iprintf+0x20>)
 800673e:	ab04      	add	r3, sp, #16
 8006740:	6808      	ldr	r0, [r1, #0]
 8006742:	f853 2b04 	ldr.w	r2, [r3], #4
 8006746:	6881      	ldr	r1, [r0, #8]
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	f000 fc09 	bl	8006f60 <_vfiprintf_r>
 800674e:	b003      	add	sp, #12
 8006750:	f85d eb04 	ldr.w	lr, [sp], #4
 8006754:	b004      	add	sp, #16
 8006756:	4770      	bx	lr
 8006758:	200000d0 	.word	0x200000d0

0800675c <_puts_r>:
 800675c:	6a03      	ldr	r3, [r0, #32]
 800675e:	b570      	push	{r4, r5, r6, lr}
 8006760:	6884      	ldr	r4, [r0, #8]
 8006762:	4605      	mov	r5, r0
 8006764:	460e      	mov	r6, r1
 8006766:	b90b      	cbnz	r3, 800676c <_puts_r+0x10>
 8006768:	f7ff ffb0 	bl	80066cc <__sinit>
 800676c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800676e:	07db      	lsls	r3, r3, #31
 8006770:	d405      	bmi.n	800677e <_puts_r+0x22>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	0598      	lsls	r0, r3, #22
 8006776:	d402      	bmi.n	800677e <_puts_r+0x22>
 8006778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800677a:	f000 fa14 	bl	8006ba6 <__retarget_lock_acquire_recursive>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	0719      	lsls	r1, r3, #28
 8006782:	d502      	bpl.n	800678a <_puts_r+0x2e>
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d135      	bne.n	80067f6 <_puts_r+0x9a>
 800678a:	4621      	mov	r1, r4
 800678c:	4628      	mov	r0, r5
 800678e:	f000 f919 	bl	80069c4 <__swsetup_r>
 8006792:	b380      	cbz	r0, 80067f6 <_puts_r+0x9a>
 8006794:	f04f 35ff 	mov.w	r5, #4294967295
 8006798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800679a:	07da      	lsls	r2, r3, #31
 800679c:	d405      	bmi.n	80067aa <_puts_r+0x4e>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	059b      	lsls	r3, r3, #22
 80067a2:	d402      	bmi.n	80067aa <_puts_r+0x4e>
 80067a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067a6:	f000 f9ff 	bl	8006ba8 <__retarget_lock_release_recursive>
 80067aa:	4628      	mov	r0, r5
 80067ac:	bd70      	pop	{r4, r5, r6, pc}
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da04      	bge.n	80067bc <_puts_r+0x60>
 80067b2:	69a2      	ldr	r2, [r4, #24]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	dc17      	bgt.n	80067e8 <_puts_r+0x8c>
 80067b8:	290a      	cmp	r1, #10
 80067ba:	d015      	beq.n	80067e8 <_puts_r+0x8c>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	6022      	str	r2, [r4, #0]
 80067c2:	7019      	strb	r1, [r3, #0]
 80067c4:	68a3      	ldr	r3, [r4, #8]
 80067c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067ca:	3b01      	subs	r3, #1
 80067cc:	60a3      	str	r3, [r4, #8]
 80067ce:	2900      	cmp	r1, #0
 80067d0:	d1ed      	bne.n	80067ae <_puts_r+0x52>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da11      	bge.n	80067fa <_puts_r+0x9e>
 80067d6:	4622      	mov	r2, r4
 80067d8:	210a      	movs	r1, #10
 80067da:	4628      	mov	r0, r5
 80067dc:	f000 f8b3 	bl	8006946 <__swbuf_r>
 80067e0:	3001      	adds	r0, #1
 80067e2:	d0d7      	beq.n	8006794 <_puts_r+0x38>
 80067e4:	250a      	movs	r5, #10
 80067e6:	e7d7      	b.n	8006798 <_puts_r+0x3c>
 80067e8:	4622      	mov	r2, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 f8ab 	bl	8006946 <__swbuf_r>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d1e7      	bne.n	80067c4 <_puts_r+0x68>
 80067f4:	e7ce      	b.n	8006794 <_puts_r+0x38>
 80067f6:	3e01      	subs	r6, #1
 80067f8:	e7e4      	b.n	80067c4 <_puts_r+0x68>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	220a      	movs	r2, #10
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	e7ee      	b.n	80067e4 <_puts_r+0x88>
	...

08006808 <puts>:
 8006808:	4b02      	ldr	r3, [pc, #8]	@ (8006814 <puts+0xc>)
 800680a:	4601      	mov	r1, r0
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	f7ff bfa5 	b.w	800675c <_puts_r>
 8006812:	bf00      	nop
 8006814:	200000d0 	.word	0x200000d0

08006818 <sniprintf>:
 8006818:	b40c      	push	{r2, r3}
 800681a:	b530      	push	{r4, r5, lr}
 800681c:	4b17      	ldr	r3, [pc, #92]	@ (800687c <sniprintf+0x64>)
 800681e:	1e0c      	subs	r4, r1, #0
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	b09d      	sub	sp, #116	@ 0x74
 8006824:	da08      	bge.n	8006838 <sniprintf+0x20>
 8006826:	238b      	movs	r3, #139	@ 0x8b
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	f04f 30ff 	mov.w	r0, #4294967295
 800682e:	b01d      	add	sp, #116	@ 0x74
 8006830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006834:	b002      	add	sp, #8
 8006836:	4770      	bx	lr
 8006838:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800683c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006840:	bf14      	ite	ne
 8006842:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006846:	4623      	moveq	r3, r4
 8006848:	9304      	str	r3, [sp, #16]
 800684a:	9307      	str	r3, [sp, #28]
 800684c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006850:	9002      	str	r0, [sp, #8]
 8006852:	9006      	str	r0, [sp, #24]
 8006854:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006858:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800685a:	ab21      	add	r3, sp, #132	@ 0x84
 800685c:	a902      	add	r1, sp, #8
 800685e:	4628      	mov	r0, r5
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	f000 fa57 	bl	8006d14 <_svfiprintf_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	bfbc      	itt	lt
 800686a:	238b      	movlt	r3, #139	@ 0x8b
 800686c:	602b      	strlt	r3, [r5, #0]
 800686e:	2c00      	cmp	r4, #0
 8006870:	d0dd      	beq.n	800682e <sniprintf+0x16>
 8006872:	9b02      	ldr	r3, [sp, #8]
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	e7d9      	b.n	800682e <sniprintf+0x16>
 800687a:	bf00      	nop
 800687c:	200000d0 	.word	0x200000d0

08006880 <siprintf>:
 8006880:	b40e      	push	{r1, r2, r3}
 8006882:	b500      	push	{lr}
 8006884:	b09c      	sub	sp, #112	@ 0x70
 8006886:	ab1d      	add	r3, sp, #116	@ 0x74
 8006888:	9002      	str	r0, [sp, #8]
 800688a:	9006      	str	r0, [sp, #24]
 800688c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006890:	4809      	ldr	r0, [pc, #36]	@ (80068b8 <siprintf+0x38>)
 8006892:	9107      	str	r1, [sp, #28]
 8006894:	9104      	str	r1, [sp, #16]
 8006896:	4909      	ldr	r1, [pc, #36]	@ (80068bc <siprintf+0x3c>)
 8006898:	f853 2b04 	ldr.w	r2, [r3], #4
 800689c:	9105      	str	r1, [sp, #20]
 800689e:	6800      	ldr	r0, [r0, #0]
 80068a0:	9301      	str	r3, [sp, #4]
 80068a2:	a902      	add	r1, sp, #8
 80068a4:	f000 fa36 	bl	8006d14 <_svfiprintf_r>
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	b01c      	add	sp, #112	@ 0x70
 80068b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068b4:	b003      	add	sp, #12
 80068b6:	4770      	bx	lr
 80068b8:	200000d0 	.word	0x200000d0
 80068bc:	ffff0208 	.word	0xffff0208

080068c0 <__sread>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	460c      	mov	r4, r1
 80068c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c8:	f000 f90e 	bl	8006ae8 <_read_r>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	bfab      	itete	ge
 80068d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068d2:	89a3      	ldrhlt	r3, [r4, #12]
 80068d4:	181b      	addge	r3, r3, r0
 80068d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068da:	bfac      	ite	ge
 80068dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068de:	81a3      	strhlt	r3, [r4, #12]
 80068e0:	bd10      	pop	{r4, pc}

080068e2 <__swrite>:
 80068e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e6:	461f      	mov	r7, r3
 80068e8:	898b      	ldrh	r3, [r1, #12]
 80068ea:	05db      	lsls	r3, r3, #23
 80068ec:	4605      	mov	r5, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	4616      	mov	r6, r2
 80068f2:	d505      	bpl.n	8006900 <__swrite+0x1e>
 80068f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f8:	2302      	movs	r3, #2
 80068fa:	2200      	movs	r2, #0
 80068fc:	f000 f8e2 	bl	8006ac4 <_lseek_r>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	4632      	mov	r2, r6
 800690e:	463b      	mov	r3, r7
 8006910:	4628      	mov	r0, r5
 8006912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006916:	f000 b909 	b.w	8006b2c <_write_r>

0800691a <__sseek>:
 800691a:	b510      	push	{r4, lr}
 800691c:	460c      	mov	r4, r1
 800691e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006922:	f000 f8cf 	bl	8006ac4 <_lseek_r>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	bf15      	itete	ne
 800692c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800692e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006936:	81a3      	strheq	r3, [r4, #12]
 8006938:	bf18      	it	ne
 800693a:	81a3      	strhne	r3, [r4, #12]
 800693c:	bd10      	pop	{r4, pc}

0800693e <__sclose>:
 800693e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006942:	f000 b8af 	b.w	8006aa4 <_close_r>

08006946 <__swbuf_r>:
 8006946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006948:	460e      	mov	r6, r1
 800694a:	4614      	mov	r4, r2
 800694c:	4605      	mov	r5, r0
 800694e:	b118      	cbz	r0, 8006958 <__swbuf_r+0x12>
 8006950:	6a03      	ldr	r3, [r0, #32]
 8006952:	b90b      	cbnz	r3, 8006958 <__swbuf_r+0x12>
 8006954:	f7ff feba 	bl	80066cc <__sinit>
 8006958:	69a3      	ldr	r3, [r4, #24]
 800695a:	60a3      	str	r3, [r4, #8]
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	071a      	lsls	r2, r3, #28
 8006960:	d501      	bpl.n	8006966 <__swbuf_r+0x20>
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	b943      	cbnz	r3, 8006978 <__swbuf_r+0x32>
 8006966:	4621      	mov	r1, r4
 8006968:	4628      	mov	r0, r5
 800696a:	f000 f82b 	bl	80069c4 <__swsetup_r>
 800696e:	b118      	cbz	r0, 8006978 <__swbuf_r+0x32>
 8006970:	f04f 37ff 	mov.w	r7, #4294967295
 8006974:	4638      	mov	r0, r7
 8006976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	6922      	ldr	r2, [r4, #16]
 800697c:	1a98      	subs	r0, r3, r2
 800697e:	6963      	ldr	r3, [r4, #20]
 8006980:	b2f6      	uxtb	r6, r6
 8006982:	4283      	cmp	r3, r0
 8006984:	4637      	mov	r7, r6
 8006986:	dc05      	bgt.n	8006994 <__swbuf_r+0x4e>
 8006988:	4621      	mov	r1, r4
 800698a:	4628      	mov	r0, r5
 800698c:	f000 fe12 	bl	80075b4 <_fflush_r>
 8006990:	2800      	cmp	r0, #0
 8006992:	d1ed      	bne.n	8006970 <__swbuf_r+0x2a>
 8006994:	68a3      	ldr	r3, [r4, #8]
 8006996:	3b01      	subs	r3, #1
 8006998:	60a3      	str	r3, [r4, #8]
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	6022      	str	r2, [r4, #0]
 80069a0:	701e      	strb	r6, [r3, #0]
 80069a2:	6962      	ldr	r2, [r4, #20]
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d004      	beq.n	80069b4 <__swbuf_r+0x6e>
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	07db      	lsls	r3, r3, #31
 80069ae:	d5e1      	bpl.n	8006974 <__swbuf_r+0x2e>
 80069b0:	2e0a      	cmp	r6, #10
 80069b2:	d1df      	bne.n	8006974 <__swbuf_r+0x2e>
 80069b4:	4621      	mov	r1, r4
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 fdfc 	bl	80075b4 <_fflush_r>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d0d9      	beq.n	8006974 <__swbuf_r+0x2e>
 80069c0:	e7d6      	b.n	8006970 <__swbuf_r+0x2a>
	...

080069c4 <__swsetup_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4b29      	ldr	r3, [pc, #164]	@ (8006a6c <__swsetup_r+0xa8>)
 80069c8:	4605      	mov	r5, r0
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	460c      	mov	r4, r1
 80069ce:	b118      	cbz	r0, 80069d8 <__swsetup_r+0x14>
 80069d0:	6a03      	ldr	r3, [r0, #32]
 80069d2:	b90b      	cbnz	r3, 80069d8 <__swsetup_r+0x14>
 80069d4:	f7ff fe7a 	bl	80066cc <__sinit>
 80069d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069dc:	0719      	lsls	r1, r3, #28
 80069de:	d422      	bmi.n	8006a26 <__swsetup_r+0x62>
 80069e0:	06da      	lsls	r2, r3, #27
 80069e2:	d407      	bmi.n	80069f4 <__swsetup_r+0x30>
 80069e4:	2209      	movs	r2, #9
 80069e6:	602a      	str	r2, [r5, #0]
 80069e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ec:	81a3      	strh	r3, [r4, #12]
 80069ee:	f04f 30ff 	mov.w	r0, #4294967295
 80069f2:	e033      	b.n	8006a5c <__swsetup_r+0x98>
 80069f4:	0758      	lsls	r0, r3, #29
 80069f6:	d512      	bpl.n	8006a1e <__swsetup_r+0x5a>
 80069f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069fa:	b141      	cbz	r1, 8006a0e <__swsetup_r+0x4a>
 80069fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a00:	4299      	cmp	r1, r3
 8006a02:	d002      	beq.n	8006a0a <__swsetup_r+0x46>
 8006a04:	4628      	mov	r0, r5
 8006a06:	f000 f8df 	bl	8006bc8 <_free_r>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	2300      	movs	r3, #0
 8006a18:	6063      	str	r3, [r4, #4]
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	f043 0308 	orr.w	r3, r3, #8
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	b94b      	cbnz	r3, 8006a3e <__swsetup_r+0x7a>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a34:	d003      	beq.n	8006a3e <__swsetup_r+0x7a>
 8006a36:	4621      	mov	r1, r4
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f000 fe09 	bl	8007650 <__smakebuf_r>
 8006a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a42:	f013 0201 	ands.w	r2, r3, #1
 8006a46:	d00a      	beq.n	8006a5e <__swsetup_r+0x9a>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	60a2      	str	r2, [r4, #8]
 8006a4c:	6962      	ldr	r2, [r4, #20]
 8006a4e:	4252      	negs	r2, r2
 8006a50:	61a2      	str	r2, [r4, #24]
 8006a52:	6922      	ldr	r2, [r4, #16]
 8006a54:	b942      	cbnz	r2, 8006a68 <__swsetup_r+0xa4>
 8006a56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a5a:	d1c5      	bne.n	80069e8 <__swsetup_r+0x24>
 8006a5c:	bd38      	pop	{r3, r4, r5, pc}
 8006a5e:	0799      	lsls	r1, r3, #30
 8006a60:	bf58      	it	pl
 8006a62:	6962      	ldrpl	r2, [r4, #20]
 8006a64:	60a2      	str	r2, [r4, #8]
 8006a66:	e7f4      	b.n	8006a52 <__swsetup_r+0x8e>
 8006a68:	2000      	movs	r0, #0
 8006a6a:	e7f7      	b.n	8006a5c <__swsetup_r+0x98>
 8006a6c:	200000d0 	.word	0x200000d0

08006a70 <memset>:
 8006a70:	4402      	add	r2, r0
 8006a72:	4603      	mov	r3, r0
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d100      	bne.n	8006a7a <memset+0xa>
 8006a78:	4770      	bx	lr
 8006a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7e:	e7f9      	b.n	8006a74 <memset+0x4>

08006a80 <strncmp>:
 8006a80:	b510      	push	{r4, lr}
 8006a82:	b16a      	cbz	r2, 8006aa0 <strncmp+0x20>
 8006a84:	3901      	subs	r1, #1
 8006a86:	1884      	adds	r4, r0, r2
 8006a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d103      	bne.n	8006a9c <strncmp+0x1c>
 8006a94:	42a0      	cmp	r0, r4
 8006a96:	d001      	beq.n	8006a9c <strncmp+0x1c>
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	d1f5      	bne.n	8006a88 <strncmp+0x8>
 8006a9c:	1ad0      	subs	r0, r2, r3
 8006a9e:	bd10      	pop	{r4, pc}
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	e7fc      	b.n	8006a9e <strncmp+0x1e>

08006aa4 <_close_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d06      	ldr	r5, [pc, #24]	@ (8006ac0 <_close_r+0x1c>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	f7fb fe57 	bl	8002762 <_close>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_close_r+0x1a>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_close_r+0x1a>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	2000096c 	.word	0x2000096c

08006ac4 <_lseek_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d07      	ldr	r5, [pc, #28]	@ (8006ae4 <_lseek_r+0x20>)
 8006ac8:	4604      	mov	r4, r0
 8006aca:	4608      	mov	r0, r1
 8006acc:	4611      	mov	r1, r2
 8006ace:	2200      	movs	r2, #0
 8006ad0:	602a      	str	r2, [r5, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f7fb fe6c 	bl	80027b0 <_lseek>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_lseek_r+0x1e>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_lseek_r+0x1e>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	2000096c 	.word	0x2000096c

08006ae8 <_read_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4d07      	ldr	r5, [pc, #28]	@ (8006b08 <_read_r+0x20>)
 8006aec:	4604      	mov	r4, r0
 8006aee:	4608      	mov	r0, r1
 8006af0:	4611      	mov	r1, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	602a      	str	r2, [r5, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f7fb fdfa 	bl	80026f0 <_read>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_read_r+0x1e>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_read_r+0x1e>
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	2000096c 	.word	0x2000096c

08006b0c <_sbrk_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4d06      	ldr	r5, [pc, #24]	@ (8006b28 <_sbrk_r+0x1c>)
 8006b10:	2300      	movs	r3, #0
 8006b12:	4604      	mov	r4, r0
 8006b14:	4608      	mov	r0, r1
 8006b16:	602b      	str	r3, [r5, #0]
 8006b18:	f7fb fe58 	bl	80027cc <_sbrk>
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d102      	bne.n	8006b26 <_sbrk_r+0x1a>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	b103      	cbz	r3, 8006b26 <_sbrk_r+0x1a>
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	2000096c 	.word	0x2000096c

08006b2c <_write_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4d07      	ldr	r5, [pc, #28]	@ (8006b4c <_write_r+0x20>)
 8006b30:	4604      	mov	r4, r0
 8006b32:	4608      	mov	r0, r1
 8006b34:	4611      	mov	r1, r2
 8006b36:	2200      	movs	r2, #0
 8006b38:	602a      	str	r2, [r5, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f7fb fdf5 	bl	800272a <_write>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_write_r+0x1e>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_write_r+0x1e>
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	2000096c 	.word	0x2000096c

08006b50 <__errno>:
 8006b50:	4b01      	ldr	r3, [pc, #4]	@ (8006b58 <__errno+0x8>)
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	200000d0 	.word	0x200000d0

08006b5c <__libc_init_array>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8006b94 <__libc_init_array+0x38>)
 8006b60:	4c0d      	ldr	r4, [pc, #52]	@ (8006b98 <__libc_init_array+0x3c>)
 8006b62:	1b64      	subs	r4, r4, r5
 8006b64:	10a4      	asrs	r4, r4, #2
 8006b66:	2600      	movs	r6, #0
 8006b68:	42a6      	cmp	r6, r4
 8006b6a:	d109      	bne.n	8006b80 <__libc_init_array+0x24>
 8006b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8006b9c <__libc_init_array+0x40>)
 8006b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ba0 <__libc_init_array+0x44>)
 8006b70:	f000 fe1c 	bl	80077ac <_init>
 8006b74:	1b64      	subs	r4, r4, r5
 8006b76:	10a4      	asrs	r4, r4, #2
 8006b78:	2600      	movs	r6, #0
 8006b7a:	42a6      	cmp	r6, r4
 8006b7c:	d105      	bne.n	8006b8a <__libc_init_array+0x2e>
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b84:	4798      	blx	r3
 8006b86:	3601      	adds	r6, #1
 8006b88:	e7ee      	b.n	8006b68 <__libc_init_array+0xc>
 8006b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8e:	4798      	blx	r3
 8006b90:	3601      	adds	r6, #1
 8006b92:	e7f2      	b.n	8006b7a <__libc_init_array+0x1e>
 8006b94:	08007b4c 	.word	0x08007b4c
 8006b98:	08007b4c 	.word	0x08007b4c
 8006b9c:	08007b4c 	.word	0x08007b4c
 8006ba0:	08007b50 	.word	0x08007b50

08006ba4 <__retarget_lock_init_recursive>:
 8006ba4:	4770      	bx	lr

08006ba6 <__retarget_lock_acquire_recursive>:
 8006ba6:	4770      	bx	lr

08006ba8 <__retarget_lock_release_recursive>:
 8006ba8:	4770      	bx	lr

08006baa <memcpy>:
 8006baa:	440a      	add	r2, r1
 8006bac:	4291      	cmp	r1, r2
 8006bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bb2:	d100      	bne.n	8006bb6 <memcpy+0xc>
 8006bb4:	4770      	bx	lr
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc0:	4291      	cmp	r1, r2
 8006bc2:	d1f9      	bne.n	8006bb8 <memcpy+0xe>
 8006bc4:	bd10      	pop	{r4, pc}
	...

08006bc8 <_free_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4605      	mov	r5, r0
 8006bcc:	2900      	cmp	r1, #0
 8006bce:	d041      	beq.n	8006c54 <_free_r+0x8c>
 8006bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd4:	1f0c      	subs	r4, r1, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bfb8      	it	lt
 8006bda:	18e4      	addlt	r4, r4, r3
 8006bdc:	f7ff fcde 	bl	800659c <__malloc_lock>
 8006be0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c58 <_free_r+0x90>)
 8006be2:	6813      	ldr	r3, [r2, #0]
 8006be4:	b933      	cbnz	r3, 8006bf4 <_free_r+0x2c>
 8006be6:	6063      	str	r3, [r4, #4]
 8006be8:	6014      	str	r4, [r2, #0]
 8006bea:	4628      	mov	r0, r5
 8006bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bf0:	f7ff bcda 	b.w	80065a8 <__malloc_unlock>
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d908      	bls.n	8006c0a <_free_r+0x42>
 8006bf8:	6820      	ldr	r0, [r4, #0]
 8006bfa:	1821      	adds	r1, r4, r0
 8006bfc:	428b      	cmp	r3, r1
 8006bfe:	bf01      	itttt	eq
 8006c00:	6819      	ldreq	r1, [r3, #0]
 8006c02:	685b      	ldreq	r3, [r3, #4]
 8006c04:	1809      	addeq	r1, r1, r0
 8006c06:	6021      	streq	r1, [r4, #0]
 8006c08:	e7ed      	b.n	8006be6 <_free_r+0x1e>
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	b10b      	cbz	r3, 8006c14 <_free_r+0x4c>
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d9fa      	bls.n	8006c0a <_free_r+0x42>
 8006c14:	6811      	ldr	r1, [r2, #0]
 8006c16:	1850      	adds	r0, r2, r1
 8006c18:	42a0      	cmp	r0, r4
 8006c1a:	d10b      	bne.n	8006c34 <_free_r+0x6c>
 8006c1c:	6820      	ldr	r0, [r4, #0]
 8006c1e:	4401      	add	r1, r0
 8006c20:	1850      	adds	r0, r2, r1
 8006c22:	4283      	cmp	r3, r0
 8006c24:	6011      	str	r1, [r2, #0]
 8006c26:	d1e0      	bne.n	8006bea <_free_r+0x22>
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	6053      	str	r3, [r2, #4]
 8006c2e:	4408      	add	r0, r1
 8006c30:	6010      	str	r0, [r2, #0]
 8006c32:	e7da      	b.n	8006bea <_free_r+0x22>
 8006c34:	d902      	bls.n	8006c3c <_free_r+0x74>
 8006c36:	230c      	movs	r3, #12
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	e7d6      	b.n	8006bea <_free_r+0x22>
 8006c3c:	6820      	ldr	r0, [r4, #0]
 8006c3e:	1821      	adds	r1, r4, r0
 8006c40:	428b      	cmp	r3, r1
 8006c42:	bf04      	itt	eq
 8006c44:	6819      	ldreq	r1, [r3, #0]
 8006c46:	685b      	ldreq	r3, [r3, #4]
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	bf04      	itt	eq
 8006c4c:	1809      	addeq	r1, r1, r0
 8006c4e:	6021      	streq	r1, [r4, #0]
 8006c50:	6054      	str	r4, [r2, #4]
 8006c52:	e7ca      	b.n	8006bea <_free_r+0x22>
 8006c54:	bd38      	pop	{r3, r4, r5, pc}
 8006c56:	bf00      	nop
 8006c58:	2000082c 	.word	0x2000082c

08006c5c <__ssputs_r>:
 8006c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c60:	688e      	ldr	r6, [r1, #8]
 8006c62:	461f      	mov	r7, r3
 8006c64:	42be      	cmp	r6, r7
 8006c66:	680b      	ldr	r3, [r1, #0]
 8006c68:	4682      	mov	sl, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	4690      	mov	r8, r2
 8006c6e:	d82d      	bhi.n	8006ccc <__ssputs_r+0x70>
 8006c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c78:	d026      	beq.n	8006cc8 <__ssputs_r+0x6c>
 8006c7a:	6965      	ldr	r5, [r4, #20]
 8006c7c:	6909      	ldr	r1, [r1, #16]
 8006c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c82:	eba3 0901 	sub.w	r9, r3, r1
 8006c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c8a:	1c7b      	adds	r3, r7, #1
 8006c8c:	444b      	add	r3, r9
 8006c8e:	106d      	asrs	r5, r5, #1
 8006c90:	429d      	cmp	r5, r3
 8006c92:	bf38      	it	cc
 8006c94:	461d      	movcc	r5, r3
 8006c96:	0553      	lsls	r3, r2, #21
 8006c98:	d527      	bpl.n	8006cea <__ssputs_r+0x8e>
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	f7ff fbfe 	bl	800649c <_malloc_r>
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	b360      	cbz	r0, 8006cfe <__ssputs_r+0xa2>
 8006ca4:	6921      	ldr	r1, [r4, #16]
 8006ca6:	464a      	mov	r2, r9
 8006ca8:	f7ff ff7f 	bl	8006baa <memcpy>
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	6126      	str	r6, [r4, #16]
 8006cba:	6165      	str	r5, [r4, #20]
 8006cbc:	444e      	add	r6, r9
 8006cbe:	eba5 0509 	sub.w	r5, r5, r9
 8006cc2:	6026      	str	r6, [r4, #0]
 8006cc4:	60a5      	str	r5, [r4, #8]
 8006cc6:	463e      	mov	r6, r7
 8006cc8:	42be      	cmp	r6, r7
 8006cca:	d900      	bls.n	8006cce <__ssputs_r+0x72>
 8006ccc:	463e      	mov	r6, r7
 8006cce:	6820      	ldr	r0, [r4, #0]
 8006cd0:	4632      	mov	r2, r6
 8006cd2:	4641      	mov	r1, r8
 8006cd4:	f000 fcf8 	bl	80076c8 <memmove>
 8006cd8:	68a3      	ldr	r3, [r4, #8]
 8006cda:	1b9b      	subs	r3, r3, r6
 8006cdc:	60a3      	str	r3, [r4, #8]
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	4433      	add	r3, r6
 8006ce2:	6023      	str	r3, [r4, #0]
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cea:	462a      	mov	r2, r5
 8006cec:	f000 fd28 	bl	8007740 <_realloc_r>
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d1e0      	bne.n	8006cb8 <__ssputs_r+0x5c>
 8006cf6:	6921      	ldr	r1, [r4, #16]
 8006cf8:	4650      	mov	r0, sl
 8006cfa:	f7ff ff65 	bl	8006bc8 <_free_r>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	f8ca 3000 	str.w	r3, [sl]
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	e7e9      	b.n	8006ce6 <__ssputs_r+0x8a>
	...

08006d14 <_svfiprintf_r>:
 8006d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	4698      	mov	r8, r3
 8006d1a:	898b      	ldrh	r3, [r1, #12]
 8006d1c:	061b      	lsls	r3, r3, #24
 8006d1e:	b09d      	sub	sp, #116	@ 0x74
 8006d20:	4607      	mov	r7, r0
 8006d22:	460d      	mov	r5, r1
 8006d24:	4614      	mov	r4, r2
 8006d26:	d510      	bpl.n	8006d4a <_svfiprintf_r+0x36>
 8006d28:	690b      	ldr	r3, [r1, #16]
 8006d2a:	b973      	cbnz	r3, 8006d4a <_svfiprintf_r+0x36>
 8006d2c:	2140      	movs	r1, #64	@ 0x40
 8006d2e:	f7ff fbb5 	bl	800649c <_malloc_r>
 8006d32:	6028      	str	r0, [r5, #0]
 8006d34:	6128      	str	r0, [r5, #16]
 8006d36:	b930      	cbnz	r0, 8006d46 <_svfiprintf_r+0x32>
 8006d38:	230c      	movs	r3, #12
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	b01d      	add	sp, #116	@ 0x74
 8006d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d46:	2340      	movs	r3, #64	@ 0x40
 8006d48:	616b      	str	r3, [r5, #20]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d4e:	2320      	movs	r3, #32
 8006d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d58:	2330      	movs	r3, #48	@ 0x30
 8006d5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ef8 <_svfiprintf_r+0x1e4>
 8006d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d62:	f04f 0901 	mov.w	r9, #1
 8006d66:	4623      	mov	r3, r4
 8006d68:	469a      	mov	sl, r3
 8006d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d6e:	b10a      	cbz	r2, 8006d74 <_svfiprintf_r+0x60>
 8006d70:	2a25      	cmp	r2, #37	@ 0x25
 8006d72:	d1f9      	bne.n	8006d68 <_svfiprintf_r+0x54>
 8006d74:	ebba 0b04 	subs.w	fp, sl, r4
 8006d78:	d00b      	beq.n	8006d92 <_svfiprintf_r+0x7e>
 8006d7a:	465b      	mov	r3, fp
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	4638      	mov	r0, r7
 8006d82:	f7ff ff6b 	bl	8006c5c <__ssputs_r>
 8006d86:	3001      	adds	r0, #1
 8006d88:	f000 80a7 	beq.w	8006eda <_svfiprintf_r+0x1c6>
 8006d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d8e:	445a      	add	r2, fp
 8006d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d92:	f89a 3000 	ldrb.w	r3, [sl]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 809f 	beq.w	8006eda <_svfiprintf_r+0x1c6>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006da6:	f10a 0a01 	add.w	sl, sl, #1
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	9307      	str	r3, [sp, #28]
 8006dae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006db4:	4654      	mov	r4, sl
 8006db6:	2205      	movs	r2, #5
 8006db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbc:	484e      	ldr	r0, [pc, #312]	@ (8006ef8 <_svfiprintf_r+0x1e4>)
 8006dbe:	f7f9 fa17 	bl	80001f0 <memchr>
 8006dc2:	9a04      	ldr	r2, [sp, #16]
 8006dc4:	b9d8      	cbnz	r0, 8006dfe <_svfiprintf_r+0xea>
 8006dc6:	06d0      	lsls	r0, r2, #27
 8006dc8:	bf44      	itt	mi
 8006dca:	2320      	movmi	r3, #32
 8006dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dd0:	0711      	lsls	r1, r2, #28
 8006dd2:	bf44      	itt	mi
 8006dd4:	232b      	movmi	r3, #43	@ 0x2b
 8006dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dda:	f89a 3000 	ldrb.w	r3, [sl]
 8006dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8006de0:	d015      	beq.n	8006e0e <_svfiprintf_r+0xfa>
 8006de2:	9a07      	ldr	r2, [sp, #28]
 8006de4:	4654      	mov	r4, sl
 8006de6:	2000      	movs	r0, #0
 8006de8:	f04f 0c0a 	mov.w	ip, #10
 8006dec:	4621      	mov	r1, r4
 8006dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df2:	3b30      	subs	r3, #48	@ 0x30
 8006df4:	2b09      	cmp	r3, #9
 8006df6:	d94b      	bls.n	8006e90 <_svfiprintf_r+0x17c>
 8006df8:	b1b0      	cbz	r0, 8006e28 <_svfiprintf_r+0x114>
 8006dfa:	9207      	str	r2, [sp, #28]
 8006dfc:	e014      	b.n	8006e28 <_svfiprintf_r+0x114>
 8006dfe:	eba0 0308 	sub.w	r3, r0, r8
 8006e02:	fa09 f303 	lsl.w	r3, r9, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	46a2      	mov	sl, r4
 8006e0c:	e7d2      	b.n	8006db4 <_svfiprintf_r+0xa0>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	1d19      	adds	r1, r3, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	9103      	str	r1, [sp, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bfbb      	ittet	lt
 8006e1a:	425b      	neglt	r3, r3
 8006e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e20:	9307      	strge	r3, [sp, #28]
 8006e22:	9307      	strlt	r3, [sp, #28]
 8006e24:	bfb8      	it	lt
 8006e26:	9204      	strlt	r2, [sp, #16]
 8006e28:	7823      	ldrb	r3, [r4, #0]
 8006e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e2c:	d10a      	bne.n	8006e44 <_svfiprintf_r+0x130>
 8006e2e:	7863      	ldrb	r3, [r4, #1]
 8006e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e32:	d132      	bne.n	8006e9a <_svfiprintf_r+0x186>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	9203      	str	r2, [sp, #12]
 8006e3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e40:	3402      	adds	r4, #2
 8006e42:	9305      	str	r3, [sp, #20]
 8006e44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f08 <_svfiprintf_r+0x1f4>
 8006e48:	7821      	ldrb	r1, [r4, #0]
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	f7f9 f9cf 	bl	80001f0 <memchr>
 8006e52:	b138      	cbz	r0, 8006e64 <_svfiprintf_r+0x150>
 8006e54:	9b04      	ldr	r3, [sp, #16]
 8006e56:	eba0 000a 	sub.w	r0, r0, sl
 8006e5a:	2240      	movs	r2, #64	@ 0x40
 8006e5c:	4082      	lsls	r2, r0
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	3401      	adds	r4, #1
 8006e62:	9304      	str	r3, [sp, #16]
 8006e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e68:	4824      	ldr	r0, [pc, #144]	@ (8006efc <_svfiprintf_r+0x1e8>)
 8006e6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e6e:	2206      	movs	r2, #6
 8006e70:	f7f9 f9be 	bl	80001f0 <memchr>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d036      	beq.n	8006ee6 <_svfiprintf_r+0x1d2>
 8006e78:	4b21      	ldr	r3, [pc, #132]	@ (8006f00 <_svfiprintf_r+0x1ec>)
 8006e7a:	bb1b      	cbnz	r3, 8006ec4 <_svfiprintf_r+0x1b0>
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	3307      	adds	r3, #7
 8006e80:	f023 0307 	bic.w	r3, r3, #7
 8006e84:	3308      	adds	r3, #8
 8006e86:	9303      	str	r3, [sp, #12]
 8006e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e8a:	4433      	add	r3, r6
 8006e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e8e:	e76a      	b.n	8006d66 <_svfiprintf_r+0x52>
 8006e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e94:	460c      	mov	r4, r1
 8006e96:	2001      	movs	r0, #1
 8006e98:	e7a8      	b.n	8006dec <_svfiprintf_r+0xd8>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	3401      	adds	r4, #1
 8006e9e:	9305      	str	r3, [sp, #20]
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	f04f 0c0a 	mov.w	ip, #10
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eac:	3a30      	subs	r2, #48	@ 0x30
 8006eae:	2a09      	cmp	r2, #9
 8006eb0:	d903      	bls.n	8006eba <_svfiprintf_r+0x1a6>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0c6      	beq.n	8006e44 <_svfiprintf_r+0x130>
 8006eb6:	9105      	str	r1, [sp, #20]
 8006eb8:	e7c4      	b.n	8006e44 <_svfiprintf_r+0x130>
 8006eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e7f0      	b.n	8006ea6 <_svfiprintf_r+0x192>
 8006ec4:	ab03      	add	r3, sp, #12
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	462a      	mov	r2, r5
 8006eca:	4b0e      	ldr	r3, [pc, #56]	@ (8006f04 <_svfiprintf_r+0x1f0>)
 8006ecc:	a904      	add	r1, sp, #16
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f3af 8000 	nop.w
 8006ed4:	1c42      	adds	r2, r0, #1
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	d1d6      	bne.n	8006e88 <_svfiprintf_r+0x174>
 8006eda:	89ab      	ldrh	r3, [r5, #12]
 8006edc:	065b      	lsls	r3, r3, #25
 8006ede:	f53f af2d 	bmi.w	8006d3c <_svfiprintf_r+0x28>
 8006ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ee4:	e72c      	b.n	8006d40 <_svfiprintf_r+0x2c>
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	462a      	mov	r2, r5
 8006eec:	4b05      	ldr	r3, [pc, #20]	@ (8006f04 <_svfiprintf_r+0x1f0>)
 8006eee:	a904      	add	r1, sp, #16
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	f000 f9bb 	bl	800726c <_printf_i>
 8006ef6:	e7ed      	b.n	8006ed4 <_svfiprintf_r+0x1c0>
 8006ef8:	08007b0e 	.word	0x08007b0e
 8006efc:	08007b18 	.word	0x08007b18
 8006f00:	00000000 	.word	0x00000000
 8006f04:	08006c5d 	.word	0x08006c5d
 8006f08:	08007b14 	.word	0x08007b14

08006f0c <__sfputc_r>:
 8006f0c:	6893      	ldr	r3, [r2, #8]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	b410      	push	{r4}
 8006f14:	6093      	str	r3, [r2, #8]
 8006f16:	da08      	bge.n	8006f2a <__sfputc_r+0x1e>
 8006f18:	6994      	ldr	r4, [r2, #24]
 8006f1a:	42a3      	cmp	r3, r4
 8006f1c:	db01      	blt.n	8006f22 <__sfputc_r+0x16>
 8006f1e:	290a      	cmp	r1, #10
 8006f20:	d103      	bne.n	8006f2a <__sfputc_r+0x1e>
 8006f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f26:	f7ff bd0e 	b.w	8006946 <__swbuf_r>
 8006f2a:	6813      	ldr	r3, [r2, #0]
 8006f2c:	1c58      	adds	r0, r3, #1
 8006f2e:	6010      	str	r0, [r2, #0]
 8006f30:	7019      	strb	r1, [r3, #0]
 8006f32:	4608      	mov	r0, r1
 8006f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <__sfputs_r>:
 8006f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	460f      	mov	r7, r1
 8006f40:	4614      	mov	r4, r2
 8006f42:	18d5      	adds	r5, r2, r3
 8006f44:	42ac      	cmp	r4, r5
 8006f46:	d101      	bne.n	8006f4c <__sfputs_r+0x12>
 8006f48:	2000      	movs	r0, #0
 8006f4a:	e007      	b.n	8006f5c <__sfputs_r+0x22>
 8006f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f50:	463a      	mov	r2, r7
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7ff ffda 	bl	8006f0c <__sfputc_r>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d1f3      	bne.n	8006f44 <__sfputs_r+0xa>
 8006f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f60 <_vfiprintf_r>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	460d      	mov	r5, r1
 8006f66:	b09d      	sub	sp, #116	@ 0x74
 8006f68:	4614      	mov	r4, r2
 8006f6a:	4698      	mov	r8, r3
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	b118      	cbz	r0, 8006f78 <_vfiprintf_r+0x18>
 8006f70:	6a03      	ldr	r3, [r0, #32]
 8006f72:	b90b      	cbnz	r3, 8006f78 <_vfiprintf_r+0x18>
 8006f74:	f7ff fbaa 	bl	80066cc <__sinit>
 8006f78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f7a:	07d9      	lsls	r1, r3, #31
 8006f7c:	d405      	bmi.n	8006f8a <_vfiprintf_r+0x2a>
 8006f7e:	89ab      	ldrh	r3, [r5, #12]
 8006f80:	059a      	lsls	r2, r3, #22
 8006f82:	d402      	bmi.n	8006f8a <_vfiprintf_r+0x2a>
 8006f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f86:	f7ff fe0e 	bl	8006ba6 <__retarget_lock_acquire_recursive>
 8006f8a:	89ab      	ldrh	r3, [r5, #12]
 8006f8c:	071b      	lsls	r3, r3, #28
 8006f8e:	d501      	bpl.n	8006f94 <_vfiprintf_r+0x34>
 8006f90:	692b      	ldr	r3, [r5, #16]
 8006f92:	b99b      	cbnz	r3, 8006fbc <_vfiprintf_r+0x5c>
 8006f94:	4629      	mov	r1, r5
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff fd14 	bl	80069c4 <__swsetup_r>
 8006f9c:	b170      	cbz	r0, 8006fbc <_vfiprintf_r+0x5c>
 8006f9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fa0:	07dc      	lsls	r4, r3, #31
 8006fa2:	d504      	bpl.n	8006fae <_vfiprintf_r+0x4e>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa8:	b01d      	add	sp, #116	@ 0x74
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	89ab      	ldrh	r3, [r5, #12]
 8006fb0:	0598      	lsls	r0, r3, #22
 8006fb2:	d4f7      	bmi.n	8006fa4 <_vfiprintf_r+0x44>
 8006fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fb6:	f7ff fdf7 	bl	8006ba8 <__retarget_lock_release_recursive>
 8006fba:	e7f3      	b.n	8006fa4 <_vfiprintf_r+0x44>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fca:	2330      	movs	r3, #48	@ 0x30
 8006fcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800717c <_vfiprintf_r+0x21c>
 8006fd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fd4:	f04f 0901 	mov.w	r9, #1
 8006fd8:	4623      	mov	r3, r4
 8006fda:	469a      	mov	sl, r3
 8006fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe0:	b10a      	cbz	r2, 8006fe6 <_vfiprintf_r+0x86>
 8006fe2:	2a25      	cmp	r2, #37	@ 0x25
 8006fe4:	d1f9      	bne.n	8006fda <_vfiprintf_r+0x7a>
 8006fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8006fea:	d00b      	beq.n	8007004 <_vfiprintf_r+0xa4>
 8006fec:	465b      	mov	r3, fp
 8006fee:	4622      	mov	r2, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7ff ffa1 	bl	8006f3a <__sfputs_r>
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f000 80a7 	beq.w	800714c <_vfiprintf_r+0x1ec>
 8006ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007000:	445a      	add	r2, fp
 8007002:	9209      	str	r2, [sp, #36]	@ 0x24
 8007004:	f89a 3000 	ldrb.w	r3, [sl]
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 809f 	beq.w	800714c <_vfiprintf_r+0x1ec>
 800700e:	2300      	movs	r3, #0
 8007010:	f04f 32ff 	mov.w	r2, #4294967295
 8007014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007018:	f10a 0a01 	add.w	sl, sl, #1
 800701c:	9304      	str	r3, [sp, #16]
 800701e:	9307      	str	r3, [sp, #28]
 8007020:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007024:	931a      	str	r3, [sp, #104]	@ 0x68
 8007026:	4654      	mov	r4, sl
 8007028:	2205      	movs	r2, #5
 800702a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800702e:	4853      	ldr	r0, [pc, #332]	@ (800717c <_vfiprintf_r+0x21c>)
 8007030:	f7f9 f8de 	bl	80001f0 <memchr>
 8007034:	9a04      	ldr	r2, [sp, #16]
 8007036:	b9d8      	cbnz	r0, 8007070 <_vfiprintf_r+0x110>
 8007038:	06d1      	lsls	r1, r2, #27
 800703a:	bf44      	itt	mi
 800703c:	2320      	movmi	r3, #32
 800703e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007042:	0713      	lsls	r3, r2, #28
 8007044:	bf44      	itt	mi
 8007046:	232b      	movmi	r3, #43	@ 0x2b
 8007048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800704c:	f89a 3000 	ldrb.w	r3, [sl]
 8007050:	2b2a      	cmp	r3, #42	@ 0x2a
 8007052:	d015      	beq.n	8007080 <_vfiprintf_r+0x120>
 8007054:	9a07      	ldr	r2, [sp, #28]
 8007056:	4654      	mov	r4, sl
 8007058:	2000      	movs	r0, #0
 800705a:	f04f 0c0a 	mov.w	ip, #10
 800705e:	4621      	mov	r1, r4
 8007060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007064:	3b30      	subs	r3, #48	@ 0x30
 8007066:	2b09      	cmp	r3, #9
 8007068:	d94b      	bls.n	8007102 <_vfiprintf_r+0x1a2>
 800706a:	b1b0      	cbz	r0, 800709a <_vfiprintf_r+0x13a>
 800706c:	9207      	str	r2, [sp, #28]
 800706e:	e014      	b.n	800709a <_vfiprintf_r+0x13a>
 8007070:	eba0 0308 	sub.w	r3, r0, r8
 8007074:	fa09 f303 	lsl.w	r3, r9, r3
 8007078:	4313      	orrs	r3, r2
 800707a:	9304      	str	r3, [sp, #16]
 800707c:	46a2      	mov	sl, r4
 800707e:	e7d2      	b.n	8007026 <_vfiprintf_r+0xc6>
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	1d19      	adds	r1, r3, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	9103      	str	r1, [sp, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	bfbb      	ittet	lt
 800708c:	425b      	neglt	r3, r3
 800708e:	f042 0202 	orrlt.w	r2, r2, #2
 8007092:	9307      	strge	r3, [sp, #28]
 8007094:	9307      	strlt	r3, [sp, #28]
 8007096:	bfb8      	it	lt
 8007098:	9204      	strlt	r2, [sp, #16]
 800709a:	7823      	ldrb	r3, [r4, #0]
 800709c:	2b2e      	cmp	r3, #46	@ 0x2e
 800709e:	d10a      	bne.n	80070b6 <_vfiprintf_r+0x156>
 80070a0:	7863      	ldrb	r3, [r4, #1]
 80070a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80070a4:	d132      	bne.n	800710c <_vfiprintf_r+0x1ac>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	1d1a      	adds	r2, r3, #4
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	9203      	str	r2, [sp, #12]
 80070ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070b2:	3402      	adds	r4, #2
 80070b4:	9305      	str	r3, [sp, #20]
 80070b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800718c <_vfiprintf_r+0x22c>
 80070ba:	7821      	ldrb	r1, [r4, #0]
 80070bc:	2203      	movs	r2, #3
 80070be:	4650      	mov	r0, sl
 80070c0:	f7f9 f896 	bl	80001f0 <memchr>
 80070c4:	b138      	cbz	r0, 80070d6 <_vfiprintf_r+0x176>
 80070c6:	9b04      	ldr	r3, [sp, #16]
 80070c8:	eba0 000a 	sub.w	r0, r0, sl
 80070cc:	2240      	movs	r2, #64	@ 0x40
 80070ce:	4082      	lsls	r2, r0
 80070d0:	4313      	orrs	r3, r2
 80070d2:	3401      	adds	r4, #1
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070da:	4829      	ldr	r0, [pc, #164]	@ (8007180 <_vfiprintf_r+0x220>)
 80070dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070e0:	2206      	movs	r2, #6
 80070e2:	f7f9 f885 	bl	80001f0 <memchr>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d03f      	beq.n	800716a <_vfiprintf_r+0x20a>
 80070ea:	4b26      	ldr	r3, [pc, #152]	@ (8007184 <_vfiprintf_r+0x224>)
 80070ec:	bb1b      	cbnz	r3, 8007136 <_vfiprintf_r+0x1d6>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	3307      	adds	r3, #7
 80070f2:	f023 0307 	bic.w	r3, r3, #7
 80070f6:	3308      	adds	r3, #8
 80070f8:	9303      	str	r3, [sp, #12]
 80070fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070fc:	443b      	add	r3, r7
 80070fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007100:	e76a      	b.n	8006fd8 <_vfiprintf_r+0x78>
 8007102:	fb0c 3202 	mla	r2, ip, r2, r3
 8007106:	460c      	mov	r4, r1
 8007108:	2001      	movs	r0, #1
 800710a:	e7a8      	b.n	800705e <_vfiprintf_r+0xfe>
 800710c:	2300      	movs	r3, #0
 800710e:	3401      	adds	r4, #1
 8007110:	9305      	str	r3, [sp, #20]
 8007112:	4619      	mov	r1, r3
 8007114:	f04f 0c0a 	mov.w	ip, #10
 8007118:	4620      	mov	r0, r4
 800711a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800711e:	3a30      	subs	r2, #48	@ 0x30
 8007120:	2a09      	cmp	r2, #9
 8007122:	d903      	bls.n	800712c <_vfiprintf_r+0x1cc>
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0c6      	beq.n	80070b6 <_vfiprintf_r+0x156>
 8007128:	9105      	str	r1, [sp, #20]
 800712a:	e7c4      	b.n	80070b6 <_vfiprintf_r+0x156>
 800712c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007130:	4604      	mov	r4, r0
 8007132:	2301      	movs	r3, #1
 8007134:	e7f0      	b.n	8007118 <_vfiprintf_r+0x1b8>
 8007136:	ab03      	add	r3, sp, #12
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	462a      	mov	r2, r5
 800713c:	4b12      	ldr	r3, [pc, #72]	@ (8007188 <_vfiprintf_r+0x228>)
 800713e:	a904      	add	r1, sp, #16
 8007140:	4630      	mov	r0, r6
 8007142:	f3af 8000 	nop.w
 8007146:	4607      	mov	r7, r0
 8007148:	1c78      	adds	r0, r7, #1
 800714a:	d1d6      	bne.n	80070fa <_vfiprintf_r+0x19a>
 800714c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800714e:	07d9      	lsls	r1, r3, #31
 8007150:	d405      	bmi.n	800715e <_vfiprintf_r+0x1fe>
 8007152:	89ab      	ldrh	r3, [r5, #12]
 8007154:	059a      	lsls	r2, r3, #22
 8007156:	d402      	bmi.n	800715e <_vfiprintf_r+0x1fe>
 8007158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800715a:	f7ff fd25 	bl	8006ba8 <__retarget_lock_release_recursive>
 800715e:	89ab      	ldrh	r3, [r5, #12]
 8007160:	065b      	lsls	r3, r3, #25
 8007162:	f53f af1f 	bmi.w	8006fa4 <_vfiprintf_r+0x44>
 8007166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007168:	e71e      	b.n	8006fa8 <_vfiprintf_r+0x48>
 800716a:	ab03      	add	r3, sp, #12
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	462a      	mov	r2, r5
 8007170:	4b05      	ldr	r3, [pc, #20]	@ (8007188 <_vfiprintf_r+0x228>)
 8007172:	a904      	add	r1, sp, #16
 8007174:	4630      	mov	r0, r6
 8007176:	f000 f879 	bl	800726c <_printf_i>
 800717a:	e7e4      	b.n	8007146 <_vfiprintf_r+0x1e6>
 800717c:	08007b0e 	.word	0x08007b0e
 8007180:	08007b18 	.word	0x08007b18
 8007184:	00000000 	.word	0x00000000
 8007188:	08006f3b 	.word	0x08006f3b
 800718c:	08007b14 	.word	0x08007b14

08007190 <_printf_common>:
 8007190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	4616      	mov	r6, r2
 8007196:	4698      	mov	r8, r3
 8007198:	688a      	ldr	r2, [r1, #8]
 800719a:	690b      	ldr	r3, [r1, #16]
 800719c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	bfb8      	it	lt
 80071a4:	4613      	movlt	r3, r2
 80071a6:	6033      	str	r3, [r6, #0]
 80071a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071ac:	4607      	mov	r7, r0
 80071ae:	460c      	mov	r4, r1
 80071b0:	b10a      	cbz	r2, 80071b6 <_printf_common+0x26>
 80071b2:	3301      	adds	r3, #1
 80071b4:	6033      	str	r3, [r6, #0]
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	0699      	lsls	r1, r3, #26
 80071ba:	bf42      	ittt	mi
 80071bc:	6833      	ldrmi	r3, [r6, #0]
 80071be:	3302      	addmi	r3, #2
 80071c0:	6033      	strmi	r3, [r6, #0]
 80071c2:	6825      	ldr	r5, [r4, #0]
 80071c4:	f015 0506 	ands.w	r5, r5, #6
 80071c8:	d106      	bne.n	80071d8 <_printf_common+0x48>
 80071ca:	f104 0a19 	add.w	sl, r4, #25
 80071ce:	68e3      	ldr	r3, [r4, #12]
 80071d0:	6832      	ldr	r2, [r6, #0]
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	dc26      	bgt.n	8007226 <_printf_common+0x96>
 80071d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071dc:	6822      	ldr	r2, [r4, #0]
 80071de:	3b00      	subs	r3, #0
 80071e0:	bf18      	it	ne
 80071e2:	2301      	movne	r3, #1
 80071e4:	0692      	lsls	r2, r2, #26
 80071e6:	d42b      	bmi.n	8007240 <_printf_common+0xb0>
 80071e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071ec:	4641      	mov	r1, r8
 80071ee:	4638      	mov	r0, r7
 80071f0:	47c8      	blx	r9
 80071f2:	3001      	adds	r0, #1
 80071f4:	d01e      	beq.n	8007234 <_printf_common+0xa4>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	6922      	ldr	r2, [r4, #16]
 80071fa:	f003 0306 	and.w	r3, r3, #6
 80071fe:	2b04      	cmp	r3, #4
 8007200:	bf02      	ittt	eq
 8007202:	68e5      	ldreq	r5, [r4, #12]
 8007204:	6833      	ldreq	r3, [r6, #0]
 8007206:	1aed      	subeq	r5, r5, r3
 8007208:	68a3      	ldr	r3, [r4, #8]
 800720a:	bf0c      	ite	eq
 800720c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007210:	2500      	movne	r5, #0
 8007212:	4293      	cmp	r3, r2
 8007214:	bfc4      	itt	gt
 8007216:	1a9b      	subgt	r3, r3, r2
 8007218:	18ed      	addgt	r5, r5, r3
 800721a:	2600      	movs	r6, #0
 800721c:	341a      	adds	r4, #26
 800721e:	42b5      	cmp	r5, r6
 8007220:	d11a      	bne.n	8007258 <_printf_common+0xc8>
 8007222:	2000      	movs	r0, #0
 8007224:	e008      	b.n	8007238 <_printf_common+0xa8>
 8007226:	2301      	movs	r3, #1
 8007228:	4652      	mov	r2, sl
 800722a:	4641      	mov	r1, r8
 800722c:	4638      	mov	r0, r7
 800722e:	47c8      	blx	r9
 8007230:	3001      	adds	r0, #1
 8007232:	d103      	bne.n	800723c <_printf_common+0xac>
 8007234:	f04f 30ff 	mov.w	r0, #4294967295
 8007238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723c:	3501      	adds	r5, #1
 800723e:	e7c6      	b.n	80071ce <_printf_common+0x3e>
 8007240:	18e1      	adds	r1, r4, r3
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	2030      	movs	r0, #48	@ 0x30
 8007246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800724a:	4422      	add	r2, r4
 800724c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007254:	3302      	adds	r3, #2
 8007256:	e7c7      	b.n	80071e8 <_printf_common+0x58>
 8007258:	2301      	movs	r3, #1
 800725a:	4622      	mov	r2, r4
 800725c:	4641      	mov	r1, r8
 800725e:	4638      	mov	r0, r7
 8007260:	47c8      	blx	r9
 8007262:	3001      	adds	r0, #1
 8007264:	d0e6      	beq.n	8007234 <_printf_common+0xa4>
 8007266:	3601      	adds	r6, #1
 8007268:	e7d9      	b.n	800721e <_printf_common+0x8e>
	...

0800726c <_printf_i>:
 800726c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007270:	7e0f      	ldrb	r7, [r1, #24]
 8007272:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007274:	2f78      	cmp	r7, #120	@ 0x78
 8007276:	4691      	mov	r9, r2
 8007278:	4680      	mov	r8, r0
 800727a:	460c      	mov	r4, r1
 800727c:	469a      	mov	sl, r3
 800727e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007282:	d807      	bhi.n	8007294 <_printf_i+0x28>
 8007284:	2f62      	cmp	r7, #98	@ 0x62
 8007286:	d80a      	bhi.n	800729e <_printf_i+0x32>
 8007288:	2f00      	cmp	r7, #0
 800728a:	f000 80d2 	beq.w	8007432 <_printf_i+0x1c6>
 800728e:	2f58      	cmp	r7, #88	@ 0x58
 8007290:	f000 80b9 	beq.w	8007406 <_printf_i+0x19a>
 8007294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800729c:	e03a      	b.n	8007314 <_printf_i+0xa8>
 800729e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072a2:	2b15      	cmp	r3, #21
 80072a4:	d8f6      	bhi.n	8007294 <_printf_i+0x28>
 80072a6:	a101      	add	r1, pc, #4	@ (adr r1, 80072ac <_printf_i+0x40>)
 80072a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072ac:	08007305 	.word	0x08007305
 80072b0:	08007319 	.word	0x08007319
 80072b4:	08007295 	.word	0x08007295
 80072b8:	08007295 	.word	0x08007295
 80072bc:	08007295 	.word	0x08007295
 80072c0:	08007295 	.word	0x08007295
 80072c4:	08007319 	.word	0x08007319
 80072c8:	08007295 	.word	0x08007295
 80072cc:	08007295 	.word	0x08007295
 80072d0:	08007295 	.word	0x08007295
 80072d4:	08007295 	.word	0x08007295
 80072d8:	08007419 	.word	0x08007419
 80072dc:	08007343 	.word	0x08007343
 80072e0:	080073d3 	.word	0x080073d3
 80072e4:	08007295 	.word	0x08007295
 80072e8:	08007295 	.word	0x08007295
 80072ec:	0800743b 	.word	0x0800743b
 80072f0:	08007295 	.word	0x08007295
 80072f4:	08007343 	.word	0x08007343
 80072f8:	08007295 	.word	0x08007295
 80072fc:	08007295 	.word	0x08007295
 8007300:	080073db 	.word	0x080073db
 8007304:	6833      	ldr	r3, [r6, #0]
 8007306:	1d1a      	adds	r2, r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6032      	str	r2, [r6, #0]
 800730c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007314:	2301      	movs	r3, #1
 8007316:	e09d      	b.n	8007454 <_printf_i+0x1e8>
 8007318:	6833      	ldr	r3, [r6, #0]
 800731a:	6820      	ldr	r0, [r4, #0]
 800731c:	1d19      	adds	r1, r3, #4
 800731e:	6031      	str	r1, [r6, #0]
 8007320:	0606      	lsls	r6, r0, #24
 8007322:	d501      	bpl.n	8007328 <_printf_i+0xbc>
 8007324:	681d      	ldr	r5, [r3, #0]
 8007326:	e003      	b.n	8007330 <_printf_i+0xc4>
 8007328:	0645      	lsls	r5, r0, #25
 800732a:	d5fb      	bpl.n	8007324 <_printf_i+0xb8>
 800732c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007330:	2d00      	cmp	r5, #0
 8007332:	da03      	bge.n	800733c <_printf_i+0xd0>
 8007334:	232d      	movs	r3, #45	@ 0x2d
 8007336:	426d      	negs	r5, r5
 8007338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800733c:	4859      	ldr	r0, [pc, #356]	@ (80074a4 <_printf_i+0x238>)
 800733e:	230a      	movs	r3, #10
 8007340:	e011      	b.n	8007366 <_printf_i+0xfa>
 8007342:	6821      	ldr	r1, [r4, #0]
 8007344:	6833      	ldr	r3, [r6, #0]
 8007346:	0608      	lsls	r0, r1, #24
 8007348:	f853 5b04 	ldr.w	r5, [r3], #4
 800734c:	d402      	bmi.n	8007354 <_printf_i+0xe8>
 800734e:	0649      	lsls	r1, r1, #25
 8007350:	bf48      	it	mi
 8007352:	b2ad      	uxthmi	r5, r5
 8007354:	2f6f      	cmp	r7, #111	@ 0x6f
 8007356:	4853      	ldr	r0, [pc, #332]	@ (80074a4 <_printf_i+0x238>)
 8007358:	6033      	str	r3, [r6, #0]
 800735a:	bf14      	ite	ne
 800735c:	230a      	movne	r3, #10
 800735e:	2308      	moveq	r3, #8
 8007360:	2100      	movs	r1, #0
 8007362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007366:	6866      	ldr	r6, [r4, #4]
 8007368:	60a6      	str	r6, [r4, #8]
 800736a:	2e00      	cmp	r6, #0
 800736c:	bfa2      	ittt	ge
 800736e:	6821      	ldrge	r1, [r4, #0]
 8007370:	f021 0104 	bicge.w	r1, r1, #4
 8007374:	6021      	strge	r1, [r4, #0]
 8007376:	b90d      	cbnz	r5, 800737c <_printf_i+0x110>
 8007378:	2e00      	cmp	r6, #0
 800737a:	d04b      	beq.n	8007414 <_printf_i+0x1a8>
 800737c:	4616      	mov	r6, r2
 800737e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007382:	fb03 5711 	mls	r7, r3, r1, r5
 8007386:	5dc7      	ldrb	r7, [r0, r7]
 8007388:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800738c:	462f      	mov	r7, r5
 800738e:	42bb      	cmp	r3, r7
 8007390:	460d      	mov	r5, r1
 8007392:	d9f4      	bls.n	800737e <_printf_i+0x112>
 8007394:	2b08      	cmp	r3, #8
 8007396:	d10b      	bne.n	80073b0 <_printf_i+0x144>
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	07df      	lsls	r7, r3, #31
 800739c:	d508      	bpl.n	80073b0 <_printf_i+0x144>
 800739e:	6923      	ldr	r3, [r4, #16]
 80073a0:	6861      	ldr	r1, [r4, #4]
 80073a2:	4299      	cmp	r1, r3
 80073a4:	bfde      	ittt	le
 80073a6:	2330      	movle	r3, #48	@ 0x30
 80073a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073b0:	1b92      	subs	r2, r2, r6
 80073b2:	6122      	str	r2, [r4, #16]
 80073b4:	f8cd a000 	str.w	sl, [sp]
 80073b8:	464b      	mov	r3, r9
 80073ba:	aa03      	add	r2, sp, #12
 80073bc:	4621      	mov	r1, r4
 80073be:	4640      	mov	r0, r8
 80073c0:	f7ff fee6 	bl	8007190 <_printf_common>
 80073c4:	3001      	adds	r0, #1
 80073c6:	d14a      	bne.n	800745e <_printf_i+0x1f2>
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295
 80073cc:	b004      	add	sp, #16
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	f043 0320 	orr.w	r3, r3, #32
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	4833      	ldr	r0, [pc, #204]	@ (80074a8 <_printf_i+0x23c>)
 80073dc:	2778      	movs	r7, #120	@ 0x78
 80073de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	6831      	ldr	r1, [r6, #0]
 80073e6:	061f      	lsls	r7, r3, #24
 80073e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80073ec:	d402      	bmi.n	80073f4 <_printf_i+0x188>
 80073ee:	065f      	lsls	r7, r3, #25
 80073f0:	bf48      	it	mi
 80073f2:	b2ad      	uxthmi	r5, r5
 80073f4:	6031      	str	r1, [r6, #0]
 80073f6:	07d9      	lsls	r1, r3, #31
 80073f8:	bf44      	itt	mi
 80073fa:	f043 0320 	orrmi.w	r3, r3, #32
 80073fe:	6023      	strmi	r3, [r4, #0]
 8007400:	b11d      	cbz	r5, 800740a <_printf_i+0x19e>
 8007402:	2310      	movs	r3, #16
 8007404:	e7ac      	b.n	8007360 <_printf_i+0xf4>
 8007406:	4827      	ldr	r0, [pc, #156]	@ (80074a4 <_printf_i+0x238>)
 8007408:	e7e9      	b.n	80073de <_printf_i+0x172>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	f023 0320 	bic.w	r3, r3, #32
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	e7f6      	b.n	8007402 <_printf_i+0x196>
 8007414:	4616      	mov	r6, r2
 8007416:	e7bd      	b.n	8007394 <_printf_i+0x128>
 8007418:	6833      	ldr	r3, [r6, #0]
 800741a:	6825      	ldr	r5, [r4, #0]
 800741c:	6961      	ldr	r1, [r4, #20]
 800741e:	1d18      	adds	r0, r3, #4
 8007420:	6030      	str	r0, [r6, #0]
 8007422:	062e      	lsls	r6, r5, #24
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	d501      	bpl.n	800742c <_printf_i+0x1c0>
 8007428:	6019      	str	r1, [r3, #0]
 800742a:	e002      	b.n	8007432 <_printf_i+0x1c6>
 800742c:	0668      	lsls	r0, r5, #25
 800742e:	d5fb      	bpl.n	8007428 <_printf_i+0x1bc>
 8007430:	8019      	strh	r1, [r3, #0]
 8007432:	2300      	movs	r3, #0
 8007434:	6123      	str	r3, [r4, #16]
 8007436:	4616      	mov	r6, r2
 8007438:	e7bc      	b.n	80073b4 <_printf_i+0x148>
 800743a:	6833      	ldr	r3, [r6, #0]
 800743c:	1d1a      	adds	r2, r3, #4
 800743e:	6032      	str	r2, [r6, #0]
 8007440:	681e      	ldr	r6, [r3, #0]
 8007442:	6862      	ldr	r2, [r4, #4]
 8007444:	2100      	movs	r1, #0
 8007446:	4630      	mov	r0, r6
 8007448:	f7f8 fed2 	bl	80001f0 <memchr>
 800744c:	b108      	cbz	r0, 8007452 <_printf_i+0x1e6>
 800744e:	1b80      	subs	r0, r0, r6
 8007450:	6060      	str	r0, [r4, #4]
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	6123      	str	r3, [r4, #16]
 8007456:	2300      	movs	r3, #0
 8007458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800745c:	e7aa      	b.n	80073b4 <_printf_i+0x148>
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	4632      	mov	r2, r6
 8007462:	4649      	mov	r1, r9
 8007464:	4640      	mov	r0, r8
 8007466:	47d0      	blx	sl
 8007468:	3001      	adds	r0, #1
 800746a:	d0ad      	beq.n	80073c8 <_printf_i+0x15c>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	079b      	lsls	r3, r3, #30
 8007470:	d413      	bmi.n	800749a <_printf_i+0x22e>
 8007472:	68e0      	ldr	r0, [r4, #12]
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	4298      	cmp	r0, r3
 8007478:	bfb8      	it	lt
 800747a:	4618      	movlt	r0, r3
 800747c:	e7a6      	b.n	80073cc <_printf_i+0x160>
 800747e:	2301      	movs	r3, #1
 8007480:	4632      	mov	r2, r6
 8007482:	4649      	mov	r1, r9
 8007484:	4640      	mov	r0, r8
 8007486:	47d0      	blx	sl
 8007488:	3001      	adds	r0, #1
 800748a:	d09d      	beq.n	80073c8 <_printf_i+0x15c>
 800748c:	3501      	adds	r5, #1
 800748e:	68e3      	ldr	r3, [r4, #12]
 8007490:	9903      	ldr	r1, [sp, #12]
 8007492:	1a5b      	subs	r3, r3, r1
 8007494:	42ab      	cmp	r3, r5
 8007496:	dcf2      	bgt.n	800747e <_printf_i+0x212>
 8007498:	e7eb      	b.n	8007472 <_printf_i+0x206>
 800749a:	2500      	movs	r5, #0
 800749c:	f104 0619 	add.w	r6, r4, #25
 80074a0:	e7f5      	b.n	800748e <_printf_i+0x222>
 80074a2:	bf00      	nop
 80074a4:	08007b1f 	.word	0x08007b1f
 80074a8:	08007b30 	.word	0x08007b30

080074ac <__sflush_r>:
 80074ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b4:	0716      	lsls	r6, r2, #28
 80074b6:	4605      	mov	r5, r0
 80074b8:	460c      	mov	r4, r1
 80074ba:	d454      	bmi.n	8007566 <__sflush_r+0xba>
 80074bc:	684b      	ldr	r3, [r1, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dc02      	bgt.n	80074c8 <__sflush_r+0x1c>
 80074c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	dd48      	ble.n	800755a <__sflush_r+0xae>
 80074c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	d045      	beq.n	800755a <__sflush_r+0xae>
 80074ce:	2300      	movs	r3, #0
 80074d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074d4:	682f      	ldr	r7, [r5, #0]
 80074d6:	6a21      	ldr	r1, [r4, #32]
 80074d8:	602b      	str	r3, [r5, #0]
 80074da:	d030      	beq.n	800753e <__sflush_r+0x92>
 80074dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	0759      	lsls	r1, r3, #29
 80074e2:	d505      	bpl.n	80074f0 <__sflush_r+0x44>
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	1ad2      	subs	r2, r2, r3
 80074e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074ea:	b10b      	cbz	r3, 80074f0 <__sflush_r+0x44>
 80074ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	2300      	movs	r3, #0
 80074f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074f4:	6a21      	ldr	r1, [r4, #32]
 80074f6:	4628      	mov	r0, r5
 80074f8:	47b0      	blx	r6
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	d106      	bne.n	800750e <__sflush_r+0x62>
 8007500:	6829      	ldr	r1, [r5, #0]
 8007502:	291d      	cmp	r1, #29
 8007504:	d82b      	bhi.n	800755e <__sflush_r+0xb2>
 8007506:	4a2a      	ldr	r2, [pc, #168]	@ (80075b0 <__sflush_r+0x104>)
 8007508:	410a      	asrs	r2, r1
 800750a:	07d6      	lsls	r6, r2, #31
 800750c:	d427      	bmi.n	800755e <__sflush_r+0xb2>
 800750e:	2200      	movs	r2, #0
 8007510:	6062      	str	r2, [r4, #4]
 8007512:	04d9      	lsls	r1, r3, #19
 8007514:	6922      	ldr	r2, [r4, #16]
 8007516:	6022      	str	r2, [r4, #0]
 8007518:	d504      	bpl.n	8007524 <__sflush_r+0x78>
 800751a:	1c42      	adds	r2, r0, #1
 800751c:	d101      	bne.n	8007522 <__sflush_r+0x76>
 800751e:	682b      	ldr	r3, [r5, #0]
 8007520:	b903      	cbnz	r3, 8007524 <__sflush_r+0x78>
 8007522:	6560      	str	r0, [r4, #84]	@ 0x54
 8007524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007526:	602f      	str	r7, [r5, #0]
 8007528:	b1b9      	cbz	r1, 800755a <__sflush_r+0xae>
 800752a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800752e:	4299      	cmp	r1, r3
 8007530:	d002      	beq.n	8007538 <__sflush_r+0x8c>
 8007532:	4628      	mov	r0, r5
 8007534:	f7ff fb48 	bl	8006bc8 <_free_r>
 8007538:	2300      	movs	r3, #0
 800753a:	6363      	str	r3, [r4, #52]	@ 0x34
 800753c:	e00d      	b.n	800755a <__sflush_r+0xae>
 800753e:	2301      	movs	r3, #1
 8007540:	4628      	mov	r0, r5
 8007542:	47b0      	blx	r6
 8007544:	4602      	mov	r2, r0
 8007546:	1c50      	adds	r0, r2, #1
 8007548:	d1c9      	bne.n	80074de <__sflush_r+0x32>
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0c6      	beq.n	80074de <__sflush_r+0x32>
 8007550:	2b1d      	cmp	r3, #29
 8007552:	d001      	beq.n	8007558 <__sflush_r+0xac>
 8007554:	2b16      	cmp	r3, #22
 8007556:	d11e      	bne.n	8007596 <__sflush_r+0xea>
 8007558:	602f      	str	r7, [r5, #0]
 800755a:	2000      	movs	r0, #0
 800755c:	e022      	b.n	80075a4 <__sflush_r+0xf8>
 800755e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007562:	b21b      	sxth	r3, r3
 8007564:	e01b      	b.n	800759e <__sflush_r+0xf2>
 8007566:	690f      	ldr	r7, [r1, #16]
 8007568:	2f00      	cmp	r7, #0
 800756a:	d0f6      	beq.n	800755a <__sflush_r+0xae>
 800756c:	0793      	lsls	r3, r2, #30
 800756e:	680e      	ldr	r6, [r1, #0]
 8007570:	bf08      	it	eq
 8007572:	694b      	ldreq	r3, [r1, #20]
 8007574:	600f      	str	r7, [r1, #0]
 8007576:	bf18      	it	ne
 8007578:	2300      	movne	r3, #0
 800757a:	eba6 0807 	sub.w	r8, r6, r7
 800757e:	608b      	str	r3, [r1, #8]
 8007580:	f1b8 0f00 	cmp.w	r8, #0
 8007584:	dde9      	ble.n	800755a <__sflush_r+0xae>
 8007586:	6a21      	ldr	r1, [r4, #32]
 8007588:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800758a:	4643      	mov	r3, r8
 800758c:	463a      	mov	r2, r7
 800758e:	4628      	mov	r0, r5
 8007590:	47b0      	blx	r6
 8007592:	2800      	cmp	r0, #0
 8007594:	dc08      	bgt.n	80075a8 <__sflush_r+0xfc>
 8007596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a8:	4407      	add	r7, r0
 80075aa:	eba8 0800 	sub.w	r8, r8, r0
 80075ae:	e7e7      	b.n	8007580 <__sflush_r+0xd4>
 80075b0:	dfbffffe 	.word	0xdfbffffe

080075b4 <_fflush_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	690b      	ldr	r3, [r1, #16]
 80075b8:	4605      	mov	r5, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	b913      	cbnz	r3, 80075c4 <_fflush_r+0x10>
 80075be:	2500      	movs	r5, #0
 80075c0:	4628      	mov	r0, r5
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	b118      	cbz	r0, 80075ce <_fflush_r+0x1a>
 80075c6:	6a03      	ldr	r3, [r0, #32]
 80075c8:	b90b      	cbnz	r3, 80075ce <_fflush_r+0x1a>
 80075ca:	f7ff f87f 	bl	80066cc <__sinit>
 80075ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0f3      	beq.n	80075be <_fflush_r+0xa>
 80075d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075d8:	07d0      	lsls	r0, r2, #31
 80075da:	d404      	bmi.n	80075e6 <_fflush_r+0x32>
 80075dc:	0599      	lsls	r1, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_fflush_r+0x32>
 80075e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075e2:	f7ff fae0 	bl	8006ba6 <__retarget_lock_acquire_recursive>
 80075e6:	4628      	mov	r0, r5
 80075e8:	4621      	mov	r1, r4
 80075ea:	f7ff ff5f 	bl	80074ac <__sflush_r>
 80075ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075f0:	07da      	lsls	r2, r3, #31
 80075f2:	4605      	mov	r5, r0
 80075f4:	d4e4      	bmi.n	80075c0 <_fflush_r+0xc>
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	059b      	lsls	r3, r3, #22
 80075fa:	d4e1      	bmi.n	80075c0 <_fflush_r+0xc>
 80075fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075fe:	f7ff fad3 	bl	8006ba8 <__retarget_lock_release_recursive>
 8007602:	e7dd      	b.n	80075c0 <_fflush_r+0xc>

08007604 <__swhatbuf_r>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	460c      	mov	r4, r1
 8007608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760c:	2900      	cmp	r1, #0
 800760e:	b096      	sub	sp, #88	@ 0x58
 8007610:	4615      	mov	r5, r2
 8007612:	461e      	mov	r6, r3
 8007614:	da0d      	bge.n	8007632 <__swhatbuf_r+0x2e>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800761c:	f04f 0100 	mov.w	r1, #0
 8007620:	bf14      	ite	ne
 8007622:	2340      	movne	r3, #64	@ 0x40
 8007624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007628:	2000      	movs	r0, #0
 800762a:	6031      	str	r1, [r6, #0]
 800762c:	602b      	str	r3, [r5, #0]
 800762e:	b016      	add	sp, #88	@ 0x58
 8007630:	bd70      	pop	{r4, r5, r6, pc}
 8007632:	466a      	mov	r2, sp
 8007634:	f000 f862 	bl	80076fc <_fstat_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	dbec      	blt.n	8007616 <__swhatbuf_r+0x12>
 800763c:	9901      	ldr	r1, [sp, #4]
 800763e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007646:	4259      	negs	r1, r3
 8007648:	4159      	adcs	r1, r3
 800764a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800764e:	e7eb      	b.n	8007628 <__swhatbuf_r+0x24>

08007650 <__smakebuf_r>:
 8007650:	898b      	ldrh	r3, [r1, #12]
 8007652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007654:	079d      	lsls	r5, r3, #30
 8007656:	4606      	mov	r6, r0
 8007658:	460c      	mov	r4, r1
 800765a:	d507      	bpl.n	800766c <__smakebuf_r+0x1c>
 800765c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	6123      	str	r3, [r4, #16]
 8007664:	2301      	movs	r3, #1
 8007666:	6163      	str	r3, [r4, #20]
 8007668:	b003      	add	sp, #12
 800766a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800766c:	ab01      	add	r3, sp, #4
 800766e:	466a      	mov	r2, sp
 8007670:	f7ff ffc8 	bl	8007604 <__swhatbuf_r>
 8007674:	9f00      	ldr	r7, [sp, #0]
 8007676:	4605      	mov	r5, r0
 8007678:	4639      	mov	r1, r7
 800767a:	4630      	mov	r0, r6
 800767c:	f7fe ff0e 	bl	800649c <_malloc_r>
 8007680:	b948      	cbnz	r0, 8007696 <__smakebuf_r+0x46>
 8007682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007686:	059a      	lsls	r2, r3, #22
 8007688:	d4ee      	bmi.n	8007668 <__smakebuf_r+0x18>
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	f043 0302 	orr.w	r3, r3, #2
 8007692:	81a3      	strh	r3, [r4, #12]
 8007694:	e7e2      	b.n	800765c <__smakebuf_r+0xc>
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	6020      	str	r0, [r4, #0]
 800769a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800769e:	81a3      	strh	r3, [r4, #12]
 80076a0:	9b01      	ldr	r3, [sp, #4]
 80076a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076a6:	b15b      	cbz	r3, 80076c0 <__smakebuf_r+0x70>
 80076a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ac:	4630      	mov	r0, r6
 80076ae:	f000 f837 	bl	8007720 <_isatty_r>
 80076b2:	b128      	cbz	r0, 80076c0 <__smakebuf_r+0x70>
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	f043 0301 	orr.w	r3, r3, #1
 80076be:	81a3      	strh	r3, [r4, #12]
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	431d      	orrs	r5, r3
 80076c4:	81a5      	strh	r5, [r4, #12]
 80076c6:	e7cf      	b.n	8007668 <__smakebuf_r+0x18>

080076c8 <memmove>:
 80076c8:	4288      	cmp	r0, r1
 80076ca:	b510      	push	{r4, lr}
 80076cc:	eb01 0402 	add.w	r4, r1, r2
 80076d0:	d902      	bls.n	80076d8 <memmove+0x10>
 80076d2:	4284      	cmp	r4, r0
 80076d4:	4623      	mov	r3, r4
 80076d6:	d807      	bhi.n	80076e8 <memmove+0x20>
 80076d8:	1e43      	subs	r3, r0, #1
 80076da:	42a1      	cmp	r1, r4
 80076dc:	d008      	beq.n	80076f0 <memmove+0x28>
 80076de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076e6:	e7f8      	b.n	80076da <memmove+0x12>
 80076e8:	4402      	add	r2, r0
 80076ea:	4601      	mov	r1, r0
 80076ec:	428a      	cmp	r2, r1
 80076ee:	d100      	bne.n	80076f2 <memmove+0x2a>
 80076f0:	bd10      	pop	{r4, pc}
 80076f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076fa:	e7f7      	b.n	80076ec <memmove+0x24>

080076fc <_fstat_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d07      	ldr	r5, [pc, #28]	@ (800771c <_fstat_r+0x20>)
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	602b      	str	r3, [r5, #0]
 800770a:	f7fb f836 	bl	800277a <_fstat>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	d102      	bne.n	8007718 <_fstat_r+0x1c>
 8007712:	682b      	ldr	r3, [r5, #0]
 8007714:	b103      	cbz	r3, 8007718 <_fstat_r+0x1c>
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	bd38      	pop	{r3, r4, r5, pc}
 800771a:	bf00      	nop
 800771c:	2000096c 	.word	0x2000096c

08007720 <_isatty_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4d06      	ldr	r5, [pc, #24]	@ (800773c <_isatty_r+0x1c>)
 8007724:	2300      	movs	r3, #0
 8007726:	4604      	mov	r4, r0
 8007728:	4608      	mov	r0, r1
 800772a:	602b      	str	r3, [r5, #0]
 800772c:	f7fb f835 	bl	800279a <_isatty>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_isatty_r+0x1a>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_isatty_r+0x1a>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	2000096c 	.word	0x2000096c

08007740 <_realloc_r>:
 8007740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007744:	4680      	mov	r8, r0
 8007746:	4615      	mov	r5, r2
 8007748:	460c      	mov	r4, r1
 800774a:	b921      	cbnz	r1, 8007756 <_realloc_r+0x16>
 800774c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	4611      	mov	r1, r2
 8007752:	f7fe bea3 	b.w	800649c <_malloc_r>
 8007756:	b92a      	cbnz	r2, 8007764 <_realloc_r+0x24>
 8007758:	f7ff fa36 	bl	8006bc8 <_free_r>
 800775c:	2400      	movs	r4, #0
 800775e:	4620      	mov	r0, r4
 8007760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007764:	f000 f81a 	bl	800779c <_malloc_usable_size_r>
 8007768:	4285      	cmp	r5, r0
 800776a:	4606      	mov	r6, r0
 800776c:	d802      	bhi.n	8007774 <_realloc_r+0x34>
 800776e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007772:	d8f4      	bhi.n	800775e <_realloc_r+0x1e>
 8007774:	4629      	mov	r1, r5
 8007776:	4640      	mov	r0, r8
 8007778:	f7fe fe90 	bl	800649c <_malloc_r>
 800777c:	4607      	mov	r7, r0
 800777e:	2800      	cmp	r0, #0
 8007780:	d0ec      	beq.n	800775c <_realloc_r+0x1c>
 8007782:	42b5      	cmp	r5, r6
 8007784:	462a      	mov	r2, r5
 8007786:	4621      	mov	r1, r4
 8007788:	bf28      	it	cs
 800778a:	4632      	movcs	r2, r6
 800778c:	f7ff fa0d 	bl	8006baa <memcpy>
 8007790:	4621      	mov	r1, r4
 8007792:	4640      	mov	r0, r8
 8007794:	f7ff fa18 	bl	8006bc8 <_free_r>
 8007798:	463c      	mov	r4, r7
 800779a:	e7e0      	b.n	800775e <_realloc_r+0x1e>

0800779c <_malloc_usable_size_r>:
 800779c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a0:	1f18      	subs	r0, r3, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfbc      	itt	lt
 80077a6:	580b      	ldrlt	r3, [r1, r0]
 80077a8:	18c0      	addlt	r0, r0, r3
 80077aa:	4770      	bx	lr

080077ac <_init>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	bf00      	nop
 80077b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b2:	bc08      	pop	{r3}
 80077b4:	469e      	mov	lr, r3
 80077b6:	4770      	bx	lr

080077b8 <_fini>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	bf00      	nop
 80077bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077be:	bc08      	pop	{r3}
 80077c0:	469e      	mov	lr, r3
 80077c2:	4770      	bx	lr
