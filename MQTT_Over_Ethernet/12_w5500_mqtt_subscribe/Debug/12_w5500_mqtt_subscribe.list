
12_w5500_mqtt_subscribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007784  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08007924  08007924  00008924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d08  08007d08  00009120  2**0
                  CONTENTS
  4 .ARM          00000008  08007d08  08007d08  00008d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d10  08007d10  00009120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d10  08007d10  00008d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d14  08007d14  00008d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08007d18  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  20000120  08007e38  00009120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  08007e38  00009964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000888c  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d0  00000000  00000000  000119dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00013fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a9  00000000  00000000  00014858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b2f  00000000  00000000  00014f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd93  00000000  00000000  00026a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b102  00000000  00000000  000327c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d8c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002940  00000000  00000000  0008d908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00090248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000120 	.word	0x20000120
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800790c 	.word	0x0800790c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000124 	.word	0x20000124
 80001dc:	0800790c 	.word	0x0800790c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	68ba      	ldr	r2, [r7, #8]
 80002c0:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	601a      	str	r2, [r3, #0]
}
 80002c8:	bf00      	nop
 80002ca:	3714      	adds	r7, #20
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d003      	beq.n	80002f0 <getNextPacketId+0x1c>
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	e000      	b.n	80002f2 <getNextPacketId+0x1e>
 80002f0:	2301      	movs	r3, #1
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	6013      	str	r3, [r2, #0]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8000306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000308:	b087      	sub	sp, #28
 800030a:	af00      	add	r7, sp, #0
 800030c:	60f8      	str	r0, [r7, #12]
 800030e:	60b9      	str	r1, [r7, #8]
 8000310:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8000312:	f04f 33ff 	mov.w	r3, #4294967295
 8000316:	617b      	str	r3, [r7, #20]
        sent = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800031c:	e018      	b.n	8000350 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000322:	689c      	ldr	r4, [r3, #8]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	691a      	ldr	r2, [r3, #16]
 800032c:	693b      	ldr	r3, [r7, #16]
 800032e:	18d6      	adds	r6, r2, r3
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f001 fbfb 	bl	8001b2c <TimerLeftMS>
 8000336:	4603      	mov	r3, r0
 8000338:	68ba      	ldr	r2, [r7, #8]
 800033a:	4631      	mov	r1, r6
 800033c:	4628      	mov	r0, r5
 800033e:	47a0      	blx	r4
 8000340:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	2b00      	cmp	r3, #0
 8000346:	db0e      	blt.n	8000366 <sendPacket+0x60>
            break;
        sent += rc;
 8000348:	693a      	ldr	r2, [r7, #16]
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	4413      	add	r3, r2
 800034e:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8000350:	693a      	ldr	r2, [r7, #16]
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	429a      	cmp	r2, r3
 8000356:	da07      	bge.n	8000368 <sendPacket+0x62>
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f001 fba5 	bl	8001aa8 <TimerIsExpired>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0dc      	beq.n	800031e <sendPacket+0x18>
 8000364:	e000      	b.n	8000368 <sendPacket+0x62>
            break;
 8000366:	bf00      	nop
    }
    if (sent == length)
 8000368:	693a      	ldr	r2, [r7, #16]
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	429a      	cmp	r2, r3
 800036e:	d10b      	bne.n	8000388 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4619      	mov	r1, r3
 800037c:	4610      	mov	r0, r2
 800037e:	f001 fbbd 	bl	8001afc <TimerCountdown>
        rc = SUCCESS_;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	e002      	b.n	800038e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8000388:	f04f 33ff 	mov.w	r3, #4294967295
 800038c:	617b      	str	r3, [r7, #20]
    return rc;
 800038e:	697b      	ldr	r3, [r7, #20]
}
 8000390:	4618      	mov	r0, r3
 8000392:	371c      	adds	r7, #28
 8000394:	46bd      	mov	sp, r7
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000398 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
 80003a4:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	68ba      	ldr	r2, [r7, #8]
 80003aa:	655a      	str	r2, [r3, #84]	@ 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	e008      	b.n	80003c4 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	697a      	ldr	r2, [r7, #20]
 80003b6:	3205      	adds	r2, #5
 80003b8:	2100      	movs	r1, #0
 80003ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	3301      	adds	r3, #1
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	2b04      	cmp	r3, #4
 80003c8:	ddf3      	ble.n	80003b2 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	683a      	ldr	r2, [r7, #0]
 80003d4:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	6a3a      	ldr	r2, [r7, #32]
 80003da:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80003e0:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80003e6:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	2200      	movs	r2, #0
 80003ec:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	2200      	movs	r2, #0
 80003f2:	625a      	str	r2, [r3, #36]	@ 0x24
    c->ping_outstanding = 0;
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	2200      	movs	r2, #0
 80003f8:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	2200      	movs	r2, #0
 80003fe:	651a      	str	r2, [r3, #80]	@ 0x50
	  c->next_packetid = 1;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2201      	movs	r2, #1
 8000404:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	3358      	adds	r3, #88	@ 0x58
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fb3e 	bl	8001a8c <TimerInit>
    TimerInit(&c->last_received);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3360      	adds	r3, #96	@ 0x60
 8000414:	4618      	mov	r0, r3
 8000416:	f001 fb39 	bl	8001a8c <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 800041a:	bf00      	nop
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8000422:	b590      	push	{r4, r7, lr}
 8000424:	b08b      	sub	sp, #44	@ 0x2c
 8000426:	af00      	add	r7, sp, #0
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800042e:	2301      	movs	r3, #1
 8000430:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8000436:	2304      	movs	r3, #4
 8000438:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000446:	6a3b      	ldr	r3, [r7, #32]
 8000448:	3301      	adds	r3, #1
 800044a:	623b      	str	r3, [r7, #32]
 800044c:	6a3a      	ldr	r2, [r7, #32]
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	429a      	cmp	r2, r3
 8000452:	dd03      	ble.n	800045c <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
 8000458:	61bb      	str	r3, [r7, #24]
            goto exit;
 800045a:	e021      	b.n	80004a0 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000460:	685c      	ldr	r4, [r3, #4]
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8000466:	f107 0117 	add.w	r1, r7, #23
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2201      	movs	r2, #1
 800046e:	47a0      	blx	r4
 8000470:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d112      	bne.n	800049e <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000482:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000484:	fb01 f303 	mul.w	r3, r1, r3
 8000488:	441a      	add	r2, r3
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800048e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000490:	01db      	lsls	r3, r3, #7
 8000492:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	b25b      	sxtb	r3, r3
 8000498:	2b00      	cmp	r3, #0
 800049a:	dbd1      	blt.n	8000440 <decodePacket+0x1e>
exit:
 800049c:	e000      	b.n	80004a0 <decodePacket+0x7e>
            goto exit;
 800049e:	bf00      	nop
    return len;
 80004a0:	6a3b      	ldr	r3, [r7, #32]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	372c      	adds	r7, #44	@ 0x2c
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd90      	pop	{r4, r7, pc}

080004aa <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 80004aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ac:	b089      	sub	sp, #36	@ 0x24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	60f8      	str	r0, [r7, #12]
 80004b2:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
    int len = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80004c4:	685c      	ldr	r4, [r3, #4]
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	695e      	ldr	r6, [r3, #20]
 80004ce:	68b8      	ldr	r0, [r7, #8]
 80004d0:	f001 fb2c 	bl	8001b2c <TimerLeftMS>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2201      	movs	r2, #1
 80004d8:	4631      	mov	r1, r6
 80004da:	4628      	mov	r0, r5
 80004dc:	47a0      	blx	r4
 80004de:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d15d      	bne.n	80005a2 <readPacket+0xf8>
        goto exit;

    len = 1;
 80004e6:	2301      	movs	r3, #1
 80004e8:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 80004ea:	68b8      	ldr	r0, [r7, #8]
 80004ec:	f001 fb1e 	bl	8001b2c <TimerLeftMS>
 80004f0:	4602      	mov	r2, r0
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	f7ff ff92 	bl	8000422 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	3301      	adds	r3, #1
 8000504:	693a      	ldr	r2, [r7, #16]
 8000506:	4611      	mov	r1, r2
 8000508:	4618      	mov	r0, r3
 800050a:	f000 ff4c 	bl	80013a6 <MQTTPacket_encode>
 800050e:	4602      	mov	r2, r0
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	4413      	add	r3, r2
 8000514:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	68da      	ldr	r2, [r3, #12]
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	693a      	ldr	r2, [r7, #16]
 8000520:	4293      	cmp	r3, r2
 8000522:	d203      	bcs.n	800052c <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8000524:	f06f 0301 	mvn.w	r3, #1
 8000528:	61fb      	str	r3, [r7, #28]
        goto exit;
 800052a:	e03d      	b.n	80005a8 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	2b00      	cmp	r3, #0
 8000530:	dd20      	ble.n	8000574 <readPacket+0xca>
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000536:	685c      	ldr	r4, [r3, #4]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	695a      	ldr	r2, [r3, #20]
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	18d6      	adds	r6, r2, r3
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	68b8      	ldr	r0, [r7, #8]
 800054a:	f001 faef 	bl	8001b2c <TimerLeftMS>
 800054e:	4603      	mov	r3, r0
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	4631      	mov	r1, r6
 8000554:	4628      	mov	r0, r5
 8000556:	47a0      	blx	r4
 8000558:	4602      	mov	r2, r0
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	429a      	cmp	r2, r3
 800055e:	bf14      	ite	ne
 8000560:	2301      	movne	r3, #1
 8000562:	2300      	moveq	r3, #0
 8000564:	b2db      	uxtb	r3, r3
 8000566:	61fb      	str	r3, [r7, #28]
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d002      	beq.n	8000574 <readPacket+0xca>
        rc = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
        goto exit;
 8000572:	e019      	b.n	80005a8 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800057c:	7d3b      	ldrb	r3, [r7, #20]
 800057e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000582:	b2db      	uxtb	r3, r3
 8000584:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00b      	beq.n	80005a6 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4619      	mov	r1, r3
 800059a:	4610      	mov	r0, r2
 800059c:	f001 faae 	bl	8001afc <TimerCountdown>
 80005a0:	e002      	b.n	80005a8 <readPacket+0xfe>
        goto exit;
 80005a2:	bf00      	nop
 80005a4:	e000      	b.n	80005a8 <readPacket+0xfe>
exit:
 80005a6:	bf00      	nop
    return rc;
 80005a8:	69fb      	ldr	r3, [r7, #28]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3724      	adds	r7, #36	@ 0x24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005b2 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b087      	sub	sp, #28
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	461a      	mov	r2, r3
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	4413      	add	r3, r2
 80005d0:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 80005d2:	e039      	b.n	8000648 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80005da:	d103      	bne.n	80005e4 <isTopicMatched+0x32>
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80005e2:	d13a      	bne.n	800065a <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b2b      	cmp	r3, #43	@ 0x2b
 80005ea:	d009      	beq.n	8000600 <isTopicMatched+0x4e>
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b23      	cmp	r3, #35	@ 0x23
 80005f2:	d005      	beq.n	8000600 <isTopicMatched+0x4e>
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d12e      	bne.n	800065e <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b2b      	cmp	r3, #43	@ 0x2b
 8000606:	d112      	bne.n	800062e <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800060e:	e005      	b.n	800061c <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	3301      	adds	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	3301      	adds	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	429a      	cmp	r2, r3
 8000622:	d20b      	bcs.n	800063c <isTopicMatched+0x8a>
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b2f      	cmp	r3, #47	@ 0x2f
 800062a:	d1f1      	bne.n	8000610 <isTopicMatched+0x5e>
 800062c:	e006      	b.n	800063c <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b23      	cmp	r3, #35	@ 0x23
 8000634:	d102      	bne.n	800063c <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	3b01      	subs	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
        curf++;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	3301      	adds	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
        curn++;
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	3301      	adds	r3, #1
 8000646:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d007      	beq.n	8000660 <isTopicMatched+0xae>
 8000650:	693a      	ldr	r2, [r7, #16]
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	429a      	cmp	r2, r3
 8000656:	d3bd      	bcc.n	80005d4 <isTopicMatched+0x22>
 8000658:	e002      	b.n	8000660 <isTopicMatched+0xae>
            break;
 800065a:	bf00      	nop
 800065c:	e000      	b.n	8000660 <isTopicMatched+0xae>
            break;
 800065e:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	429a      	cmp	r2, r3
 8000666:	d105      	bne.n	8000674 <isTopicMatched+0xc2>
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <isTopicMatched+0xc2>
 8000670:	2301      	movs	r3, #1
 8000672:	e000      	b.n	8000676 <isTopicMatched+0xc4>
 8000674:	2300      	movs	r3, #0
 8000676:	b2db      	uxtb	r3, r3
}
 8000678:	4618      	mov	r0, r3
 800067a:	371c      	adds	r7, #28
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
 800069a:	e03c      	b.n	8000716 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006a0:	3205      	adds	r2, #5
 80006a2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d032      	beq.n	8000710 <deliverMessage+0x8c>
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ae:	3205      	adds	r2, #5
 80006b0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006b4:	4619      	mov	r1, r3
 80006b6:	68b8      	ldr	r0, [r7, #8]
 80006b8:	f001 f844 	bl	8001744 <MQTTPacket_equals>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d10b      	bne.n	80006da <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006c6:	3205      	adds	r2, #5
 80006c8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006cc:	68b9      	ldr	r1, [r7, #8]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff6f 	bl	80005b2 <isTopicMatched>
 80006d4:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d01a      	beq.n	8000710 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006de:	3305      	adds	r3, #5
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	4413      	add	r3, r2
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d012      	beq.n	8000710 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80006ea:	f107 0318 	add.w	r3, r7, #24
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	68b9      	ldr	r1, [r7, #8]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fddc 	bl	80002b0 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	3305      	adds	r3, #5
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	4413      	add	r3, r2
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f107 0218 	add.w	r2, r7, #24
 8000708:	4610      	mov	r0, r2
 800070a:	4798      	blx	r3
                rc = SUCCESS_;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000712:	3301      	adds	r3, #1
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
 8000716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000718:	2b04      	cmp	r3, #4
 800071a:	ddbf      	ble.n	800069c <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800071c:	6a3b      	ldr	r3, [r7, #32]
 800071e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000722:	d112      	bne.n	800074a <deliverMessage+0xc6>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00e      	beq.n	800074a <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	68b9      	ldr	r1, [r7, #8]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fdbb 	bl	80002b0 <NewMessageData>
        c->defaultMessageHandler(&md);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800073e:	f107 0210 	add.w	r2, r7, #16
 8000742:	4610      	mov	r0, r2
 8000744:	4798      	blx	r3
        rc = SUCCESS_;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800074a:	6a3b      	ldr	r3, [r7, #32]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3728      	adds	r7, #40	@ 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <keepalive>:


int keepalive(MQTTClient* c)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    int rc = SUCCESS_;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d03e      	beq.n	80007e6 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3358      	adds	r3, #88	@ 0x58
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f99b 	bl	8001aa8 <TimerIsExpired>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d107      	bne.n	8000788 <keepalive+0x34>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3360      	adds	r3, #96	@ 0x60
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f993 	bl	8001aa8 <TimerIsExpired>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d030      	beq.n	80007ea <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7f1b      	ldrb	r3, [r3, #28]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e029      	b.n	80007ec <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4618      	mov	r0, r3
 800079e:	f001 f975 	bl	8001a8c <TimerInit>
            TimerCountdownMS(&timer, 1000);
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 f992 	bl	8001ad4 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	691a      	ldr	r2, [r3, #16]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	4619      	mov	r1, r3
 80007ba:	4610      	mov	r0, r2
 80007bc:	f000 fd27 	bl	800120e <MQTTSerialize_pingreq>
 80007c0:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS_) // send the ping packet
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dd11      	ble.n	80007ec <keepalive+0x98>
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	461a      	mov	r2, r3
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff fd98 	bl	8000306 <sendPacket>
 80007d6:	6178      	str	r0, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d106      	bne.n	80007ec <keepalive+0x98>
                c->ping_outstanding = 1;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2201      	movs	r2, #1
 80007e2:	771a      	strb	r2, [r3, #28]
 80007e4:	e002      	b.n	80007ec <keepalive+0x98>
        goto exit;
 80007e6:	bf00      	nop
 80007e8:	e000      	b.n	80007ec <keepalive+0x98>
        }
    }

exit:
 80007ea:	bf00      	nop
    return rc;
 80007ec:	697b      	ldr	r3, [r7, #20]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b085      	sub	sp, #20
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
    int i = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	e008      	b.n	800081a <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	3205      	adds	r2, #5
 800080e:	2100      	movs	r1, #0
 8000810:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2b04      	cmp	r3, #4
 800081e:	ddf3      	ble.n	8000808 <MQTTCleanSession+0x12>
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ffd3 	bl	80007f6 <MQTTCleanSession>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	b095      	sub	sp, #84	@ 0x54
 800085c:	af06      	add	r7, sp, #24
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    int len = 0,
 8000862:	2300      	movs	r3, #0
 8000864:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = SUCCESS_;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	@ 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 800086a:	6839      	ldr	r1, [r7, #0]
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fe1c 	bl	80004aa <readPacket>
 8000872:	62f8      	str	r0, [r7, #44]	@ 0x2c

    switch (packet_type)
 8000874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000876:	2b0d      	cmp	r3, #13
 8000878:	d81e      	bhi.n	80008b8 <cycle+0x60>
 800087a:	a201      	add	r2, pc, #4	@ (adr r2, 8000880 <cycle+0x28>)
 800087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000880:	08000a0f 	.word	0x08000a0f
 8000884:	080008b9 	.word	0x080008b9
 8000888:	08000a0f 	.word	0x08000a0f
 800088c:	080008bf 	.word	0x080008bf
 8000890:	08000a0f 	.word	0x08000a0f
 8000894:	0800098b 	.word	0x0800098b
 8000898:	0800098b 	.word	0x0800098b
 800089c:	08000a0f 	.word	0x08000a0f
 80008a0:	080008b9 	.word	0x080008b9
 80008a4:	08000a0f 	.word	0x08000a0f
 80008a8:	080008b9 	.word	0x080008b9
 80008ac:	08000a0f 	.word	0x08000a0f
 80008b0:	080008b9 	.word	0x080008b9
 80008b4:	08000a07 	.word	0x08000a07
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 80008b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
            goto exit;
 80008bc:	e0b9      	b.n	8000a32 <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80008ca:	4616      	mov	r6, r2
 80008cc:	f107 0210 	add.w	r2, r7, #16
 80008d0:	1d15      	adds	r5, r2, #4
 80008d2:	f107 0210 	add.w	r2, r7, #16
 80008d6:	1c54      	adds	r4, r2, #1
 80008d8:	f107 010c 	add.w	r1, r7, #12
 80008dc:	f107 0210 	add.w	r2, r7, #16
 80008e0:	1c90      	adds	r0, r2, #2
 80008e2:	9604      	str	r6, [sp, #16]
 80008e4:	9303      	str	r3, [sp, #12]
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	330c      	adds	r3, #12
 80008ec:	9302      	str	r3, [sp, #8]
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	3308      	adds	r3, #8
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	462b      	mov	r3, r5
 80008fe:	4622      	mov	r2, r4
 8000900:	f000 fc94 	bl	800122c <MQTTDeserialize_publish>
 8000904:	4603      	mov	r3, r0
 8000906:	2b01      	cmp	r3, #1
 8000908:	f040 8090 	bne.w	8000a2c <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8000912:	f107 0210 	add.w	r2, r7, #16
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	4619      	mov	r1, r3
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff feb1 	bl	8000684 <deliverMessage>
            if (msg.qos != QOS0)
 8000922:	7c3b      	ldrb	r3, [r7, #16]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d074      	beq.n	8000a12 <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8000928:	7c3b      	ldrb	r3, [r7, #16]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d10c      	bne.n	8000948 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6918      	ldr	r0, [r3, #16]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	4619      	mov	r1, r3
 8000938:	8abb      	ldrh	r3, [r7, #20]
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2204      	movs	r2, #4
 8000940:	f000 ff37 	bl	80017b2 <MQTTSerialize_ack>
 8000944:	6378      	str	r0, [r7, #52]	@ 0x34
 8000946:	e00e      	b.n	8000966 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8000948:	7c3b      	ldrb	r3, [r7, #16]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d10b      	bne.n	8000966 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6918      	ldr	r0, [r3, #16]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	4619      	mov	r1, r3
 8000958:	8abb      	ldrh	r3, [r7, #20]
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2300      	movs	r3, #0
 800095e:	2205      	movs	r2, #5
 8000960:	f000 ff27 	bl	80017b2 <MQTTSerialize_ack>
 8000964:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 8000966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000968:	2b00      	cmp	r3, #0
 800096a:	dc03      	bgt.n	8000974 <cycle+0x11c>
                    rc = FAILURE;
 800096c:	f04f 33ff 	mov.w	r3, #4294967295
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
 8000972:	e005      	b.n	8000980 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8000974:	683a      	ldr	r2, [r7, #0]
 8000976:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fcc4 	bl	8000306 <sendPacket>
 800097e:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 8000980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000986:	d144      	bne.n	8000a12 <cycle+0x1ba>
                    goto exit; // there was a problem
 8000988:	e053      	b.n	8000a32 <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	695c      	ldr	r4, [r3, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	f107 020a 	add.w	r2, r7, #10
 8000996:	f107 0109 	add.w	r1, r7, #9
 800099a:	f107 0008 	add.w	r0, r7, #8
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4623      	mov	r3, r4
 80009a2:	f000 fcb5 	bl	8001310 <MQTTDeserialize_ack>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d003      	beq.n	80009b4 <cycle+0x15c>
                rc = FAILURE;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80009b2:	e023      	b.n	80009fc <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6918      	ldr	r0, [r3, #16]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	4619      	mov	r1, r3
 80009be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c0:	2b05      	cmp	r3, #5
 80009c2:	d101      	bne.n	80009c8 <cycle+0x170>
 80009c4:	2206      	movs	r2, #6
 80009c6:	e000      	b.n	80009ca <cycle+0x172>
 80009c8:	2207      	movs	r2, #7
 80009ca:	897b      	ldrh	r3, [r7, #10]
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2300      	movs	r3, #0
 80009d0:	f000 feef 	bl	80017b2 <MQTTSerialize_ack>
 80009d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80009d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009d8:	2b00      	cmp	r3, #0
 80009da:	dc03      	bgt.n	80009e4 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80009e2:	e00b      	b.n	80009fc <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS_) // send the PUBREL packet
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff fc8c 	bl	8000306 <sendPacket>
 80009ee:	6338      	str	r0, [r7, #48]	@ 0x30
 80009f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 80009fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a02:	d108      	bne.n	8000a16 <cycle+0x1be>
                goto exit; // there was a problem
 8000a04:	e015      	b.n	8000a32 <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	771a      	strb	r2, [r3, #28]
            break;
 8000a0c:	e004      	b.n	8000a18 <cycle+0x1c0>
            break;
 8000a0e:	bf00      	nop
 8000a10:	e002      	b.n	8000a18 <cycle+0x1c0>
            break;
 8000a12:	bf00      	nop
 8000a14:	e000      	b.n	8000a18 <cycle+0x1c0>
            break;
 8000a16:	bf00      	nop
    }

    if (keepalive(c) != SUCCESS_) {
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fe9b 	bl	8000754 <keepalive>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a2a:	e002      	b.n	8000a32 <cycle+0x1da>
                goto exit;
 8000a2c:	bf00      	nop
 8000a2e:	e000      	b.n	8000a32 <cycle+0x1da>
    }

exit:
 8000a30:	bf00      	nop
    if (rc == SUCCESS_)
 8000a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <cycle+0x1e6>
        rc = packet_type;
 8000a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a3c:	e006      	b.n	8000a4c <cycle+0x1f4>
    else if (c->isconnected)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6a1b      	ldr	r3, [r3, #32]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <cycle+0x1f4>
        MQTTCloseSession(c);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fef1 	bl	800082e <MQTTCloseSession>
    return rc;
 8000a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	373c      	adds	r7, #60	@ 0x3c
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a56:	bf00      	nop

08000a58 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS_;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f80e 	bl	8001a8c <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 f82b 	bl	8001ad4 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fee7 	bl	8000858 <cycle>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	da03      	bge.n	8000a98 <MQTTYield+0x40>
        {
            rc = FAILURE;
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	617b      	str	r3, [r7, #20]
            break;
 8000a96:	e007      	b.n	8000aa8 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f803 	bl	8001aa8 <TimerIsExpired>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0ea      	beq.n	8000a7e <MQTTYield+0x26>

    return rc;
 8000aa8:	697b      	ldr	r3, [r7, #20]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 ffef 	bl	8001aa8 <TimerIsExpired>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10c      	bne.n	8000aea <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f7ff fec0 	bl	8000858 <cycle>
 8000ad8:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d004      	beq.n	8000aec <waitfor+0x3a>
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	daed      	bge.n	8000ac4 <waitfor+0x12>
 8000ae8:	e000      	b.n	8000aec <waitfor+0x3a>
            break; // we timed out
 8000aea:	bf00      	nop

    return rc;
 8000aec:	697b      	ldr	r3, [r7, #20]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09e      	sub	sp, #120	@ 0x78
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8000b0a:	4a43      	ldr	r2, [pc, #268]	@ (8000c18 <MQTTConnectWithResults+0x120>)
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4611      	mov	r1, r2
 8000b12:	2258      	movs	r2, #88	@ 0x58
 8000b14:	4618      	mov	r0, r3
 8000b16:	f006 f8f8 	bl	8006d0a <memcpy>
    int len = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6a1b      	ldr	r3, [r3, #32]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d164      	bne.n	8000bf0 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8000b26:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 ffae 	bl	8001a8c <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 ffca 	bl	8001ad4 <TimerCountdownMS>

    if (options == 0)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	8b1b      	ldrh	r3, [r3, #24]
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	7e9b      	ldrb	r3, [r3, #26]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	f000 ffc5 	bl	8001afc <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6918      	ldr	r0, [r3, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f000 f9cd 	bl	8000f1c <MQTTSerialize_connect>
 8000b82:	6738      	str	r0, [r7, #112]	@ 0x70
 8000b84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	dd34      	ble.n	8000bf4 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS_)  // send the connect packet
 8000b8a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b8e:	461a      	mov	r2, r3
 8000b90:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff fbb7 	bl	8000306 <sendPacket>
 8000b98:	6778      	str	r0, [r7, #116]	@ 0x74
 8000b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d12b      	bne.n	8000bf8 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8000ba0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff ff82 	bl	8000ab2 <waitfor>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d119      	bne.n	8000be8 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	1c58      	adds	r0, r3, #1
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	f000 fa91 	bl	80010f4 <MQTTDeserialize_connack>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d103      	bne.n	8000be0 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	677b      	str	r3, [r7, #116]	@ 0x74
 8000bde:	e00c      	b.n	8000bfa <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	677b      	str	r3, [r7, #116]	@ 0x74
 8000be6:	e008      	b.n	8000bfa <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	677b      	str	r3, [r7, #116]	@ 0x74
 8000bee:	e004      	b.n	8000bfa <MQTTConnectWithResults+0x102>
		  goto exit;
 8000bf0:	bf00      	nop
 8000bf2:	e002      	b.n	8000bfa <MQTTConnectWithResults+0x102>
        goto exit;
 8000bf4:	bf00      	nop
 8000bf6:	e000      	b.n	8000bfa <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8000bf8:	bf00      	nop

exit:
    if (rc == SUCCESS_)
 8000bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d105      	bne.n	8000c0c <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2201      	movs	r2, #1
 8000c04:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8000c0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3778      	adds	r7, #120	@ 0x78
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08007924 	.word	0x08007924

08000c1c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	6839      	ldr	r1, [r7, #0]
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ff62 	bl	8000af8 <MQTTConnectWithResults>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	617b      	str	r3, [r7, #20]
    int i = -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	e028      	b.n	8000cae <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	3205      	adds	r2, #5
 8000c62:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d01e      	beq.n	8000ca8 <MQTTSetMessageHandler+0x6a>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	3205      	adds	r2, #5
 8000c70:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fab2 	bl	80001e0 <strcmp>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d112      	bne.n	8000ca8 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10c      	bne.n	8000ca2 <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	3205      	adds	r2, #5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	3305      	adds	r3, #5
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
            }
            rc = SUCCESS_; /* return i when adding new subscription */
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
            break;
 8000ca6:	e005      	b.n	8000cb4 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	3301      	adds	r3, #1
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	ddd3      	ble.n	8000c5c <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d026      	beq.n	8000d08 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	d112      	bne.n	8000ce8 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	e00c      	b.n	8000ce2 <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	3205      	adds	r2, #5
 8000cce:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <MQTTSetMessageHandler+0x9e>
                {
                    rc = SUCCESS_;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
                    break;
 8000cda:	e005      	b.n	8000ce8 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	ddef      	ble.n	8000cc8 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	dc0c      	bgt.n	8000d08 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	3205      	adds	r2, #5
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	3305      	adds	r3, #5
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4413      	add	r3, r2
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 8000d08:	697b      	ldr	r3, [r7, #20]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 8000d12:	b5b0      	push	{r4, r5, r7, lr}
 8000d14:	b092      	sub	sp, #72	@ 0x48
 8000d16:	af04      	add	r7, sp, #16
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    int len = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	@ 0x30
    MQTTString topic = MQTTString_initializer;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicFilter;
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d063      	beq.n	8000e0c <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 8000d44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fe9f 	bl	8001a8c <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 febb 	bl	8001ad4 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	691c      	ldr	r4, [r3, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	461d      	mov	r5, r3
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff fab3 	bl	80002d4 <getNextPacketId>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	4613      	mov	r3, r2
 8000d82:	2200      	movs	r2, #0
 8000d84:	4629      	mov	r1, r5
 8000d86:	4620      	mov	r0, r4
 8000d88:	f000 fd8f 	bl	80018aa <MQTTSerialize_subscribe>
 8000d8c:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	dd3d      	ble.n	8000e10 <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS_) // send the subscribe packet
 8000d94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d98:	461a      	mov	r2, r3
 8000d9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fab2 	bl	8000306 <sendPacket>
 8000da2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d134      	bne.n	8000e14 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8000daa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dae:	461a      	mov	r2, r3
 8000db0:	2109      	movs	r1, #9
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f7ff fe7d 	bl	8000ab2 <waitfor>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b09      	cmp	r3, #9
 8000dbc:	d122      	bne.n	8000e04 <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 8000dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8000dc8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	68d2      	ldr	r2, [r2, #12]
 8000dd2:	4614      	mov	r4, r2
 8000dd4:	f107 0218 	add.w	r2, r7, #24
 8000dd8:	f107 0016 	add.w	r0, r7, #22
 8000ddc:	9401      	str	r4, [sp, #4]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	460b      	mov	r3, r1
 8000de2:	2101      	movs	r1, #1
 8000de4:	f000 fddd 	bl	80019a2 <MQTTDeserialize_suback>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d113      	bne.n	8000e16 <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 8000dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b80      	cmp	r3, #128	@ 0x80
 8000df4:	d00f      	beq.n	8000e16 <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff ff1f 	bl	8000c3e <MQTTSetMessageHandler>
 8000e00:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e02:	e008      	b.n	8000e16 <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e0a:	e004      	b.n	8000e16 <MQTTSubscribeWithResults+0x104>
		    goto exit;
 8000e0c:	bf00      	nop
 8000e0e:	e002      	b.n	8000e16 <MQTTSubscribeWithResults+0x104>
        goto exit;
 8000e10:	bf00      	nop
 8000e12:	e000      	b.n	8000e16 <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 8000e14:	bf00      	nop

exit:
    if (rc == FAILURE)
 8000e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d102      	bne.n	8000e24 <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f7ff fd05 	bl	800082e <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8000e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3738      	adds	r7, #56	@ 0x38
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bdb0      	pop	{r4, r5, r7, pc}

08000e2e <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b088      	sub	sp, #32
 8000e32:	af02      	add	r7, sp, #8
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 8000e3e:	79fa      	ldrb	r2, [r7, #7]
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f7ff ff61 	bl	8000d12 <MQTTSubscribeWithResults>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8000e5a:	b590      	push	{r4, r7, lr}
 8000e5c:	b085      	sub	sp, #20
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7a1b      	ldrb	r3, [r3, #8]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d102      	bne.n	8000e74 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000e6e:	230c      	movs	r3, #12
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	e005      	b.n	8000e80 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7a1b      	ldrb	r3, [r3, #8]
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	d101      	bne.n	8000e80 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	330c      	adds	r3, #12
 8000e84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e88:	f000 fc43 	bl	8001712 <MQTTstrlen>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	3302      	adds	r3, #2
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7edb      	ldrb	r3, [r3, #27]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d013      	beq.n	8000ec6 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3324      	adds	r3, #36	@ 0x24
 8000ea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ea6:	f000 fc34 	bl	8001712 <MQTTstrlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	1c9c      	adds	r4, r3, #2
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3330      	adds	r3, #48	@ 0x30
 8000eb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000eb6:	f000 fc2c 	bl	8001712 <MQTTstrlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4423      	add	r3, r4
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <MQTTSerialize_connectLength+0x7c>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00a      	beq.n	8000eec <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3340      	adds	r3, #64	@ 0x40
 8000eda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ede:	f000 fc18 	bl	8001712 <MQTTstrlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d103      	bne.n	8000efc <MQTTSerialize_connectLength+0xa2>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00a      	beq.n	8000f12 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	334c      	adds	r3, #76	@ 0x4c
 8000f00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f04:	f000 fc05 	bl	8001712 <MQTTstrlen>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}

08000f1c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff8b 	bl	8000e5a <MQTTSerialize_connectLength>
 8000f44:	6238      	str	r0, [r7, #32]
 8000f46:	6a38      	ldr	r0, [r7, #32]
 8000f48:	f000 fa98 	bl	800147c <MQTTPacket_len>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	4293      	cmp	r3, r2
 8000f52:	da03      	bge.n	8000f5c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000f54:	f06f 0301 	mvn.w	r3, #1
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8000f5a:	e0c2      	b.n	80010e2 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000f60:	7e3b      	ldrb	r3, [r7, #24]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f362 1307 	bfi	r3, r2, #4, #4
 8000f68:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000f6a:	7e3a      	ldrb	r2, [r7, #24]
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fb11 	bl	800159a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	6a39      	ldr	r1, [r7, #32]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fa12 	bl	80013a6 <MQTTPacket_encode>
 8000f82:	4602      	mov	r2, r0
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	4413      	add	r3, r2
 8000f88:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7a1b      	ldrb	r3, [r3, #8]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d10c      	bne.n	8000fac <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4955      	ldr	r1, [pc, #340]	@ (80010ec <MQTTSerialize_connect+0x1d0>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fb3c 	bl	8001616 <writeCString>
		writeChar(&ptr, (char) 4);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 faf8 	bl	800159a <writeChar>
 8000faa:	e00b      	b.n	8000fc4 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	494f      	ldr	r1, [pc, #316]	@ (80010f0 <MQTTSerialize_connect+0x1d4>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fb2f 	bl	8001616 <writeCString>
		writeChar(&ptr, (char) 3);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 faeb 	bl	800159a <writeChar>
	}

	flags.all = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7e9b      	ldrb	r3, [r3, #26]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	7d3b      	ldrb	r3, [r7, #20]
 8000fd4:	f362 0341 	bfi	r3, r2, #1, #1
 8000fd8:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7edb      	ldrb	r3, [r3, #27]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf14      	ite	ne
 8000fe2:	2301      	movne	r3, #1
 8000fe4:	2300      	moveq	r3, #0
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	7d3b      	ldrb	r3, [r7, #20]
 8000fea:	f362 0382 	bfi	r3, r2, #2, #1
 8000fee:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000ff0:	7d3b      	ldrb	r3, [r7, #20]
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	b2da      	uxtb	r2, r3
 8001008:	7d3b      	ldrb	r3, [r7, #20]
 800100a:	f362 03c4 	bfi	r3, r2, #3, #2
 800100e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	7d3b      	ldrb	r3, [r7, #20]
 800101e:	f362 1345 	bfi	r3, r2, #5, #1
 8001022:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <MQTTSerialize_connect+0x118>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8001034:	7d3b      	ldrb	r3, [r7, #20]
 8001036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800103a:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001040:	2b00      	cmp	r3, #0
 8001042:	d103      	bne.n	800104c <MQTTSerialize_connect+0x130>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800104c:	7d3b      	ldrb	r3, [r7, #20]
 800104e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001052:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8001054:	7d3a      	ldrb	r2, [r7, #20]
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fa9c 	bl	800159a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	8b1b      	ldrh	r3, [r3, #24]
 8001066:	461a      	mov	r2, r3
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 faa8 	bl	80015c4 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f107 001c 	add.w	r0, r7, #28
 800107a:	330c      	adds	r3, #12
 800107c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800107e:	f000 fae9 	bl	8001654 <writeMQTTString>
	if (options->willFlag)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7edb      	ldrb	r3, [r3, #27]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00d      	beq.n	80010a6 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f107 001c 	add.w	r0, r7, #28
 8001090:	3324      	adds	r3, #36	@ 0x24
 8001092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001094:	f000 fade 	bl	8001654 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f107 001c 	add.w	r0, r7, #28
 800109e:	3330      	adds	r3, #48	@ 0x30
 80010a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a2:	f000 fad7 	bl	8001654 <writeMQTTString>
	}
	if (flags.bits.username)
 80010a6:	7d3b      	ldrb	r3, [r7, #20]
 80010a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f107 001c 	add.w	r0, r7, #28
 80010b8:	3340      	adds	r3, #64	@ 0x40
 80010ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010bc:	f000 faca 	bl	8001654 <writeMQTTString>
	if (flags.bits.password)
 80010c0:	7d3b      	ldrb	r3, [r7, #20]
 80010c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f107 001c 	add.w	r0, r7, #28
 80010d2:	334c      	adds	r3, #76	@ 0x4c
 80010d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d6:	f000 fabd 	bl	8001654 <writeMQTTString>

	rc = ptr - buf;
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3728      	adds	r7, #40	@ 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	0800797c 	.word	0x0800797c
 80010f0:	08007984 	.word	0x08007984

080010f4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fa29 	bl	8001572 <readChar>
 8001120:	4603      	mov	r3, r0
 8001122:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8001124:	7f3b      	ldrb	r3, [r7, #28]
 8001126:	f023 030f 	bic.w	r3, r3, #15
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b20      	cmp	r3, #32
 800112e:	d12e      	bne.n	800118e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	f107 0214 	add.w	r2, r7, #20
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f9e9 	bl	8001510 <MQTTPacket_decodeBuf>
 800113e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4413      	add	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4413      	add	r3, r2
 800114e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6a3a      	ldr	r2, [r7, #32]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	dd1b      	ble.n	8001192 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fa07 	bl	8001572 <readChar>
 8001164:	4603      	mov	r3, r0
 8001166:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8001168:	7c3b      	ldrb	r3, [r7, #16]
 800116a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f9f9 	bl	8001572 <readChar>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
 800118c:	e002      	b.n	8001194 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800118e:	bf00      	nop
 8001190:	e000      	b.n	8001194 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001192:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001196:	4618      	mov	r0, r3
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b088      	sub	sp, #32
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	4613      	mov	r3, r2
 80011aa:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	dc03      	bgt.n	80011c8 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80011c0:	f06f 0301 	mvn.w	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
		goto exit;
 80011c6:	e01d      	b.n	8001204 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	7e3b      	ldrb	r3, [r7, #24]
 80011d6:	f362 1307 	bfi	r3, r2, #4, #4
 80011da:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80011dc:	7e3a      	ldrb	r2, [r7, #24]
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f9d8 	bl	800159a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f8d9 	bl	80013a6 <MQTTPacket_encode>
 80011f4:	4602      	mov	r2, r0
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	4413      	add	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001204:	69fb      	ldr	r3, [r7, #28]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3720      	adds	r7, #32
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8001218:	220c      	movs	r2, #12
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ffbe 	bl	800119e <MQTTSerialize_zero>
 8001222:	4603      	mov	r3, r0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800123e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001240:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f98d 	bl	8001572 <readChar>
 8001258:	4603      	mov	r3, r0
 800125a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800125c:	7f3b      	ldrb	r3, [r7, #28]
 800125e:	f023 030f 	bic.w	r3, r3, #15
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b30      	cmp	r3, #48	@ 0x30
 8001266:	d14b      	bne.n	8001300 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8001268:	7f3b      	ldrb	r3, [r7, #28]
 800126a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8001276:	7f3b      	ldrb	r3, [r7, #28]
 8001278:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8001284:	7f3b      	ldrb	r3, [r7, #28]
 8001286:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f107 0214 	add.w	r2, r7, #20
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f938 	bl	8001510 <MQTTPacket_decodeBuf>
 80012a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80012a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	4413      	add	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	4413      	add	r3, r2
 80012b0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	6a3a      	ldr	r2, [r7, #32]
 80012b8:	4619      	mov	r1, r3
 80012ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012bc:	f000 f9f8 	bl	80016b0 <readMQTTLenString>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d01e      	beq.n	8001304 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6a3a      	ldr	r2, [r7, #32]
 80012ca:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db19      	blt.n	8001304 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	dd08      	ble.n	80012ea <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f92d 	bl	800153c <readInt>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	6a3a      	ldr	r2, [r7, #32]
 80012ee:	1ad2      	subs	r2, r2, r3
 80012f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012f2:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f8:	601a      	str	r2, [r3, #0]
	rc = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012fe:	e002      	b.n	8001306 <MQTTDeserialize_publish+0xda>
		goto exit;
 8001300:	bf00      	nop
 8001302:	e000      	b.n	8001306 <MQTTDeserialize_publish+0xda>
		goto exit;
 8001304:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001308:	4618      	mov	r0, r3
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f91d 	bl	8001572 <readChar>
 8001338:	4603      	mov	r3, r0
 800133a:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800133c:	7f3b      	ldrb	r3, [r7, #28]
 800133e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800134a:	7f3b      	ldrb	r3, [r7, #28]
 800134c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001350:	b2db      	uxtb	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	f107 0214 	add.w	r2, r7, #20
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f8d5 	bl	8001510 <MQTTPacket_decodeBuf>
 8001366:	6278      	str	r0, [r7, #36]	@ 0x24
 8001368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4413      	add	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4413      	add	r3, r2
 8001376:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6a3a      	ldr	r2, [r7, #32]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b01      	cmp	r3, #1
 8001380:	dd0b      	ble.n	800139a <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f8d8 	bl	800153c <readInt>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8001394:	2301      	movs	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
 8001398:	e000      	b.n	800139c <MQTTDeserialize_ack+0x8c>
		goto exit;
 800139a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	425a      	negs	r2, r3
 80013b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80013c0:	bf58      	it	pl
 80013c2:	4253      	negpl	r3, r2
 80013c4:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da00      	bge.n	80013ce <MQTTPacket_encode+0x28>
 80013cc:	337f      	adds	r3, #127	@ 0x7f
 80013ce:	11db      	asrs	r3, r3, #7
 80013d0:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	dd03      	ble.n	80013e0 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013de:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60fa      	str	r2, [r7, #12]
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	7afa      	ldrb	r2, [r7, #11]
 80013ee:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dcde      	bgt.n	80013b4 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	3301      	adds	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	2b04      	cmp	r3, #4
 800142c:	dd03      	ble.n	8001436 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	60fb      	str	r3, [r7, #12]
			goto exit;
 8001434:	e01d      	b.n	8001472 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8001436:	f107 020b 	add.w	r2, r7, #11
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2101      	movs	r1, #1
 800143e:	4610      	mov	r0, r2
 8001440:	4798      	blx	r3
 8001442:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d112      	bne.n	8001470 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	7afb      	ldrb	r3, [r7, #11]
 8001450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001454:	6979      	ldr	r1, [r7, #20]
 8001456:	fb01 f303 	mul.w	r3, r1, r3
 800145a:	441a      	add	r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	01db      	lsls	r3, r3, #7
 8001464:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	b25b      	sxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	dbd6      	blt.n	800141c <MQTTPacket_decode+0x18>
exit:
 800146e:	e000      	b.n	8001472 <MQTTPacket_decode+0x6e>
			goto exit;
 8001470:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8001472:	693b      	ldr	r3, [r7, #16]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3301      	adds	r3, #1
 8001488:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b7f      	cmp	r3, #127	@ 0x7f
 800148e:	dc03      	bgt.n	8001498 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3301      	adds	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	e012      	b.n	80014be <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800149e:	da03      	bge.n	80014a8 <MQTTPacket_len+0x2c>
		rem_len += 2;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3302      	adds	r3, #2
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	e00a      	b.n	80014be <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <MQTTPacket_len+0x50>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	dc03      	bgt.n	80014b8 <MQTTPacket_len+0x3c>
		rem_len += 3;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3303      	adds	r3, #3
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	e002      	b.n	80014be <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3304      	adds	r3, #4
 80014bc:	607b      	str	r3, [r7, #4]
	return rem_len;
 80014be:	687b      	ldr	r3, [r7, #4]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	001ffffe 	.word	0x001ffffe

080014d0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e00a      	b.n	80014f6 <bufchar+0x26>
		*c = *bufptr++;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <bufchar+0x3c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	4909      	ldr	r1, [pc, #36]	@ (800150c <bufchar+0x3c>)
 80014e8:	600a      	str	r2, [r1, #0]
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf0      	blt.n	80014e0 <bufchar+0x10>
	return count;
 80014fe:	683b      	ldr	r3, [r7, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	2000013c 	.word	0x2000013c

08001510 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800151a:	4a06      	ldr	r2, [pc, #24]	@ (8001534 <MQTTPacket_decodeBuf+0x24>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8001520:	6839      	ldr	r1, [r7, #0]
 8001522:	4805      	ldr	r0, [pc, #20]	@ (8001538 <MQTTPacket_decodeBuf+0x28>)
 8001524:	f7ff ff6e 	bl	8001404 <MQTTPacket_decode>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000013c 	.word	0x2000013c
 8001538:	080014d1 	.word	0x080014d1

0800153c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	3201      	adds	r2, #1
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	4413      	add	r3, r2
 8001558:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	1c9a      	adds	r2, r3, #2
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	601a      	str	r2, [r3, #0]
	return len;
 8001564:	68bb      	ldr	r3, [r7, #8]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	601a      	str	r2, [r3, #0]
	return c;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	78fa      	ldrb	r2, [r7, #3]
 80015ac:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	601a      	str	r2, [r3, #0]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da00      	bge.n	80015d6 <writeInt+0x12>
 80015d4:	33ff      	adds	r3, #255	@ 0xff
 80015d6:	121b      	asrs	r3, r3, #8
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	425a      	negs	r2, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	bf58      	it	pl
 80015f6:	4253      	negpl	r3, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f7fe fde7 	bl	80001f4 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffc9 	bl	80015c4 <writeInt>
	memcpy(*pptr, string, len);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fb65 	bl	8006d0a <memcpy>
	*pptr += len;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	441a      	add	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	4638      	mov	r0, r7
 800165e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	dd12      	ble.n	800168e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4619      	mov	r1, r3
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff ffa9 	bl	80015c4 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4618      	mov	r0, r3
 800167c:	f005 fb45 	bl	8006d0a <memcpy>
		*pptr += mqttstring.lenstring.len;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	441a      	add	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800168c:	e00c      	b.n	80016a8 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff ffbc 	bl	8001616 <writeCString>
}
 800169e:	e003      	b.n	80016a8 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f7ff ff8e 	bl	80015c4 <writeInt>
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	dd1a      	ble.n	8001702 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80016cc:	68b8      	ldr	r0, [r7, #8]
 80016ce:	f7ff ff35 	bl	800153c <readInt>
 80016d2:	4602      	mov	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	6852      	ldr	r2, [r2, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d30c      	bcc.n	8001702 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	6852      	ldr	r2, [r2, #4]
 80016f8:	441a      	add	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	601a      	str	r2, [r3, #0]
			rc = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8001708:	697b      	ldr	r3, [r7, #20]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fd62 	bl	80001f4 <strlen>
 8001730:	4603      	mov	r3, r0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e001      	b.n	800173a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	617b      	str	r3, [r7, #20]
	return rc;
 800173a:	697b      	ldr	r3, [r7, #20]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
		blen = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fd43 	bl	80001f4 <strlen>
 800176e:	4603      	mov	r3, r0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e005      	b.n	8001780 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f7fe fd37 	bl	80001f4 <strlen>
 8001786:	4603      	mov	r3, r0
 8001788:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	429a      	cmp	r2, r3
 8001790:	d10a      	bne.n	80017a8 <MQTTPacket_equals+0x64>
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	461a      	mov	r2, r3
 8001796:	6839      	ldr	r1, [r7, #0]
 8001798:	6938      	ldr	r0, [r7, #16]
 800179a:	f005 fa21 	bl	8006be0 <strncmp>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <MQTTPacket_equals+0x64>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <MQTTPacket_equals+0x66>
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b088      	sub	sp, #32
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	4611      	mov	r1, r2
 80017be:	461a      	mov	r2, r3
 80017c0:	460b      	mov	r3, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	dc03      	bgt.n	80017e2 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80017da:	f06f 0301 	mvn.w	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
		goto exit;
 80017e0:	e037      	b.n	8001852 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	7e3b      	ldrb	r3, [r7, #24]
 80017ec:	f362 1307 	bfi	r3, r2, #4, #4
 80017f0:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	7e3b      	ldrb	r3, [r7, #24]
 80017fc:	f362 03c3 	bfi	r3, r2, #3, #1
 8001800:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b06      	cmp	r3, #6
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	b2da      	uxtb	r2, r3
 8001814:	7e3b      	ldrb	r3, [r7, #24]
 8001816:	f362 0342 	bfi	r3, r2, #1, #2
 800181a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800181c:	7e3a      	ldrb	r2, [r7, #24]
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff feb8 	bl	800159a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2102      	movs	r1, #2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fdb9 	bl	80013a6 <MQTTPacket_encode>
 8001834:	4602      	mov	r2, r0
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	4413      	add	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800183c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff febd 	bl	80015c4 <writeInt>
	rc = ptr - buf;
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001852:	69fb      	ldr	r3, [r7, #28]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001866:	2302      	movs	r3, #2
 8001868:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e013      	b.n	8001898 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	461a      	mov	r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4413      	add	r3, r2
 8001880:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001884:	f7ff ff45 	bl	8001712 <MQTTstrlen>
 8001888:	4603      	mov	r3, r0
 800188a:	3303      	adds	r3, #3
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	4413      	add	r3, r2
 8001890:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3301      	adds	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	dbe7      	blt.n	8001870 <MQTTSerialize_subscribeLength+0x14>
	return len;
 80018a0:	68bb      	ldr	r3, [r7, #8]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b08a      	sub	sp, #40	@ 0x28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	4611      	mov	r1, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	460b      	mov	r3, r1
 80018ba:	71fb      	strb	r3, [r7, #7]
 80018bc:	4613      	mov	r3, r2
 80018be:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 80018d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80018d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018d8:	f7ff ffc0 	bl	800185c <MQTTSerialize_subscribeLength>
 80018dc:	61f8      	str	r0, [r7, #28]
 80018de:	69f8      	ldr	r0, [r7, #28]
 80018e0:	f7ff fdcc 	bl	800147c <MQTTPacket_len>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	da03      	bge.n	80018f4 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80018ec:	f06f 0301 	mvn.w	r3, #1
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 80018f2:	e051      	b.n	8001998 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 80018f8:	7d3b      	ldrb	r3, [r7, #20]
 80018fa:	2208      	movs	r2, #8
 80018fc:	f362 1307 	bfi	r3, r2, #4, #4
 8001900:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	7d3b      	ldrb	r3, [r7, #20]
 800190c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001910:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8001912:	7d3b      	ldrb	r3, [r7, #20]
 8001914:	2201      	movs	r2, #1
 8001916:	f362 0342 	bfi	r3, r2, #1, #2
 800191a:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800191c:	7d3a      	ldrb	r2, [r7, #20]
 800191e:	f107 0318 	add.w	r3, r7, #24
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe38 	bl	800159a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	69f9      	ldr	r1, [r7, #28]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fd39 	bl	80013a6 <MQTTPacket_encode>
 8001934:	4602      	mov	r2, r0
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4413      	add	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800193c:	88ba      	ldrh	r2, [r7, #4]
 800193e:	f107 0318 	add.w	r3, r7, #24
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe3d 	bl	80015c4 <writeInt>

	for (i = 0; i < count; ++i)
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
 800194e:	e01b      	b.n	8001988 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8001950:	6a3a      	ldr	r2, [r7, #32]
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	461a      	mov	r2, r3
 800195c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800195e:	4413      	add	r3, r2
 8001960:	f107 0018 	add.w	r0, r7, #24
 8001964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001966:	f7ff fe75 	bl	8001654 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001970:	4413      	add	r3, r2
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe0c 	bl	800159a <writeChar>
	for (i = 0; i < count; ++i)
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	3301      	adds	r3, #1
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800198c:	429a      	cmp	r2, r3
 800198e:	dbdf      	blt.n	8001950 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800199a:	4618      	mov	r0, r3
 800199c:	3728      	adds	r7, #40	@ 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b08a      	sub	sp, #40	@ 0x28
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80019b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b6:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fdd4 	bl	8001572 <readChar>
 80019ca:	4603      	mov	r3, r0
 80019cc:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 80019ce:	7f3b      	ldrb	r3, [r7, #28]
 80019d0:	f023 030f 	bic.w	r3, r3, #15
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b90      	cmp	r3, #144	@ 0x90
 80019d8:	d142      	bne.n	8001a60 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f107 0214 	add.w	r2, r7, #20
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fd94 	bl	8001510 <MQTTPacket_decodeBuf>
 80019e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80019ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	4413      	add	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	4413      	add	r3, r2
 80019f8:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6a3a      	ldr	r2, [r7, #32]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	dd2f      	ble.n	8001a64 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fd97 	bl	800153c <readInt>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8001a1c:	e019      	b.n	8001a52 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	da03      	bge.n	8001a30 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
			goto exit;
 8001a2e:	e01a      	b.n	8001a66 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8001a30:	f107 0318 	add.w	r3, r7, #24
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fd9c 	bl	8001572 <readChar>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1c59      	adds	r1, r3, #1
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6011      	str	r1, [r2, #0]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4602      	mov	r2, r0
 8001a50:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	6a3a      	ldr	r2, [r7, #32]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d8e1      	bhi.n	8001a1e <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5e:	e002      	b.n	8001a66 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8001a60:	bf00      	nop
 8001a62:	e000      	b.n	8001a66 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8001a64:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3728      	adds	r7, #40	@ 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
	MilliTimer++;
 8001a74:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <MilliTimer_Handler+0x18>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	4a03      	ldr	r2, [pc, #12]	@ (8001a88 <MilliTimer_Handler+0x18>)
 8001a7c:	6013      	str	r3, [r2, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	20000140 	.word	0x20000140

08001a8c <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <TimerIsExpired+0x28>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	0fdb      	lsrs	r3, r3, #31
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000140 	.word	0x20000140

08001ad4 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <TimerCountdownMS+0x24>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	441a      	add	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	605a      	str	r2, [r3, #4]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000140 	.word	0x20000140

08001afc <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b0c:	fb03 f202 	mul.w	r2, r3, r2
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <TimerCountdown+0x2c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	441a      	add	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	605a      	str	r2, [r3, #4]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000140 	.word	0x20000140

08001b2c <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <TimerLeftMS+0x28>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000140 	.word	0x20000140

08001b58 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a07      	ldr	r2, [pc, #28]	@ (8001b88 <NewNetwork+0x30>)
 8001b6c:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a06      	ldr	r2, [pc, #24]	@ (8001b8c <NewNetwork+0x34>)
 8001b72:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a06      	ldr	r2, [pc, #24]	@ (8001b90 <NewNetwork+0x38>)
 8001b78:	60da      	str	r2, [r3, #12]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	08001b95 	.word	0x08001b95
 8001b8c:	08001bef 	.word	0x08001bef
 8001b90:	08001c37 	.word	0x08001c37

08001b94 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3301      	adds	r3, #1
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fd91 	bl	80056d8 <WIZCHIP_READ>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b17      	cmp	r3, #23
 8001bba:	d113      	bne.n	8001be4 <w5x00_read+0x50>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 ff2b 	bl	8005a1e <getSn_RX_RSR>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00a      	beq.n	8001be4 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 f9a8 	bl	8004f30 <recv>
 8001be0:	4603      	mov	r3, r0
 8001be2:	e000      	b.n	8001be6 <w5x00_read+0x52>

	return SOCK_ERROR;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	3301      	adds	r3, #1
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fd64 	bl	80056d8 <WIZCHIP_READ>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b17      	cmp	r3, #23
 8001c14:	d10a      	bne.n	8001c2c <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	b292      	uxth	r2, r2
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f88c 	bl	8004d40 <send>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	e000      	b.n	8001c2e <w5x00_write+0x40>

	return SOCK_ERROR;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 f805 	bl	8004c54 <disconnect>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8001c60:	f243 0339 	movw	r3, #12345	@ 0x3039
 8001c64:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b2d8      	uxtb	r0, r3
 8001c6c:	8afa      	ldrh	r2, [r7, #22]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2101      	movs	r1, #1
 8001c72:	f002 fd91 	bl	8004798 <socket>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e00d      	b.n	8001ca2 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 ff03 	bl	8004a9c <connect>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d001      	beq.n	8001ca0 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <ConnectNetwork+0x50>

	return SOCK_OK;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <pa1_adc_init+0x58>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	4a13      	ldr	r2, [pc, #76]	@ (8001d04 <pa1_adc_init+0x58>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <pa1_adc_init+0x5c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a11      	ldr	r2, [pc, #68]	@ (8001d08 <pa1_adc_init+0x5c>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <pa1_adc_init+0x5c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <pa1_adc_init+0x5c>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <pa1_adc_init+0x58>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <pa1_adc_init+0x58>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cde:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <pa1_adc_init+0x60>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <pa1_adc_init+0x60>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 8001cec:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <pa1_adc_init+0x60>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4a06      	ldr	r2, [pc, #24]	@ (8001d0c <pa1_adc_init+0x60>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6093      	str	r3, [r2, #8]

}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	40012000 	.word	0x40012000

08001d10 <start_conversion>:


void start_conversion(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 8001d14:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <start_conversion+0x28>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a07      	ldr	r2, [pc, #28]	@ (8001d38 <start_conversion+0x28>)
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <start_conversion+0x28>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <start_conversion+0x28>)
 8001d26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d2a:	6093      	str	r3, [r2, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40012000 	.word	0x40012000

08001d3c <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <button_init+0x34>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <button_init+0x34>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <button_init+0x38>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a08      	ldr	r2, [pc, #32]	@ (8001d74 <button_init+0x38>)
 8001d52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001d56:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <button_init+0x38>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <button_init+0x38>)
 8001d5e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001d62:	6013      	str	r3, [r2, #0]

}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020800 	.word	0x40020800

08001d78 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <fpu_enable+0x50>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d82:	4a11      	ldr	r2, [pc, #68]	@ (8001dc8 <fpu_enable+0x50>)
 8001d84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <fpu_enable+0x50>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d92:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc8 <fpu_enable+0x50>)
 8001d94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <fpu_enable+0x50>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da2:	4a09      	ldr	r2, [pc, #36]	@ (8001dc8 <fpu_enable+0x50>)
 8001da4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <fpu_enable+0x50>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db2:	4a05      	ldr	r2, [pc, #20]	@ (8001dc8 <fpu_enable+0x50>)
 8001db4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <check_cable_connection>:


wiz_PhyConf current_phy_conf;

void check_cable_connection(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
	uint8_t cable_status;

	do{

		printf("\r\nGetting cable status...\r\n");
 8001dd2:	480e      	ldr	r0, [pc, #56]	@ (8001e0c <check_cable_connection+0x40>)
 8001dd4:	f004 fdfc 	bl	80069d0 <puts>
		ctlwizchip(CW_GET_PHYLINK,(void *)&cable_status);
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	200f      	movs	r0, #15
 8001dde:	f004 f843 	bl	8005e68 <ctlwizchip>

		if(cable_status ==  PHY_LINK_OFF)
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d106      	bne.n	8001df6 <check_cable_connection+0x2a>
		{
			printf("No cable detected ...\r\n");
 8001de8:	4809      	ldr	r0, [pc, #36]	@ (8001e10 <check_cable_connection+0x44>)
 8001dea:	f004 fdf1 	bl	80069d0 <puts>
			delay(1000);
 8001dee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001df2:	f000 fe05 	bl	8002a00 <delay>
		}

	}while(cable_status ==  PHY_LINK_OFF);
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ea      	beq.n	8001dd2 <check_cable_connection+0x6>

	printf("Cable connected...\r\n");
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <check_cable_connection+0x48>)
 8001dfe:	f004 fde7 	bl	80069d0 <puts>

}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	08007994 	.word	0x08007994
 8001e10:	080079b0 	.word	0x080079b0
 8001e14:	080079c8 	.word	0x080079c8

08001e18 <display_phy_config>:

void display_phy_config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_conf;
	ctlwizchip(CW_GET_PHYCONF,(void*)&phy_conf);
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	200b      	movs	r0, #11
 8001e24:	f004 f820 	bl	8005e68 <ctlwizchip>

	if(phy_conf.by == PHY_CONFBY_HW)
 8001e28:	793b      	ldrb	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <display_phy_config+0x1e>
	{
		printf("\n\rPHY is currently configured by hardware.");
 8001e2e:	4816      	ldr	r0, [pc, #88]	@ (8001e88 <display_phy_config+0x70>)
 8001e30:	f004 fd66 	bl	8006900 <iprintf>
 8001e34:	e002      	b.n	8001e3c <display_phy_config+0x24>
	}
	else{
		printf("\n\rPHY is currently configured by software.");
 8001e36:	4815      	ldr	r0, [pc, #84]	@ (8001e8c <display_phy_config+0x74>)
 8001e38:	f004 fd62 	bl	8006900 <iprintf>

	}
	printf("\r\nSTATUS: Autonegotiation %s",(phy_conf.mode == PHY_MODE_AUTONEGO) ? "Enabled" : "Disabled");
 8001e3c:	797b      	ldrb	r3, [r7, #5]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <display_phy_config+0x2e>
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <display_phy_config+0x78>)
 8001e44:	e000      	b.n	8001e48 <display_phy_config+0x30>
 8001e46:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <display_phy_config+0x7c>)
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4813      	ldr	r0, [pc, #76]	@ (8001e98 <display_phy_config+0x80>)
 8001e4c:	f004 fd58 	bl	8006900 <iprintf>
	printf("\r\nSTATUS: Duplex Mode: %s",(phy_conf.duplex == PHY_DUPLEX_FULL) ? "Full Duplex" : "Half Duplex");
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <display_phy_config+0x42>
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <display_phy_config+0x84>)
 8001e58:	e000      	b.n	8001e5c <display_phy_config+0x44>
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <display_phy_config+0x88>)
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4811      	ldr	r0, [pc, #68]	@ (8001ea4 <display_phy_config+0x8c>)
 8001e60:	f004 fd4e 	bl	8006900 <iprintf>
	printf("\r\nSTATUS: Speed: %dMbps",(phy_conf.speed == PHY_SPEED_10) ? 10 : 100);
 8001e64:	79bb      	ldrb	r3, [r7, #6]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <display_phy_config+0x56>
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	e000      	b.n	8001e70 <display_phy_config+0x58>
 8001e6e:	2364      	movs	r3, #100	@ 0x64
 8001e70:	4619      	mov	r1, r3
 8001e72:	480d      	ldr	r0, [pc, #52]	@ (8001ea8 <display_phy_config+0x90>)
 8001e74:	f004 fd44 	bl	8006900 <iprintf>
  printf("\r\n...");
 8001e78:	480c      	ldr	r0, [pc, #48]	@ (8001eac <display_phy_config+0x94>)
 8001e7a:	f004 fd41 	bl	8006900 <iprintf>

}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	080079dc 	.word	0x080079dc
 8001e8c:	08007a08 	.word	0x08007a08
 8001e90:	08007a34 	.word	0x08007a34
 8001e94:	08007a3c 	.word	0x08007a3c
 8001e98:	08007a48 	.word	0x08007a48
 8001e9c:	08007a68 	.word	0x08007a68
 8001ea0:	08007a74 	.word	0x08007a74
 8001ea4:	08007a80 	.word	0x08007a80
 8001ea8:	08007a9c 	.word	0x08007a9c
 8001eac:	08007ab4 	.word	0x08007ab4

08001eb0 <handle_error>:

void handle_error(const char * message)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	printf("ERROR: %s\r\n",message);
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <handle_error+0x14>)
 8001ebc:	f004 fd20 	bl	8006900 <iprintf>

	while(1){
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <handle_error+0x10>
 8001ec4:	08007abc 	.word	0x08007abc

08001ec8 <on_eexpert_topic_sense>:
		//Do something e.g. blink LED
	}
}

void on_eexpert_topic_sense(MessageData* msg_data){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

	printf("New message from topic  eexpert/co2sense\r\n");
 8001ed0:	4806      	ldr	r0, [pc, #24]	@ (8001eec <on_eexpert_topic_sense+0x24>)
 8001ed2:	f004 fd7d 	bl	80069d0 <puts>
	printf("Msg: %s\n\r",(char *)msg_data->message->payload);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4619      	mov	r1, r3
 8001ede:	4804      	ldr	r0, [pc, #16]	@ (8001ef0 <on_eexpert_topic_sense+0x28>)
 8001ee0:	f004 fd0e 	bl	8006900 <iprintf>

}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	08007ac8 	.word	0x08007ac8
 8001ef0:	08007af4 	.word	0x08007af4

08001ef4 <main>:

int main()
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af04      	add	r7, sp, #16
	/*Enable FPU*/
	fpu_enable();
 8001efa:	f7ff ff3d 	bl	8001d78 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 8001efe:	f000 fdc1 	bl	8002a84 <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 8001f02:	f000 fdf7 	bl	8002af4 <debug_uart_init>

	/*Initialize Push button*/
	button_init();
 8001f06:	f7ff ff19 	bl	8001d3c <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 8001f0a:	f7ff fecf 	bl	8001cac <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 8001f0e:	f7ff feff 	bl	8001d10 <start_conversion>

    wizchip_cs_pin_init();
 8001f12:	f000 fe9d 	bl	8002c50 <wizchip_cs_pin_init>
    w5500_spi_init();
 8001f16:	f000 ff1d 	bl	8002d54 <w5500_spi_init>
    w5500_init();
 8001f1a:	f000 ff47 	bl	8002dac <w5500_init>

    display_phy_config();
 8001f1e:	f7ff ff7b 	bl	8001e18 <display_phy_config>

    current_phy_conf.by =  PHY_CONFBY_SW;
 8001f22:	4b32      	ldr	r3, [pc, #200]	@ (8001fec <main+0xf8>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
    current_phy_conf.duplex =  PHY_DUPLEX_FULL;
 8001f28:	4b30      	ldr	r3, [pc, #192]	@ (8001fec <main+0xf8>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	70da      	strb	r2, [r3, #3]
    current_phy_conf.mode   =  PHY_MODE_AUTONEGO;
 8001f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fec <main+0xf8>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	705a      	strb	r2, [r3, #1]
    current_phy_conf.speed =  PHY_SPEED_10;
 8001f34:	4b2d      	ldr	r3, [pc, #180]	@ (8001fec <main+0xf8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	709a      	strb	r2, [r3, #2]

    ctlwizchip(CW_SET_PHYCONF,(void*)&current_phy_conf);
 8001f3a:	492c      	ldr	r1, [pc, #176]	@ (8001fec <main+0xf8>)
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f003 ff93 	bl	8005e68 <ctlwizchip>

    check_cable_connection();
 8001f42:	f7ff ff43 	bl	8001dcc <check_cable_connection>

    display_phy_config();
 8001f46:	f7ff ff67 	bl	8001e18 <display_phy_config>

    printf("\n\r*****************************MQTTClient Initialization*******************\r\n");
 8001f4a:	4829      	ldr	r0, [pc, #164]	@ (8001ff0 <main+0xfc>)
 8001f4c:	f004 fd40 	bl	80069d0 <puts>

    /*Configure the client connection data*/
    connect_data.MQTTVersion =  3;
 8001f50:	4b28      	ldr	r3, [pc, #160]	@ (8001ff4 <main+0x100>)
 8001f52:	2203      	movs	r2, #3
 8001f54:	721a      	strb	r2, [r3, #8]
    connect_data.willFlag = 0;
 8001f56:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <main+0x100>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	76da      	strb	r2, [r3, #27]
    connect_data.clientID.cstring = "eexpert015";
 8001f5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ff4 <main+0x100>)
 8001f5e:	4a26      	ldr	r2, [pc, #152]	@ (8001ff8 <main+0x104>)
 8001f60:	60da      	str	r2, [r3, #12]
    connect_data.keepAliveInterval = 60;
 8001f62:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <main+0x100>)
 8001f64:	223c      	movs	r2, #60	@ 0x3c
 8001f66:	831a      	strh	r2, [r3, #24]
    connect_data.cleansession =  1;
 8001f68:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <main+0x100>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	769a      	strb	r2, [r3, #26]


    NewNetwork(&network,1);
 8001f6e:	2101      	movs	r1, #1
 8001f70:	4822      	ldr	r0, [pc, #136]	@ (8001ffc <main+0x108>)
 8001f72:	f7ff fdf1 	bl	8001b58 <NewNetwork>

    printf("Connecting to MQTT Broker...\r\n");
 8001f76:	4822      	ldr	r0, [pc, #136]	@ (8002000 <main+0x10c>)
 8001f78:	f004 fd2a 	bl	80069d0 <puts>

    if(ConnectNetwork(&network,broker_ip,broker_port) != SOCK_OK)
 8001f7c:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <main+0x110>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4921      	ldr	r1, [pc, #132]	@ (8002008 <main+0x114>)
 8001f84:	481d      	ldr	r0, [pc, #116]	@ (8001ffc <main+0x108>)
 8001f86:	f7ff fe64 	bl	8001c52 <ConnectNetwork>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d002      	beq.n	8001f96 <main+0xa2>
    {
    	handle_error("Cannot connect to broker.");
 8001f90:	481e      	ldr	r0, [pc, #120]	@ (800200c <main+0x118>)
 8001f92:	f7ff ff8d 	bl	8001eb0 <handle_error>
    }


     /*Initialize the client with the network parameters*/
    MQTTClientInit(&mqtt_client, &network, 1000, tx_buffer,sizeof(tx_buffer), rx_buffer, sizeof(rx_buffer));
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	9302      	str	r3, [sp, #8]
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <main+0x11c>)
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	2380      	movs	r3, #128	@ 0x80
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8002014 <main+0x120>)
 8001fa4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fa8:	4914      	ldr	r1, [pc, #80]	@ (8001ffc <main+0x108>)
 8001faa:	481b      	ldr	r0, [pc, #108]	@ (8002018 <main+0x124>)
 8001fac:	f7fe f9f4 	bl	8000398 <MQTTClientInit>

    printf("Sending MQTT Connect Packet...\r\n");
 8001fb0:	481a      	ldr	r0, [pc, #104]	@ (800201c <main+0x128>)
 8001fb2:	f004 fd0d 	bl	80069d0 <puts>

    /*Attempt to connect with the broker*/

    if(MQTTConnect(&mqtt_client,&connect_data) != 0 )
 8001fb6:	490f      	ldr	r1, [pc, #60]	@ (8001ff4 <main+0x100>)
 8001fb8:	4817      	ldr	r0, [pc, #92]	@ (8002018 <main+0x124>)
 8001fba:	f7fe fe2f 	bl	8000c1c <MQTTConnect>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <main+0xd6>
    {
    	handle_error("MQTT connection failed.");
 8001fc4:	4816      	ldr	r0, [pc, #88]	@ (8002020 <main+0x12c>)
 8001fc6:	f7ff ff73 	bl	8001eb0 <handle_error>

    }

    printf("MQTT Connection successful.\n\r");
 8001fca:	4816      	ldr	r0, [pc, #88]	@ (8002024 <main+0x130>)
 8001fcc:	f004 fc98 	bl	8006900 <iprintf>

    MQTTSubscribe(&mqtt_client,"eexpert/co2sense",QOS0,on_eexpert_topic_sense);
 8001fd0:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <main+0x134>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4915      	ldr	r1, [pc, #84]	@ (800202c <main+0x138>)
 8001fd6:	4810      	ldr	r0, [pc, #64]	@ (8002018 <main+0x124>)
 8001fd8:	f7fe ff29 	bl	8000e2e <MQTTSubscribe>
    printf("Subscribed to topic eexpert/co2sense\r\n.");
 8001fdc:	4814      	ldr	r0, [pc, #80]	@ (8002030 <main+0x13c>)
 8001fde:	f004 fc8f 	bl	8006900 <iprintf>

	while(1)
	{
			MQTTYield(&mqtt_client,200);
 8001fe2:	21c8      	movs	r1, #200	@ 0xc8
 8001fe4:	480c      	ldr	r0, [pc, #48]	@ (8002018 <main+0x124>)
 8001fe6:	f7fe fd37 	bl	8000a58 <MQTTYield>
 8001fea:	e7fa      	b.n	8001fe2 <main+0xee>
 8001fec:	200002bc 	.word	0x200002bc
 8001ff0:	08007b00 	.word	0x08007b00
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	08007b50 	.word	0x08007b50
 8001ffc:	200001ac 	.word	0x200001ac
 8002000:	08007b5c 	.word	0x08007b5c
 8002004:	2000005c 	.word	0x2000005c
 8002008:	20000058 	.word	0x20000058
 800200c:	08007b7c 	.word	0x08007b7c
 8002010:	2000023c 	.word	0x2000023c
 8002014:	200001bc 	.word	0x200001bc
 8002018:	20000144 	.word	0x20000144
 800201c:	08007b98 	.word	0x08007b98
 8002020:	08007bb8 	.word	0x08007bb8
 8002024:	08007bd0 	.word	0x08007bd0
 8002028:	08001ec9 	.word	0x08001ec9
 800202c:	08007bf0 	.word	0x08007bf0
 8002030:	08007c04 	.word	0x08007c04

08002034 <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8002038:	4b3e      	ldr	r3, [pc, #248]	@ (8002134 <spi1_gpio_init+0x100>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	4a3d      	ldr	r2, [pc, #244]	@ (8002134 <spi1_gpio_init+0x100>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 8002044:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <spi1_gpio_init+0x104>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a3b      	ldr	r2, [pc, #236]	@ (8002138 <spi1_gpio_init+0x104>)
 800204a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800204e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8002050:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <spi1_gpio_init+0x104>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a38      	ldr	r2, [pc, #224]	@ (8002138 <spi1_gpio_init+0x104>)
 8002056:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800205a:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 800205c:	4b36      	ldr	r3, [pc, #216]	@ (8002138 <spi1_gpio_init+0x104>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a35      	ldr	r2, [pc, #212]	@ (8002138 <spi1_gpio_init+0x104>)
 8002062:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002066:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8002068:	4b33      	ldr	r3, [pc, #204]	@ (8002138 <spi1_gpio_init+0x104>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a32      	ldr	r2, [pc, #200]	@ (8002138 <spi1_gpio_init+0x104>)
 800206e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002072:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8002074:	4b30      	ldr	r3, [pc, #192]	@ (8002138 <spi1_gpio_init+0x104>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2f      	ldr	r2, [pc, #188]	@ (8002138 <spi1_gpio_init+0x104>)
 800207a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800207e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8002080:	4b2d      	ldr	r3, [pc, #180]	@ (8002138 <spi1_gpio_init+0x104>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2c      	ldr	r2, [pc, #176]	@ (8002138 <spi1_gpio_init+0x104>)
 8002086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800208a:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 800208c:	4b2a      	ldr	r3, [pc, #168]	@ (8002138 <spi1_gpio_init+0x104>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a29      	ldr	r2, [pc, #164]	@ (8002138 <spi1_gpio_init+0x104>)
 8002092:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002096:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8002098:	4b27      	ldr	r3, [pc, #156]	@ (8002138 <spi1_gpio_init+0x104>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a26      	ldr	r2, [pc, #152]	@ (8002138 <spi1_gpio_init+0x104>)
 800209e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80020a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 80020a4:	4b24      	ldr	r3, [pc, #144]	@ (8002138 <spi1_gpio_init+0x104>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4a23      	ldr	r2, [pc, #140]	@ (8002138 <spi1_gpio_init+0x104>)
 80020aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020ae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 80020b0:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <spi1_gpio_init+0x104>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a20      	ldr	r2, [pc, #128]	@ (8002138 <spi1_gpio_init+0x104>)
 80020b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80020ba:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 80020bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <spi1_gpio_init+0x104>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002138 <spi1_gpio_init+0x104>)
 80020c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <spi1_gpio_init+0x104>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002138 <spi1_gpio_init+0x104>)
 80020ce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80020d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 80020d4:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <spi1_gpio_init+0x104>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a17      	ldr	r2, [pc, #92]	@ (8002138 <spi1_gpio_init+0x104>)
 80020da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80020de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 80020e0:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <spi1_gpio_init+0x104>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <spi1_gpio_init+0x104>)
 80020e6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80020ea:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <spi1_gpio_init+0x104>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a11      	ldr	r2, [pc, #68]	@ (8002138 <spi1_gpio_init+0x104>)
 80020f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 80020f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <spi1_gpio_init+0x104>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002138 <spi1_gpio_init+0x104>)
 80020fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002102:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 8002104:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <spi1_gpio_init+0x104>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a0b      	ldr	r2, [pc, #44]	@ (8002138 <spi1_gpio_init+0x104>)
 800210a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800210e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 8002110:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <spi1_gpio_init+0x104>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a08      	ldr	r2, [pc, #32]	@ (8002138 <spi1_gpio_init+0x104>)
 8002116:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800211a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <spi1_gpio_init+0x100>)
 800211e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002120:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <spi1_gpio_init+0x100>)
 8002122:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002126:	6453      	str	r3, [r2, #68]	@ 0x44

}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000

0800213c <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <spi_init+0x12>
	{
		return DEV_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e05a      	b.n	8002204 <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28

	if(hspi->State == SPI_STATE_RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <spi_init+0x26>
	{
		spi1_gpio_init();
 800215e:	f7ff ff69 	bl	8002034 <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002178:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c6:	ea42 0103 	orr.w	r1, r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	0c1b      	lsrs	r3, r3, #16
 80021e0:	f003 0104 	and.w	r1, r3, #4
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	f003 0210 	and.w	r2, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->State =  SPI_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   return DEV_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <spi_transmit>:




StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code;// = DEV_OK;
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	83fb      	strh	r3, [r7, #30]
	tickstart = get_tick();
 8002220:	f000 fc0c 	bl	8002a3c <get_tick>
 8002224:	61b8      	str	r0, [r7, #24]



	if((p_data == NULL) || (size  == 0))
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <spi_transmit+0x26>
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <spi_transmit+0x2a>
	{

		return DEV_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e106      	b.n	8002444 <spi_transmit+0x238>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2203      	movs	r2, #3
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	88fa      	ldrh	r2, [r7, #6]
 8002254:	865a      	strh	r2, [r3, #50]	@ 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  0;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  0;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	875a      	strh	r2, [r3, #58]	@ 0x3a


	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002270:	d10f      	bne.n	8002292 <spi_transmit+0x86>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002280:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002290:	601a      	str	r2, [r3, #0]

	}



	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229c:	2b40      	cmp	r3, #64	@ 0x40
 800229e:	d007      	beq.n	80022b0 <spi_transmit+0xa4>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022ae:	601a      	str	r2, [r3, #0]
	}

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ba:	2b40      	cmp	r3, #64	@ 0x40
 80022bc:	d007      	beq.n	80022ce <spi_transmit+0xc2>
	  {

			SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022cc:	601a      	str	r2, [r3, #0]

	  }

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022d6:	d14e      	bne.n	8002376 <spi_transmit+0x16a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <spi_transmit+0xda>
 80022e0:	8bfb      	ldrh	r3, [r7, #30]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d141      	bne.n	800236a <spi_transmit+0x15e>
		{
			hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	881a      	ldrh	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	1c9a      	adds	r2, r3, #2
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	865a      	strh	r2, [r3, #50]	@ 0x32
		}

		while(hspi->TxXferCount> 0)
 800230a:	e02e      	b.n	800236a <spi_transmit+0x15e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <spi_transmit+0x134>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231e:	881a      	ldrh	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	1c9a      	adds	r2, r3, #2
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	865a      	strh	r2, [r3, #50]	@ 0x32
 800233e:	e014      	b.n	800236a <spi_transmit+0x15e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8002340:	f000 fb7c 	bl	8002a3c <get_tick>
 8002344:	4602      	mov	r2, r0
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d803      	bhi.n	8002358 <spi_transmit+0x14c>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d102      	bne.n	800235e <spi_transmit+0x152>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <spi_transmit+0x15e>
		         {
					hspi->State = SPI_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return DEV_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e06c      	b.n	8002444 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1cb      	bne.n	800230c <spi_transmit+0x100>
 8002374:	e051      	b.n	800241a <spi_transmit+0x20e>
	}


	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <spi_transmit+0x178>
 800237e:	8bfb      	ldrh	r3, [r7, #30]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d145      	bne.n	8002410 <spi_transmit+0x204>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) =  *((const uint8_t *)hspi->pTxBuffPtr);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	330c      	adds	r3, #12
 800238e:	7812      	ldrb	r2, [r2, #0]
 8002390:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	865a      	strh	r2, [r3, #50]	@ 0x32
		}
		while(hspi->TxXferCount> 0)
 80023aa:	e031      	b.n	8002410 <spi_transmit+0x204>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d013      	beq.n	80023e2 <spi_transmit+0x1d6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*(const uint8_t *)hspi->pTxBuffPtr);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	330c      	adds	r3, #12
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	865a      	strh	r2, [r3, #50]	@ 0x32
 80023e0:	e016      	b.n	8002410 <spi_transmit+0x204>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80023e2:	f000 fb2b 	bl	8002a3c <get_tick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d803      	bhi.n	80023fa <spi_transmit+0x1ee>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d102      	bne.n	8002400 <spi_transmit+0x1f4>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <spi_transmit+0x204>
		         {
					error_code = DEV_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	e019      	b.n	8002444 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1c8      	bne.n	80023ac <spi_transmit+0x1a0>
			}
		}

	}

	  __IO uint32_t tmpreg_ovr = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->DR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->SR;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	613b      	str	r3, [r7, #16]

		hspi->State =  SPI_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <spi_transmit+0x236>
	{
		return DEV_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <spi_transmit+0x238>
	}
	else
	{
		return DEV_OK;
 8002442:	2300      	movs	r3, #0

	}

}
 8002444:	4618      	mov	r0, r3
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	75fb      	strb	r3, [r7, #23]



	if(hspi->State != SPI_STATE_READY)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002466:	2b01      	cmp	r3, #1
 8002468:	d007      	beq.n	800247a <spi_receive+0x2e>
	{
		error_code = DEV_BUSY;
 800246a:	2302      	movs	r3, #2
 800246c:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 8002476:	7dfb      	ldrb	r3, [r7, #23]
 8002478:	e0d1      	b.n	800261e <spi_receive+0x1d2>
	}

	  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002482:	d112      	bne.n	80024aa <spi_receive+0x5e>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10e      	bne.n	80024aa <spi_receive+0x5e>
	  {
	    hspi->State = SPI_STATE_BUSY_RX;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2204      	movs	r2, #4
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
	    return spi_transmit_receive(hspi, p_data, p_data, size, timeout);
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4613      	mov	r3, r2
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f8c0 	bl	8002626 <spi_transmit_receive>
 80024a6:	4603      	mov	r3, r0
 80024a8:	e0b9      	b.n	800261e <spi_receive+0x1d2>
	  }

		tickstart = get_tick();
 80024aa:	f000 fac7 	bl	8002a3c <get_tick>
 80024ae:	6138      	str	r0, [r7, #16]

	if((p_data == NULL) || (size  == 0))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <spi_receive+0x70>
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d107      	bne.n	80024cc <spi_receive+0x80>
	{
		error_code =  DEV_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	e0a8      	b.n	800261e <spi_receive+0x1d2>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2204      	movs	r2, #4
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	88fa      	ldrh	r2, [r7, #6]
 80024e4:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	88fa      	ldrh	r2, [r7, #6]
 80024ea:	875a      	strh	r2, [r3, #58]	@ 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  0;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  0;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	865a      	strh	r2, [r3, #50]	@ 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002508:	2b40      	cmp	r3, #64	@ 0x40
 800250a:	d007      	beq.n	800251c <spi_receive+0xd0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800251a:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d16c      	bne.n	80025fe <spi_receive+0x1b2>
	{
		while(hspi->RxXferCount > 0)
 8002524:	e033      	b.n	800258e <spi_receive+0x142>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <spi_receive+0x114>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f103 020c 	add.w	r2, r3, #12
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	875a      	strh	r2, [r3, #58]	@ 0x3a
 800255e:	e016      	b.n	800258e <spi_receive+0x142>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8002560:	f000 fa6c 	bl	8002a3c <get_tick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d803      	bhi.n	8002578 <spi_receive+0x12c>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d102      	bne.n	800257e <spi_receive+0x132>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <spi_receive+0x142>
		         {
					error_code = DEV_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	e047      	b.n	800261e <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1c6      	bne.n	8002526 <spi_receive+0xda>
 8002598:	e036      	b.n	8002608 <spi_receive+0x1bc>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <spi_receive+0x184>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b2:	b292      	uxth	r2, r2
 80025b4:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ba:	1c9a      	adds	r2, r3, #2
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	875a      	strh	r2, [r3, #58]	@ 0x3a
 80025ce:	e016      	b.n	80025fe <spi_receive+0x1b2>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80025d0:	f000 fa34 	bl	8002a3c <get_tick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d803      	bhi.n	80025e8 <spi_receive+0x19c>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e6:	d102      	bne.n	80025ee <spi_receive+0x1a2>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d107      	bne.n	80025fe <spi_receive+0x1b2>
		         {
					error_code = DEV_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	e00f      	b.n	800261e <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1c8      	bne.n	800259a <spi_receive+0x14e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <spi_receive+0x1c8>
	{
		error_code = DEV_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return error_code;
 800261c:	7dfb      	ldrb	r3, [r7, #23]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <spi_transmit_receive>:


StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b08a      	sub	sp, #40	@ 0x28
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 8002634:	2301      	movs	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
	  StatusTypeDef        error_code = DEV_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 800263e:	f000 f9fd 	bl	8002a3c <get_tick>
 8002642:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800264a:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	635a      	str	r2, [r3, #52]	@ 0x34
	  hspi->RxXferCount = size;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	887a      	ldrh	r2, [r7, #2]
 8002666:	875a      	strh	r2, [r3, #58]	@ 0x3a
	  hspi->RxXferSize  = size;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	871a      	strh	r2, [r3, #56]	@ 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi->TxXferCount = size;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	865a      	strh	r2, [r3, #50]	@ 0x32
	  hspi->TxXferSize  = size;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	887a      	ldrh	r2, [r7, #2]
 800267e:	861a      	strh	r2, [r3, #48]	@ 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268a:	2b40      	cmp	r3, #64	@ 0x40
 800268c:	d007      	beq.n	800269e <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800269c:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026a6:	d17e      	bne.n	80027a6 <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <spi_transmit_receive+0x90>
 80026b0:	8a7b      	ldrh	r3, [r7, #18]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d16c      	bne.n	8002790 <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c6:	1c9a      	adds	r2, r3, #2
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026da:	e059      	b.n	8002790 <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01b      	beq.n	8002722 <spi_transmit_receive+0xfc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d016      	beq.n	8002722 <spi_transmit_receive+0xfc>
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d113      	bne.n	8002722 <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	881a      	ldrh	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	1c9a      	adds	r2, r3, #2
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d019      	beq.n	8002764 <spi_transmit_receive+0x13e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d014      	beq.n	8002764 <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002744:	b292      	uxth	r2, r2
 8002746:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800274c:	1c9a      	adds	r2, r3, #2
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8002760:	2301      	movs	r3, #1
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 8002764:	f000 f96a 	bl	8002a3c <get_tick>
 8002768:	4602      	mov	r2, r0
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002770:	429a      	cmp	r2, r3
 8002772:	d80d      	bhi.n	8002790 <spi_transmit_receive+0x16a>
 8002774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d009      	beq.n	8002790 <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 800278a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800278e:	e08f      	b.n	80028b0 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1a0      	bne.n	80026dc <spi_transmit_receive+0xb6>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d19b      	bne.n	80026dc <spi_transmit_receive+0xb6>
 80027a4:	e082      	b.n	80028ac <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <spi_transmit_receive+0x18e>
 80027ae:	8a7b      	ldrh	r3, [r7, #18]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d171      	bne.n	8002898 <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027da:	e05d      	b.n	8002898 <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01c      	beq.n	8002824 <spi_transmit_receive+0x1fe>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d017      	beq.n	8002824 <spi_transmit_receive+0x1fe>
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d114      	bne.n	8002824 <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d019      	beq.n	8002866 <spi_transmit_receive+0x240>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d014      	beq.n	8002866 <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8002862:	2301      	movs	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 8002866:	f000 f8e9 	bl	8002a3c <get_tick>
 800286a:	4602      	mov	r2, r0
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002872:	429a      	cmp	r2, r3
 8002874:	d803      	bhi.n	800287e <spi_transmit_receive+0x258>
 8002876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d102      	bne.n	8002884 <spi_transmit_receive+0x25e>
 800287e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8002892:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002896:	e00b      	b.n	80028b0 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d19c      	bne.n	80027dc <spi_transmit_receive+0x1b6>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d197      	bne.n	80027dc <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 80028ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3728      	adds	r7, #40	@ 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e00a      	b.n	80028e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028ca:	f3af 8000 	nop.w
 80028ce:	4601      	mov	r1, r0
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	60ba      	str	r2, [r7, #8]
 80028d6:	b2ca      	uxtb	r2, r1
 80028d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3301      	adds	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	dbf0      	blt.n	80028ca <_read+0x12>
	}

return len;
 80028e8:	687b      	ldr	r3, [r7, #4]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e009      	b.n	8002918 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	60ba      	str	r2, [r7, #8]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f8e5 	bl	8002adc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	dbf1      	blt.n	8002904 <_write+0x12>
	}
	return len;
 8002920:	687b      	ldr	r3, [r7, #4]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <_close>:

int _close(int file)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
	return -1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002952:	605a      	str	r2, [r3, #4]
	return 0;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <_isatty>:

int _isatty(int file)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
	return 1;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
	return 0;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800299c:	4a14      	ldr	r2, [pc, #80]	@ (80029f0 <_sbrk+0x5c>)
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <_sbrk+0x60>)
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a8:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <_sbrk+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <_sbrk+0x64>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	@ (80029fc <_sbrk+0x68>)
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b6:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d207      	bcs.n	80029d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c4:	f004 f974 	bl	8006cb0 <__errno>
 80029c8:	4603      	mov	r3, r0
 80029ca:	220c      	movs	r2, #12
 80029cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	e009      	b.n	80029e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d4:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <_sbrk+0x64>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029da:	4b07      	ldr	r3, [pc, #28]	@ (80029f8 <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <_sbrk+0x64>)
 80029e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e6:	68fb      	ldr	r3, [r7, #12]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20020000 	.word	0x20020000
 80029f4:	00000400 	.word	0x00000400
 80029f8:	200002c0 	.word	0x200002c0
 80029fc:	20000968 	.word	0x20000968

08002a00 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8002a08:	f000 f818 	bl	8002a3c <get_tick>
 8002a0c:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d002      	beq.n	8002a20 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8002a20:	bf00      	nop
 8002a22:	f000 f80b 	bl	8002a3c <get_tick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d8f7      	bhi.n	8002a22 <delay+0x22>

}
 8002a32:	bf00      	nop
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <get_tick>:

uint32_t get_tick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a40:	b672      	cpsid	i
}
 8002a42:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <get_tick+0x24>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a06      	ldr	r2, [pc, #24]	@ (8002a64 <get_tick+0x28>)
 8002a4a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a4c:	b662      	cpsie	i
}
 8002a4e:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8002a50:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <get_tick+0x28>)
 8002a52:	681b      	ldr	r3, [r3, #0]

}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	200002c4 	.word	0x200002c4
 8002a64:	200002c8 	.word	0x200002c8

08002a68 <tick_increment>:
static void tick_increment(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8002a6c:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <tick_increment+0x18>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	4a03      	ldr	r2, [pc, #12]	@ (8002a80 <tick_increment+0x18>)
 8002a74:	6013      	str	r3, [r2, #0]
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	200002c4 	.word	0x200002c4

08002a84 <timebase_init>:
void timebase_init(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a88:	b672      	cpsid	i
}
 8002a8a:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <timebase_init+0x44>)
 8002a8e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002a92:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <timebase_init+0x44>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <timebase_init+0x44>)
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <timebase_init+0x44>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <timebase_init+0x44>)
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <timebase_init+0x44>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a05      	ldr	r2, [pc, #20]	@ (8002ac8 <timebase_init+0x44>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ab8:	b662      	cpsie	i
}
 8002aba:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <SysTick_Handler>:

void SysTick_Handler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	tick_increment();
 8002ad0:	f7ff ffca 	bl	8002a68 <tick_increment>
	MilliTimer_Handler();
 8002ad4:	f7fe ffcc 	bl	8001a70 <MilliTimer_Handler>
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}

08002adc <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f84f 	bl	8002b88 <uart_write>
	return ch;
 8002aea:	687b      	ldr	r3, [r7, #4]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <debug_uart_init>:

void debug_uart_init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8002af8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b78 <debug_uart_init+0x84>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b78 <debug_uart_init+0x84>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8002b04:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <debug_uart_init+0x88>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1c      	ldr	r2, [pc, #112]	@ (8002b7c <debug_uart_init+0x88>)
 8002b0a:	f023 0310 	bic.w	r3, r3, #16
 8002b0e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8002b10:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <debug_uart_init+0x88>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a19      	ldr	r2, [pc, #100]	@ (8002b7c <debug_uart_init+0x88>)
 8002b16:	f043 0320 	orr.w	r3, r3, #32
 8002b1a:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <debug_uart_init+0x88>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <debug_uart_init+0x88>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b26:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <debug_uart_init+0x88>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4a13      	ldr	r2, [pc, #76]	@ (8002b7c <debug_uart_init+0x88>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b32:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <debug_uart_init+0x88>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a10      	ldr	r2, [pc, #64]	@ (8002b7c <debug_uart_init+0x88>)
 8002b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b3e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8002b40:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <debug_uart_init+0x88>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a0d      	ldr	r2, [pc, #52]	@ (8002b7c <debug_uart_init+0x88>)
 8002b46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b4a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <debug_uart_init+0x84>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	4a09      	ldr	r2, [pc, #36]	@ (8002b78 <debug_uart_init+0x84>)
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b56:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8002b58:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002b5c:	4808      	ldr	r0, [pc, #32]	@ (8002b80 <debug_uart_init+0x8c>)
 8002b5e:	f000 f83f 	bl	8002be0 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8002b62:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <debug_uart_init+0x90>)
 8002b64:	2208      	movs	r2, #8
 8002b66:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <debug_uart_init+0x90>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a05      	ldr	r2, [pc, #20]	@ (8002b84 <debug_uart_init+0x90>)
 8002b6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	00f42400 	.word	0x00f42400
 8002b84:	40004400 	.word	0x40004400

08002b88 <uart_write>:



static void uart_write(int ch)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8002b90:	bf00      	nop
 8002b92:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <uart_write+0x2c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f9      	beq.n	8002b92 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <uart_write+0x2c>)
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	6053      	str	r3, [r2, #4]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40004400 	.word	0x40004400

08002bb8 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	085a      	lsrs	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	441a      	add	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	b29b      	uxth	r3, r3
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8002bea:	6839      	ldr	r1, [r7, #0]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ffe3 	bl	8002bb8 <compute_uart_bd>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <uart_set_baudrate+0x24>)
 8002bf8:	609a      	str	r2, [r3, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40004400 	.word	0x40004400

08002c08 <ip_assigned_callback>:

volatile bool is_ip_assigned =  false;


void ip_assigned_callback(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	@ (8002c1c <ip_assigned_callback+0x14>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	200007bc 	.word	0x200007bc

08002c20 <ip_update_callback>:

void ip_update_callback(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 8002c24:	4b03      	ldr	r3, [pc, #12]	@ (8002c34 <ip_update_callback+0x14>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	200007bc 	.word	0x200007bc

08002c38 <ip_conflict_callback>:
void ip_conflict_callback(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
	is_ip_assigned =  false;
 8002c3c:	4b03      	ldr	r3, [pc, #12]	@ (8002c4c <ip_conflict_callback+0x14>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	200007bc 	.word	0x200007bc

08002c50 <wizchip_cs_pin_init>:
    .dhcp =  NETINFO_DHCP
};
/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <wizchip_cs_pin_init+0x34>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <wizchip_cs_pin_init+0x34>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 8002c60:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <wizchip_cs_pin_init+0x38>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a08      	ldr	r2, [pc, #32]	@ (8002c88 <wizchip_cs_pin_init+0x38>)
 8002c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <wizchip_cs_pin_init+0x38>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a05      	ldr	r2, [pc, #20]	@ (8002c88 <wizchip_cs_pin_init+0x38>)
 8002c72:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c76:	6013      	str	r3, [r2, #0]

}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020000 	.word	0x40020000

08002c8c <wizchip_pin_cs_select>:
/*Select W5500 by pulling CS pin low*/
void wizchip_pin_cs_select(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 8002c90:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <wizchip_pin_cs_select+0x1c>)
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <wizchip_pin_cs_select+0x1c>)
 8002c96:	f023 0310 	bic.w	r3, r3, #16
 8002c9a:	6153      	str	r3, [r2, #20]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40020000 	.word	0x40020000

08002cac <wizchip_pin_cs_deselect>:

/*Unselect W5500 by pulling CS pin high*/
void wizchip_pin_cs_deselect(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 8002cb0:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <wizchip_pin_cs_deselect+0x1c>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	4a04      	ldr	r2, [pc, #16]	@ (8002cc8 <wizchip_pin_cs_deselect+0x1c>)
 8002cb6:	f043 0310 	orr.w	r3, r3, #16
 8002cba:	6153      	str	r3, [r2, #20]
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40020000 	.word	0x40020000

08002ccc <wizchip_read_burst>:

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);
 8002cd8:	887a      	ldrh	r2, [r7, #2]
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4803      	ldr	r0, [pc, #12]	@ (8002cf0 <wizchip_read_burst+0x24>)
 8002ce2:	f7ff fbb3 	bl	800244c <spi_receive>

}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200002cc 	.word	0x200002cc

08002cf4 <wizchip_read_byte>:

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
 8002cfa:	1dfb      	adds	r3, r7, #7
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff ffe4 	bl	8002ccc <wizchip_read_burst>
	return byte;
 8002d04:	79fb      	ldrb	r3, [r7, #7]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <wizchip_write_burst>:
/*Spi write multiple bytes*/
void wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);
 8002d1c:	887a      	ldrh	r2, [r7, #2]
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4803      	ldr	r0, [pc, #12]	@ (8002d34 <wizchip_write_burst+0x24>)
 8002d26:	f7ff fa71 	bl	800220c <spi_transmit>

}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200002cc 	.word	0x200002cc

08002d38 <wizchip_write_byte>:

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
	wizchip_write_burst(&byte,sizeof(byte));
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	2101      	movs	r1, #1
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ffe2 	bl	8002d10 <wizchip_write_burst>
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <w5500_spi_init>:
 void w5500_spi_init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8002d58:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d5a:	4a13      	ldr	r2, [pc, #76]	@ (8002da8 <w5500_spi_init+0x54>)
 8002d5c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d5e:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d64:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 8002d66:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 8002d72:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8002d7e:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d84:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d86:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d92:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Initialize spi*/
	spi_init(&hspi1);
 8002d98:	4802      	ldr	r0, [pc, #8]	@ (8002da4 <w5500_spi_init+0x50>)
 8002d9a:	f7ff f9cf 	bl	800213c <spi_init>

}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200002cc 	.word	0x200002cc
 8002da8:	40013000 	.word	0x40013000

08002dac <w5500_init>:


 void w5500_init(void)
 {
 8002dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dae:	b093      	sub	sp, #76	@ 0x4c
 8002db0:	af0a      	add	r7, sp, #40	@ 0x28
     //Set RX and TX Buffer sizes

	 /*Set 2KB buffer for each of the 8 sockets*/
	 uint8_t rx_tx_buff_sizes[]= {2,2,2,2,2,2,2,2};
 8002db2:	4a4a      	ldr	r2, [pc, #296]	@ (8002edc <w5500_init+0x130>)
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dbc:	e883 0003 	stmia.w	r3, {r0, r1}

	 /*Initialize the W5500 with the RX and TX buffer sizes*/
	 wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8002dc0:	f107 0214 	add.w	r2, r7, #20
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 f978 	bl	80060c0 <wizchip_init>

	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_pin_cs_select,wizchip_pin_cs_deselect);
 8002dd0:	4943      	ldr	r1, [pc, #268]	@ (8002ee0 <w5500_init+0x134>)
 8002dd2:	4844      	ldr	r0, [pc, #272]	@ (8002ee4 <w5500_init+0x138>)
 8002dd4:	f002 ffca 	bl	8005d6c <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
 8002dd8:	4943      	ldr	r1, [pc, #268]	@ (8002ee8 <w5500_init+0x13c>)
 8002dda:	4844      	ldr	r0, [pc, #272]	@ (8002eec <w5500_init+0x140>)
 8002ddc:	f002 ffec 	bl	8005db8 <reg_wizchip_spi_cbfunc>
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 8002de0:	4943      	ldr	r1, [pc, #268]	@ (8002ef0 <w5500_init+0x144>)
 8002de2:	4844      	ldr	r0, [pc, #272]	@ (8002ef4 <w5500_init+0x148>)
 8002de4:	f003 f814 	bl	8005e10 <reg_wizchip_spiburst_cbfunc>

	 /*Set MAC Address*/
	 setSHAR(net_info.mac);
 8002de8:	2206      	movs	r2, #6
 8002dea:	4943      	ldr	r1, [pc, #268]	@ (8002ef8 <w5500_init+0x14c>)
 8002dec:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002df0:	f002 fd6c 	bl	80058cc <WIZCHIP_WRITE_BUF>

	 /*Initialize DHCP*/
	 DHCP_init(DHCP_SOCKET,dhcp_buffer);
 8002df4:	4941      	ldr	r1, [pc, #260]	@ (8002efc <w5500_init+0x150>)
 8002df6:	2000      	movs	r0, #0
 8002df8:	f001 fbaa 	bl	8004550 <DHCP_init>

	 //Register DHCP Callbacks
	 reg_dhcp_cbfunc(ip_assigned_callback,ip_update_callback,ip_conflict_callback);
 8002dfc:	4a40      	ldr	r2, [pc, #256]	@ (8002f00 <w5500_init+0x154>)
 8002dfe:	4941      	ldr	r1, [pc, #260]	@ (8002f04 <w5500_init+0x158>)
 8002e00:	4841      	ldr	r0, [pc, #260]	@ (8002f08 <w5500_init+0x15c>)
 8002e02:	f000 f903 	bl	800300c <reg_dhcp_cbfunc>

	 /*Wait for IP assignment from DHCP*/
	 uint16_t timeout_counter =  10000;
 8002e06:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e0a:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002e0c:	e004      	b.n	8002e18 <w5500_init+0x6c>
	 {
		 DHCP_run();
 8002e0e:	f001 f9e7 	bl	80041e0 <DHCP_run>
		 timeout_counter--;
 8002e12:	8bfb      	ldrh	r3, [r7, #30]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002e18:	4b3c      	ldr	r3, [pc, #240]	@ (8002f0c <w5500_init+0x160>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f083 0301 	eor.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <w5500_init+0x82>
 8002e28:	8bfb      	ldrh	r3, [r7, #30]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ef      	bne.n	8002e0e <w5500_init+0x62>
	 }

	 if(!is_ip_assigned)
 8002e2e:	4b37      	ldr	r3, [pc, #220]	@ (8002f0c <w5500_init+0x160>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f083 0301 	eor.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d149      	bne.n	8002ed2 <w5500_init+0x126>
	 {
		 return;
	 }

	 /*Get network settings from DHCP*/
	 getIPfromDHCP(net_info.ip);
 8002e3e:	4834      	ldr	r0, [pc, #208]	@ (8002f10 <w5500_init+0x164>)
 8002e40:	f001 fc30 	bl	80046a4 <getIPfromDHCP>
	 getGWfromDHCP(net_info.gw);
 8002e44:	4833      	ldr	r0, [pc, #204]	@ (8002f14 <w5500_init+0x168>)
 8002e46:	f001 fc4d 	bl	80046e4 <getGWfromDHCP>
	 getSNfromDHCP(net_info.sn);
 8002e4a:	4833      	ldr	r0, [pc, #204]	@ (8002f18 <w5500_init+0x16c>)
 8002e4c:	f001 fc6a 	bl	8004724 <getSNfromDHCP>


	/* Format and print the assigned IP, Gateway, and Subnet mask */
	sprintf(temp_buffer,
		"IP Address:  %d.%d.%d.%d\r\nGateway:  %d.%d.%d.%d\r\nSubnet mask: %d.%d.%d.%d\r\n",
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002e50:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <w5500_init+0x14c>)
 8002e52:	799b      	ldrb	r3, [r3, #6]
	sprintf(temp_buffer,
 8002e54:	469c      	mov	ip, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002e56:	4b28      	ldr	r3, [pc, #160]	@ (8002ef8 <w5500_init+0x14c>)
 8002e58:	79db      	ldrb	r3, [r3, #7]
	sprintf(temp_buffer,
 8002e5a:	469e      	mov	lr, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002e5c:	4b26      	ldr	r3, [pc, #152]	@ (8002ef8 <w5500_init+0x14c>)
 8002e5e:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(temp_buffer,
 8002e60:	461a      	mov	r2, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002e62:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <w5500_init+0x14c>)
 8002e64:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(temp_buffer,
 8002e66:	4619      	mov	r1, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002e68:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <w5500_init+0x14c>)
 8002e6a:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(temp_buffer,
 8002e6c:	4618      	mov	r0, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <w5500_init+0x14c>)
 8002e70:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(temp_buffer,
 8002e72:	461c      	mov	r4, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002e74:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <w5500_init+0x14c>)
 8002e76:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(temp_buffer,
 8002e78:	461d      	mov	r5, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef8 <w5500_init+0x14c>)
 8002e7c:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(temp_buffer,
 8002e7e:	461e      	mov	r6, r3
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002e80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <w5500_init+0x14c>)
 8002e82:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(temp_buffer,
 8002e84:	60fb      	str	r3, [r7, #12]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002e86:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <w5500_init+0x14c>)
 8002e88:	7adb      	ldrb	r3, [r3, #11]
	sprintf(temp_buffer,
 8002e8a:	60bb      	str	r3, [r7, #8]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <w5500_init+0x14c>)
 8002e8e:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(temp_buffer,
 8002e90:	607b      	str	r3, [r7, #4]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002e92:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <w5500_init+0x14c>)
 8002e94:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(temp_buffer,
 8002e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	9308      	str	r3, [sp, #32]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	9307      	str	r3, [sp, #28]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	9306      	str	r3, [sp, #24]
 8002ea4:	9605      	str	r6, [sp, #20]
 8002ea6:	9504      	str	r5, [sp, #16]
 8002ea8:	9403      	str	r4, [sp, #12]
 8002eaa:	9002      	str	r0, [sp, #8]
 8002eac:	9101      	str	r1, [sp, #4]
 8002eae:	9200      	str	r2, [sp, #0]
 8002eb0:	4673      	mov	r3, lr
 8002eb2:	4662      	mov	r2, ip
 8002eb4:	4919      	ldr	r1, [pc, #100]	@ (8002f1c <w5500_init+0x170>)
 8002eb6:	481a      	ldr	r0, [pc, #104]	@ (8002f20 <w5500_init+0x174>)
 8002eb8:	f003 fd92 	bl	80069e0 <siprintf>
	);

    printf("*************Network Information************************\r\n");
 8002ebc:	4819      	ldr	r0, [pc, #100]	@ (8002f24 <w5500_init+0x178>)
 8002ebe:	f003 fd87 	bl	80069d0 <puts>
    printf("%s", temp_buffer);
 8002ec2:	4917      	ldr	r1, [pc, #92]	@ (8002f20 <w5500_init+0x174>)
 8002ec4:	4818      	ldr	r0, [pc, #96]	@ (8002f28 <w5500_init+0x17c>)
 8002ec6:	f003 fd1b 	bl	8006900 <iprintf>

    /*Apply the network configurations to the W5500*/
    wizchip_setnetinfo(&net_info);
 8002eca:	480b      	ldr	r0, [pc, #44]	@ (8002ef8 <w5500_init+0x14c>)
 8002ecc:	f003 fb68 	bl	80065a0 <wizchip_setnetinfo>
 8002ed0:	e000      	b.n	8002ed4 <w5500_init+0x128>
		 return;
 8002ed2:	bf00      	nop

 }
 8002ed4:	3724      	adds	r7, #36	@ 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	08007cb8 	.word	0x08007cb8
 8002ee0:	08002cad 	.word	0x08002cad
 8002ee4:	08002c8d 	.word	0x08002c8d
 8002ee8:	08002d39 	.word	0x08002d39
 8002eec:	08002cf5 	.word	0x08002cf5
 8002ef0:	08002d11 	.word	0x08002d11
 8002ef4:	08002ccd 	.word	0x08002ccd
 8002ef8:	20000060 	.word	0x20000060
 8002efc:	200003bc 	.word	0x200003bc
 8002f00:	08002c39 	.word	0x08002c39
 8002f04:	08002c21 	.word	0x08002c21
 8002f08:	08002c09 	.word	0x08002c09
 8002f0c:	200007bc 	.word	0x200007bc
 8002f10:	20000066 	.word	0x20000066
 8002f14:	2000006e 	.word	0x2000006e
 8002f18:	2000006a 	.word	0x2000006a
 8002f1c:	08007c2c 	.word	0x08007c2c
 8002f20:	20000310 	.word	0x20000310
 8002f24:	08007c78 	.word	0x08007c78
 8002f28:	08007cb4 	.word	0x08007cb4

08002f2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f2c:	480d      	ldr	r0, [pc, #52]	@ (8002f64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f2e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f34:	480c      	ldr	r0, [pc, #48]	@ (8002f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f36:	490d      	ldr	r1, [pc, #52]	@ (8002f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f38:	4a0d      	ldr	r2, [pc, #52]	@ (8002f70 <LoopForever+0xe>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f3c:	e002      	b.n	8002f44 <LoopCopyDataInit>

08002f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f42:	3304      	adds	r3, #4

08002f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f48:	d3f9      	bcc.n	8002f3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f78 <LoopForever+0x16>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f50:	e001      	b.n	8002f56 <LoopFillZerobss>

08002f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f54:	3204      	adds	r2, #4

08002f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f58:	d3fb      	bcc.n	8002f52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f5a:	f003 feaf 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f5e:	f7fe ffc9 	bl	8001ef4 <main>

08002f62 <LoopForever>:

LoopForever:
    b LoopForever
 8002f62:	e7fe      	b.n	8002f62 <LoopForever>
  ldr   r0, =_estack
 8002f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f6c:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8002f70:	08007d18 	.word	0x08007d18
  ldr r2, =_sbss
 8002f74:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8002f78:	20000964 	.word	0x20000964

08002f7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC_IRQHandler>
	...

08002f80 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8002f84:	2204      	movs	r2, #4
 8002f86:	4909      	ldr	r1, [pc, #36]	@ (8002fac <default_ip_assign+0x2c>)
 8002f88:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002f8c:	f002 fc9e 	bl	80058cc <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8002f90:	2204      	movs	r2, #4
 8002f92:	4907      	ldr	r1, [pc, #28]	@ (8002fb0 <default_ip_assign+0x30>)
 8002f94:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002f98:	f002 fc98 	bl	80058cc <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	4905      	ldr	r1, [pc, #20]	@ (8002fb4 <default_ip_assign+0x34>)
 8002fa0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002fa4:	f002 fc92 	bl	80058cc <WIZCHIP_WRITE_BUF>
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	200007cc 	.word	0x200007cc
 8002fb0:	200007d4 	.word	0x200007d4
 8002fb4:	200007d0 	.word	0x200007d0

08002fb8 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8002fbc:	2180      	movs	r1, #128	@ 0x80
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f002 fbd6 	bl	8005770 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f002 fb87 	bl	80056d8 <WIZCHIP_READ>
   default_ip_assign();
 8002fca:	f7ff ffd9 	bl	8002f80 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8002fce:	2206      	movs	r2, #6
 8002fd0:	4903      	ldr	r1, [pc, #12]	@ (8002fe0 <default_ip_update+0x28>)
 8002fd2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002fd6:	f002 fc79 	bl	80058cc <WIZCHIP_WRITE_BUF>
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200007ec 	.word	0x200007ec

08002fe4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8002fe8:	2180      	movs	r1, #128	@ 0x80
 8002fea:	2000      	movs	r0, #0
 8002fec:	f002 fbc0 	bl	8005770 <WIZCHIP_WRITE>
	getMR(); // for delay
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f002 fb71 	bl	80056d8 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8002ff6:	2206      	movs	r2, #6
 8002ff8:	4903      	ldr	r1, [pc, #12]	@ (8003008 <default_ip_conflict+0x24>)
 8002ffa:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002ffe:	f002 fc65 	bl	80058cc <WIZCHIP_WRITE_BUF>
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200007ec 	.word	0x200007ec

0800300c <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8003018:	4b10      	ldr	r3, [pc, #64]	@ (800305c <reg_dhcp_cbfunc+0x50>)
 800301a:	4a11      	ldr	r2, [pc, #68]	@ (8003060 <reg_dhcp_cbfunc+0x54>)
 800301c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800301e:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <reg_dhcp_cbfunc+0x58>)
 8003020:	4a11      	ldr	r2, [pc, #68]	@ (8003068 <reg_dhcp_cbfunc+0x5c>)
 8003022:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8003024:	4b11      	ldr	r3, [pc, #68]	@ (800306c <reg_dhcp_cbfunc+0x60>)
 8003026:	4a12      	ldr	r2, [pc, #72]	@ (8003070 <reg_dhcp_cbfunc+0x64>)
 8003028:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <reg_dhcp_cbfunc+0x2a>
 8003030:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <reg_dhcp_cbfunc+0x50>)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <reg_dhcp_cbfunc+0x36>
 800303c:	4a09      	ldr	r2, [pc, #36]	@ (8003064 <reg_dhcp_cbfunc+0x58>)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <reg_dhcp_cbfunc+0x42>
 8003048:	4a08      	ldr	r2, [pc, #32]	@ (800306c <reg_dhcp_cbfunc+0x60>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6013      	str	r3, [r2, #0]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000088 	.word	0x20000088
 8003060:	08002f81 	.word	0x08002f81
 8003064:	2000008c 	.word	0x2000008c
 8003068:	08002fb9 	.word	0x08002fb9
 800306c:	20000090 	.word	0x20000090
 8003070:	08002fe5 	.word	0x08002fe5

08003074 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800307a:	463b      	mov	r3, r7
 800307c:	2206      	movs	r2, #6
 800307e:	4619      	mov	r1, r3
 8003080:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003084:	f002 fbc2 	bl	800580c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8003088:	4b72      	ldr	r3, [pc, #456]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8003090:	4b70      	ldr	r3, [pc, #448]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2201      	movs	r2, #1
 8003096:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8003098:	4b6e      	ldr	r3, [pc, #440]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2206      	movs	r2, #6
 800309e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 80030a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003254 <makeDHCPMSG+0x1e0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 80030a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003254 <makeDHCPMSG+0x1e0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3304      	adds	r3, #4
 80030ae:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80030b0:	4b69      	ldr	r3, [pc, #420]	@ (8003258 <makeDHCPMSG+0x1e4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0e1b      	lsrs	r3, r3, #24
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <makeDHCPMSG+0x1e4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	0c1a      	lsrs	r2, r3, #16
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3301      	adds	r3, #1
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80030ca:	4b63      	ldr	r3, [pc, #396]	@ (8003258 <makeDHCPMSG+0x1e4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0a1a      	lsrs	r2, r3, #8
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3302      	adds	r3, #2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80030d8:	4b5f      	ldr	r3, [pc, #380]	@ (8003258 <makeDHCPMSG+0x1e4>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	3303      	adds	r3, #3
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80030e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003254 <makeDHCPMSG+0x1e0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2200      	movs	r2, #0
 80030ea:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80030ec:	4b59      	ldr	r3, [pc, #356]	@ (8003254 <makeDHCPMSG+0x1e0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	330a      	adds	r3, #10
 80030f2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2280      	movs	r2, #128	@ 0x80
 80030f8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3301      	adds	r3, #1
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8003102:	4b54      	ldr	r3, [pc, #336]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2200      	movs	r2, #0
 8003108:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 800310a:	4b52      	ldr	r3, [pc, #328]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8003112:	4b50      	ldr	r3, [pc, #320]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2200      	movs	r2, #0
 8003118:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800311a:	4b4e      	ldr	r3, [pc, #312]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2200      	movs	r2, #0
 8003120:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8003122:	4b4c      	ldr	r3, [pc, #304]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2200      	movs	r2, #0
 8003128:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800312a:	4b4a      	ldr	r3, [pc, #296]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2200      	movs	r2, #0
 8003130:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8003132:	4b48      	ldr	r3, [pc, #288]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2200      	movs	r2, #0
 8003138:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800313a:	4b46      	ldr	r3, [pc, #280]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8003142:	4b44      	ldr	r3, [pc, #272]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800314a:	4b42      	ldr	r3, [pc, #264]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2200      	movs	r2, #0
 8003150:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8003152:	4b40      	ldr	r3, [pc, #256]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800315a:	4b3e      	ldr	r3, [pc, #248]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8003162:	4b3c      	ldr	r3, [pc, #240]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800316a:	4b3a      	ldr	r3, [pc, #232]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8003172:	4b38      	ldr	r3, [pc, #224]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800317a:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8003182:	4b34      	ldr	r3, [pc, #208]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a35      	ldr	r2, [pc, #212]	@ (800325c <makeDHCPMSG+0x1e8>)
 8003188:	7812      	ldrb	r2, [r2, #0]
 800318a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800318c:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a32      	ldr	r2, [pc, #200]	@ (800325c <makeDHCPMSG+0x1e8>)
 8003192:	7852      	ldrb	r2, [r2, #1]
 8003194:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8003196:	4b2f      	ldr	r3, [pc, #188]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a30      	ldr	r2, [pc, #192]	@ (800325c <makeDHCPMSG+0x1e8>)
 800319c:	7892      	ldrb	r2, [r2, #2]
 800319e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80031a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003254 <makeDHCPMSG+0x1e0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2d      	ldr	r2, [pc, #180]	@ (800325c <makeDHCPMSG+0x1e8>)
 80031a6:	78d2      	ldrb	r2, [r2, #3]
 80031a8:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80031aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003254 <makeDHCPMSG+0x1e0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2b      	ldr	r2, [pc, #172]	@ (800325c <makeDHCPMSG+0x1e8>)
 80031b0:	7912      	ldrb	r2, [r2, #4]
 80031b2:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80031b6:	4b27      	ldr	r3, [pc, #156]	@ (8003254 <makeDHCPMSG+0x1e0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a28      	ldr	r2, [pc, #160]	@ (800325c <makeDHCPMSG+0x1e8>)
 80031bc:	7952      	ldrb	r2, [r2, #5]
 80031be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80031c2:	2306      	movs	r3, #6
 80031c4:	73fb      	strb	r3, [r7, #15]
 80031c6:	e008      	b.n	80031da <makeDHCPMSG+0x166>
 80031c8:	4b22      	ldr	r3, [pc, #136]	@ (8003254 <makeDHCPMSG+0x1e0>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	4413      	add	r3, r2
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	3301      	adds	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d9f3      	bls.n	80031c8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	e009      	b.n	80031fa <makeDHCPMSG+0x186>
 80031e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <makeDHCPMSG+0x1e0>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	4413      	add	r3, r2
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	3301      	adds	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80031fe:	d9f2      	bls.n	80031e6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	e009      	b.n	800321a <makeDHCPMSG+0x1a6>
 8003206:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	4413      	add	r3, r2
 800320e:	2200      	movs	r2, #0
 8003210:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	3301      	adds	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	daf1      	bge.n	8003206 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8003222:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2263      	movs	r2, #99	@ 0x63
 8003228:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800322c:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <makeDHCPMSG+0x1e0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2282      	movs	r2, #130	@ 0x82
 8003232:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8003236:	4b07      	ldr	r3, [pc, #28]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2253      	movs	r2, #83	@ 0x53
 800323c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8003240:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <makeDHCPMSG+0x1e0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2263      	movs	r2, #99	@ 0x63
 8003246:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	200007e8 	.word	0x200007e8
 8003258:	200007e4 	.word	0x200007e4
 800325c:	200007ec 	.word	0x200007ec

08003260 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800326a:	f7ff ff03 	bl	8003074 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 800326e:	4b56      	ldr	r3, [pc, #344]	@ (80033c8 <send_DHCP_DISCOVER+0x168>)
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8003274:	4b54      	ldr	r3, [pc, #336]	@ (80033c8 <send_DHCP_DISCOVER+0x168>)
 8003276:	2200      	movs	r2, #0
 8003278:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800327a:	4b53      	ldr	r3, [pc, #332]	@ (80033c8 <send_DHCP_DISCOVER+0x168>)
 800327c:	2200      	movs	r2, #0
 800327e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8003280:	4b51      	ldr	r3, [pc, #324]	@ (80033c8 <send_DHCP_DISCOVER+0x168>)
 8003282:	2200      	movs	r2, #0
 8003284:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8003286:	4b51      	ldr	r3, [pc, #324]	@ (80033cc <send_DHCP_DISCOVER+0x16c>)
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 800328c:	4b4f      	ldr	r3, [pc, #316]	@ (80033cc <send_DHCP_DISCOVER+0x16c>)
 800328e:	2200      	movs	r2, #0
 8003290:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8003292:	4b4e      	ldr	r3, [pc, #312]	@ (80033cc <send_DHCP_DISCOVER+0x16c>)
 8003294:	2200      	movs	r2, #0
 8003296:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8003298:	4b4c      	ldr	r3, [pc, #304]	@ (80033cc <send_DHCP_DISCOVER+0x16c>)
 800329a:	2200      	movs	r2, #0
 800329c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800329e:	2304      	movs	r3, #4
 80032a0:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80032a2:	4b4b      	ldr	r3, [pc, #300]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	88bb      	ldrh	r3, [r7, #4]
 80032a8:	1c59      	adds	r1, r3, #1
 80032aa:	80b9      	strh	r1, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	2235      	movs	r2, #53	@ 0x35
 80032b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80032b4:	4b46      	ldr	r3, [pc, #280]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	88bb      	ldrh	r3, [r7, #4]
 80032ba:	1c59      	adds	r1, r3, #1
 80032bc:	80b9      	strh	r1, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80032c6:	4b42      	ldr	r3, [pc, #264]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	88bb      	ldrh	r3, [r7, #4]
 80032cc:	1c59      	adds	r1, r3, #1
 80032ce:	80b9      	strh	r1, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80032d8:	4b3d      	ldr	r3, [pc, #244]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	88bb      	ldrh	r3, [r7, #4]
 80032de:	1c59      	adds	r1, r3, #1
 80032e0:	80b9      	strh	r1, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	223d      	movs	r2, #61	@ 0x3d
 80032e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80032ea:	4b39      	ldr	r3, [pc, #228]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	88bb      	ldrh	r3, [r7, #4]
 80032f0:	1c59      	adds	r1, r3, #1
 80032f2:	80b9      	strh	r1, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	2207      	movs	r2, #7
 80032f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80032fc:	4b34      	ldr	r3, [pc, #208]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	88bb      	ldrh	r3, [r7, #4]
 8003302:	1c59      	adds	r1, r3, #1
 8003304:	80b9      	strh	r1, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	2201      	movs	r2, #1
 800330a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800330e:	4b30      	ldr	r3, [pc, #192]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	88bb      	ldrh	r3, [r7, #4]
 8003314:	1c59      	adds	r1, r3, #1
 8003316:	80b9      	strh	r1, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	4b2e      	ldr	r3, [pc, #184]	@ (80033d4 <send_DHCP_DISCOVER+0x174>)
 800331c:	7819      	ldrb	r1, [r3, #0]
 800331e:	1813      	adds	r3, r2, r0
 8003320:	460a      	mov	r2, r1
 8003322:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003326:	4b2a      	ldr	r3, [pc, #168]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	88bb      	ldrh	r3, [r7, #4]
 800332c:	1c59      	adds	r1, r3, #1
 800332e:	80b9      	strh	r1, [r7, #4]
 8003330:	4618      	mov	r0, r3
 8003332:	4b28      	ldr	r3, [pc, #160]	@ (80033d4 <send_DHCP_DISCOVER+0x174>)
 8003334:	7859      	ldrb	r1, [r3, #1]
 8003336:	1813      	adds	r3, r2, r0
 8003338:	460a      	mov	r2, r1
 800333a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800333e:	4b24      	ldr	r3, [pc, #144]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	88bb      	ldrh	r3, [r7, #4]
 8003344:	1c59      	adds	r1, r3, #1
 8003346:	80b9      	strh	r1, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	4b22      	ldr	r3, [pc, #136]	@ (80033d4 <send_DHCP_DISCOVER+0x174>)
 800334c:	7899      	ldrb	r1, [r3, #2]
 800334e:	1813      	adds	r3, r2, r0
 8003350:	460a      	mov	r2, r1
 8003352:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003356:	4b1e      	ldr	r3, [pc, #120]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	88bb      	ldrh	r3, [r7, #4]
 800335c:	1c59      	adds	r1, r3, #1
 800335e:	80b9      	strh	r1, [r7, #4]
 8003360:	4618      	mov	r0, r3
 8003362:	4b1c      	ldr	r3, [pc, #112]	@ (80033d4 <send_DHCP_DISCOVER+0x174>)
 8003364:	78d9      	ldrb	r1, [r3, #3]
 8003366:	1813      	adds	r3, r2, r0
 8003368:	460a      	mov	r2, r1
 800336a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800336e:	4b18      	ldr	r3, [pc, #96]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	88bb      	ldrh	r3, [r7, #4]
 8003374:	1c59      	adds	r1, r3, #1
 8003376:	80b9      	strh	r1, [r7, #4]
 8003378:	4618      	mov	r0, r3
 800337a:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <send_DHCP_DISCOVER+0x174>)
 800337c:	7919      	ldrb	r1, [r3, #4]
 800337e:	1813      	adds	r3, r2, r0
 8003380:	460a      	mov	r2, r1
 8003382:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003386:	4b12      	ldr	r3, [pc, #72]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	88bb      	ldrh	r3, [r7, #4]
 800338c:	1c59      	adds	r1, r3, #1
 800338e:	80b9      	strh	r1, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <send_DHCP_DISCOVER+0x174>)
 8003394:	7959      	ldrb	r1, [r3, #5]
 8003396:	1813      	adds	r3, r2, r0
 8003398:	460a      	mov	r2, r1
 800339a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800339e:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	88bb      	ldrh	r3, [r7, #4]
 80033a4:	1c59      	adds	r1, r3, #1
 80033a6:	80b9      	strh	r1, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	220c      	movs	r2, #12
 80033ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80033b0:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <send_DHCP_DISCOVER+0x170>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	88bb      	ldrh	r3, [r7, #4]
 80033b6:	1c59      	adds	r1, r3, #1
 80033b8:	80b9      	strh	r1, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	80fb      	strh	r3, [r7, #6]
 80033c6:	e017      	b.n	80033f8 <send_DHCP_DISCOVER+0x198>
 80033c8:	200007c0 	.word	0x200007c0
 80033cc:	200007c4 	.word	0x200007c4
 80033d0:	200007e8 	.word	0x200007e8
 80033d4:	200007ec 	.word	0x200007ec
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80033d8:	88f9      	ldrh	r1, [r7, #6]
 80033da:	4b80      	ldr	r3, [pc, #512]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	88bb      	ldrh	r3, [r7, #4]
 80033e0:	1c58      	adds	r0, r3, #1
 80033e2:	80b8      	strh	r0, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	4b7e      	ldr	r3, [pc, #504]	@ (80035e0 <send_DHCP_DISCOVER+0x380>)
 80033e8:	5c59      	ldrb	r1, [r3, r1]
 80033ea:	1813      	adds	r3, r2, r0
 80033ec:	460a      	mov	r2, r1
 80033ee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	3301      	adds	r3, #1
 80033f6:	80fb      	strh	r3, [r7, #6]
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	4a79      	ldr	r2, [pc, #484]	@ (80035e0 <send_DHCP_DISCOVER+0x380>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ea      	bne.n	80033d8 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8003402:	4b78      	ldr	r3, [pc, #480]	@ (80035e4 <send_DHCP_DISCOVER+0x384>)
 8003404:	78db      	ldrb	r3, [r3, #3]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b74      	ldr	r3, [pc, #464]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 800340c:	681c      	ldr	r4, [r3, #0]
 800340e:	88bb      	ldrh	r3, [r7, #4]
 8003410:	1c59      	adds	r1, r3, #1
 8003412:	80b9      	strh	r1, [r7, #4]
 8003414:	461d      	mov	r5, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f001 f9a4 	bl	8004764 <NibbleToHex>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	1963      	adds	r3, r4, r5
 8003422:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8003426:	4b6f      	ldr	r3, [pc, #444]	@ (80035e4 <send_DHCP_DISCOVER+0x384>)
 8003428:	78da      	ldrb	r2, [r3, #3]
 800342a:	4b6c      	ldr	r3, [pc, #432]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 800342c:	681c      	ldr	r4, [r3, #0]
 800342e:	88bb      	ldrh	r3, [r7, #4]
 8003430:	1c59      	adds	r1, r3, #1
 8003432:	80b9      	strh	r1, [r7, #4]
 8003434:	461d      	mov	r5, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f001 f994 	bl	8004764 <NibbleToHex>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	1963      	adds	r3, r4, r5
 8003442:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8003446:	4b67      	ldr	r3, [pc, #412]	@ (80035e4 <send_DHCP_DISCOVER+0x384>)
 8003448:	791b      	ldrb	r3, [r3, #4]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b63      	ldr	r3, [pc, #396]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 8003450:	681c      	ldr	r4, [r3, #0]
 8003452:	88bb      	ldrh	r3, [r7, #4]
 8003454:	1c59      	adds	r1, r3, #1
 8003456:	80b9      	strh	r1, [r7, #4]
 8003458:	461d      	mov	r5, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f001 f982 	bl	8004764 <NibbleToHex>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	1963      	adds	r3, r4, r5
 8003466:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800346a:	4b5e      	ldr	r3, [pc, #376]	@ (80035e4 <send_DHCP_DISCOVER+0x384>)
 800346c:	791a      	ldrb	r2, [r3, #4]
 800346e:	4b5b      	ldr	r3, [pc, #364]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 8003470:	681c      	ldr	r4, [r3, #0]
 8003472:	88bb      	ldrh	r3, [r7, #4]
 8003474:	1c59      	adds	r1, r3, #1
 8003476:	80b9      	strh	r1, [r7, #4]
 8003478:	461d      	mov	r5, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f001 f972 	bl	8004764 <NibbleToHex>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	1963      	adds	r3, r4, r5
 8003486:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800348a:	4b56      	ldr	r3, [pc, #344]	@ (80035e4 <send_DHCP_DISCOVER+0x384>)
 800348c:	795b      	ldrb	r3, [r3, #5]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4b52      	ldr	r3, [pc, #328]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 8003494:	681c      	ldr	r4, [r3, #0]
 8003496:	88bb      	ldrh	r3, [r7, #4]
 8003498:	1c59      	adds	r1, r3, #1
 800349a:	80b9      	strh	r1, [r7, #4]
 800349c:	461d      	mov	r5, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f001 f960 	bl	8004764 <NibbleToHex>
 80034a4:	4603      	mov	r3, r0
 80034a6:	461a      	mov	r2, r3
 80034a8:	1963      	adds	r3, r4, r5
 80034aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80034ae:	4b4d      	ldr	r3, [pc, #308]	@ (80035e4 <send_DHCP_DISCOVER+0x384>)
 80034b0:	795a      	ldrb	r2, [r3, #5]
 80034b2:	4b4a      	ldr	r3, [pc, #296]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 80034b4:	681c      	ldr	r4, [r3, #0]
 80034b6:	88bb      	ldrh	r3, [r7, #4]
 80034b8:	1c59      	adds	r1, r3, #1
 80034ba:	80b9      	strh	r1, [r7, #4]
 80034bc:	461d      	mov	r5, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f001 f950 	bl	8004764 <NibbleToHex>
 80034c4:	4603      	mov	r3, r0
 80034c6:	461a      	mov	r2, r3
 80034c8:	1963      	adds	r3, r4, r5
 80034ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	b2d9      	uxtb	r1, r3
 80034d2:	4b42      	ldr	r3, [pc, #264]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	88b8      	ldrh	r0, [r7, #4]
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	3307      	adds	r3, #7
 80034dc:	1ac3      	subs	r3, r0, r3
 80034de:	3106      	adds	r1, #6
 80034e0:	b2c9      	uxtb	r1, r1
 80034e2:	4413      	add	r3, r2
 80034e4:	460a      	mov	r2, r1
 80034e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80034ea:	4b3c      	ldr	r3, [pc, #240]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	88bb      	ldrh	r3, [r7, #4]
 80034f0:	1c59      	adds	r1, r3, #1
 80034f2:	80b9      	strh	r1, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	2237      	movs	r2, #55	@ 0x37
 80034f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80034fc:	4b37      	ldr	r3, [pc, #220]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	88bb      	ldrh	r3, [r7, #4]
 8003502:	1c59      	adds	r1, r3, #1
 8003504:	80b9      	strh	r1, [r7, #4]
 8003506:	4413      	add	r3, r2
 8003508:	2206      	movs	r2, #6
 800350a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800350e:	4b33      	ldr	r3, [pc, #204]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	88bb      	ldrh	r3, [r7, #4]
 8003514:	1c59      	adds	r1, r3, #1
 8003516:	80b9      	strh	r1, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	2201      	movs	r2, #1
 800351c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8003520:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	88bb      	ldrh	r3, [r7, #4]
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	80b9      	strh	r1, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	2203      	movs	r2, #3
 800352e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8003532:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	88bb      	ldrh	r3, [r7, #4]
 8003538:	1c59      	adds	r1, r3, #1
 800353a:	80b9      	strh	r1, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	2206      	movs	r2, #6
 8003540:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8003544:	4b25      	ldr	r3, [pc, #148]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	88bb      	ldrh	r3, [r7, #4]
 800354a:	1c59      	adds	r1, r3, #1
 800354c:	80b9      	strh	r1, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	220f      	movs	r2, #15
 8003552:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8003556:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	88bb      	ldrh	r3, [r7, #4]
 800355c:	1c59      	adds	r1, r3, #1
 800355e:	80b9      	strh	r1, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	223a      	movs	r2, #58	@ 0x3a
 8003564:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8003568:	4b1c      	ldr	r3, [pc, #112]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	88bb      	ldrh	r3, [r7, #4]
 800356e:	1c59      	adds	r1, r3, #1
 8003570:	80b9      	strh	r1, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	223b      	movs	r2, #59	@ 0x3b
 8003576:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	88bb      	ldrh	r3, [r7, #4]
 8003580:	1c59      	adds	r1, r3, #1
 8003582:	80b9      	strh	r1, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	22ff      	movs	r2, #255	@ 0xff
 8003588:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800358c:	88bb      	ldrh	r3, [r7, #4]
 800358e:	80fb      	strh	r3, [r7, #6]
 8003590:	e009      	b.n	80035a6 <send_DHCP_DISCOVER+0x346>
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	4413      	add	r3, r2
 800359a:	2200      	movs	r2, #0
 800359c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	3301      	adds	r3, #1
 80035a4:	80fb      	strh	r3, [r7, #6]
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80035ac:	d3f1      	bcc.n	8003592 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 80035ae:	23ff      	movs	r3, #255	@ 0xff
 80035b0:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80035b2:	23ff      	movs	r3, #255	@ 0xff
 80035b4:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80035b6:	23ff      	movs	r3, #255	@ 0xff
 80035b8:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80035ba:	23ff      	movs	r3, #255	@ 0xff
 80035bc:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80035be:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <send_DHCP_DISCOVER+0x388>)
 80035c0:	7818      	ldrb	r0, [r3, #0]
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <send_DHCP_DISCOVER+0x37c>)
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	463b      	mov	r3, r7
 80035c8:	2243      	movs	r2, #67	@ 0x43
 80035ca:	9200      	str	r2, [sp, #0]
 80035cc:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80035d0:	f001 fd62 	bl	8005098 <sendto>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bdb0      	pop	{r4, r5, r7, pc}
 80035dc:	200007e8 	.word	0x200007e8
 80035e0:	20000080 	.word	0x20000080
 80035e4:	200007ec 	.word	0x200007ec
 80035e8:	200007bd 	.word	0x200007bd

080035ec <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80035ec:	b5b0      	push	{r4, r5, r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80035f6:	f7ff fd3d 	bl	8003074 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80035fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <send_DHCP_REQUEST+0x7c>)
 80035fc:	f993 3000 	ldrsb.w	r3, [r3]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d004      	beq.n	800360e <send_DHCP_REQUEST+0x22>
 8003604:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <send_DHCP_REQUEST+0x7c>)
 8003606:	f993 3000 	ldrsb.w	r3, [r3]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d134      	bne.n	8003678 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800360e:	4b17      	ldr	r3, [pc, #92]	@ (800366c <send_DHCP_REQUEST+0x80>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330a      	adds	r3, #10
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003618:	4b14      	ldr	r3, [pc, #80]	@ (800366c <send_DHCP_REQUEST+0x80>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330a      	adds	r3, #10
 800361e:	3301      	adds	r3, #1
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <send_DHCP_REQUEST+0x80>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a11      	ldr	r2, [pc, #68]	@ (8003670 <send_DHCP_REQUEST+0x84>)
 800362a:	7812      	ldrb	r2, [r2, #0]
 800362c:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800362e:	4b0f      	ldr	r3, [pc, #60]	@ (800366c <send_DHCP_REQUEST+0x80>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a0f      	ldr	r2, [pc, #60]	@ (8003670 <send_DHCP_REQUEST+0x84>)
 8003634:	7852      	ldrb	r2, [r2, #1]
 8003636:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8003638:	4b0c      	ldr	r3, [pc, #48]	@ (800366c <send_DHCP_REQUEST+0x80>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0c      	ldr	r2, [pc, #48]	@ (8003670 <send_DHCP_REQUEST+0x84>)
 800363e:	7892      	ldrb	r2, [r2, #2]
 8003640:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <send_DHCP_REQUEST+0x80>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a0a      	ldr	r2, [pc, #40]	@ (8003670 <send_DHCP_REQUEST+0x84>)
 8003648:	78d2      	ldrb	r2, [r2, #3]
 800364a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 800364c:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <send_DHCP_REQUEST+0x88>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8003652:	4b08      	ldr	r3, [pc, #32]	@ (8003674 <send_DHCP_REQUEST+0x88>)
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8003658:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <send_DHCP_REQUEST+0x88>)
 800365a:	789b      	ldrb	r3, [r3, #2]
 800365c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800365e:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <send_DHCP_REQUEST+0x88>)
 8003660:	78db      	ldrb	r3, [r3, #3]
 8003662:	71fb      	strb	r3, [r7, #7]
 8003664:	e010      	b.n	8003688 <send_DHCP_REQUEST+0x9c>
 8003666:	bf00      	nop
 8003668:	200007dc 	.word	0x200007dc
 800366c:	200007e8 	.word	0x200007e8
 8003670:	200007cc 	.word	0x200007cc
 8003674:	200007c0 	.word	0x200007c0
   }
   else
   {
   	ip[0] = 255;
 8003678:	23ff      	movs	r3, #255	@ 0xff
 800367a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 800367c:	23ff      	movs	r3, #255	@ 0xff
 800367e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8003680:	23ff      	movs	r3, #255	@ 0xff
 8003682:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8003684:	23ff      	movs	r3, #255	@ 0xff
 8003686:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003688:	2304      	movs	r3, #4
 800368a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800368c:	4b8d      	ldr	r3, [pc, #564]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	897b      	ldrh	r3, [r7, #10]
 8003692:	1c59      	adds	r1, r3, #1
 8003694:	8179      	strh	r1, [r7, #10]
 8003696:	4413      	add	r3, r2
 8003698:	2235      	movs	r2, #53	@ 0x35
 800369a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800369e:	4b89      	ldr	r3, [pc, #548]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	1c59      	adds	r1, r3, #1
 80036a6:	8179      	strh	r1, [r7, #10]
 80036a8:	4413      	add	r3, r2
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80036b0:	4b84      	ldr	r3, [pc, #528]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	897b      	ldrh	r3, [r7, #10]
 80036b6:	1c59      	adds	r1, r3, #1
 80036b8:	8179      	strh	r1, [r7, #10]
 80036ba:	4413      	add	r3, r2
 80036bc:	2203      	movs	r2, #3
 80036be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80036c2:	4b80      	ldr	r3, [pc, #512]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	897b      	ldrh	r3, [r7, #10]
 80036c8:	1c59      	adds	r1, r3, #1
 80036ca:	8179      	strh	r1, [r7, #10]
 80036cc:	4413      	add	r3, r2
 80036ce:	223d      	movs	r2, #61	@ 0x3d
 80036d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80036d4:	4b7b      	ldr	r3, [pc, #492]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	897b      	ldrh	r3, [r7, #10]
 80036da:	1c59      	adds	r1, r3, #1
 80036dc:	8179      	strh	r1, [r7, #10]
 80036de:	4413      	add	r3, r2
 80036e0:	2207      	movs	r2, #7
 80036e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80036e6:	4b77      	ldr	r3, [pc, #476]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	897b      	ldrh	r3, [r7, #10]
 80036ec:	1c59      	adds	r1, r3, #1
 80036ee:	8179      	strh	r1, [r7, #10]
 80036f0:	4413      	add	r3, r2
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80036f8:	4b72      	ldr	r3, [pc, #456]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	897b      	ldrh	r3, [r7, #10]
 80036fe:	1c59      	adds	r1, r3, #1
 8003700:	8179      	strh	r1, [r7, #10]
 8003702:	4618      	mov	r0, r3
 8003704:	4b70      	ldr	r3, [pc, #448]	@ (80038c8 <send_DHCP_REQUEST+0x2dc>)
 8003706:	7819      	ldrb	r1, [r3, #0]
 8003708:	1813      	adds	r3, r2, r0
 800370a:	460a      	mov	r2, r1
 800370c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003710:	4b6c      	ldr	r3, [pc, #432]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	897b      	ldrh	r3, [r7, #10]
 8003716:	1c59      	adds	r1, r3, #1
 8003718:	8179      	strh	r1, [r7, #10]
 800371a:	4618      	mov	r0, r3
 800371c:	4b6a      	ldr	r3, [pc, #424]	@ (80038c8 <send_DHCP_REQUEST+0x2dc>)
 800371e:	7859      	ldrb	r1, [r3, #1]
 8003720:	1813      	adds	r3, r2, r0
 8003722:	460a      	mov	r2, r1
 8003724:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003728:	4b66      	ldr	r3, [pc, #408]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	897b      	ldrh	r3, [r7, #10]
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	8179      	strh	r1, [r7, #10]
 8003732:	4618      	mov	r0, r3
 8003734:	4b64      	ldr	r3, [pc, #400]	@ (80038c8 <send_DHCP_REQUEST+0x2dc>)
 8003736:	7899      	ldrb	r1, [r3, #2]
 8003738:	1813      	adds	r3, r2, r0
 800373a:	460a      	mov	r2, r1
 800373c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003740:	4b60      	ldr	r3, [pc, #384]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	897b      	ldrh	r3, [r7, #10]
 8003746:	1c59      	adds	r1, r3, #1
 8003748:	8179      	strh	r1, [r7, #10]
 800374a:	4618      	mov	r0, r3
 800374c:	4b5e      	ldr	r3, [pc, #376]	@ (80038c8 <send_DHCP_REQUEST+0x2dc>)
 800374e:	78d9      	ldrb	r1, [r3, #3]
 8003750:	1813      	adds	r3, r2, r0
 8003752:	460a      	mov	r2, r1
 8003754:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003758:	4b5a      	ldr	r3, [pc, #360]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	897b      	ldrh	r3, [r7, #10]
 800375e:	1c59      	adds	r1, r3, #1
 8003760:	8179      	strh	r1, [r7, #10]
 8003762:	4618      	mov	r0, r3
 8003764:	4b58      	ldr	r3, [pc, #352]	@ (80038c8 <send_DHCP_REQUEST+0x2dc>)
 8003766:	7919      	ldrb	r1, [r3, #4]
 8003768:	1813      	adds	r3, r2, r0
 800376a:	460a      	mov	r2, r1
 800376c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003770:	4b54      	ldr	r3, [pc, #336]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	897b      	ldrh	r3, [r7, #10]
 8003776:	1c59      	adds	r1, r3, #1
 8003778:	8179      	strh	r1, [r7, #10]
 800377a:	4618      	mov	r0, r3
 800377c:	4b52      	ldr	r3, [pc, #328]	@ (80038c8 <send_DHCP_REQUEST+0x2dc>)
 800377e:	7959      	ldrb	r1, [r3, #5]
 8003780:	1813      	adds	r3, r2, r0
 8003782:	460a      	mov	r2, r1
 8003784:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	2bff      	cmp	r3, #255	@ 0xff
 800378c:	f040 8084 	bne.w	8003898 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003790:	4b4c      	ldr	r3, [pc, #304]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	897b      	ldrh	r3, [r7, #10]
 8003796:	1c59      	adds	r1, r3, #1
 8003798:	8179      	strh	r1, [r7, #10]
 800379a:	4413      	add	r3, r2
 800379c:	2232      	movs	r2, #50	@ 0x32
 800379e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80037a2:	4b48      	ldr	r3, [pc, #288]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	897b      	ldrh	r3, [r7, #10]
 80037a8:	1c59      	adds	r1, r3, #1
 80037aa:	8179      	strh	r1, [r7, #10]
 80037ac:	4413      	add	r3, r2
 80037ae:	2204      	movs	r2, #4
 80037b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80037b4:	4b43      	ldr	r3, [pc, #268]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	897b      	ldrh	r3, [r7, #10]
 80037ba:	1c59      	adds	r1, r3, #1
 80037bc:	8179      	strh	r1, [r7, #10]
 80037be:	4618      	mov	r0, r3
 80037c0:	4b42      	ldr	r3, [pc, #264]	@ (80038cc <send_DHCP_REQUEST+0x2e0>)
 80037c2:	7819      	ldrb	r1, [r3, #0]
 80037c4:	1813      	adds	r3, r2, r0
 80037c6:	460a      	mov	r2, r1
 80037c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80037cc:	4b3d      	ldr	r3, [pc, #244]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	897b      	ldrh	r3, [r7, #10]
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	8179      	strh	r1, [r7, #10]
 80037d6:	4618      	mov	r0, r3
 80037d8:	4b3c      	ldr	r3, [pc, #240]	@ (80038cc <send_DHCP_REQUEST+0x2e0>)
 80037da:	7859      	ldrb	r1, [r3, #1]
 80037dc:	1813      	adds	r3, r2, r0
 80037de:	460a      	mov	r2, r1
 80037e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80037e4:	4b37      	ldr	r3, [pc, #220]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	897b      	ldrh	r3, [r7, #10]
 80037ea:	1c59      	adds	r1, r3, #1
 80037ec:	8179      	strh	r1, [r7, #10]
 80037ee:	4618      	mov	r0, r3
 80037f0:	4b36      	ldr	r3, [pc, #216]	@ (80038cc <send_DHCP_REQUEST+0x2e0>)
 80037f2:	7899      	ldrb	r1, [r3, #2]
 80037f4:	1813      	adds	r3, r2, r0
 80037f6:	460a      	mov	r2, r1
 80037f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80037fc:	4b31      	ldr	r3, [pc, #196]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	897b      	ldrh	r3, [r7, #10]
 8003802:	1c59      	adds	r1, r3, #1
 8003804:	8179      	strh	r1, [r7, #10]
 8003806:	4618      	mov	r0, r3
 8003808:	4b30      	ldr	r3, [pc, #192]	@ (80038cc <send_DHCP_REQUEST+0x2e0>)
 800380a:	78d9      	ldrb	r1, [r3, #3]
 800380c:	1813      	adds	r3, r2, r0
 800380e:	460a      	mov	r2, r1
 8003810:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003814:	4b2b      	ldr	r3, [pc, #172]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	1c59      	adds	r1, r3, #1
 800381c:	8179      	strh	r1, [r7, #10]
 800381e:	4413      	add	r3, r2
 8003820:	2236      	movs	r2, #54	@ 0x36
 8003822:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8003826:	4b27      	ldr	r3, [pc, #156]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	1c59      	adds	r1, r3, #1
 800382e:	8179      	strh	r1, [r7, #10]
 8003830:	4413      	add	r3, r2
 8003832:	2204      	movs	r2, #4
 8003834:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003838:	4b22      	ldr	r3, [pc, #136]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	897b      	ldrh	r3, [r7, #10]
 800383e:	1c59      	adds	r1, r3, #1
 8003840:	8179      	strh	r1, [r7, #10]
 8003842:	4618      	mov	r0, r3
 8003844:	4b22      	ldr	r3, [pc, #136]	@ (80038d0 <send_DHCP_REQUEST+0x2e4>)
 8003846:	7819      	ldrb	r1, [r3, #0]
 8003848:	1813      	adds	r3, r2, r0
 800384a:	460a      	mov	r2, r1
 800384c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003850:	4b1c      	ldr	r3, [pc, #112]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	897b      	ldrh	r3, [r7, #10]
 8003856:	1c59      	adds	r1, r3, #1
 8003858:	8179      	strh	r1, [r7, #10]
 800385a:	4618      	mov	r0, r3
 800385c:	4b1c      	ldr	r3, [pc, #112]	@ (80038d0 <send_DHCP_REQUEST+0x2e4>)
 800385e:	7859      	ldrb	r1, [r3, #1]
 8003860:	1813      	adds	r3, r2, r0
 8003862:	460a      	mov	r2, r1
 8003864:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003868:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	897b      	ldrh	r3, [r7, #10]
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	8179      	strh	r1, [r7, #10]
 8003872:	4618      	mov	r0, r3
 8003874:	4b16      	ldr	r3, [pc, #88]	@ (80038d0 <send_DHCP_REQUEST+0x2e4>)
 8003876:	7899      	ldrb	r1, [r3, #2]
 8003878:	1813      	adds	r3, r2, r0
 800387a:	460a      	mov	r2, r1
 800387c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003880:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	897b      	ldrh	r3, [r7, #10]
 8003886:	1c59      	adds	r1, r3, #1
 8003888:	8179      	strh	r1, [r7, #10]
 800388a:	4618      	mov	r0, r3
 800388c:	4b10      	ldr	r3, [pc, #64]	@ (80038d0 <send_DHCP_REQUEST+0x2e4>)
 800388e:	78d9      	ldrb	r1, [r3, #3]
 8003890:	1813      	adds	r3, r2, r0
 8003892:	460a      	mov	r2, r1
 8003894:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003898:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	897b      	ldrh	r3, [r7, #10]
 800389e:	1c59      	adds	r1, r3, #1
 80038a0:	8179      	strh	r1, [r7, #10]
 80038a2:	4413      	add	r3, r2
 80038a4:	220c      	movs	r2, #12
 80038a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <send_DHCP_REQUEST+0x2d8>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	1c59      	adds	r1, r3, #1
 80038b2:	8179      	strh	r1, [r7, #10]
 80038b4:	4413      	add	r3, r2
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e019      	b.n	80038f6 <send_DHCP_REQUEST+0x30a>
 80038c2:	bf00      	nop
 80038c4:	200007e8 	.word	0x200007e8
 80038c8:	200007ec 	.word	0x200007ec
 80038cc:	200007cc 	.word	0x200007cc
 80038d0:	200007c0 	.word	0x200007c0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80038d4:	4b86      	ldr	r3, [pc, #536]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	897b      	ldrh	r3, [r7, #10]
 80038da:	1c59      	adds	r1, r3, #1
 80038dc:	8179      	strh	r1, [r7, #10]
 80038de:	4618      	mov	r0, r3
 80038e0:	4984      	ldr	r1, [pc, #528]	@ (8003af4 <send_DHCP_REQUEST+0x508>)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	440b      	add	r3, r1
 80038e6:	7819      	ldrb	r1, [r3, #0]
 80038e8:	1813      	adds	r3, r2, r0
 80038ea:	460a      	mov	r2, r1
 80038ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	4a7f      	ldr	r2, [pc, #508]	@ (8003af4 <send_DHCP_REQUEST+0x508>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e8      	bne.n	80038d4 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8003902:	4b7d      	ldr	r3, [pc, #500]	@ (8003af8 <send_DHCP_REQUEST+0x50c>)
 8003904:	78db      	ldrb	r3, [r3, #3]
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b79      	ldr	r3, [pc, #484]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 800390c:	681c      	ldr	r4, [r3, #0]
 800390e:	897b      	ldrh	r3, [r7, #10]
 8003910:	1c59      	adds	r1, r3, #1
 8003912:	8179      	strh	r1, [r7, #10]
 8003914:	461d      	mov	r5, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f000 ff24 	bl	8004764 <NibbleToHex>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	1963      	adds	r3, r4, r5
 8003922:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8003926:	4b74      	ldr	r3, [pc, #464]	@ (8003af8 <send_DHCP_REQUEST+0x50c>)
 8003928:	78da      	ldrb	r2, [r3, #3]
 800392a:	4b71      	ldr	r3, [pc, #452]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 800392c:	681c      	ldr	r4, [r3, #0]
 800392e:	897b      	ldrh	r3, [r7, #10]
 8003930:	1c59      	adds	r1, r3, #1
 8003932:	8179      	strh	r1, [r7, #10]
 8003934:	461d      	mov	r5, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f000 ff14 	bl	8004764 <NibbleToHex>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	1963      	adds	r3, r4, r5
 8003942:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8003946:	4b6c      	ldr	r3, [pc, #432]	@ (8003af8 <send_DHCP_REQUEST+0x50c>)
 8003948:	791b      	ldrb	r3, [r3, #4]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	b2da      	uxtb	r2, r3
 800394e:	4b68      	ldr	r3, [pc, #416]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003950:	681c      	ldr	r4, [r3, #0]
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	1c59      	adds	r1, r3, #1
 8003956:	8179      	strh	r1, [r7, #10]
 8003958:	461d      	mov	r5, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f000 ff02 	bl	8004764 <NibbleToHex>
 8003960:	4603      	mov	r3, r0
 8003962:	461a      	mov	r2, r3
 8003964:	1963      	adds	r3, r4, r5
 8003966:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800396a:	4b63      	ldr	r3, [pc, #396]	@ (8003af8 <send_DHCP_REQUEST+0x50c>)
 800396c:	791a      	ldrb	r2, [r3, #4]
 800396e:	4b60      	ldr	r3, [pc, #384]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003970:	681c      	ldr	r4, [r3, #0]
 8003972:	897b      	ldrh	r3, [r7, #10]
 8003974:	1c59      	adds	r1, r3, #1
 8003976:	8179      	strh	r1, [r7, #10]
 8003978:	461d      	mov	r5, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f000 fef2 	bl	8004764 <NibbleToHex>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	1963      	adds	r3, r4, r5
 8003986:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800398a:	4b5b      	ldr	r3, [pc, #364]	@ (8003af8 <send_DHCP_REQUEST+0x50c>)
 800398c:	795b      	ldrb	r3, [r3, #5]
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b57      	ldr	r3, [pc, #348]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003994:	681c      	ldr	r4, [r3, #0]
 8003996:	897b      	ldrh	r3, [r7, #10]
 8003998:	1c59      	adds	r1, r3, #1
 800399a:	8179      	strh	r1, [r7, #10]
 800399c:	461d      	mov	r5, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f000 fee0 	bl	8004764 <NibbleToHex>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	1963      	adds	r3, r4, r5
 80039aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80039ae:	4b52      	ldr	r3, [pc, #328]	@ (8003af8 <send_DHCP_REQUEST+0x50c>)
 80039b0:	795a      	ldrb	r2, [r3, #5]
 80039b2:	4b4f      	ldr	r3, [pc, #316]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 80039b4:	681c      	ldr	r4, [r3, #0]
 80039b6:	897b      	ldrh	r3, [r7, #10]
 80039b8:	1c59      	adds	r1, r3, #1
 80039ba:	8179      	strh	r1, [r7, #10]
 80039bc:	461d      	mov	r5, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 fed0 	bl	8004764 <NibbleToHex>
 80039c4:	4603      	mov	r3, r0
 80039c6:	461a      	mov	r2, r3
 80039c8:	1963      	adds	r3, r4, r5
 80039ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	b2d9      	uxtb	r1, r3
 80039d2:	4b47      	ldr	r3, [pc, #284]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	8978      	ldrh	r0, [r7, #10]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3307      	adds	r3, #7
 80039dc:	1ac3      	subs	r3, r0, r3
 80039de:	3106      	adds	r1, #6
 80039e0:	b2c9      	uxtb	r1, r1
 80039e2:	4413      	add	r3, r2
 80039e4:	460a      	mov	r2, r1
 80039e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80039ea:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	1c59      	adds	r1, r3, #1
 80039f2:	8179      	strh	r1, [r7, #10]
 80039f4:	4413      	add	r3, r2
 80039f6:	2237      	movs	r2, #55	@ 0x37
 80039f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80039fc:	4b3c      	ldr	r3, [pc, #240]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	897b      	ldrh	r3, [r7, #10]
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	8179      	strh	r1, [r7, #10]
 8003a06:	4413      	add	r3, r2
 8003a08:	2208      	movs	r2, #8
 8003a0a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8003a0e:	4b38      	ldr	r3, [pc, #224]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	1c59      	adds	r1, r3, #1
 8003a16:	8179      	strh	r1, [r7, #10]
 8003a18:	4413      	add	r3, r2
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8003a20:	4b33      	ldr	r3, [pc, #204]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	897b      	ldrh	r3, [r7, #10]
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	8179      	strh	r1, [r7, #10]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8003a32:	4b2f      	ldr	r3, [pc, #188]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	1c59      	adds	r1, r3, #1
 8003a3a:	8179      	strh	r1, [r7, #10]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	2206      	movs	r2, #6
 8003a40:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8003a44:	4b2a      	ldr	r3, [pc, #168]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	897b      	ldrh	r3, [r7, #10]
 8003a4a:	1c59      	adds	r1, r3, #1
 8003a4c:	8179      	strh	r1, [r7, #10]
 8003a4e:	4413      	add	r3, r2
 8003a50:	220f      	movs	r2, #15
 8003a52:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8003a56:	4b26      	ldr	r3, [pc, #152]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	897b      	ldrh	r3, [r7, #10]
 8003a5c:	1c59      	adds	r1, r3, #1
 8003a5e:	8179      	strh	r1, [r7, #10]
 8003a60:	4413      	add	r3, r2
 8003a62:	223a      	movs	r2, #58	@ 0x3a
 8003a64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8003a68:	4b21      	ldr	r3, [pc, #132]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	897b      	ldrh	r3, [r7, #10]
 8003a6e:	1c59      	adds	r1, r3, #1
 8003a70:	8179      	strh	r1, [r7, #10]
 8003a72:	4413      	add	r3, r2
 8003a74:	223b      	movs	r2, #59	@ 0x3b
 8003a76:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	897b      	ldrh	r3, [r7, #10]
 8003a80:	1c59      	adds	r1, r3, #1
 8003a82:	8179      	strh	r1, [r7, #10]
 8003a84:	4413      	add	r3, r2
 8003a86:	221f      	movs	r2, #31
 8003a88:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8003a8c:	4b18      	ldr	r3, [pc, #96]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	897b      	ldrh	r3, [r7, #10]
 8003a92:	1c59      	adds	r1, r3, #1
 8003a94:	8179      	strh	r1, [r7, #10]
 8003a96:	4413      	add	r3, r2
 8003a98:	2221      	movs	r2, #33	@ 0x21
 8003a9a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8003a9e:	4b14      	ldr	r3, [pc, #80]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	897b      	ldrh	r3, [r7, #10]
 8003aa4:	1c59      	adds	r1, r3, #1
 8003aa6:	8179      	strh	r1, [r7, #10]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	22ff      	movs	r2, #255	@ 0xff
 8003aac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003ab0:	897b      	ldrh	r3, [r7, #10]
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e009      	b.n	8003aca <send_DHCP_REQUEST+0x4de>
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	33ec      	adds	r3, #236	@ 0xec
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003ad0:	dbf1      	blt.n	8003ab6 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <send_DHCP_REQUEST+0x510>)
 8003ad4:	7818      	ldrb	r0, [r3, #0]
 8003ad6:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <send_DHCP_REQUEST+0x504>)
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	2243      	movs	r2, #67	@ 0x43
 8003ade:	9200      	str	r2, [sp, #0]
 8003ae0:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8003ae4:	f001 fad8 	bl	8005098 <sendto>

}
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bdb0      	pop	{r4, r5, r7, pc}
 8003af0:	200007e8 	.word	0x200007e8
 8003af4:	20000080 	.word	0x20000080
 8003af8:	200007ec 	.word	0x200007ec
 8003afc:	200007bd 	.word	0x200007bd

08003b00 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8003b0a:	f7ff fab3 	bl	8003074 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003b0e:	2304      	movs	r3, #4
 8003b10:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8003b12:	4b9f      	ldr	r3, [pc, #636]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330a      	adds	r3, #10
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003b1c:	4b9c      	ldr	r3, [pc, #624]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330a      	adds	r3, #10
 8003b22:	3301      	adds	r3, #1
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003b28:	4b99      	ldr	r3, [pc, #612]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	897b      	ldrh	r3, [r7, #10]
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	8179      	strh	r1, [r7, #10]
 8003b32:	4413      	add	r3, r2
 8003b34:	2235      	movs	r2, #53	@ 0x35
 8003b36:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003b3a:	4b95      	ldr	r3, [pc, #596]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	897b      	ldrh	r3, [r7, #10]
 8003b40:	1c59      	adds	r1, r3, #1
 8003b42:	8179      	strh	r1, [r7, #10]
 8003b44:	4413      	add	r3, r2
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8003b4c:	4b90      	ldr	r3, [pc, #576]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	897b      	ldrh	r3, [r7, #10]
 8003b52:	1c59      	adds	r1, r3, #1
 8003b54:	8179      	strh	r1, [r7, #10]
 8003b56:	4413      	add	r3, r2
 8003b58:	2204      	movs	r2, #4
 8003b5a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003b5e:	4b8c      	ldr	r3, [pc, #560]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	1c59      	adds	r1, r3, #1
 8003b66:	8179      	strh	r1, [r7, #10]
 8003b68:	4413      	add	r3, r2
 8003b6a:	223d      	movs	r2, #61	@ 0x3d
 8003b6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003b70:	4b87      	ldr	r3, [pc, #540]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	897b      	ldrh	r3, [r7, #10]
 8003b76:	1c59      	adds	r1, r3, #1
 8003b78:	8179      	strh	r1, [r7, #10]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003b82:	4b83      	ldr	r3, [pc, #524]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	897b      	ldrh	r3, [r7, #10]
 8003b88:	1c59      	adds	r1, r3, #1
 8003b8a:	8179      	strh	r1, [r7, #10]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8003b94:	4b7e      	ldr	r3, [pc, #504]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	897b      	ldrh	r3, [r7, #10]
 8003b9a:	1c59      	adds	r1, r3, #1
 8003b9c:	8179      	strh	r1, [r7, #10]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	4b7c      	ldr	r3, [pc, #496]	@ (8003d94 <send_DHCP_DECLINE+0x294>)
 8003ba2:	7819      	ldrb	r1, [r3, #0]
 8003ba4:	1813      	adds	r3, r2, r0
 8003ba6:	460a      	mov	r2, r1
 8003ba8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003bac:	4b78      	ldr	r3, [pc, #480]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	897b      	ldrh	r3, [r7, #10]
 8003bb2:	1c59      	adds	r1, r3, #1
 8003bb4:	8179      	strh	r1, [r7, #10]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	4b76      	ldr	r3, [pc, #472]	@ (8003d94 <send_DHCP_DECLINE+0x294>)
 8003bba:	7859      	ldrb	r1, [r3, #1]
 8003bbc:	1813      	adds	r3, r2, r0
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003bc4:	4b72      	ldr	r3, [pc, #456]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	897b      	ldrh	r3, [r7, #10]
 8003bca:	1c59      	adds	r1, r3, #1
 8003bcc:	8179      	strh	r1, [r7, #10]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	4b70      	ldr	r3, [pc, #448]	@ (8003d94 <send_DHCP_DECLINE+0x294>)
 8003bd2:	7899      	ldrb	r1, [r3, #2]
 8003bd4:	1813      	adds	r3, r2, r0
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	897b      	ldrh	r3, [r7, #10]
 8003be2:	1c59      	adds	r1, r3, #1
 8003be4:	8179      	strh	r1, [r7, #10]
 8003be6:	4618      	mov	r0, r3
 8003be8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d94 <send_DHCP_DECLINE+0x294>)
 8003bea:	78d9      	ldrb	r1, [r3, #3]
 8003bec:	1813      	adds	r3, r2, r0
 8003bee:	460a      	mov	r2, r1
 8003bf0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003bf4:	4b66      	ldr	r3, [pc, #408]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	897b      	ldrh	r3, [r7, #10]
 8003bfa:	1c59      	adds	r1, r3, #1
 8003bfc:	8179      	strh	r1, [r7, #10]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	4b64      	ldr	r3, [pc, #400]	@ (8003d94 <send_DHCP_DECLINE+0x294>)
 8003c02:	7919      	ldrb	r1, [r3, #4]
 8003c04:	1813      	adds	r3, r2, r0
 8003c06:	460a      	mov	r2, r1
 8003c08:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003c0c:	4b60      	ldr	r3, [pc, #384]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	897b      	ldrh	r3, [r7, #10]
 8003c12:	1c59      	adds	r1, r3, #1
 8003c14:	8179      	strh	r1, [r7, #10]
 8003c16:	4618      	mov	r0, r3
 8003c18:	4b5e      	ldr	r3, [pc, #376]	@ (8003d94 <send_DHCP_DECLINE+0x294>)
 8003c1a:	7959      	ldrb	r1, [r3, #5]
 8003c1c:	1813      	adds	r3, r2, r0
 8003c1e:	460a      	mov	r2, r1
 8003c20:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003c24:	4b5a      	ldr	r3, [pc, #360]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	897b      	ldrh	r3, [r7, #10]
 8003c2a:	1c59      	adds	r1, r3, #1
 8003c2c:	8179      	strh	r1, [r7, #10]
 8003c2e:	4413      	add	r3, r2
 8003c30:	2232      	movs	r2, #50	@ 0x32
 8003c32:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003c36:	4b56      	ldr	r3, [pc, #344]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	897b      	ldrh	r3, [r7, #10]
 8003c3c:	1c59      	adds	r1, r3, #1
 8003c3e:	8179      	strh	r1, [r7, #10]
 8003c40:	4413      	add	r3, r2
 8003c42:	2204      	movs	r2, #4
 8003c44:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003c48:	4b51      	ldr	r3, [pc, #324]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	897b      	ldrh	r3, [r7, #10]
 8003c4e:	1c59      	adds	r1, r3, #1
 8003c50:	8179      	strh	r1, [r7, #10]
 8003c52:	4618      	mov	r0, r3
 8003c54:	4b50      	ldr	r3, [pc, #320]	@ (8003d98 <send_DHCP_DECLINE+0x298>)
 8003c56:	7819      	ldrb	r1, [r3, #0]
 8003c58:	1813      	adds	r3, r2, r0
 8003c5a:	460a      	mov	r2, r1
 8003c5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003c60:	4b4b      	ldr	r3, [pc, #300]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	897b      	ldrh	r3, [r7, #10]
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	8179      	strh	r1, [r7, #10]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d98 <send_DHCP_DECLINE+0x298>)
 8003c6e:	7859      	ldrb	r1, [r3, #1]
 8003c70:	1813      	adds	r3, r2, r0
 8003c72:	460a      	mov	r2, r1
 8003c74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003c78:	4b45      	ldr	r3, [pc, #276]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	897b      	ldrh	r3, [r7, #10]
 8003c7e:	1c59      	adds	r1, r3, #1
 8003c80:	8179      	strh	r1, [r7, #10]
 8003c82:	4618      	mov	r0, r3
 8003c84:	4b44      	ldr	r3, [pc, #272]	@ (8003d98 <send_DHCP_DECLINE+0x298>)
 8003c86:	7899      	ldrb	r1, [r3, #2]
 8003c88:	1813      	adds	r3, r2, r0
 8003c8a:	460a      	mov	r2, r1
 8003c8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003c90:	4b3f      	ldr	r3, [pc, #252]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	897b      	ldrh	r3, [r7, #10]
 8003c96:	1c59      	adds	r1, r3, #1
 8003c98:	8179      	strh	r1, [r7, #10]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d98 <send_DHCP_DECLINE+0x298>)
 8003c9e:	78d9      	ldrb	r1, [r3, #3]
 8003ca0:	1813      	adds	r3, r2, r0
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003ca8:	4b39      	ldr	r3, [pc, #228]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	897b      	ldrh	r3, [r7, #10]
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	8179      	strh	r1, [r7, #10]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	2236      	movs	r2, #54	@ 0x36
 8003cb6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003cba:	4b35      	ldr	r3, [pc, #212]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	897b      	ldrh	r3, [r7, #10]
 8003cc0:	1c59      	adds	r1, r3, #1
 8003cc2:	8179      	strh	r1, [r7, #10]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003ccc:	4b30      	ldr	r3, [pc, #192]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	897b      	ldrh	r3, [r7, #10]
 8003cd2:	1c59      	adds	r1, r3, #1
 8003cd4:	8179      	strh	r1, [r7, #10]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	4b30      	ldr	r3, [pc, #192]	@ (8003d9c <send_DHCP_DECLINE+0x29c>)
 8003cda:	7819      	ldrb	r1, [r3, #0]
 8003cdc:	1813      	adds	r3, r2, r0
 8003cde:	460a      	mov	r2, r1
 8003ce0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	897b      	ldrh	r3, [r7, #10]
 8003cea:	1c59      	adds	r1, r3, #1
 8003cec:	8179      	strh	r1, [r7, #10]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d9c <send_DHCP_DECLINE+0x29c>)
 8003cf2:	7859      	ldrb	r1, [r3, #1]
 8003cf4:	1813      	adds	r3, r2, r0
 8003cf6:	460a      	mov	r2, r1
 8003cf8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003cfc:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	897b      	ldrh	r3, [r7, #10]
 8003d02:	1c59      	adds	r1, r3, #1
 8003d04:	8179      	strh	r1, [r7, #10]
 8003d06:	4618      	mov	r0, r3
 8003d08:	4b24      	ldr	r3, [pc, #144]	@ (8003d9c <send_DHCP_DECLINE+0x29c>)
 8003d0a:	7899      	ldrb	r1, [r3, #2]
 8003d0c:	1813      	adds	r3, r2, r0
 8003d0e:	460a      	mov	r2, r1
 8003d10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003d14:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	897b      	ldrh	r3, [r7, #10]
 8003d1a:	1c59      	adds	r1, r3, #1
 8003d1c:	8179      	strh	r1, [r7, #10]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	4b1e      	ldr	r3, [pc, #120]	@ (8003d9c <send_DHCP_DECLINE+0x29c>)
 8003d22:	78d9      	ldrb	r1, [r3, #3]
 8003d24:	1813      	adds	r3, r2, r0
 8003d26:	460a      	mov	r2, r1
 8003d28:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	897b      	ldrh	r3, [r7, #10]
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	8179      	strh	r1, [r7, #10]
 8003d36:	4413      	add	r3, r2
 8003d38:	22ff      	movs	r2, #255	@ 0xff
 8003d3a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003d3e:	897b      	ldrh	r3, [r7, #10]
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	e009      	b.n	8003d58 <send_DHCP_DECLINE+0x258>
 8003d44:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	33ec      	adds	r3, #236	@ 0xec
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3301      	adds	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003d5e:	dbf1      	blt.n	8003d44 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8003d60:	23ff      	movs	r3, #255	@ 0xff
 8003d62:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8003d64:	23ff      	movs	r3, #255	@ 0xff
 8003d66:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003d68:	23ff      	movs	r3, #255	@ 0xff
 8003d6a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003d6c:	23ff      	movs	r3, #255	@ 0xff
 8003d6e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003d70:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <send_DHCP_DECLINE+0x2a0>)
 8003d72:	7818      	ldrb	r0, [r3, #0]
 8003d74:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <send_DHCP_DECLINE+0x290>)
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	2243      	movs	r2, #67	@ 0x43
 8003d7c:	9200      	str	r2, [sp, #0]
 8003d7e:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8003d82:	f001 f989 	bl	8005098 <sendto>
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200007e8 	.word	0x200007e8
 8003d94:	200007ec 	.word	0x200007ec
 8003d98:	200007cc 	.word	0x200007cc
 8003d9c:	200007c0 	.word	0x200007c0
 8003da0:	200007bd 	.word	0x200007bd

08003da4 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b089      	sub	sp, #36	@ 0x24
 8003da8:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8003dae:	4ba1      	ldr	r3, [pc, #644]	@ (8004034 <parseDHCPMSG+0x290>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 fe33 	bl	8005a1e <getSn_RX_RSR>
 8003db8:	4603      	mov	r3, r0
 8003dba:	823b      	strh	r3, [r7, #16]
 8003dbc:	8a3b      	ldrh	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d011      	beq.n	8003de6 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8003dc2:	4b9c      	ldr	r3, [pc, #624]	@ (8004034 <parseDHCPMSG+0x290>)
 8003dc4:	7818      	ldrb	r0, [r3, #0]
 8003dc6:	4b9c      	ldr	r3, [pc, #624]	@ (8004038 <parseDHCPMSG+0x294>)
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	1d3c      	adds	r4, r7, #4
 8003dcc:	8a3a      	ldrh	r2, [r7, #16]
 8003dce:	1cbb      	adds	r3, r7, #2
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	f001 fa94 	bl	8005300 <recvfrom>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8003ddc:	887b      	ldrh	r3, [r7, #2]
 8003dde:	2b43      	cmp	r3, #67	@ 0x43
 8003de0:	f040 81ed 	bne.w	80041be <parseDHCPMSG+0x41a>
 8003de4:	e001      	b.n	8003dea <parseDHCPMSG+0x46>
   else return 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e1eb      	b.n	80041c2 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003dea:	4b93      	ldr	r3, [pc, #588]	@ (8004038 <parseDHCPMSG+0x294>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	7f1a      	ldrb	r2, [r3, #28]
 8003df0:	4b92      	ldr	r3, [pc, #584]	@ (800403c <parseDHCPMSG+0x298>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d124      	bne.n	8003e42 <parseDHCPMSG+0x9e>
 8003df8:	4b8f      	ldr	r3, [pc, #572]	@ (8004038 <parseDHCPMSG+0x294>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	7f5a      	ldrb	r2, [r3, #29]
 8003dfe:	4b8f      	ldr	r3, [pc, #572]	@ (800403c <parseDHCPMSG+0x298>)
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d11d      	bne.n	8003e42 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003e06:	4b8c      	ldr	r3, [pc, #560]	@ (8004038 <parseDHCPMSG+0x294>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	7f9a      	ldrb	r2, [r3, #30]
 8003e0c:	4b8b      	ldr	r3, [pc, #556]	@ (800403c <parseDHCPMSG+0x298>)
 8003e0e:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d116      	bne.n	8003e42 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003e14:	4b88      	ldr	r3, [pc, #544]	@ (8004038 <parseDHCPMSG+0x294>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	7fda      	ldrb	r2, [r3, #31]
 8003e1a:	4b88      	ldr	r3, [pc, #544]	@ (800403c <parseDHCPMSG+0x298>)
 8003e1c:	78db      	ldrb	r3, [r3, #3]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d10f      	bne.n	8003e42 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003e22:	4b85      	ldr	r3, [pc, #532]	@ (8004038 <parseDHCPMSG+0x294>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003e2a:	4b84      	ldr	r3, [pc, #528]	@ (800403c <parseDHCPMSG+0x298>)
 8003e2c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d107      	bne.n	8003e42 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003e32:	4b81      	ldr	r3, [pc, #516]	@ (8004038 <parseDHCPMSG+0x294>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003e3a:	4b80      	ldr	r3, [pc, #512]	@ (800403c <parseDHCPMSG+0x298>)
 8003e3c:	795b      	ldrb	r3, [r3, #5]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d001      	beq.n	8003e46 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e1bd      	b.n	80041c2 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8003e46:	4b7e      	ldr	r3, [pc, #504]	@ (8004040 <parseDHCPMSG+0x29c>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <parseDHCPMSG+0xc2>
 8003e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004040 <parseDHCPMSG+0x29c>)
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d107      	bne.n	8003e66 <parseDHCPMSG+0xc2>
 8003e56:	4b7a      	ldr	r3, [pc, #488]	@ (8004040 <parseDHCPMSG+0x29c>)
 8003e58:	789b      	ldrb	r3, [r3, #2]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d103      	bne.n	8003e66 <parseDHCPMSG+0xc2>
 8003e5e:	4b78      	ldr	r3, [pc, #480]	@ (8004040 <parseDHCPMSG+0x29c>)
 8003e60:	78db      	ldrb	r3, [r3, #3]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d029      	beq.n	8003eba <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003e66:	793a      	ldrb	r2, [r7, #4]
 8003e68:	4b75      	ldr	r3, [pc, #468]	@ (8004040 <parseDHCPMSG+0x29c>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d10e      	bne.n	8003e8e <parseDHCPMSG+0xea>
 8003e70:	797a      	ldrb	r2, [r7, #5]
 8003e72:	4b73      	ldr	r3, [pc, #460]	@ (8004040 <parseDHCPMSG+0x29c>)
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d109      	bne.n	8003e8e <parseDHCPMSG+0xea>
 8003e7a:	79ba      	ldrb	r2, [r7, #6]
 8003e7c:	4b70      	ldr	r3, [pc, #448]	@ (8004040 <parseDHCPMSG+0x29c>)
 8003e7e:	789b      	ldrb	r3, [r3, #2]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d104      	bne.n	8003e8e <parseDHCPMSG+0xea>
 8003e84:	79fa      	ldrb	r2, [r7, #7]
 8003e86:	4b6e      	ldr	r3, [pc, #440]	@ (8004040 <parseDHCPMSG+0x29c>)
 8003e88:	78db      	ldrb	r3, [r3, #3]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d015      	beq.n	8003eba <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003e8e:	793a      	ldrb	r2, [r7, #4]
 8003e90:	4b6c      	ldr	r3, [pc, #432]	@ (8004044 <parseDHCPMSG+0x2a0>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d10e      	bne.n	8003eb6 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003e98:	797a      	ldrb	r2, [r7, #5]
 8003e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004044 <parseDHCPMSG+0x2a0>)
 8003e9c:	785b      	ldrb	r3, [r3, #1]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d109      	bne.n	8003eb6 <parseDHCPMSG+0x112>
 8003ea2:	79ba      	ldrb	r2, [r7, #6]
 8003ea4:	4b67      	ldr	r3, [pc, #412]	@ (8004044 <parseDHCPMSG+0x2a0>)
 8003ea6:	789b      	ldrb	r3, [r3, #2]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d104      	bne.n	8003eb6 <parseDHCPMSG+0x112>
 8003eac:	79fa      	ldrb	r2, [r7, #7]
 8003eae:	4b65      	ldr	r3, [pc, #404]	@ (8004044 <parseDHCPMSG+0x2a0>)
 8003eb0:	78db      	ldrb	r3, [r3, #3]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d001      	beq.n	8003eba <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e183      	b.n	80041c2 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8003eba:	4b5f      	ldr	r3, [pc, #380]	@ (8004038 <parseDHCPMSG+0x294>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	33f0      	adds	r3, #240	@ 0xf0
 8003ec4:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8003ec6:	8a3b      	ldrh	r3, [r7, #16]
 8003ec8:	3bf0      	subs	r3, #240	@ 0xf0
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4413      	add	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8003ed0:	e170      	b.n	80041b4 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b36      	cmp	r3, #54	@ 0x36
 8003ed8:	dc76      	bgt.n	8003fc8 <parseDHCPMSG+0x224>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f2c0 815d 	blt.w	800419a <parseDHCPMSG+0x3f6>
 8003ee0:	2b36      	cmp	r3, #54	@ 0x36
 8003ee2:	f200 815a 	bhi.w	800419a <parseDHCPMSG+0x3f6>
 8003ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8003eec <parseDHCPMSG+0x148>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003fd5 	.word	0x08003fd5
 8003ef0:	08003ff5 	.word	0x08003ff5
 8003ef4:	0800419b 	.word	0x0800419b
 8003ef8:	0800404d 	.word	0x0800404d
 8003efc:	0800419b 	.word	0x0800419b
 8003f00:	0800419b 	.word	0x0800419b
 8003f04:	08004099 	.word	0x08004099
 8003f08:	0800419b 	.word	0x0800419b
 8003f0c:	0800419b 	.word	0x0800419b
 8003f10:	0800419b 	.word	0x0800419b
 8003f14:	0800419b 	.word	0x0800419b
 8003f18:	0800419b 	.word	0x0800419b
 8003f1c:	0800419b 	.word	0x0800419b
 8003f20:	0800419b 	.word	0x0800419b
 8003f24:	0800419b 	.word	0x0800419b
 8003f28:	0800419b 	.word	0x0800419b
 8003f2c:	0800419b 	.word	0x0800419b
 8003f30:	0800419b 	.word	0x0800419b
 8003f34:	0800419b 	.word	0x0800419b
 8003f38:	0800419b 	.word	0x0800419b
 8003f3c:	0800419b 	.word	0x0800419b
 8003f40:	0800419b 	.word	0x0800419b
 8003f44:	0800419b 	.word	0x0800419b
 8003f48:	0800419b 	.word	0x0800419b
 8003f4c:	0800419b 	.word	0x0800419b
 8003f50:	0800419b 	.word	0x0800419b
 8003f54:	0800419b 	.word	0x0800419b
 8003f58:	0800419b 	.word	0x0800419b
 8003f5c:	0800419b 	.word	0x0800419b
 8003f60:	0800419b 	.word	0x0800419b
 8003f64:	0800419b 	.word	0x0800419b
 8003f68:	0800419b 	.word	0x0800419b
 8003f6c:	0800419b 	.word	0x0800419b
 8003f70:	0800419b 	.word	0x0800419b
 8003f74:	0800419b 	.word	0x0800419b
 8003f78:	0800419b 	.word	0x0800419b
 8003f7c:	0800419b 	.word	0x0800419b
 8003f80:	0800419b 	.word	0x0800419b
 8003f84:	0800419b 	.word	0x0800419b
 8003f88:	0800419b 	.word	0x0800419b
 8003f8c:	0800419b 	.word	0x0800419b
 8003f90:	0800419b 	.word	0x0800419b
 8003f94:	0800419b 	.word	0x0800419b
 8003f98:	0800419b 	.word	0x0800419b
 8003f9c:	0800419b 	.word	0x0800419b
 8003fa0:	0800419b 	.word	0x0800419b
 8003fa4:	0800419b 	.word	0x0800419b
 8003fa8:	0800419b 	.word	0x0800419b
 8003fac:	0800419b 	.word	0x0800419b
 8003fb0:	0800419b 	.word	0x0800419b
 8003fb4:	0800419b 	.word	0x0800419b
 8003fb8:	080040e5 	.word	0x080040e5
 8003fbc:	0800419b 	.word	0x0800419b
 8003fc0:	08003fdd 	.word	0x08003fdd
 8003fc4:	08004141 	.word	0x08004141
 8003fc8:	2bff      	cmp	r3, #255	@ 0xff
 8003fca:	f040 80e6 	bne.w	800419a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	617b      	str	r3, [r7, #20]
   				break;
 8003fd2:	e0ef      	b.n	80041b4 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
   				break;
 8003fda:	e0eb      	b.n	80041b4 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
   				p++;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	617a      	str	r2, [r7, #20]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	74fb      	strb	r3, [r7, #19]
   				break;
 8003ff2:	e0df      	b.n	80041b4 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
   				p++;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	617a      	str	r2, [r7, #20]
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	4b0f      	ldr	r3, [pc, #60]	@ (8004048 <parseDHCPMSG+0x2a4>)
 800400a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	617a      	str	r2, [r7, #20]
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	4b0c      	ldr	r3, [pc, #48]	@ (8004048 <parseDHCPMSG+0x2a4>)
 8004016:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	617a      	str	r2, [r7, #20]
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <parseDHCPMSG+0x2a4>)
 8004022:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	617a      	str	r2, [r7, #20]
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <parseDHCPMSG+0x2a4>)
 800402e:	70da      	strb	r2, [r3, #3]
   				break;
 8004030:	e0c0      	b.n	80041b4 <parseDHCPMSG+0x410>
 8004032:	bf00      	nop
 8004034:	200007bd 	.word	0x200007bd
 8004038:	200007e8 	.word	0x200007e8
 800403c:	200007ec 	.word	0x200007ec
 8004040:	200007c0 	.word	0x200007c0
 8004044:	200007c4 	.word	0x200007c4
 8004048:	200007d4 	.word	0x200007d4
   			case routersOnSubnet :
   				p++;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3301      	adds	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	617a      	str	r2, [r7, #20]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	617a      	str	r2, [r7, #20]
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	4b59      	ldr	r3, [pc, #356]	@ (80041cc <parseDHCPMSG+0x428>)
 8004066:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	617a      	str	r2, [r7, #20]
 800406e:	781a      	ldrb	r2, [r3, #0]
 8004070:	4b56      	ldr	r3, [pc, #344]	@ (80041cc <parseDHCPMSG+0x428>)
 8004072:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	617a      	str	r2, [r7, #20]
 800407a:	781a      	ldrb	r2, [r3, #0]
 800407c:	4b53      	ldr	r3, [pc, #332]	@ (80041cc <parseDHCPMSG+0x428>)
 800407e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	617a      	str	r2, [r7, #20]
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	4b50      	ldr	r3, [pc, #320]	@ (80041cc <parseDHCPMSG+0x428>)
 800408a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800408c:	7afb      	ldrb	r3, [r7, #11]
 800408e:	3b04      	subs	r3, #4
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4413      	add	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
   				break;
 8004096:	e08d      	b.n	80041b4 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3301      	adds	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	617a      	str	r2, [r7, #20]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	617a      	str	r2, [r7, #20]
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <parseDHCPMSG+0x42c>)
 80040b2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	617a      	str	r2, [r7, #20]
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	4b44      	ldr	r3, [pc, #272]	@ (80041d0 <parseDHCPMSG+0x42c>)
 80040be:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	617a      	str	r2, [r7, #20]
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	4b41      	ldr	r3, [pc, #260]	@ (80041d0 <parseDHCPMSG+0x42c>)
 80040ca:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	617a      	str	r2, [r7, #20]
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	4b3e      	ldr	r3, [pc, #248]	@ (80041d0 <parseDHCPMSG+0x42c>)
 80040d6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80040d8:	7afb      	ldrb	r3, [r7, #11]
 80040da:	3b04      	subs	r3, #4
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4413      	add	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
   				break;
 80040e2:	e067      	b.n	80041b4 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3301      	adds	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	617a      	str	r2, [r7, #20]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	617a      	str	r2, [r7, #20]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b35      	ldr	r3, [pc, #212]	@ (80041d4 <parseDHCPMSG+0x430>)
 8004100:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8004102:	4b34      	ldr	r3, [pc, #208]	@ (80041d4 <parseDHCPMSG+0x430>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	021a      	lsls	r2, r3, #8
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	6179      	str	r1, [r7, #20]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	4413      	add	r3, r2
 8004112:	4a30      	ldr	r2, [pc, #192]	@ (80041d4 <parseDHCPMSG+0x430>)
 8004114:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8004116:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <parseDHCPMSG+0x430>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	021a      	lsls	r2, r3, #8
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	6179      	str	r1, [r7, #20]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	4413      	add	r3, r2
 8004126:	4a2b      	ldr	r2, [pc, #172]	@ (80041d4 <parseDHCPMSG+0x430>)
 8004128:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800412a:	4b2a      	ldr	r3, [pc, #168]	@ (80041d4 <parseDHCPMSG+0x430>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	021a      	lsls	r2, r3, #8
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	6179      	str	r1, [r7, #20]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4413      	add	r3, r2
 800413a:	4a26      	ldr	r2, [pc, #152]	@ (80041d4 <parseDHCPMSG+0x430>)
 800413c:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 800413e:	e039      	b.n	80041b4 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3301      	adds	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	617a      	str	r2, [r7, #20]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	617a      	str	r2, [r7, #20]
 8004156:	781a      	ldrb	r2, [r3, #0]
 8004158:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <parseDHCPMSG+0x434>)
 800415a:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	617a      	str	r2, [r7, #20]
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	4b1c      	ldr	r3, [pc, #112]	@ (80041d8 <parseDHCPMSG+0x434>)
 8004166:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	617a      	str	r2, [r7, #20]
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	4b19      	ldr	r3, [pc, #100]	@ (80041d8 <parseDHCPMSG+0x434>)
 8004172:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	617a      	str	r2, [r7, #20]
 800417a:	781a      	ldrb	r2, [r3, #0]
 800417c:	4b16      	ldr	r3, [pc, #88]	@ (80041d8 <parseDHCPMSG+0x434>)
 800417e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8004180:	793a      	ldrb	r2, [r7, #4]
 8004182:	4b16      	ldr	r3, [pc, #88]	@ (80041dc <parseDHCPMSG+0x438>)
 8004184:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8004186:	797a      	ldrb	r2, [r7, #5]
 8004188:	4b14      	ldr	r3, [pc, #80]	@ (80041dc <parseDHCPMSG+0x438>)
 800418a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 800418c:	79ba      	ldrb	r2, [r7, #6]
 800418e:	4b13      	ldr	r3, [pc, #76]	@ (80041dc <parseDHCPMSG+0x438>)
 8004190:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8004192:	79fa      	ldrb	r2, [r7, #7]
 8004194:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <parseDHCPMSG+0x438>)
 8004196:	70da      	strb	r2, [r3, #3]
   				break;
 8004198:	e00c      	b.n	80041b4 <parseDHCPMSG+0x410>
   			default :
   				p++;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	3301      	adds	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	617a      	str	r2, [r7, #20]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 80041aa:	7afb      	ldrb	r3, [r7, #11]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4413      	add	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
   				break;
 80041b2:	bf00      	nop
		while ( p < e ) {
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	f4ff ae8a 	bcc.w	8003ed2 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 80041be:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd90      	pop	{r4, r7, pc}
 80041ca:	bf00      	nop
 80041cc:	200007d0 	.word	0x200007d0
 80041d0:	200007d8 	.word	0x200007d8
 80041d4:	20000078 	.word	0x20000078
 80041d8:	200007c0 	.word	0x200007c0
 80041dc:	200007c4 	.word	0x200007c4

080041e0 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80041e6:	4b7f      	ldr	r3, [pc, #508]	@ (80043e4 <DHCP_run+0x204>)
 80041e8:	f993 3000 	ldrsb.w	r3, [r3]
 80041ec:	2b06      	cmp	r3, #6
 80041ee:	d101      	bne.n	80041f4 <DHCP_run+0x14>
 80041f0:	2305      	movs	r3, #5
 80041f2:	e0f3      	b.n	80043dc <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80041f4:	4b7c      	ldr	r3, [pc, #496]	@ (80043e8 <DHCP_run+0x208>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	3301      	adds	r3, #1
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004202:	4618      	mov	r0, r3
 8004204:	f001 fa68 	bl	80056d8 <WIZCHIP_READ>
 8004208:	4603      	mov	r3, r0
 800420a:	2b22      	cmp	r3, #34	@ 0x22
 800420c:	d006      	beq.n	800421c <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800420e:	4b76      	ldr	r3, [pc, #472]	@ (80043e8 <DHCP_run+0x208>)
 8004210:	7818      	ldrb	r0, [r3, #0]
 8004212:	2300      	movs	r3, #0
 8004214:	2244      	movs	r2, #68	@ 0x44
 8004216:	2102      	movs	r1, #2
 8004218:	f000 fabe 	bl	8004798 <socket>

	ret = DHCP_RUNNING;
 800421c:	2301      	movs	r3, #1
 800421e:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8004220:	f7ff fdc0 	bl	8003da4 <parseDHCPMSG>
 8004224:	4603      	mov	r3, r0
 8004226:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8004228:	4b6e      	ldr	r3, [pc, #440]	@ (80043e4 <DHCP_run+0x204>)
 800422a:	f993 3000 	ldrsb.w	r3, [r3]
 800422e:	2b04      	cmp	r3, #4
 8004230:	f200 80d0 	bhi.w	80043d4 <DHCP_run+0x1f4>
 8004234:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <DHCP_run+0x5c>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	08004251 	.word	0x08004251
 8004240:	08004275 	.word	0x08004275
 8004244:	080042b9 	.word	0x080042b9
 8004248:	08004309 	.word	0x08004309
 800424c:	08004363 	.word	0x08004363
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8004250:	4b66      	ldr	r3, [pc, #408]	@ (80043ec <DHCP_run+0x20c>)
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8004256:	4b65      	ldr	r3, [pc, #404]	@ (80043ec <DHCP_run+0x20c>)
 8004258:	2200      	movs	r2, #0
 800425a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800425c:	4b63      	ldr	r3, [pc, #396]	@ (80043ec <DHCP_run+0x20c>)
 800425e:	2200      	movs	r2, #0
 8004260:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8004262:	4b62      	ldr	r3, [pc, #392]	@ (80043ec <DHCP_run+0x20c>)
 8004264:	2200      	movs	r2, #0
 8004266:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8004268:	f7fe fffa 	bl	8003260 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800426c:	4b5d      	ldr	r3, [pc, #372]	@ (80043e4 <DHCP_run+0x204>)
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
   		break;
 8004272:	e0b2      	b.n	80043da <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8004274:	79bb      	ldrb	r3, [r7, #6]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d119      	bne.n	80042ae <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800427a:	4b5d      	ldr	r3, [pc, #372]	@ (80043f0 <DHCP_run+0x210>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	7c1a      	ldrb	r2, [r3, #16]
 8004280:	4b5a      	ldr	r3, [pc, #360]	@ (80043ec <DHCP_run+0x20c>)
 8004282:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8004284:	4b5a      	ldr	r3, [pc, #360]	@ (80043f0 <DHCP_run+0x210>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	7c5a      	ldrb	r2, [r3, #17]
 800428a:	4b58      	ldr	r3, [pc, #352]	@ (80043ec <DHCP_run+0x20c>)
 800428c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800428e:	4b58      	ldr	r3, [pc, #352]	@ (80043f0 <DHCP_run+0x210>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	7c9a      	ldrb	r2, [r3, #18]
 8004294:	4b55      	ldr	r3, [pc, #340]	@ (80043ec <DHCP_run+0x20c>)
 8004296:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8004298:	4b55      	ldr	r3, [pc, #340]	@ (80043f0 <DHCP_run+0x210>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	7cda      	ldrb	r2, [r3, #19]
 800429e:	4b53      	ldr	r3, [pc, #332]	@ (80043ec <DHCP_run+0x20c>)
 80042a0:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80042a2:	f7ff f9a3 	bl	80035ec <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80042a6:	4b4f      	ldr	r3, [pc, #316]	@ (80043e4 <DHCP_run+0x204>)
 80042a8:	2202      	movs	r2, #2
 80042aa:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80042ac:	e095      	b.n	80043da <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80042ae:	f000 f8b1 	bl	8004414 <check_DHCP_timeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
         break;
 80042b6:	e090      	b.n	80043da <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80042b8:	79bb      	ldrb	r3, [r7, #6]
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d116      	bne.n	80042ec <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80042be:	f000 f909 	bl	80044d4 <check_DHCP_leasedIP>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80042c8:	4b4a      	ldr	r3, [pc, #296]	@ (80043f4 <DHCP_run+0x214>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4798      	blx	r3
					reset_DHCP_timeout();
 80042ce:	f000 f9d3 	bl	8004678 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80042d2:	4b44      	ldr	r3, [pc, #272]	@ (80043e4 <DHCP_run+0x204>)
 80042d4:	2203      	movs	r2, #3
 80042d6:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80042d8:	e07f      	b.n	80043da <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80042da:	f000 f9cd 	bl	8004678 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80042de:	4b46      	ldr	r3, [pc, #280]	@ (80043f8 <DHCP_run+0x218>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80042e4:	4b3f      	ldr	r3, [pc, #252]	@ (80043e4 <DHCP_run+0x204>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
		break;
 80042ea:	e076      	b.n	80043da <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80042ec:	79bb      	ldrb	r3, [r7, #6]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d105      	bne.n	80042fe <DHCP_run+0x11e>
				reset_DHCP_timeout();
 80042f2:	f000 f9c1 	bl	8004678 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80042f6:	4b3b      	ldr	r3, [pc, #236]	@ (80043e4 <DHCP_run+0x204>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
		break;
 80042fc:	e06d      	b.n	80043da <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80042fe:	f000 f889 	bl	8004414 <check_DHCP_timeout>
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
		break;
 8004306:	e068      	b.n	80043da <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8004308:	2304      	movs	r3, #4
 800430a:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 800430c:	4b3b      	ldr	r3, [pc, #236]	@ (80043fc <DHCP_run+0x21c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d060      	beq.n	80043d8 <DHCP_run+0x1f8>
 8004316:	4b39      	ldr	r3, [pc, #228]	@ (80043fc <DHCP_run+0x21c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	085a      	lsrs	r2, r3, #1
 800431c:	4b38      	ldr	r3, [pc, #224]	@ (8004400 <DHCP_run+0x220>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d259      	bcs.n	80043d8 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8004328:	4b30      	ldr	r3, [pc, #192]	@ (80043ec <DHCP_run+0x20c>)
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	4b35      	ldr	r3, [pc, #212]	@ (8004404 <DHCP_run+0x224>)
 800432e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8004330:	4b2e      	ldr	r3, [pc, #184]	@ (80043ec <DHCP_run+0x20c>)
 8004332:	785a      	ldrb	r2, [r3, #1]
 8004334:	4b33      	ldr	r3, [pc, #204]	@ (8004404 <DHCP_run+0x224>)
 8004336:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8004338:	4b2c      	ldr	r3, [pc, #176]	@ (80043ec <DHCP_run+0x20c>)
 800433a:	789a      	ldrb	r2, [r3, #2]
 800433c:	4b31      	ldr	r3, [pc, #196]	@ (8004404 <DHCP_run+0x224>)
 800433e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8004340:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <DHCP_run+0x20c>)
 8004342:	78da      	ldrb	r2, [r3, #3]
 8004344:	4b2f      	ldr	r3, [pc, #188]	@ (8004404 <DHCP_run+0x224>)
 8004346:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8004348:	4b2f      	ldr	r3, [pc, #188]	@ (8004408 <DHCP_run+0x228>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	4a2e      	ldr	r2, [pc, #184]	@ (8004408 <DHCP_run+0x228>)
 8004350:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8004352:	f7ff f94b 	bl	80035ec <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8004356:	f000 f98f 	bl	8004678 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800435a:	4b22      	ldr	r3, [pc, #136]	@ (80043e4 <DHCP_run+0x204>)
 800435c:	2204      	movs	r2, #4
 800435e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8004360:	e03a      	b.n	80043d8 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8004362:	2304      	movs	r3, #4
 8004364:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8004366:	79bb      	ldrb	r3, [r7, #6]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d125      	bne.n	80043b8 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 800436c:	4b27      	ldr	r3, [pc, #156]	@ (800440c <DHCP_run+0x22c>)
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8004372:	4b24      	ldr	r3, [pc, #144]	@ (8004404 <DHCP_run+0x224>)
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	4b1d      	ldr	r3, [pc, #116]	@ (80043ec <DHCP_run+0x20c>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d111      	bne.n	80043a2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800437e:	4b21      	ldr	r3, [pc, #132]	@ (8004404 <DHCP_run+0x224>)
 8004380:	785a      	ldrb	r2, [r3, #1]
 8004382:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <DHCP_run+0x20c>)
 8004384:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8004386:	429a      	cmp	r2, r3
 8004388:	d10b      	bne.n	80043a2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800438a:	4b1e      	ldr	r3, [pc, #120]	@ (8004404 <DHCP_run+0x224>)
 800438c:	789a      	ldrb	r2, [r3, #2]
 800438e:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <DHCP_run+0x20c>)
 8004390:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d105      	bne.n	80043a2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8004396:	4b1b      	ldr	r3, [pc, #108]	@ (8004404 <DHCP_run+0x224>)
 8004398:	78da      	ldrb	r2, [r3, #3]
 800439a:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <DHCP_run+0x20c>)
 800439c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d004      	beq.n	80043ac <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 80043a2:	2303      	movs	r3, #3
 80043a4:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80043a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004410 <DHCP_run+0x230>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80043ac:	f000 f964 	bl	8004678 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80043b0:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <DHCP_run+0x204>)
 80043b2:	2203      	movs	r2, #3
 80043b4:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80043b6:	e010      	b.n	80043da <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80043b8:	79bb      	ldrb	r3, [r7, #6]
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d105      	bne.n	80043ca <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80043be:	f000 f95b 	bl	8004678 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80043c2:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <DHCP_run+0x204>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
	   	break;
 80043c8:	e007      	b.n	80043da <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80043ca:	f000 f823 	bl	8004414 <check_DHCP_timeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
	   	break;
 80043d2:	e002      	b.n	80043da <DHCP_run+0x1fa>
		default :
   		break;
 80043d4:	bf00      	nop
 80043d6:	e000      	b.n	80043da <DHCP_run+0x1fa>
		break;
 80043d8:	bf00      	nop
	}

	return ret;
 80043da:	79fb      	ldrb	r3, [r7, #7]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	200007dc 	.word	0x200007dc
 80043e8:	200007bd 	.word	0x200007bd
 80043ec:	200007cc 	.word	0x200007cc
 80043f0:	200007e8 	.word	0x200007e8
 80043f4:	20000088 	.word	0x20000088
 80043f8:	20000090 	.word	0x20000090
 80043fc:	20000078 	.word	0x20000078
 8004400:	200007e0 	.word	0x200007e0
 8004404:	200007c8 	.word	0x200007c8
 8004408:	200007e4 	.word	0x200007e4
 800440c:	200007dd 	.word	0x200007dd
 8004410:	2000008c 	.word	0x2000008c

08004414 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800441a:	2301      	movs	r3, #1
 800441c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800441e:	4b29      	ldr	r3, [pc, #164]	@ (80044c4 <check_DHCP_timeout+0xb0>)
 8004420:	f993 3000 	ldrsb.w	r3, [r3]
 8004424:	2b01      	cmp	r3, #1
 8004426:	dc2d      	bgt.n	8004484 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8004428:	4b27      	ldr	r3, [pc, #156]	@ (80044c8 <check_DHCP_timeout+0xb4>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b27      	ldr	r3, [pc, #156]	@ (80044cc <check_DHCP_timeout+0xb8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d242      	bcs.n	80044ba <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8004434:	4b26      	ldr	r3, [pc, #152]	@ (80044d0 <check_DHCP_timeout+0xbc>)
 8004436:	f993 3000 	ldrsb.w	r3, [r3]
 800443a:	2b04      	cmp	r3, #4
 800443c:	d00c      	beq.n	8004458 <check_DHCP_timeout+0x44>
 800443e:	2b04      	cmp	r3, #4
 8004440:	dc0d      	bgt.n	800445e <check_DHCP_timeout+0x4a>
 8004442:	2b01      	cmp	r3, #1
 8004444:	d002      	beq.n	800444c <check_DHCP_timeout+0x38>
 8004446:	2b02      	cmp	r3, #2
 8004448:	d003      	beq.n	8004452 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800444a:	e008      	b.n	800445e <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 800444c:	f7fe ff08 	bl	8003260 <send_DHCP_DISCOVER>
				break;
 8004450:	e006      	b.n	8004460 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8004452:	f7ff f8cb 	bl	80035ec <send_DHCP_REQUEST>
				break;
 8004456:	e003      	b.n	8004460 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8004458:	f7ff f8c8 	bl	80035ec <send_DHCP_REQUEST>
				break;
 800445c:	e000      	b.n	8004460 <check_DHCP_timeout+0x4c>
				break;
 800445e:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8004460:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <check_DHCP_timeout+0xb8>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8004466:	4b19      	ldr	r3, [pc, #100]	@ (80044cc <check_DHCP_timeout+0xb8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330a      	adds	r3, #10
 800446c:	4a16      	ldr	r2, [pc, #88]	@ (80044c8 <check_DHCP_timeout+0xb4>)
 800446e:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8004470:	4b14      	ldr	r3, [pc, #80]	@ (80044c4 <check_DHCP_timeout+0xb0>)
 8004472:	f993 3000 	ldrsb.w	r3, [r3]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	3301      	adds	r3, #1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	b25a      	sxtb	r2, r3
 800447e:	4b11      	ldr	r3, [pc, #68]	@ (80044c4 <check_DHCP_timeout+0xb0>)
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	e01a      	b.n	80044ba <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8004484:	4b12      	ldr	r3, [pc, #72]	@ (80044d0 <check_DHCP_timeout+0xbc>)
 8004486:	f993 3000 	ldrsb.w	r3, [r3]
 800448a:	2b04      	cmp	r3, #4
 800448c:	d00c      	beq.n	80044a8 <check_DHCP_timeout+0x94>
 800448e:	2b04      	cmp	r3, #4
 8004490:	dc10      	bgt.n	80044b4 <check_DHCP_timeout+0xa0>
 8004492:	2b01      	cmp	r3, #1
 8004494:	d002      	beq.n	800449c <check_DHCP_timeout+0x88>
 8004496:	2b02      	cmp	r3, #2
 8004498:	d006      	beq.n	80044a8 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800449a:	e00b      	b.n	80044b4 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800449c:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <check_DHCP_timeout+0xbc>)
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80044a2:	2300      	movs	r3, #0
 80044a4:	71fb      	strb	r3, [r7, #7]
				break;
 80044a6:	e006      	b.n	80044b6 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 80044a8:	f7fe feda 	bl	8003260 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80044ac:	4b08      	ldr	r3, [pc, #32]	@ (80044d0 <check_DHCP_timeout+0xbc>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]
				break;
 80044b2:	e000      	b.n	80044b6 <check_DHCP_timeout+0xa2>
				break;
 80044b4:	bf00      	nop
		}
		reset_DHCP_timeout();
 80044b6:	f000 f8df 	bl	8004678 <reset_DHCP_timeout>
	}
	return ret;
 80044ba:	79fb      	ldrb	r3, [r7, #7]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	200007dd 	.word	0x200007dd
 80044c8:	2000007c 	.word	0x2000007c
 80044cc:	200007e0 	.word	0x200007e0
 80044d0:	200007dc 	.word	0x200007dc

080044d4 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80044da:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80044de:	f001 f8fb 	bl	80056d8 <WIZCHIP_READ>
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80044e6:	2103      	movs	r1, #3
 80044e8:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80044ec:	f001 f940 	bl	8005770 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80044f0:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <check_DHCP_leasedIP+0x6c>)
 80044f2:	7818      	ldrb	r0, [r3, #0]
 80044f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <check_DHCP_leasedIP+0x70>)
 80044fc:	2211      	movs	r2, #17
 80044fe:	4912      	ldr	r1, [pc, #72]	@ (8004548 <check_DHCP_leasedIP+0x74>)
 8004500:	f000 fdca 	bl	8005098 <sendto>
 8004504:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	4619      	mov	r1, r3
 800450a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800450e:	f001 f92f 	bl	8005770 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f113 0f0d 	cmn.w	r3, #13
 8004518:	d101      	bne.n	800451e <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800451a:	2301      	movs	r3, #1
 800451c:	e00c      	b.n	8004538 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800451e:	f7ff faef 	bl	8003b00 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <check_DHCP_leasedIP+0x78>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8004528:	bf00      	nop
 800452a:	4b08      	ldr	r3, [pc, #32]	@ (800454c <check_DHCP_leasedIP+0x78>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d9f9      	bls.n	800452a <check_DHCP_leasedIP+0x56>

		return 0;
 8004536:	2300      	movs	r3, #0
	}
}	
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	200007bd 	.word	0x200007bd
 8004544:	200007cc 	.word	0x200007cc
 8004548:	08007cc0 	.word	0x08007cc0
 800454c:	200007e0 	.word	0x200007e0

08004550 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	6039      	str	r1, [r7, #0]
 800455a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8004560:	2206      	movs	r2, #6
 8004562:	493f      	ldr	r1, [pc, #252]	@ (8004660 <DHCP_init+0x110>)
 8004564:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004568:	f001 f950 	bl	800580c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800456c:	4b3c      	ldr	r3, [pc, #240]	@ (8004660 <DHCP_init+0x110>)
 800456e:	781a      	ldrb	r2, [r3, #0]
 8004570:	4b3b      	ldr	r3, [pc, #236]	@ (8004660 <DHCP_init+0x110>)
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	4313      	orrs	r3, r2
 8004576:	b2da      	uxtb	r2, r3
 8004578:	4b39      	ldr	r3, [pc, #228]	@ (8004660 <DHCP_init+0x110>)
 800457a:	789b      	ldrb	r3, [r3, #2]
 800457c:	4313      	orrs	r3, r2
 800457e:	b2da      	uxtb	r2, r3
 8004580:	4b37      	ldr	r3, [pc, #220]	@ (8004660 <DHCP_init+0x110>)
 8004582:	78db      	ldrb	r3, [r3, #3]
 8004584:	4313      	orrs	r3, r2
 8004586:	b2da      	uxtb	r2, r3
 8004588:	4b35      	ldr	r3, [pc, #212]	@ (8004660 <DHCP_init+0x110>)
 800458a:	791b      	ldrb	r3, [r3, #4]
 800458c:	4313      	orrs	r3, r2
 800458e:	b2da      	uxtb	r2, r3
 8004590:	4b33      	ldr	r3, [pc, #204]	@ (8004660 <DHCP_init+0x110>)
 8004592:	795b      	ldrb	r3, [r3, #5]
 8004594:	4313      	orrs	r3, r2
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d117      	bne.n	80045cc <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800459c:	4b30      	ldr	r3, [pc, #192]	@ (8004660 <DHCP_init+0x110>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 80045a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004660 <DHCP_init+0x110>)
 80045a4:	2208      	movs	r2, #8
 80045a6:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 80045a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004660 <DHCP_init+0x110>)
 80045aa:	22dc      	movs	r2, #220	@ 0xdc
 80045ac:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 80045ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004660 <DHCP_init+0x110>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 80045b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004660 <DHCP_init+0x110>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 80045ba:	4b29      	ldr	r3, [pc, #164]	@ (8004660 <DHCP_init+0x110>)
 80045bc:	2200      	movs	r2, #0
 80045be:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 80045c0:	2206      	movs	r2, #6
 80045c2:	4927      	ldr	r1, [pc, #156]	@ (8004660 <DHCP_init+0x110>)
 80045c4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80045c8:	f001 f980 	bl	80058cc <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 80045cc:	4a25      	ldr	r2, [pc, #148]	@ (8004664 <DHCP_init+0x114>)
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80045d2:	4a25      	ldr	r2, [pc, #148]	@ (8004668 <DHCP_init+0x118>)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80045d8:	4b24      	ldr	r3, [pc, #144]	@ (800466c <DHCP_init+0x11c>)
 80045da:	4a25      	ldr	r2, [pc, #148]	@ (8004670 <DHCP_init+0x120>)
 80045dc:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80045de:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <DHCP_init+0x110>)
 80045e0:	78db      	ldrb	r3, [r3, #3]
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b21      	ldr	r3, [pc, #132]	@ (800466c <DHCP_init+0x11c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4413      	add	r3, r2
 80045ea:	4a20      	ldr	r2, [pc, #128]	@ (800466c <DHCP_init+0x11c>)
 80045ec:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80045ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004660 <DHCP_init+0x110>)
 80045f0:	791b      	ldrb	r3, [r3, #4]
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <DHCP_init+0x11c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4413      	add	r3, r2
 80045fa:	4a1c      	ldr	r2, [pc, #112]	@ (800466c <DHCP_init+0x11c>)
 80045fc:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80045fe:	4b18      	ldr	r3, [pc, #96]	@ (8004660 <DHCP_init+0x110>)
 8004600:	795b      	ldrb	r3, [r3, #5]
 8004602:	461a      	mov	r2, r3
 8004604:	4b19      	ldr	r3, [pc, #100]	@ (800466c <DHCP_init+0x11c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4413      	add	r3, r2
 800460a:	4a18      	ldr	r2, [pc, #96]	@ (800466c <DHCP_init+0x11c>)
 800460c:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800460e:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <DHCP_init+0x110>)
 8004610:	78da      	ldrb	r2, [r3, #3]
 8004612:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <DHCP_init+0x110>)
 8004614:	791b      	ldrb	r3, [r3, #4]
 8004616:	4053      	eors	r3, r2
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4b11      	ldr	r3, [pc, #68]	@ (8004660 <DHCP_init+0x110>)
 800461c:	795b      	ldrb	r3, [r3, #5]
 800461e:	4053      	eors	r3, r2
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	4b11      	ldr	r3, [pc, #68]	@ (800466c <DHCP_init+0x11c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4413      	add	r3, r2
 800462a:	4a10      	ldr	r2, [pc, #64]	@ (800466c <DHCP_init+0x11c>)
 800462c:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800462e:	f107 030c 	add.w	r3, r7, #12
 8004632:	2204      	movs	r2, #4
 8004634:	4619      	mov	r1, r3
 8004636:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800463a:	f001 f947 	bl	80058cc <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800463e:	f107 030c 	add.w	r3, r7, #12
 8004642:	2204      	movs	r2, #4
 8004644:	4619      	mov	r1, r3
 8004646:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800464a:	f001 f93f 	bl	80058cc <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 800464e:	f000 f813 	bl	8004678 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8004652:	4b08      	ldr	r3, [pc, #32]	@ (8004674 <DHCP_init+0x124>)
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	200007ec 	.word	0x200007ec
 8004664:	200007bd 	.word	0x200007bd
 8004668:	200007e8 	.word	0x200007e8
 800466c:	200007e4 	.word	0x200007e4
 8004670:	12345678 	.word	0x12345678
 8004674:	200007dc 	.word	0x200007dc

08004678 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 800467c:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <reset_DHCP_timeout+0x20>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8004682:	4b06      	ldr	r3, [pc, #24]	@ (800469c <reset_DHCP_timeout+0x24>)
 8004684:	220a      	movs	r2, #10
 8004686:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <reset_DHCP_timeout+0x28>)
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
}
 800468e:	bf00      	nop
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	200007e0 	.word	0x200007e0
 800469c:	2000007c 	.word	0x2000007c
 80046a0:	200007dd 	.word	0x200007dd

080046a4 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 80046ac:	4b0c      	ldr	r3, [pc, #48]	@ (80046e0 <getIPfromDHCP+0x3c>)
 80046ae:	781a      	ldrb	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3301      	adds	r3, #1
 80046b8:	4a09      	ldr	r2, [pc, #36]	@ (80046e0 <getIPfromDHCP+0x3c>)
 80046ba:	7852      	ldrb	r2, [r2, #1]
 80046bc:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3302      	adds	r3, #2
 80046c2:	4a07      	ldr	r2, [pc, #28]	@ (80046e0 <getIPfromDHCP+0x3c>)
 80046c4:	7892      	ldrb	r2, [r2, #2]
 80046c6:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3303      	adds	r3, #3
 80046cc:	4a04      	ldr	r2, [pc, #16]	@ (80046e0 <getIPfromDHCP+0x3c>)
 80046ce:	78d2      	ldrb	r2, [r2, #3]
 80046d0:	701a      	strb	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	200007cc 	.word	0x200007cc

080046e4 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80046ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <getGWfromDHCP+0x3c>)
 80046ee:	781a      	ldrb	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3301      	adds	r3, #1
 80046f8:	4a09      	ldr	r2, [pc, #36]	@ (8004720 <getGWfromDHCP+0x3c>)
 80046fa:	7852      	ldrb	r2, [r2, #1]
 80046fc:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3302      	adds	r3, #2
 8004702:	4a07      	ldr	r2, [pc, #28]	@ (8004720 <getGWfromDHCP+0x3c>)
 8004704:	7892      	ldrb	r2, [r2, #2]
 8004706:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3303      	adds	r3, #3
 800470c:	4a04      	ldr	r2, [pc, #16]	@ (8004720 <getGWfromDHCP+0x3c>)
 800470e:	78d2      	ldrb	r2, [r2, #3]
 8004710:	701a      	strb	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	200007d0 	.word	0x200007d0

08004724 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800472c:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <getSNfromDHCP+0x3c>)
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3301      	adds	r3, #1
 8004738:	4a09      	ldr	r2, [pc, #36]	@ (8004760 <getSNfromDHCP+0x3c>)
 800473a:	7852      	ldrb	r2, [r2, #1]
 800473c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3302      	adds	r3, #2
 8004742:	4a07      	ldr	r2, [pc, #28]	@ (8004760 <getSNfromDHCP+0x3c>)
 8004744:	7892      	ldrb	r2, [r2, #2]
 8004746:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3303      	adds	r3, #3
 800474c:	4a04      	ldr	r2, [pc, #16]	@ (8004760 <getSNfromDHCP+0x3c>)
 800474e:	78d2      	ldrb	r2, [r2, #3]
 8004750:	701a      	strb	r2, [r3, #0]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	200007d4 	.word	0x200007d4

08004764 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	2b09      	cmp	r3, #9
 800477a:	d803      	bhi.n	8004784 <NibbleToHex+0x20>
    return nibble + '0';
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	3330      	adds	r3, #48	@ 0x30
 8004780:	b2db      	uxtb	r3, r3
 8004782:	e002      	b.n	800478a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	3337      	adds	r3, #55	@ 0x37
 8004788:	b2db      	uxtb	r3, r3
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	4604      	mov	r4, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	4623      	mov	r3, r4
 80047a8:	71fb      	strb	r3, [r7, #7]
 80047aa:	4603      	mov	r3, r0
 80047ac:	71bb      	strb	r3, [r7, #6]
 80047ae:	460b      	mov	r3, r1
 80047b0:	80bb      	strh	r3, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d902      	bls.n	80047c2 <socket+0x2a>
 80047bc:	f04f 33ff 	mov.w	r3, #4294967295
 80047c0:	e0f0      	b.n	80049a4 <socket+0x20c>
	switch(protocol)
 80047c2:	79bb      	ldrb	r3, [r7, #6]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d005      	beq.n	80047d4 <socket+0x3c>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dd11      	ble.n	80047f0 <socket+0x58>
 80047cc:	3b02      	subs	r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d80e      	bhi.n	80047f0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80047d2:	e011      	b.n	80047f8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80047d4:	f107 030c 	add.w	r3, r7, #12
 80047d8:	2204      	movs	r2, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80047e0:	f001 f814 	bl	800580c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d105      	bne.n	80047f6 <socket+0x5e>
 80047ea:	f06f 0302 	mvn.w	r3, #2
 80047ee:	e0d9      	b.n	80049a4 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80047f0:	f06f 0304 	mvn.w	r3, #4
 80047f4:	e0d6      	b.n	80049a4 <socket+0x20c>
	    break;
 80047f6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <socket+0x70>
 8004802:	f06f 0305 	mvn.w	r3, #5
 8004806:	e0cd      	b.n	80049a4 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d028      	beq.n	8004860 <socket+0xc8>
	{
   	switch(protocol)
 800480e:	79bb      	ldrb	r3, [r7, #6]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d002      	beq.n	800481a <socket+0x82>
 8004814:	2b02      	cmp	r3, #2
 8004816:	d008      	beq.n	800482a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004818:	e022      	b.n	8004860 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004820:	2b00      	cmp	r3, #0
 8004822:	d11a      	bne.n	800485a <socket+0xc2>
 8004824:	f06f 0305 	mvn.w	r3, #5
 8004828:	e0bc      	b.n	80049a4 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d006      	beq.n	8004842 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004838:	2b00      	cmp	r3, #0
 800483a:	db02      	blt.n	8004842 <socket+0xaa>
 800483c:	f06f 0305 	mvn.w	r3, #5
 8004840:	e0b0      	b.n	80049a4 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800484c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004850:	2b00      	cmp	r3, #0
 8004852:	db04      	blt.n	800485e <socket+0xc6>
 8004854:	f06f 0305 	mvn.w	r3, #5
 8004858:	e0a4      	b.n	80049a4 <socket+0x20c>
   	      break;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <socket+0xc8>
   	      break;
 800485e:	bf00      	nop
   	}
   }
	close(sn);
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f8ac 	bl	80049c0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	3301      	adds	r3, #1
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4618      	mov	r0, r3
 8004872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004876:	f023 030f 	bic.w	r3, r3, #15
 800487a:	b25a      	sxtb	r2, r3
 800487c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004880:	4313      	orrs	r3, r2
 8004882:	b25b      	sxtb	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	4619      	mov	r1, r3
 8004888:	f000 ff72 	bl	8005770 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800488c:	88bb      	ldrh	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d110      	bne.n	80048b4 <socket+0x11c>
	{
	   port = sock_any_port++;
 8004892:	4b46      	ldr	r3, [pc, #280]	@ (80049ac <socket+0x214>)
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	b291      	uxth	r1, r2
 800489a:	4a44      	ldr	r2, [pc, #272]	@ (80049ac <socket+0x214>)
 800489c:	8011      	strh	r1, [r2, #0]
 800489e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80048a0:	4b42      	ldr	r3, [pc, #264]	@ (80049ac <socket+0x214>)
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d103      	bne.n	80048b4 <socket+0x11c>
 80048ac:	4b3f      	ldr	r3, [pc, #252]	@ (80049ac <socket+0x214>)
 80048ae:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80048b2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	3301      	adds	r3, #1
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048c0:	461a      	mov	r2, r3
 80048c2:	88bb      	ldrh	r3, [r7, #4]
 80048c4:	0a1b      	lsrs	r3, r3, #8
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f000 ff4f 	bl	8005770 <WIZCHIP_WRITE>
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	3301      	adds	r3, #1
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048de:	461a      	mov	r2, r3
 80048e0:	88bb      	ldrh	r3, [r7, #4]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f000 ff42 	bl	8005770 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	3301      	adds	r3, #1
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048f8:	2101      	movs	r1, #1
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 ff38 	bl	8005770 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004900:	bf00      	nop
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	3301      	adds	r3, #1
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fee2 	bl	80056d8 <WIZCHIP_READ>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f3      	bne.n	8004902 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	2201      	movs	r2, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	b21b      	sxth	r3, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	b21a      	sxth	r2, r3
 8004928:	4b21      	ldr	r3, [pc, #132]	@ (80049b0 <socket+0x218>)
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b21b      	sxth	r3, r3
 800492e:	4013      	ands	r3, r2
 8004930:	b21b      	sxth	r3, r3
 8004932:	b29a      	uxth	r2, r3
 8004934:	4b1e      	ldr	r3, [pc, #120]	@ (80049b0 <socket+0x218>)
 8004936:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	f003 0201 	and.w	r2, r3, #1
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	b21a      	sxth	r2, r3
 8004946:	4b1a      	ldr	r3, [pc, #104]	@ (80049b0 <socket+0x218>)
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b21b      	sxth	r3, r3
 800494c:	4313      	orrs	r3, r2
 800494e:	b21b      	sxth	r3, r3
 8004950:	b29a      	uxth	r2, r3
 8004952:	4b17      	ldr	r3, [pc, #92]	@ (80049b0 <socket+0x218>)
 8004954:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	2201      	movs	r2, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	b21b      	sxth	r3, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	b21a      	sxth	r2, r3
 8004964:	4b13      	ldr	r3, [pc, #76]	@ (80049b4 <socket+0x21c>)
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b21b      	sxth	r3, r3
 800496a:	4013      	ands	r3, r2
 800496c:	b21b      	sxth	r3, r3
 800496e:	b29a      	uxth	r2, r3
 8004970:	4b10      	ldr	r3, [pc, #64]	@ (80049b4 <socket+0x21c>)
 8004972:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	4a10      	ldr	r2, [pc, #64]	@ (80049b8 <socket+0x220>)
 8004978:	2100      	movs	r1, #0
 800497a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	4a0e      	ldr	r2, [pc, #56]	@ (80049bc <socket+0x224>)
 8004982:	2100      	movs	r1, #0
 8004984:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004986:	bf00      	nop
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	3301      	adds	r3, #1
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fe9f 	bl	80056d8 <WIZCHIP_READ>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f3      	beq.n	8004988 <socket+0x1f0>
   return (int8_t)sn;
 80049a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd90      	pop	{r4, r7, pc}
 80049ac:	20000094 	.word	0x20000094
 80049b0:	200007f2 	.word	0x200007f2
 80049b4:	200007f4 	.word	0x200007f4
 80049b8:	200007f8 	.word	0x200007f8
 80049bc:	20000808 	.word	0x20000808

080049c0 <close>:

int8_t close(uint8_t sn)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d902      	bls.n	80049d6 <close+0x16>
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
 80049d4:	e055      	b.n	8004a82 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	3301      	adds	r3, #1
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049e2:	2110      	movs	r1, #16
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fec3 	bl	8005770 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80049ea:	bf00      	nop
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	3301      	adds	r3, #1
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fe6d 	bl	80056d8 <WIZCHIP_READ>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f3      	bne.n	80049ec <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	3301      	adds	r3, #1
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a10:	211f      	movs	r1, #31
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 feac 	bl	8005770 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	b21b      	sxth	r3, r3
 8004a22:	43db      	mvns	r3, r3
 8004a24:	b21a      	sxth	r2, r3
 8004a26:	4b19      	ldr	r3, [pc, #100]	@ (8004a8c <close+0xcc>)
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b21b      	sxth	r3, r3
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b21b      	sxth	r3, r3
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	4b16      	ldr	r3, [pc, #88]	@ (8004a8c <close+0xcc>)
 8004a34:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	b21b      	sxth	r3, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	b21a      	sxth	r2, r3
 8004a44:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <close+0xd0>)
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b21b      	sxth	r3, r3
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	b21b      	sxth	r3, r3
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	4b0f      	ldr	r3, [pc, #60]	@ (8004a90 <close+0xd0>)
 8004a52:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	4a0f      	ldr	r2, [pc, #60]	@ (8004a94 <close+0xd4>)
 8004a58:	2100      	movs	r1, #0
 8004a5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	4a0d      	ldr	r2, [pc, #52]	@ (8004a98 <close+0xd8>)
 8004a62:	2100      	movs	r1, #0
 8004a64:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004a66:	bf00      	nop
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fe2f 	bl	80056d8 <WIZCHIP_READ>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f3      	bne.n	8004a68 <close+0xa8>
	return SOCK_OK;
 8004a80:	2301      	movs	r3, #1
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200007f2 	.word	0x200007f2
 8004a90:	200007f4 	.word	0x200007f4
 8004a94:	200007f8 	.word	0x200007f8
 8004a98:	20000808 	.word	0x20000808

08004a9c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	6039      	str	r1, [r7, #0]
 8004aa6:	71fb      	strb	r3, [r7, #7]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d902      	bls.n	8004ab8 <connect+0x1c>
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab6:	e0c6      	b.n	8004c46 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	3301      	adds	r3, #1
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fe09 	bl	80056d8 <WIZCHIP_READ>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d002      	beq.n	8004ad6 <connect+0x3a>
 8004ad0:	f06f 0304 	mvn.w	r3, #4
 8004ad4:	e0b7      	b.n	8004c46 <connect+0x1aa>
   CHECK_SOCKINIT();
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	3301      	adds	r3, #1
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fdf8 	bl	80056d8 <WIZCHIP_READ>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b13      	cmp	r3, #19
 8004aec:	d002      	beq.n	8004af4 <connect+0x58>
 8004aee:	f06f 0302 	mvn.w	r3, #2
 8004af2:	e0a8      	b.n	8004c46 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	3201      	adds	r2, #1
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	4413      	add	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	3202      	adds	r2, #2
 8004b10:	7812      	ldrb	r2, [r2, #0]
 8004b12:	4413      	add	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	3203      	adds	r2, #3
 8004b1e:	7812      	ldrb	r2, [r2, #0]
 8004b20:	4413      	add	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d002      	beq.n	8004b32 <connect+0x96>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <connect+0x9c>
 8004b32:	f06f 030b 	mvn.w	r3, #11
 8004b36:	e086      	b.n	8004c46 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004b38:	88bb      	ldrh	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <connect+0xa8>
 8004b3e:	f06f 030a 	mvn.w	r3, #10
 8004b42:	e080      	b.n	8004c46 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	3301      	adds	r3, #1
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004b50:	2204      	movs	r2, #4
 8004b52:	6839      	ldr	r1, [r7, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 feb9 	bl	80058cc <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	3301      	adds	r3, #1
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b66:	461a      	mov	r2, r3
 8004b68:	88bb      	ldrh	r3, [r7, #4]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 fdfc 	bl	8005770 <WIZCHIP_WRITE>
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8004b84:	461a      	mov	r2, r3
 8004b86:	88bb      	ldrh	r3, [r7, #4]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f000 fdef 	bl	8005770 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	3301      	adds	r3, #1
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004b9e:	2104      	movs	r1, #4
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fde5 	bl	8005770 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004ba6:	bf00      	nop
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	3301      	adds	r3, #1
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fd8f 	bl	80056d8 <WIZCHIP_READ>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f3      	bne.n	8004ba8 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004bc0:	4b23      	ldr	r3, [pc, #140]	@ (8004c50 <connect+0x1b4>)
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	fa42 f303 	asr.w	r3, r2, r3
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d02b      	beq.n	8004c2c <connect+0x190>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e036      	b.n	8004c46 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	3301      	adds	r3, #1
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fd77 	bl	80056d8 <WIZCHIP_READ>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00c      	beq.n	8004c0e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004c00:	2108      	movs	r1, #8
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fdb4 	bl	8005770 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8004c08:	f06f 030c 	mvn.w	r3, #12
 8004c0c:	e01b      	b.n	8004c46 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	3301      	adds	r3, #1
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fd5c 	bl	80056d8 <WIZCHIP_READ>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d102      	bne.n	8004c2c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8004c26:	f06f 0303 	mvn.w	r3, #3
 8004c2a:	e00c      	b.n	8004c46 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	3301      	adds	r3, #1
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fd4d 	bl	80056d8 <WIZCHIP_READ>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b17      	cmp	r3, #23
 8004c42:	d1c9      	bne.n	8004bd8 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8004c44:	2301      	movs	r3, #1
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	200007f2 	.word	0x200007f2

08004c54 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d902      	bls.n	8004c6a <disconnect+0x16>
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295
 8004c68:	e062      	b.n	8004d30 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	3301      	adds	r3, #1
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fd30 	bl	80056d8 <WIZCHIP_READ>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d002      	beq.n	8004c88 <disconnect+0x34>
 8004c82:	f06f 0304 	mvn.w	r3, #4
 8004c86:	e053      	b.n	8004d30 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c94:	2108      	movs	r1, #8
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fd6a 	bl	8005770 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004c9c:	bf00      	nop
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fd14 	bl	80056d8 <WIZCHIP_READ>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f3      	bne.n	8004c9e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	b21b      	sxth	r3, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	b21a      	sxth	r2, r3
 8004cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d38 <disconnect+0xe4>)
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b21b      	sxth	r3, r3
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b21b      	sxth	r3, r3
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	4b19      	ldr	r3, [pc, #100]	@ (8004d38 <disconnect+0xe4>)
 8004cd2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004cd4:	4b19      	ldr	r3, [pc, #100]	@ (8004d3c <disconnect+0xe8>)
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	fa42 f303 	asr.w	r3, r2, r3
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d016      	beq.n	8004d16 <disconnect+0xc2>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e021      	b.n	8004d30 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fced 	bl	80056d8 <WIZCHIP_READ>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d006      	beq.n	8004d16 <disconnect+0xc2>
	   {
	      close(sn);
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fe58 	bl	80049c0 <close>
	      return SOCKERR_TIMEOUT;
 8004d10:	f06f 030c 	mvn.w	r3, #12
 8004d14:	e00c      	b.n	8004d30 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fcd8 	bl	80056d8 <WIZCHIP_READ>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1de      	bne.n	8004cec <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8004d2e:	2301      	movs	r3, #1
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	200007f4 	.word	0x200007f4
 8004d3c:	200007f2 	.word	0x200007f2

08004d40 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	6039      	str	r1, [r7, #0]
 8004d4a:	71fb      	strb	r3, [r7, #7]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d902      	bls.n	8004d64 <send+0x24>
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d62:	e0dd      	b.n	8004f20 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	3301      	adds	r3, #1
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fcb3 	bl	80056d8 <WIZCHIP_READ>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d002      	beq.n	8004d82 <send+0x42>
 8004d7c:	f06f 0304 	mvn.w	r3, #4
 8004d80:	e0ce      	b.n	8004f20 <send+0x1e0>
   CHECK_SOCKDATA();
 8004d82:	88bb      	ldrh	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <send+0x4e>
 8004d88:	f06f 030d 	mvn.w	r3, #13
 8004d8c:	e0c8      	b.n	8004f20 <send+0x1e0>
   tmp = getSn_SR(sn);
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	3301      	adds	r3, #1
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fc9c 	bl	80056d8 <WIZCHIP_READ>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b17      	cmp	r3, #23
 8004da8:	d005      	beq.n	8004db6 <send+0x76>
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b1c      	cmp	r3, #28
 8004dae:	d002      	beq.n	8004db6 <send+0x76>
 8004db0:	f06f 0306 	mvn.w	r3, #6
 8004db4:	e0b4      	b.n	8004f20 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8004db6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f28 <send+0x1e8>)
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	fa42 f303 	asr.w	r3, r2, r3
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d039      	beq.n	8004e3e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3301      	adds	r3, #1
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fc7e 	bl	80056d8 <WIZCHIP_READ>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f003 031f 	and.w	r3, r3, #31
 8004de2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d019      	beq.n	8004e22 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	3301      	adds	r3, #1
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004dfa:	2110      	movs	r1, #16
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fcb7 	bl	8005770 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	2201      	movs	r2, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	b21b      	sxth	r3, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	b21a      	sxth	r2, r3
 8004e10:	4b45      	ldr	r3, [pc, #276]	@ (8004f28 <send+0x1e8>)
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b21b      	sxth	r3, r3
 8004e16:	4013      	ands	r3, r2
 8004e18:	b21b      	sxth	r3, r3
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	4b42      	ldr	r3, [pc, #264]	@ (8004f28 <send+0x1e8>)
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	e00d      	b.n	8004e3e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d006      	beq.n	8004e3a <send+0xfa>
      {
         close(sn);
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fdc6 	bl	80049c0 <close>
         return SOCKERR_TIMEOUT;
 8004e34:	f06f 030c 	mvn.w	r3, #12
 8004e38:	e072      	b.n	8004f20 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e070      	b.n	8004f20 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	3301      	adds	r3, #1
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fc44 	bl	80056d8 <WIZCHIP_READ>
 8004e50:	4603      	mov	r3, r0
 8004e52:	029b      	lsls	r3, r3, #10
 8004e54:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004e56:	88ba      	ldrh	r2, [r7, #4]
 8004e58:	89bb      	ldrh	r3, [r7, #12]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d901      	bls.n	8004e62 <send+0x122>
 8004e5e:	89bb      	ldrh	r3, [r7, #12]
 8004e60:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fd91 	bl	800598c <getSn_TX_FSR>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	3301      	adds	r3, #1
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fc2c 	bl	80056d8 <WIZCHIP_READ>
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b17      	cmp	r3, #23
 8004e88:	d009      	beq.n	8004e9e <send+0x15e>
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b1c      	cmp	r3, #28
 8004e8e:	d006      	beq.n	8004e9e <send+0x15e>
      {
         close(sn);
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fd94 	bl	80049c0 <close>
         return SOCKERR_SOCKSTATUS;
 8004e98:	f06f 0306 	mvn.w	r3, #6
 8004e9c:	e040      	b.n	8004f20 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004e9e:	4b23      	ldr	r3, [pc, #140]	@ (8004f2c <send+0x1ec>)
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	fa42 f303 	asr.w	r3, r2, r3
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <send+0x17e>
 8004eb2:	88ba      	ldrh	r2, [r7, #4]
 8004eb4:	89bb      	ldrh	r3, [r7, #12]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d901      	bls.n	8004ebe <send+0x17e>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e030      	b.n	8004f20 <send+0x1e0>
      if(len <= freesize) break;
 8004ebe:	88ba      	ldrh	r2, [r7, #4]
 8004ec0:	89bb      	ldrh	r3, [r7, #12]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d900      	bls.n	8004ec8 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8004ec6:	e7cc      	b.n	8004e62 <send+0x122>
      if(len <= freesize) break;
 8004ec8:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004eca:	88ba      	ldrh	r2, [r7, #4]
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fded 	bl	8005ab0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	3301      	adds	r3, #1
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ee2:	2120      	movs	r1, #32
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fc43 	bl	8005770 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004eea:	bf00      	nop
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fbed 	bl	80056d8 <WIZCHIP_READ>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f3      	bne.n	8004eec <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	2201      	movs	r2, #1
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	b21a      	sxth	r2, r3
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <send+0x1e8>)
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b21b      	sxth	r3, r3
 8004f14:	4313      	orrs	r3, r2
 8004f16:	b21b      	sxth	r3, r3
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	4b03      	ldr	r3, [pc, #12]	@ (8004f28 <send+0x1e8>)
 8004f1c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004f1e:	88bb      	ldrh	r3, [r7, #4]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	200007f4 	.word	0x200007f4
 8004f2c:	200007f2 	.word	0x200007f2

08004f30 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	6039      	str	r1, [r7, #0]
 8004f3a:	71fb      	strb	r3, [r7, #7]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d902      	bls.n	8004f54 <recv+0x24>
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	e09b      	b.n	800508c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	3301      	adds	r3, #1
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fbbb 	bl	80056d8 <WIZCHIP_READ>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d002      	beq.n	8004f72 <recv+0x42>
 8004f6c:	f06f 0304 	mvn.w	r3, #4
 8004f70:	e08c      	b.n	800508c <recv+0x15c>
   CHECK_SOCKDATA();
 8004f72:	88bb      	ldrh	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <recv+0x4e>
 8004f78:	f06f 030d 	mvn.w	r3, #13
 8004f7c:	e086      	b.n	800508c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	3301      	adds	r3, #1
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fba4 	bl	80056d8 <WIZCHIP_READ>
 8004f90:	4603      	mov	r3, r0
 8004f92:	029b      	lsls	r3, r3, #10
 8004f94:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004f96:	89ba      	ldrh	r2, [r7, #12]
 8004f98:	88bb      	ldrh	r3, [r7, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d201      	bcs.n	8004fa2 <recv+0x72>
 8004f9e:	89bb      	ldrh	r3, [r7, #12]
 8004fa0:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fd3a 	bl	8005a1e <getSn_RX_RSR>
 8004faa:	4603      	mov	r3, r0
 8004fac:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fb8c 	bl	80056d8 <WIZCHIP_READ>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b17      	cmp	r3, #23
 8004fc8:	d026      	beq.n	8005018 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b1c      	cmp	r3, #28
 8004fce:	d11c      	bne.n	800500a <recv+0xda>
            {
               if(recvsize != 0) break;
 8004fd0:	89bb      	ldrh	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d133      	bne.n	800503e <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fcd7 	bl	800598c <getSn_TX_FSR>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	461c      	mov	r4, r3
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fb72 	bl	80056d8 <WIZCHIP_READ>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	029b      	lsls	r3, r3, #10
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	d10d      	bne.n	8005018 <recv+0xe8>
               {
                  close(sn);
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fcde 	bl	80049c0 <close>
                  return SOCKERR_SOCKSTATUS;
 8005004:	f06f 0306 	mvn.w	r3, #6
 8005008:	e040      	b.n	800508c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fcd7 	bl	80049c0 <close>
               return SOCKERR_SOCKSTATUS;
 8005012:	f06f 0306 	mvn.w	r3, #6
 8005016:	e039      	b.n	800508c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005018:	4b1e      	ldr	r3, [pc, #120]	@ (8005094 <recv+0x164>)
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	fa42 f303 	asr.w	r3, r2, r3
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <recv+0x106>
 800502c:	89bb      	ldrh	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <recv+0x106>
 8005032:	2300      	movs	r3, #0
 8005034:	e02a      	b.n	800508c <recv+0x15c>
         if(recvsize != 0) break;
 8005036:	89bb      	ldrh	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 800503c:	e7b1      	b.n	8004fa2 <recv+0x72>
               if(recvsize != 0) break;
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <recv+0x114>
         if(recvsize != 0) break;
 8005042:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005044:	89ba      	ldrh	r2, [r7, #12]
 8005046:	88bb      	ldrh	r3, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d201      	bcs.n	8005050 <recv+0x120>
 800504c:	89bb      	ldrh	r3, [r7, #12]
 800504e:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8005050:	88ba      	ldrh	r2, [r7, #4]
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fd84 	bl	8005b64 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	3301      	adds	r3, #1
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005068:	2140      	movs	r1, #64	@ 0x40
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fb80 	bl	8005770 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005070:	bf00      	nop
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	3301      	adds	r3, #1
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fb2a 	bl	80056d8 <WIZCHIP_READ>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f3      	bne.n	8005072 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800508a:	88bb      	ldrh	r3, [r7, #4]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	bd90      	pop	{r4, r7, pc}
 8005094:	200007f2 	.word	0x200007f2

08005098 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607b      	str	r3, [r7, #4]
 80050a2:	4603      	mov	r3, r0
 80050a4:	73fb      	strb	r3, [r7, #15]
 80050a6:	4613      	mov	r3, r2
 80050a8:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d902      	bls.n	80050be <sendto+0x26>
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	e11a      	b.n	80052f4 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	3301      	adds	r3, #1
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fb06 	bl	80056d8 <WIZCHIP_READ>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	3b02      	subs	r3, #2
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d902      	bls.n	80050de <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80050d8:	f06f 0304 	mvn.w	r3, #4
 80050dc:	e10a      	b.n	80052f4 <sendto+0x25c>
         break;
 80050de:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80050e0:	89bb      	ldrh	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d102      	bne.n	80050ec <sendto+0x54>
 80050e6:	f06f 030d 	mvn.w	r3, #13
 80050ea:	e103      	b.n	80052f4 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	3201      	adds	r2, #1
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	4413      	add	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	3202      	adds	r2, #2
 8005108:	7812      	ldrb	r2, [r2, #0]
 800510a:	4413      	add	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	3203      	adds	r2, #3
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	4413      	add	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10e      	bne.n	8005140 <sendto+0xa8>
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	3301      	adds	r3, #1
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fad4 	bl	80056d8 <WIZCHIP_READ>
 8005130:	4603      	mov	r3, r0
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b04      	cmp	r3, #4
 8005138:	d002      	beq.n	8005140 <sendto+0xa8>
 800513a:	f06f 030b 	mvn.w	r3, #11
 800513e:	e0d9      	b.n	80052f4 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005140:	8c3b      	ldrh	r3, [r7, #32]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10e      	bne.n	8005164 <sendto+0xcc>
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	3301      	adds	r3, #1
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fac2 	bl	80056d8 <WIZCHIP_READ>
 8005154:	4603      	mov	r3, r0
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b04      	cmp	r3, #4
 800515c:	d002      	beq.n	8005164 <sendto+0xcc>
 800515e:	f06f 030a 	mvn.w	r3, #10
 8005162:	e0c7      	b.n	80052f4 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	3301      	adds	r3, #1
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fab1 	bl	80056d8 <WIZCHIP_READ>
 8005176:	4603      	mov	r3, r0
 8005178:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	2b42      	cmp	r3, #66	@ 0x42
 800517e:	d008      	beq.n	8005192 <sendto+0xfa>
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	2b22      	cmp	r3, #34	@ 0x22
 8005184:	d005      	beq.n	8005192 <sendto+0xfa>
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b32      	cmp	r3, #50	@ 0x32
 800518a:	d002      	beq.n	8005192 <sendto+0xfa>
 800518c:	f06f 0306 	mvn.w	r3, #6
 8005190:	e0b0      	b.n	80052f4 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	3301      	adds	r3, #1
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800519e:	2204      	movs	r2, #4
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fb92 	bl	80058cc <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	3301      	adds	r3, #1
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b4:	461a      	mov	r2, r3
 80051b6:	8c3b      	ldrh	r3, [r7, #32]
 80051b8:	0a1b      	lsrs	r3, r3, #8
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f000 fad5 	bl	8005770 <WIZCHIP_WRITE>
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	3301      	adds	r3, #1
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80051d2:	461a      	mov	r2, r3
 80051d4:	8c3b      	ldrh	r3, [r7, #32]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f000 fac8 	bl	8005770 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	3301      	adds	r3, #1
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fa73 	bl	80056d8 <WIZCHIP_READ>
 80051f2:	4603      	mov	r3, r0
 80051f4:	029b      	lsls	r3, r3, #10
 80051f6:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80051f8:	89ba      	ldrh	r2, [r7, #12]
 80051fa:	8abb      	ldrh	r3, [r7, #20]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d901      	bls.n	8005204 <sendto+0x16c>
 8005200:	8abb      	ldrh	r3, [r7, #20]
 8005202:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fbc0 	bl	800598c <getSn_TX_FSR>
 800520c:	4603      	mov	r3, r0
 800520e:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	3301      	adds	r3, #1
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fa5b 	bl	80056d8 <WIZCHIP_READ>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <sendto+0x196>
 8005228:	f06f 0303 	mvn.w	r3, #3
 800522c:	e062      	b.n	80052f4 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800522e:	4b33      	ldr	r3, [pc, #204]	@ (80052fc <sendto+0x264>)
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	fa42 f303 	asr.w	r3, r2, r3
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <sendto+0x1b6>
 8005242:	89ba      	ldrh	r2, [r7, #12]
 8005244:	8abb      	ldrh	r3, [r7, #20]
 8005246:	429a      	cmp	r2, r3
 8005248:	d901      	bls.n	800524e <sendto+0x1b6>
 800524a:	2300      	movs	r3, #0
 800524c:	e052      	b.n	80052f4 <sendto+0x25c>
      if(len <= freesize) break;
 800524e:	89ba      	ldrh	r2, [r7, #12]
 8005250:	8abb      	ldrh	r3, [r7, #20]
 8005252:	429a      	cmp	r2, r3
 8005254:	d900      	bls.n	8005258 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8005256:	e7d5      	b.n	8005204 <sendto+0x16c>
      if(len <= freesize) break;
 8005258:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800525a:	89ba      	ldrh	r2, [r7, #12]
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fc25 	bl	8005ab0 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	3301      	adds	r3, #1
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005272:	2120      	movs	r1, #32
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fa7b 	bl	8005770 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800527a:	bf00      	nop
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	3301      	adds	r3, #1
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fa25 	bl	80056d8 <WIZCHIP_READ>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f3      	bne.n	800527c <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	3301      	adds	r3, #1
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fa19 	bl	80056d8 <WIZCHIP_READ>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00c      	beq.n	80052d2 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	3301      	adds	r3, #1
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80052c4:	2110      	movs	r1, #16
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fa52 	bl	8005770 <WIZCHIP_WRITE>
         break;
 80052cc:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80052ce:	89bb      	ldrh	r3, [r7, #12]
 80052d0:	e010      	b.n	80052f4 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0db      	beq.n	8005294 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	3301      	adds	r3, #1
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80052e8:	2108      	movs	r1, #8
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fa40 	bl	8005770 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80052f0:	f06f 030c 	mvn.w	r3, #12
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	200007f2 	.word	0x200007f2

08005300 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	4603      	mov	r3, r0
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	4613      	mov	r3, r2
 8005310:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8005312:	2300      	movs	r3, #0
 8005314:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d902      	bls.n	8005322 <recvfrom+0x22>
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	e1d2      	b.n	80056c8 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	3301      	adds	r3, #1
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f9d4 	bl	80056d8 <WIZCHIP_READ>
 8005330:	4603      	mov	r3, r0
 8005332:	777b      	strb	r3, [r7, #29]
 8005334:	7f7b      	ldrb	r3, [r7, #29]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	3b02      	subs	r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d902      	bls.n	8005346 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005340:	f06f 0304 	mvn.w	r3, #4
 8005344:	e1c0      	b.n	80056c8 <recvfrom+0x3c8>
         break;
 8005346:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005348:	89bb      	ldrh	r3, [r7, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <recvfrom+0x54>
 800534e:	f06f 030d 	mvn.w	r3, #13
 8005352:	e1b9      	b.n	80056c8 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	4a87      	ldr	r2, [pc, #540]	@ (8005574 <recvfrom+0x274>)
 8005358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d128      	bne.n	80053b2 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fb5b 	bl	8005a1e <getSn_RX_RSR>
 8005368:	4603      	mov	r3, r0
 800536a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	3301      	adds	r3, #1
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005378:	4618      	mov	r0, r3
 800537a:	f000 f9ad 	bl	80056d8 <WIZCHIP_READ>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <recvfrom+0x8a>
 8005384:	f06f 0303 	mvn.w	r3, #3
 8005388:	e19e      	b.n	80056c8 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800538a:	4b7b      	ldr	r3, [pc, #492]	@ (8005578 <recvfrom+0x278>)
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	fa42 f303 	asr.w	r3, r2, r3
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d004      	beq.n	80053a8 <recvfrom+0xa8>
 800539e:	8bfb      	ldrh	r3, [r7, #30]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <recvfrom+0xa8>
 80053a4:	2300      	movs	r3, #0
 80053a6:	e18f      	b.n	80056c8 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 80053a8:	8bfb      	ldrh	r3, [r7, #30]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d100      	bne.n	80053b0 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80053ae:	e7d7      	b.n	8005360 <recvfrom+0x60>
         if(pack_len != 0) break;
 80053b0:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80053b2:	7f7b      	ldrb	r3, [r7, #29]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d078      	beq.n	80054ae <recvfrom+0x1ae>
 80053bc:	2b04      	cmp	r3, #4
 80053be:	f300 8140 	bgt.w	8005642 <recvfrom+0x342>
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d003      	beq.n	80053ce <recvfrom+0xce>
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	f000 80da 	beq.w	8005580 <recvfrom+0x280>
 80053cc:	e139      	b.n	8005642 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	4a68      	ldr	r2, [pc, #416]	@ (8005574 <recvfrom+0x274>)
 80053d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d151      	bne.n	800547e <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80053da:	f107 0114 	add.w	r1, r7, #20
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	2208      	movs	r2, #8
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fbbe 	bl	8005b64 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	3301      	adds	r3, #1
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80053f4:	2140      	movs	r1, #64	@ 0x40
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f9ba 	bl	8005770 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80053fc:	bf00      	nop
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	3301      	adds	r3, #1
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f964 	bl	80056d8 <WIZCHIP_READ>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f3      	bne.n	80053fe <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8005416:	7d3a      	ldrb	r2, [r7, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3301      	adds	r3, #1
 8005420:	7d7a      	ldrb	r2, [r7, #21]
 8005422:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3302      	adds	r3, #2
 8005428:	7dba      	ldrb	r2, [r7, #22]
 800542a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3303      	adds	r3, #3
 8005430:	7dfa      	ldrb	r2, [r7, #23]
 8005432:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8005434:	7e3b      	ldrb	r3, [r7, #24]
 8005436:	461a      	mov	r2, r3
 8005438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	b29b      	uxth	r3, r3
 8005444:	7e7a      	ldrb	r2, [r7, #25]
 8005446:	4413      	add	r3, r2
 8005448:	b29a      	uxth	r2, r3
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800544e:	7eba      	ldrb	r2, [r7, #26]
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	4611      	mov	r1, r2
 8005454:	4a47      	ldr	r2, [pc, #284]	@ (8005574 <recvfrom+0x274>)
 8005456:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	4a45      	ldr	r2, [pc, #276]	@ (8005574 <recvfrom+0x274>)
 800545e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	b29a      	uxth	r2, r3
 8005466:	7efb      	ldrb	r3, [r7, #27]
 8005468:	4619      	mov	r1, r3
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	440a      	add	r2, r1
 800546e:	b291      	uxth	r1, r2
 8005470:	4a40      	ldr	r2, [pc, #256]	@ (8005574 <recvfrom+0x274>)
 8005472:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	4a40      	ldr	r2, [pc, #256]	@ (800557c <recvfrom+0x27c>)
 800547a:	2180      	movs	r1, #128	@ 0x80
 800547c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	4a3c      	ldr	r2, [pc, #240]	@ (8005574 <recvfrom+0x274>)
 8005482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005486:	89ba      	ldrh	r2, [r7, #12]
 8005488:	429a      	cmp	r2, r3
 800548a:	d202      	bcs.n	8005492 <recvfrom+0x192>
 800548c:	89bb      	ldrh	r3, [r7, #12]
 800548e:	83fb      	strh	r3, [r7, #30]
 8005490:	e004      	b.n	800549c <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	4a37      	ldr	r2, [pc, #220]	@ (8005574 <recvfrom+0x274>)
 8005496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800549a:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800549c:	8bfb      	ldrh	r3, [r7, #30]
 800549e:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80054a0:	8bfa      	ldrh	r2, [r7, #30]
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fb5c 	bl	8005b64 <wiz_recv_data>
			break;
 80054ac:	e0d5      	b.n	800565a <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	4a30      	ldr	r2, [pc, #192]	@ (8005574 <recvfrom+0x274>)
 80054b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d145      	bne.n	8005546 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 80054ba:	f107 0114 	add.w	r1, r7, #20
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2202      	movs	r2, #2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fb4e 	bl	8005b64 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	3301      	adds	r3, #1
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054d4:	2140      	movs	r1, #64	@ 0x40
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 f94a 	bl	8005770 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80054dc:	bf00      	nop
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	3301      	adds	r3, #1
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f8f4 	bl	80056d8 <WIZCHIP_READ>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f3      	bne.n	80054de <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80054f6:	7d3a      	ldrb	r2, [r7, #20]
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	4611      	mov	r1, r2
 80054fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005574 <recvfrom+0x274>)
 80054fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	4a1b      	ldr	r2, [pc, #108]	@ (8005574 <recvfrom+0x274>)
 8005506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	b29b      	uxth	r3, r3
 800550e:	7d7a      	ldrb	r2, [r7, #21]
 8005510:	4413      	add	r3, r2
 8005512:	b29a      	uxth	r2, r3
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	3a02      	subs	r2, #2
 8005518:	b291      	uxth	r1, r2
 800551a:	4a16      	ldr	r2, [pc, #88]	@ (8005574 <recvfrom+0x274>)
 800551c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	4a14      	ldr	r2, [pc, #80]	@ (8005574 <recvfrom+0x274>)
 8005524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005528:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 800552c:	4293      	cmp	r3, r2
 800552e:	d906      	bls.n	800553e <recvfrom+0x23e>
   			{
   			   close(sn);
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff fa44 	bl	80049c0 <close>
   			   return SOCKFATAL_PACKLEN;
 8005538:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 800553c:	e0c4      	b.n	80056c8 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	4a0e      	ldr	r2, [pc, #56]	@ (800557c <recvfrom+0x27c>)
 8005542:	2180      	movs	r1, #128	@ 0x80
 8005544:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	4a0a      	ldr	r2, [pc, #40]	@ (8005574 <recvfrom+0x274>)
 800554a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800554e:	89ba      	ldrh	r2, [r7, #12]
 8005550:	429a      	cmp	r2, r3
 8005552:	d202      	bcs.n	800555a <recvfrom+0x25a>
 8005554:	89bb      	ldrh	r3, [r7, #12]
 8005556:	83fb      	strh	r3, [r7, #30]
 8005558:	e004      	b.n	8005564 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	4a05      	ldr	r2, [pc, #20]	@ (8005574 <recvfrom+0x274>)
 800555e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005562:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8005564:	8bfa      	ldrh	r2, [r7, #30]
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fafa 	bl	8005b64 <wiz_recv_data>
		   break;
 8005570:	e073      	b.n	800565a <recvfrom+0x35a>
 8005572:	bf00      	nop
 8005574:	200007f8 	.word	0x200007f8
 8005578:	200007f2 	.word	0x200007f2
 800557c:	20000808 	.word	0x20000808
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	4a53      	ldr	r2, [pc, #332]	@ (80056d0 <recvfrom+0x3d0>)
 8005584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d144      	bne.n	8005616 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 800558c:	f107 0114 	add.w	r1, r7, #20
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2206      	movs	r2, #6
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fae5 	bl	8005b64 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	3301      	adds	r3, #1
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055a6:	2140      	movs	r1, #64	@ 0x40
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f8e1 	bl	8005770 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80055ae:	bf00      	nop
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	3301      	adds	r3, #1
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f88b 	bl	80056d8 <WIZCHIP_READ>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1f3      	bne.n	80055b0 <recvfrom+0x2b0>
   			addr[0] = head[0];
 80055c8:	7d3a      	ldrb	r2, [r7, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3301      	adds	r3, #1
 80055d2:	7d7a      	ldrb	r2, [r7, #21]
 80055d4:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3302      	adds	r3, #2
 80055da:	7dba      	ldrb	r2, [r7, #22]
 80055dc:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3303      	adds	r3, #3
 80055e2:	7dfa      	ldrb	r2, [r7, #23]
 80055e4:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80055e6:	7e3a      	ldrb	r2, [r7, #24]
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	4611      	mov	r1, r2
 80055ec:	4a38      	ldr	r2, [pc, #224]	@ (80056d0 <recvfrom+0x3d0>)
 80055ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	4a36      	ldr	r2, [pc, #216]	@ (80056d0 <recvfrom+0x3d0>)
 80055f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	7e7b      	ldrb	r3, [r7, #25]
 8005600:	4619      	mov	r1, r3
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	440a      	add	r2, r1
 8005606:	b291      	uxth	r1, r2
 8005608:	4a31      	ldr	r2, [pc, #196]	@ (80056d0 <recvfrom+0x3d0>)
 800560a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	4a30      	ldr	r2, [pc, #192]	@ (80056d4 <recvfrom+0x3d4>)
 8005612:	2180      	movs	r1, #128	@ 0x80
 8005614:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	4a2d      	ldr	r2, [pc, #180]	@ (80056d0 <recvfrom+0x3d0>)
 800561a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800561e:	89ba      	ldrh	r2, [r7, #12]
 8005620:	429a      	cmp	r2, r3
 8005622:	d202      	bcs.n	800562a <recvfrom+0x32a>
 8005624:	89bb      	ldrh	r3, [r7, #12]
 8005626:	83fb      	strh	r3, [r7, #30]
 8005628:	e004      	b.n	8005634 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	4a28      	ldr	r2, [pc, #160]	@ (80056d0 <recvfrom+0x3d0>)
 800562e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005632:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005634:	8bfa      	ldrh	r2, [r7, #30]
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fa92 	bl	8005b64 <wiz_recv_data>
			break;
 8005640:	e00b      	b.n	800565a <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8005642:	8bfa      	ldrh	r2, [r7, #30]
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fae5 	bl	8005c18 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	491f      	ldr	r1, [pc, #124]	@ (80056d0 <recvfrom+0x3d0>)
 8005652:	8bfa      	ldrh	r2, [r7, #30]
 8005654:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8005658:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	3301      	adds	r3, #1
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005666:	2140      	movs	r1, #64	@ 0x40
 8005668:	4618      	mov	r0, r3
 800566a:	f000 f881 	bl	8005770 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800566e:	bf00      	nop
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	3301      	adds	r3, #1
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800567c:	4618      	mov	r0, r3
 800567e:	f000 f82b 	bl	80056d8 <WIZCHIP_READ>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f3      	bne.n	8005670 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	4a11      	ldr	r2, [pc, #68]	@ (80056d0 <recvfrom+0x3d0>)
 800568c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	8bfa      	ldrh	r2, [r7, #30]
 8005694:	1a8a      	subs	r2, r1, r2
 8005696:	b291      	uxth	r1, r2
 8005698:	4a0d      	ldr	r2, [pc, #52]	@ (80056d0 <recvfrom+0x3d0>)
 800569a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	4a0b      	ldr	r2, [pc, #44]	@ (80056d0 <recvfrom+0x3d0>)
 80056a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	4a09      	ldr	r2, [pc, #36]	@ (80056d4 <recvfrom+0x3d4>)
 80056ae:	5cd2      	ldrb	r2, [r2, r3]
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	b2d1      	uxtb	r1, r2
 80056b8:	4a06      	ldr	r2, [pc, #24]	@ (80056d4 <recvfrom+0x3d4>)
 80056ba:	54d1      	strb	r1, [r2, r3]
 80056bc:	e003      	b.n	80056c6 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	4a04      	ldr	r2, [pc, #16]	@ (80056d4 <recvfrom+0x3d4>)
 80056c2:	2100      	movs	r1, #0
 80056c4:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80056c6:	8bfb      	ldrh	r3, [r7, #30]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3720      	adds	r7, #32
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	200007f8 	.word	0x200007f8
 80056d4:	20000808 	.word	0x20000808

080056d8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80056e0:	4b22      	ldr	r3, [pc, #136]	@ (800576c <WIZCHIP_READ+0x94>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80056e6:	4b21      	ldr	r3, [pc, #132]	@ (800576c <WIZCHIP_READ+0x94>)
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80056ec:	4b1f      	ldr	r3, [pc, #124]	@ (800576c <WIZCHIP_READ+0x94>)
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <WIZCHIP_READ+0x24>
 80056f4:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <WIZCHIP_READ+0x94>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d114      	bne.n	8005726 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80056fc:	4b1b      	ldr	r3, [pc, #108]	@ (800576c <WIZCHIP_READ+0x94>)
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	0c12      	lsrs	r2, r2, #16
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	4610      	mov	r0, r2
 8005708:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800570a:	4b18      	ldr	r3, [pc, #96]	@ (800576c <WIZCHIP_READ+0x94>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	0a12      	lsrs	r2, r2, #8
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005718:	4b14      	ldr	r3, [pc, #80]	@ (800576c <WIZCHIP_READ+0x94>)
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	4610      	mov	r0, r2
 8005722:	4798      	blx	r3
 8005724:	e011      	b.n	800574a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	0c1b      	lsrs	r3, r3, #16
 800572a:	b2db      	uxtb	r3, r3
 800572c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0a1b      	lsrs	r3, r3, #8
 8005732:	b2db      	uxtb	r3, r3
 8005734:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800573c:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <WIZCHIP_READ+0x94>)
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	f107 020c 	add.w	r2, r7, #12
 8005744:	2103      	movs	r1, #3
 8005746:	4610      	mov	r0, r2
 8005748:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800574a:	4b08      	ldr	r3, [pc, #32]	@ (800576c <WIZCHIP_READ+0x94>)
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	4798      	blx	r3
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8005754:	4b05      	ldr	r3, [pc, #20]	@ (800576c <WIZCHIP_READ+0x94>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800575a:	4b04      	ldr	r3, [pc, #16]	@ (800576c <WIZCHIP_READ+0x94>)
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	4798      	blx	r3
   return ret;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000098 	.word	0x20000098

08005770 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800577c:	4b22      	ldr	r3, [pc, #136]	@ (8005808 <WIZCHIP_WRITE+0x98>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005782:	4b21      	ldr	r3, [pc, #132]	@ (8005808 <WIZCHIP_WRITE+0x98>)
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f043 0304 	orr.w	r3, r3, #4
 800578e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005790:	4b1d      	ldr	r3, [pc, #116]	@ (8005808 <WIZCHIP_WRITE+0x98>)
 8005792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005794:	2b00      	cmp	r3, #0
 8005796:	d119      	bne.n	80057cc <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005798:	4b1b      	ldr	r3, [pc, #108]	@ (8005808 <WIZCHIP_WRITE+0x98>)
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	0c12      	lsrs	r2, r2, #16
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	4610      	mov	r0, r2
 80057a4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80057a6:	4b18      	ldr	r3, [pc, #96]	@ (8005808 <WIZCHIP_WRITE+0x98>)
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	0a12      	lsrs	r2, r2, #8
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	4610      	mov	r0, r2
 80057b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80057b4:	4b14      	ldr	r3, [pc, #80]	@ (8005808 <WIZCHIP_WRITE+0x98>)
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80057c0:	4b11      	ldr	r3, [pc, #68]	@ (8005808 <WIZCHIP_WRITE+0x98>)
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	4610      	mov	r0, r2
 80057c8:	4798      	blx	r3
 80057ca:	e013      	b.n	80057f4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	0c1b      	lsrs	r3, r3, #16
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	0a1b      	lsrs	r3, r3, #8
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80057e6:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <WIZCHIP_WRITE+0x98>)
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	f107 020c 	add.w	r2, r7, #12
 80057ee:	2104      	movs	r1, #4
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80057f4:	4b04      	ldr	r3, [pc, #16]	@ (8005808 <WIZCHIP_WRITE+0x98>)
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80057fa:	4b03      	ldr	r3, [pc, #12]	@ (8005808 <WIZCHIP_WRITE+0x98>)
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	4798      	blx	r3
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000098 	.word	0x20000098

0800580c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800581a:	4b2b      	ldr	r3, [pc, #172]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005820:	4b29      	ldr	r3, [pc, #164]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005826:	4b28      	ldr	r3, [pc, #160]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <WIZCHIP_READ_BUF+0x2a>
 800582e:	4b26      	ldr	r3, [pc, #152]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 8005830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d126      	bne.n	8005884 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005836:	4b24      	ldr	r3, [pc, #144]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	0c12      	lsrs	r2, r2, #16
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	4610      	mov	r0, r2
 8005842:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005844:	4b20      	ldr	r3, [pc, #128]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	0a12      	lsrs	r2, r2, #8
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	4610      	mov	r0, r2
 8005850:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005852:	4b1d      	ldr	r3, [pc, #116]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	4610      	mov	r0, r2
 800585c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800585e:	2300      	movs	r3, #0
 8005860:	82fb      	strh	r3, [r7, #22]
 8005862:	e00a      	b.n	800587a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8005864:	4b18      	ldr	r3, [pc, #96]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	8afa      	ldrh	r2, [r7, #22]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	188c      	adds	r4, r1, r2
 800586e:	4798      	blx	r3
 8005870:	4603      	mov	r3, r0
 8005872:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8005874:	8afb      	ldrh	r3, [r7, #22]
 8005876:	3301      	adds	r3, #1
 8005878:	82fb      	strh	r3, [r7, #22]
 800587a:	8afa      	ldrh	r2, [r7, #22]
 800587c:	88fb      	ldrh	r3, [r7, #6]
 800587e:	429a      	cmp	r2, r3
 8005880:	d3f0      	bcc.n	8005864 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005882:	e017      	b.n	80058b4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	0c1b      	lsrs	r3, r3, #16
 8005888:	b2db      	uxtb	r3, r3
 800588a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	b2db      	uxtb	r3, r3
 8005892:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 800589c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589e:	f107 0210 	add.w	r2, r7, #16
 80058a2:	2103      	movs	r1, #3
 80058a4:	4610      	mov	r0, r2
 80058a6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80058a8:	4b07      	ldr	r3, [pc, #28]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	4611      	mov	r1, r2
 80058b0:	68b8      	ldr	r0, [r7, #8]
 80058b2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80058b4:	4b04      	ldr	r3, [pc, #16]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80058ba:	4b03      	ldr	r3, [pc, #12]	@ (80058c8 <WIZCHIP_READ_BUF+0xbc>)
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	4798      	blx	r3
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd90      	pop	{r4, r7, pc}
 80058c8:	20000098 	.word	0x20000098

080058cc <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	4613      	mov	r3, r2
 80058d8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80058da:	4b2b      	ldr	r3, [pc, #172]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	4798      	blx	r3
   WIZCHIP.CS._select();
 80058e0:	4b29      	ldr	r3, [pc, #164]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80058ee:	4b26      	ldr	r3, [pc, #152]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 80058f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d126      	bne.n	8005944 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80058f6:	4b24      	ldr	r3, [pc, #144]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	0c12      	lsrs	r2, r2, #16
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005904:	4b20      	ldr	r3, [pc, #128]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	0a12      	lsrs	r2, r2, #8
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	4610      	mov	r0, r2
 8005910:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005912:	4b1d      	ldr	r3, [pc, #116]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	4610      	mov	r0, r2
 800591c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800591e:	2300      	movs	r3, #0
 8005920:	82fb      	strh	r3, [r7, #22]
 8005922:	e00a      	b.n	800593a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8005924:	4b18      	ldr	r3, [pc, #96]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	8afa      	ldrh	r2, [r7, #22]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	440a      	add	r2, r1
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	4610      	mov	r0, r2
 8005932:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005934:	8afb      	ldrh	r3, [r7, #22]
 8005936:	3301      	adds	r3, #1
 8005938:	82fb      	strh	r3, [r7, #22]
 800593a:	8afa      	ldrh	r2, [r7, #22]
 800593c:	88fb      	ldrh	r3, [r7, #6]
 800593e:	429a      	cmp	r2, r3
 8005940:	d3f0      	bcc.n	8005924 <WIZCHIP_WRITE_BUF+0x58>
 8005942:	e017      	b.n	8005974 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	b2db      	uxtb	r3, r3
 800594a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	b2db      	uxtb	r3, r3
 8005952:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800595a:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 800595c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595e:	f107 0210 	add.w	r2, r7, #16
 8005962:	2103      	movs	r1, #3
 8005964:	4610      	mov	r0, r2
 8005966:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8005968:	4b07      	ldr	r3, [pc, #28]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	4611      	mov	r1, r2
 8005970:	68b8      	ldr	r0, [r7, #8]
 8005972:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005974:	4b04      	ldr	r3, [pc, #16]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800597a:	4b03      	ldr	r3, [pc, #12]	@ (8005988 <WIZCHIP_WRITE_BUF+0xbc>)
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	4798      	blx	r3
}
 8005980:	bf00      	nop
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000098 	.word	0x20000098

0800598c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800598c:	b590      	push	{r4, r7, lr}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005996:	2300      	movs	r3, #0
 8005998:	81fb      	strh	r3, [r7, #14]
 800599a:	2300      	movs	r3, #0
 800599c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	3301      	adds	r3, #1
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fe94 	bl	80056d8 <WIZCHIP_READ>
 80059b0:	4603      	mov	r3, r0
 80059b2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80059b4:	89bb      	ldrh	r3, [r7, #12]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	b29c      	uxth	r4, r3
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	3301      	adds	r3, #1
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fe86 	bl	80056d8 <WIZCHIP_READ>
 80059cc:	4603      	mov	r3, r0
 80059ce:	4423      	add	r3, r4
 80059d0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80059d2:	89bb      	ldrh	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d019      	beq.n	8005a0c <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	3301      	adds	r3, #1
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff fe77 	bl	80056d8 <WIZCHIP_READ>
 80059ea:	4603      	mov	r3, r0
 80059ec:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80059ee:	89fb      	ldrh	r3, [r7, #14]
 80059f0:	021b      	lsls	r3, r3, #8
 80059f2:	b29c      	uxth	r4, r3
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	3301      	adds	r3, #1
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fe69 	bl	80056d8 <WIZCHIP_READ>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4423      	add	r3, r4
 8005a0a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005a0c:	89fa      	ldrh	r2, [r7, #14]
 8005a0e:	89bb      	ldrh	r3, [r7, #12]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d1c4      	bne.n	800599e <getSn_TX_FSR+0x12>
   return val;
 8005a14:	89fb      	ldrh	r3, [r7, #14]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd90      	pop	{r4, r7, pc}

08005a1e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8005a1e:	b590      	push	{r4, r7, lr}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	4603      	mov	r3, r0
 8005a26:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	81fb      	strh	r3, [r7, #14]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	3301      	adds	r3, #1
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fe4b 	bl	80056d8 <WIZCHIP_READ>
 8005a42:	4603      	mov	r3, r0
 8005a44:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005a46:	89bb      	ldrh	r3, [r7, #12]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	b29c      	uxth	r4, r3
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	3301      	adds	r3, #1
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fe3d 	bl	80056d8 <WIZCHIP_READ>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	4423      	add	r3, r4
 8005a62:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8005a64:	89bb      	ldrh	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d019      	beq.n	8005a9e <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	3301      	adds	r3, #1
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fe2e 	bl	80056d8 <WIZCHIP_READ>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005a80:	89fb      	ldrh	r3, [r7, #14]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	b29c      	uxth	r4, r3
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fe20 	bl	80056d8 <WIZCHIP_READ>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	4423      	add	r3, r4
 8005a9c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005a9e:	89fa      	ldrh	r2, [r7, #14]
 8005aa0:	89bb      	ldrh	r3, [r7, #12]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d1c4      	bne.n	8005a30 <getSn_RX_RSR+0x12>
   return val;
 8005aa6:	89fb      	ldrh	r3, [r7, #14]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd90      	pop	{r4, r7, pc}

08005ab0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	6039      	str	r1, [r7, #0]
 8005aba:	71fb      	strb	r3, [r7, #7]
 8005abc:	4613      	mov	r3, r2
 8005abe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005ac8:	88bb      	ldrh	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d046      	beq.n	8005b5c <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fdfc 	bl	80056d8 <WIZCHIP_READ>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	b29c      	uxth	r4, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	3301      	adds	r3, #1
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fdf0 	bl	80056d8 <WIZCHIP_READ>
 8005af8:	4603      	mov	r3, r0
 8005afa:	4423      	add	r3, r4
 8005afc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8005afe:	89fb      	ldrh	r3, [r7, #14]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	79fa      	ldrb	r2, [r7, #7]
 8005b04:	0092      	lsls	r2, r2, #2
 8005b06:	3202      	adds	r2, #2
 8005b08:	00d2      	lsls	r2, r2, #3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8005b0e:	88bb      	ldrh	r3, [r7, #4]
 8005b10:	461a      	mov	r2, r3
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	68b8      	ldr	r0, [r7, #8]
 8005b16:	f7ff fed9 	bl	80058cc <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8005b1a:	89fa      	ldrh	r2, [r7, #14]
 8005b1c:	88bb      	ldrh	r3, [r7, #4]
 8005b1e:	4413      	add	r3, r2
 8005b20:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	3301      	adds	r3, #1
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005b2e:	461a      	mov	r2, r3
 8005b30:	89fb      	ldrh	r3, [r7, #14]
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	f7ff fe18 	bl	8005770 <WIZCHIP_WRITE>
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	3301      	adds	r3, #1
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	89fb      	ldrh	r3, [r7, #14]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f7ff fe0b 	bl	8005770 <WIZCHIP_WRITE>
 8005b5a:	e000      	b.n	8005b5e <wiz_send_data+0xae>
   if(len == 0)  return;
 8005b5c:	bf00      	nop
}
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd90      	pop	{r4, r7, pc}

08005b64 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	6039      	str	r1, [r7, #0]
 8005b6e:	71fb      	strb	r3, [r7, #7]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8005b7c:	88bb      	ldrh	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d046      	beq.n	8005c10 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	3301      	adds	r3, #1
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fda2 	bl	80056d8 <WIZCHIP_READ>
 8005b94:	4603      	mov	r3, r0
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	b29c      	uxth	r4, r3
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fd96 	bl	80056d8 <WIZCHIP_READ>
 8005bac:	4603      	mov	r3, r0
 8005bae:	4423      	add	r3, r4
 8005bb0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005bb2:	89fb      	ldrh	r3, [r7, #14]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	79fa      	ldrb	r2, [r7, #7]
 8005bb8:	0092      	lsls	r2, r2, #2
 8005bba:	3203      	adds	r2, #3
 8005bbc:	00d2      	lsls	r2, r2, #3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005bc2:	88bb      	ldrh	r3, [r7, #4]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	68b8      	ldr	r0, [r7, #8]
 8005bca:	f7ff fe1f 	bl	800580c <WIZCHIP_READ_BUF>
   ptr += len;
 8005bce:	89fa      	ldrh	r2, [r7, #14]
 8005bd0:	88bb      	ldrh	r3, [r7, #4]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	3301      	adds	r3, #1
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005be2:	461a      	mov	r2, r3
 8005be4:	89fb      	ldrh	r3, [r7, #14]
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f7ff fdbe 	bl	8005770 <WIZCHIP_WRITE>
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005c00:	461a      	mov	r2, r3
 8005c02:	89fb      	ldrh	r3, [r7, #14]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f7ff fdb1 	bl	8005770 <WIZCHIP_WRITE>
 8005c0e:	e000      	b.n	8005c12 <wiz_recv_data+0xae>
   if(len == 0) return;
 8005c10:	bf00      	nop
}
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd90      	pop	{r4, r7, pc}

08005c18 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	460a      	mov	r2, r1
 8005c22:	71fb      	strb	r3, [r7, #7]
 8005c24:	4613      	mov	r3, r2
 8005c26:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	3301      	adds	r3, #1
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fd4d 	bl	80056d8 <WIZCHIP_READ>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	b29c      	uxth	r4, r3
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	3301      	adds	r3, #1
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fd41 	bl	80056d8 <WIZCHIP_READ>
 8005c56:	4603      	mov	r3, r0
 8005c58:	4423      	add	r3, r4
 8005c5a:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8005c5c:	89fa      	ldrh	r2, [r7, #14]
 8005c5e:	88bb      	ldrh	r3, [r7, #4]
 8005c60:	4413      	add	r3, r2
 8005c62:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	3301      	adds	r3, #1
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005c70:	461a      	mov	r2, r3
 8005c72:	89fb      	ldrh	r3, [r7, #14]
 8005c74:	0a1b      	lsrs	r3, r3, #8
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	f7ff fd77 	bl	8005770 <WIZCHIP_WRITE>
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	3301      	adds	r3, #1
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005c8e:	461a      	mov	r2, r3
 8005c90:	89fb      	ldrh	r3, [r7, #14]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f7ff fd6a 	bl	8005770 <WIZCHIP_WRITE>
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd90      	pop	{r4, r7, pc}

08005ca4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	bf00      	nop
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005cb2:	b480      	push	{r7}
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	bf00      	nop
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	bf00      	nop
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	70fb      	strb	r3, [r7, #3]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	78fa      	ldrb	r2, [r7, #3]
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	71fb      	strb	r3, [r7, #7]
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	460b      	mov	r3, r1
 8005d44:	807b      	strh	r3, [r7, #2]
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	807b      	strh	r3, [r7, #2]
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <reg_wizchip_cs_cbfunc+0x16>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005d82:	4b0a      	ldr	r3, [pc, #40]	@ (8005dac <reg_wizchip_cs_cbfunc+0x40>)
 8005d84:	4a0a      	ldr	r2, [pc, #40]	@ (8005db0 <reg_wizchip_cs_cbfunc+0x44>)
 8005d86:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005d88:	4b08      	ldr	r3, [pc, #32]	@ (8005dac <reg_wizchip_cs_cbfunc+0x40>)
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <reg_wizchip_cs_cbfunc+0x48>)
 8005d8c:	619a      	str	r2, [r3, #24]
 8005d8e:	e006      	b.n	8005d9e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005d90:	4a06      	ldr	r2, [pc, #24]	@ (8005dac <reg_wizchip_cs_cbfunc+0x40>)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005d96:	4a05      	ldr	r2, [pc, #20]	@ (8005dac <reg_wizchip_cs_cbfunc+0x40>)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	6193      	str	r3, [r2, #24]
   }
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	20000098 	.word	0x20000098
 8005db0:	08005cc1 	.word	0x08005cc1
 8005db4:	08005ccf 	.word	0x08005ccf

08005db8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005dc2:	bf00      	nop
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <reg_wizchip_spi_cbfunc+0x4c>)
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0f9      	beq.n	8005dc4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <reg_wizchip_spi_cbfunc+0x24>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005ddc:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <reg_wizchip_spi_cbfunc+0x4c>)
 8005dde:	4a0a      	ldr	r2, [pc, #40]	@ (8005e08 <reg_wizchip_spi_cbfunc+0x50>)
 8005de0:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005de2:	4b08      	ldr	r3, [pc, #32]	@ (8005e04 <reg_wizchip_spi_cbfunc+0x4c>)
 8005de4:	4a09      	ldr	r2, [pc, #36]	@ (8005e0c <reg_wizchip_spi_cbfunc+0x54>)
 8005de6:	621a      	str	r2, [r3, #32]
 8005de8:	e006      	b.n	8005df8 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005dea:	4a06      	ldr	r2, [pc, #24]	@ (8005e04 <reg_wizchip_spi_cbfunc+0x4c>)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005df0:	4a04      	ldr	r2, [pc, #16]	@ (8005e04 <reg_wizchip_spi_cbfunc+0x4c>)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6213      	str	r3, [r2, #32]
   }
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	20000098 	.word	0x20000098
 8005e08:	08005d15 	.word	0x08005d15
 8005e0c:	08005d25 	.word	0x08005d25

08005e10 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005e1a:	bf00      	nop
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e5c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0f9      	beq.n	8005e1c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <reg_wizchip_spiburst_cbfunc+0x24>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005e34:	4b09      	ldr	r3, [pc, #36]	@ (8005e5c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005e36:	4a0a      	ldr	r2, [pc, #40]	@ (8005e60 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005e38:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005e3a:	4b08      	ldr	r3, [pc, #32]	@ (8005e5c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005e3c:	4a09      	ldr	r2, [pc, #36]	@ (8005e64 <reg_wizchip_spiburst_cbfunc+0x54>)
 8005e3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e40:	e006      	b.n	8005e50 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005e42:	4a06      	ldr	r2, [pc, #24]	@ (8005e5c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005e48:	4a04      	ldr	r2, [pc, #16]	@ (8005e5c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8005e4e:	bf00      	nop
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	20000098 	.word	0x20000098
 8005e60:	08005d3b 	.word	0x08005d3b
 8005e64:	08005d53 	.word	0x08005d53

08005e68 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	2b0f      	cmp	r3, #15
 8005e84:	f200 80c5 	bhi.w	8006012 <ctlwizchip+0x1aa>
 8005e88:	a201      	add	r2, pc, #4	@ (adr r2, 8005e90 <ctlwizchip+0x28>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005ed1 	.word	0x08005ed1
 8005e94:	08005ed7 	.word	0x08005ed7
 8005e98:	08005f03 	.word	0x08005f03
 8005e9c:	08005ef7 	.word	0x08005ef7
 8005ea0:	08005f11 	.word	0x08005f11
 8005ea4:	08005f1d 	.word	0x08005f1d
 8005ea8:	08005f2b 	.word	0x08005f2b
 8005eac:	08005f51 	.word	0x08005f51
 8005eb0:	08005f73 	.word	0x08005f73
 8005eb4:	08005fb7 	.word	0x08005fb7
 8005eb8:	08005fbd 	.word	0x08005fbd
 8005ebc:	08005fc5 	.word	0x08005fc5
 8005ec0:	08006019 	.word	0x08006019
 8005ec4:	08005fcd 	.word	0x08005fcd
 8005ec8:	08005fdb 	.word	0x08005fdb
 8005ecc:	08005ff7 	.word	0x08005ff7
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005ed0:	f000 f8aa 	bl	8006028 <wizchip_sw_reset>
         break;
 8005ed4:	e0a1      	b.n	800601a <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d004      	beq.n	8005ee6 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 f8e7 	bl	80060c0 <wizchip_init>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	e092      	b.n	800601c <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 f96c 	bl	80061d8 <wizchip_clrinterrupt>
         break;
 8005f00:	e08b      	b.n	800601a <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005f02:	f000 f99d 	bl	8006240 <wizchip_getinterrupt>
 8005f06:	4603      	mov	r3, r0
 8005f08:	461a      	mov	r2, r3
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	801a      	strh	r2, [r3, #0]
         break;
 8005f0e:	e084      	b.n	800601a <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 f9b8 	bl	800628a <wizchip_setinterruptmask>
         break;         
 8005f1a:	e07e      	b.n	800601a <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005f1c:	f000 f9d0 	bl	80062c0 <wizchip_getinterruptmask>
 8005f20:	4603      	mov	r3, r0
 8005f22:	461a      	mov	r2, r3
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	801a      	strh	r2, [r3, #0]
         break;
 8005f28:	e077      	b.n	800601a <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	4619      	mov	r1, r3
 8005f36:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005f3a:	f7ff fc19 	bl	8005770 <WIZCHIP_WRITE>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	4619      	mov	r1, r3
 8005f46:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005f4a:	f7ff fc11 	bl	8005770 <WIZCHIP_WRITE>
         break;
 8005f4e:	e064      	b.n	800601a <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005f50:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005f54:	f7ff fbc0 	bl	80056d8 <WIZCHIP_READ>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	b29c      	uxth	r4, r3
 8005f5e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005f62:	f7ff fbb9 	bl	80056d8 <WIZCHIP_READ>
 8005f66:	4603      	mov	r3, r0
 8005f68:	4423      	add	r3, r4
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	801a      	strh	r2, [r3, #0]
         break;
 8005f70:	e053      	b.n	800601a <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005f72:	4b2c      	ldr	r3, [pc, #176]	@ (8006024 <ctlwizchip+0x1bc>)
 8005f74:	789a      	ldrb	r2, [r3, #2]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	4a29      	ldr	r2, [pc, #164]	@ (8006024 <ctlwizchip+0x1bc>)
 8005f80:	78d2      	ldrb	r2, [r2, #3]
 8005f82:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	3302      	adds	r3, #2
 8005f88:	4a26      	ldr	r2, [pc, #152]	@ (8006024 <ctlwizchip+0x1bc>)
 8005f8a:	7912      	ldrb	r2, [r2, #4]
 8005f8c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	3303      	adds	r3, #3
 8005f92:	4a24      	ldr	r2, [pc, #144]	@ (8006024 <ctlwizchip+0x1bc>)
 8005f94:	7952      	ldrb	r2, [r2, #5]
 8005f96:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4a21      	ldr	r2, [pc, #132]	@ (8006024 <ctlwizchip+0x1bc>)
 8005f9e:	7992      	ldrb	r2, [r2, #6]
 8005fa0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	3305      	adds	r3, #5
 8005fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8006024 <ctlwizchip+0x1bc>)
 8005fa8:	79d2      	ldrb	r2, [r2, #7]
 8005faa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	3306      	adds	r3, #6
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]
         break;
 8005fb4:	e031      	b.n	800601a <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005fb6:	f000 f9d5 	bl	8006364 <wizphy_reset>
         break;
 8005fba:	e02e      	b.n	800601a <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005fbc:	6838      	ldr	r0, [r7, #0]
 8005fbe:	f000 f9f8 	bl	80063b2 <wizphy_setphyconf>
         break;
 8005fc2:	e02a      	b.n	800601a <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005fc4:	6838      	ldr	r0, [r7, #0]
 8005fc6:	f000 fa37 	bl	8006438 <wizphy_getphyconf>
         break;
 8005fca:	e026      	b.n	800601a <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fa9b 	bl	800650c <wizphy_setphypmode>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	e020      	b.n	800601c <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005fda:	f000 f9aa 	bl	8006332 <wizphy_getphypmode>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	2bff      	cmp	r3, #255	@ 0xff
 8005fe6:	d102      	bne.n	8005fee <ctlwizchip+0x186>
 8005fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fec:	e016      	b.n	800601c <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	7dfa      	ldrb	r2, [r7, #23]
 8005ff2:	701a      	strb	r2, [r3, #0]
         break;
 8005ff4:	e011      	b.n	800601a <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005ff6:	f000 f986 	bl	8006306 <wizphy_getphylink>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	2bff      	cmp	r3, #255	@ 0xff
 8006002:	d102      	bne.n	800600a <ctlwizchip+0x1a2>
 8006004:	f04f 33ff 	mov.w	r3, #4294967295
 8006008:	e008      	b.n	800601c <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	7dfa      	ldrb	r2, [r7, #23]
 800600e:	701a      	strb	r2, [r3, #0]
         break;
 8006010:	e003      	b.n	800601a <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
 8006016:	e001      	b.n	800601c <ctlwizchip+0x1b4>
         break;
 8006018:	bf00      	nop
   }
   return 0;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd90      	pop	{r4, r7, pc}
 8006024:	20000098 	.word	0x20000098

08006028 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800602e:	1d3b      	adds	r3, r7, #4
 8006030:	2206      	movs	r2, #6
 8006032:	4619      	mov	r1, r3
 8006034:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006038:	f7ff fbe8 	bl	800580c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800603c:	f107 0314 	add.w	r3, r7, #20
 8006040:	2204      	movs	r2, #4
 8006042:	4619      	mov	r1, r3
 8006044:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006048:	f7ff fbe0 	bl	800580c <WIZCHIP_READ_BUF>
 800604c:	f107 0310 	add.w	r3, r7, #16
 8006050:	2204      	movs	r2, #4
 8006052:	4619      	mov	r1, r3
 8006054:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006058:	f7ff fbd8 	bl	800580c <WIZCHIP_READ_BUF>
 800605c:	f107 030c 	add.w	r3, r7, #12
 8006060:	2204      	movs	r2, #4
 8006062:	4619      	mov	r1, r3
 8006064:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006068:	f7ff fbd0 	bl	800580c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800606c:	2180      	movs	r1, #128	@ 0x80
 800606e:	2000      	movs	r0, #0
 8006070:	f7ff fb7e 	bl	8005770 <WIZCHIP_WRITE>
   getMR(); // for delay
 8006074:	2000      	movs	r0, #0
 8006076:	f7ff fb2f 	bl	80056d8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800607a:	1d3b      	adds	r3, r7, #4
 800607c:	2206      	movs	r2, #6
 800607e:	4619      	mov	r1, r3
 8006080:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006084:	f7ff fc22 	bl	80058cc <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8006088:	f107 0314 	add.w	r3, r7, #20
 800608c:	2204      	movs	r2, #4
 800608e:	4619      	mov	r1, r3
 8006090:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006094:	f7ff fc1a 	bl	80058cc <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8006098:	f107 0310 	add.w	r3, r7, #16
 800609c:	2204      	movs	r2, #4
 800609e:	4619      	mov	r1, r3
 80060a0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80060a4:	f7ff fc12 	bl	80058cc <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80060a8:	f107 030c 	add.w	r3, r7, #12
 80060ac:	2204      	movs	r2, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80060b4:	f7ff fc0a 	bl	80058cc <WIZCHIP_WRITE_BUF>
}
 80060b8:	bf00      	nop
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80060ce:	f7ff ffab 	bl	8006028 <wizchip_sw_reset>
   if(txsize)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d03b      	beq.n	8006150 <wizchip_init+0x90>
   {
      tmp = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
 80060e0:	e015      	b.n	800610e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80060e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4413      	add	r3, r2
 80060ea:	781a      	ldrb	r2, [r3, #0]
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	4413      	add	r3, r2
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80060f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	dd02      	ble.n	8006102 <wizchip_init+0x42>
 80060fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006100:	e066      	b.n	80061d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	3301      	adds	r3, #1
 800610a:	b2db      	uxtb	r3, r3
 800610c:	73fb      	strb	r3, [r7, #15]
 800610e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006112:	2b07      	cmp	r3, #7
 8006114:	dde5      	ble.n	80060e2 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006116:	2300      	movs	r3, #0
 8006118:	73fb      	strb	r3, [r7, #15]
 800611a:	e015      	b.n	8006148 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800611c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	3301      	adds	r3, #1
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800612a:	4618      	mov	r0, r3
 800612c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	4619      	mov	r1, r3
 8006138:	f7ff fb1a 	bl	8005770 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800613c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	3301      	adds	r3, #1
 8006144:	b2db      	uxtb	r3, r3
 8006146:	73fb      	strb	r3, [r7, #15]
 8006148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800614c:	2b07      	cmp	r3, #7
 800614e:	dde5      	ble.n	800611c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d03b      	beq.n	80061ce <wizchip_init+0x10e>
   {
      tmp = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
 800615e:	e015      	b.n	800618c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8006160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	4413      	add	r3, r2
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	4413      	add	r3, r2
 800616e:	b2db      	uxtb	r3, r3
 8006170:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8006172:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006176:	2b10      	cmp	r3, #16
 8006178:	dd02      	ble.n	8006180 <wizchip_init+0xc0>
 800617a:	f04f 33ff 	mov.w	r3, #4294967295
 800617e:	e027      	b.n	80061d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	3301      	adds	r3, #1
 8006188:	b2db      	uxtb	r3, r3
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006190:	2b07      	cmp	r3, #7
 8006192:	dde5      	ble.n	8006160 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]
 8006198:	e015      	b.n	80061c6 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800619a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	3301      	adds	r3, #1
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80061a8:	4618      	mov	r0, r3
 80061aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	4413      	add	r3, r2
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	f7ff fadb 	bl	8005770 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80061ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	3301      	adds	r3, #1
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	73fb      	strb	r3, [r7, #15]
 80061c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ca:	2b07      	cmp	r3, #7
 80061cc:	dde5      	ble.n	800619a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	0a1b      	lsrs	r3, r3, #8
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	f023 030f 	bic.w	r3, r3, #15
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	4619      	mov	r1, r3
 80061f8:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80061fc:	f7ff fab8 	bl	8005770 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8006200:	2300      	movs	r3, #0
 8006202:	73fb      	strb	r3, [r7, #15]
 8006204:	e014      	b.n	8006230 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8006206:	7bba      	ldrb	r2, [r7, #14]
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	fa42 f303 	asr.w	r3, r2, r3
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <wizchip_clrinterrupt+0x52>
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	3301      	adds	r3, #1
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006222:	211f      	movs	r1, #31
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff faa3 	bl	8005770 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	3301      	adds	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	2b07      	cmp	r3, #7
 8006234:	d9e7      	bls.n	8006206 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8006236:	bf00      	nop
 8006238:	bf00      	nop
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8006252:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8006256:	f7ff fa3f 	bl	80056d8 <WIZCHIP_READ>
 800625a:	4603      	mov	r3, r0
 800625c:	f023 030f 	bic.w	r3, r3, #15
 8006260:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8006262:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8006266:	f7ff fa37 	bl	80056d8 <WIZCHIP_READ>
 800626a:	4603      	mov	r3, r0
 800626c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800626e:	79bb      	ldrb	r3, [r7, #6]
 8006270:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8006272:	88bb      	ldrh	r3, [r7, #4]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	b29a      	uxth	r2, r3
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	b29b      	uxth	r3, r3
 800627c:	4413      	add	r3, r2
 800627e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006280:	88bb      	ldrh	r3, [r7, #4]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	4603      	mov	r3, r0
 8006292:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	0a1b      	lsrs	r3, r3, #8
 800629c:	b29b      	uxth	r3, r3
 800629e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	4619      	mov	r1, r3
 80062a4:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80062a8:	f7ff fa62 	bl	8005770 <WIZCHIP_WRITE>
   setSIMR(simr);
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	4619      	mov	r1, r3
 80062b0:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80062b4:	f7ff fa5c 	bl	8005770 <WIZCHIP_WRITE>
#endif   
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80062d2:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80062d6:	f7ff f9ff 	bl	80056d8 <WIZCHIP_READ>
 80062da:	4603      	mov	r3, r0
 80062dc:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80062de:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80062e2:	f7ff f9f9 	bl	80056d8 <WIZCHIP_READ>
 80062e6:	4603      	mov	r3, r0
 80062e8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80062ea:	79bb      	ldrb	r3, [r7, #6]
 80062ec:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80062ee:	88bb      	ldrh	r3, [r7, #4]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	4413      	add	r3, r2
 80062fa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80062fc:	88bb      	ldrh	r3, [r7, #4]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800630c:	2300      	movs	r3, #0
 800630e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006310:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006314:	f7ff f9e0 	bl	80056d8 <WIZCHIP_READ>
 8006318:	4603      	mov	r3, r0
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8006322:	2301      	movs	r3, #1
 8006324:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8006326:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800633c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006340:	f7ff f9ca 	bl	80056d8 <WIZCHIP_READ>
 8006344:	4603      	mov	r3, r0
 8006346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800634a:	2b30      	cmp	r3, #48	@ 0x30
 800634c:	d102      	bne.n	8006354 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800634e:	2301      	movs	r3, #1
 8006350:	71fb      	strb	r3, [r7, #7]
 8006352:	e001      	b.n	8006358 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8006354:	2300      	movs	r3, #0
 8006356:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8006358:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800636a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800636e:	f7ff f9b3 	bl	80056d8 <WIZCHIP_READ>
 8006372:	4603      	mov	r3, r0
 8006374:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800637c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	4619      	mov	r1, r3
 8006382:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006386:	f7ff f9f3 	bl	8005770 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800638a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800638e:	f7ff f9a3 	bl	80056d8 <WIZCHIP_READ>
 8006392:	4603      	mov	r3, r0
 8006394:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800639c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	4619      	mov	r1, r3
 80063a2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80063a6:	f7ff f9e3 	bl	8005770 <WIZCHIP_WRITE>
}
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d104      	bne.n	80063d0 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063cc:	73fb      	strb	r3, [r7, #15]
 80063ce:	e003      	b.n	80063d8 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063d6:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d104      	bne.n	80063ea <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80063e6:	73fb      	strb	r3, [r7, #15]
 80063e8:	e019      	b.n	800641e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	78db      	ldrb	r3, [r3, #3]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d10d      	bne.n	800640e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	789b      	ldrb	r3, [r3, #2]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d104      	bne.n	8006404 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	f043 0318 	orr.w	r3, r3, #24
 8006400:	73fb      	strb	r3, [r7, #15]
 8006402:	e00c      	b.n	800641e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	f043 0308 	orr.w	r3, r3, #8
 800640a:	73fb      	strb	r3, [r7, #15]
 800640c:	e007      	b.n	800641e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	789b      	ldrb	r3, [r3, #2]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d103      	bne.n	800641e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	f043 0310 	orr.w	r3, r3, #16
 800641c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	4619      	mov	r1, r3
 8006422:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006426:	f7ff f9a3 	bl	8005770 <WIZCHIP_WRITE>
   wizphy_reset();
 800642a:	f7ff ff9b 	bl	8006364 <wizphy_reset>
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8006444:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006448:	f7ff f946 	bl	80056d8 <WIZCHIP_READ>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	119b      	asrs	r3, r3, #6
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	b2da      	uxtb	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006466:	2b20      	cmp	r3, #32
 8006468:	d001      	beq.n	800646e <wizphy_getphyconf+0x36>
 800646a:	2b38      	cmp	r3, #56	@ 0x38
 800646c:	d103      	bne.n	8006476 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	705a      	strb	r2, [r3, #1]
         break;
 8006474:	e003      	b.n	800647e <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	705a      	strb	r2, [r3, #1]
         break;
 800647c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006484:	3b10      	subs	r3, #16
 8006486:	2b10      	cmp	r3, #16
 8006488:	bf8c      	ite	hi
 800648a:	2201      	movhi	r2, #1
 800648c:	2200      	movls	r2, #0
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	2a00      	cmp	r2, #0
 8006492:	d10f      	bne.n	80064b4 <wizphy_getphyconf+0x7c>
 8006494:	4a1b      	ldr	r2, [pc, #108]	@ (8006504 <wizphy_getphyconf+0xcc>)
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bf14      	ite	ne
 80064a2:	2301      	movne	r3, #1
 80064a4:	2300      	moveq	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	709a      	strb	r2, [r3, #2]
         break;
 80064b2:	e003      	b.n	80064bc <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	709a      	strb	r2, [r3, #2]
         break;
 80064ba:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064c2:	3b08      	subs	r3, #8
 80064c4:	2b18      	cmp	r3, #24
 80064c6:	bf8c      	ite	hi
 80064c8:	2201      	movhi	r2, #1
 80064ca:	2200      	movls	r2, #0
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	2a00      	cmp	r2, #0
 80064d0:	d10f      	bne.n	80064f2 <wizphy_getphyconf+0xba>
 80064d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006508 <wizphy_getphyconf+0xd0>)
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bf14      	ite	ne
 80064e0:	2301      	movne	r3, #1
 80064e2:	2300      	moveq	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	70da      	strb	r2, [r3, #3]
         break;
 80064f0:	e003      	b.n	80064fa <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	70da      	strb	r2, [r3, #3]
         break;
 80064f8:	bf00      	nop
   }
}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	00010101 	.word	0x00010101
 8006508:	01010001 	.word	0x01010001

0800650c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	4603      	mov	r3, r0
 8006514:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800651a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800651e:	f7ff f8db 	bl	80056d8 <WIZCHIP_READ>
 8006522:	4603      	mov	r3, r0
 8006524:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <wizphy_setphypmode+0x2a>
 8006530:	f04f 33ff 	mov.w	r3, #4294967295
 8006534:	e030      	b.n	8006598 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800653c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d104      	bne.n	800654e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800654a:	73fb      	strb	r3, [r7, #15]
 800654c:	e003      	b.n	8006556 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8006554:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	4619      	mov	r1, r3
 800655a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800655e:	f7ff f907 	bl	8005770 <WIZCHIP_WRITE>
   wizphy_reset();
 8006562:	f7ff feff 	bl	8006364 <wizphy_reset>
   tmp = getPHYCFGR();
 8006566:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800656a:	f7ff f8b5 	bl	80056d8 <WIZCHIP_READ>
 800656e:	4603      	mov	r3, r0
 8006570:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d106      	bne.n	8006586 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <wizphy_setphypmode+0x88>
 8006582:	2300      	movs	r3, #0
 8006584:	e008      	b.n	8006598 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <wizphy_setphypmode+0x88>
 8006590:	2300      	movs	r3, #0
 8006592:	e001      	b.n	8006598 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2206      	movs	r2, #6
 80065ac:	4619      	mov	r1, r3
 80065ae:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80065b2:	f7ff f98b 	bl	80058cc <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	330e      	adds	r3, #14
 80065ba:	2204      	movs	r2, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80065c2:	f7ff f983 	bl	80058cc <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	330a      	adds	r3, #10
 80065ca:	2204      	movs	r2, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80065d2:	f7ff f97b 	bl	80058cc <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3306      	adds	r3, #6
 80065da:	2204      	movs	r2, #4
 80065dc:	4619      	mov	r1, r3
 80065de:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80065e2:	f7ff f973 	bl	80058cc <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	7c9a      	ldrb	r2, [r3, #18]
 80065ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006618 <wizchip_setnetinfo+0x78>)
 80065ec:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	7cda      	ldrb	r2, [r3, #19]
 80065f2:	4b09      	ldr	r3, [pc, #36]	@ (8006618 <wizchip_setnetinfo+0x78>)
 80065f4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	7d1a      	ldrb	r2, [r3, #20]
 80065fa:	4b07      	ldr	r3, [pc, #28]	@ (8006618 <wizchip_setnetinfo+0x78>)
 80065fc:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	7d5a      	ldrb	r2, [r3, #21]
 8006602:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <wizchip_setnetinfo+0x78>)
 8006604:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	7d9a      	ldrb	r2, [r3, #22]
 800660a:	4b04      	ldr	r3, [pc, #16]	@ (800661c <wizchip_setnetinfo+0x7c>)
 800660c:	701a      	strb	r2, [r3, #0]
}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000810 	.word	0x20000810
 800661c:	20000814 	.word	0x20000814

08006620 <sbrk_aligned>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	4e0f      	ldr	r6, [pc, #60]	@ (8006660 <sbrk_aligned+0x40>)
 8006624:	460c      	mov	r4, r1
 8006626:	6831      	ldr	r1, [r6, #0]
 8006628:	4605      	mov	r5, r0
 800662a:	b911      	cbnz	r1, 8006632 <sbrk_aligned+0x12>
 800662c:	f000 fb1e 	bl	8006c6c <_sbrk_r>
 8006630:	6030      	str	r0, [r6, #0]
 8006632:	4621      	mov	r1, r4
 8006634:	4628      	mov	r0, r5
 8006636:	f000 fb19 	bl	8006c6c <_sbrk_r>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d103      	bne.n	8006646 <sbrk_aligned+0x26>
 800663e:	f04f 34ff 	mov.w	r4, #4294967295
 8006642:	4620      	mov	r0, r4
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	1cc4      	adds	r4, r0, #3
 8006648:	f024 0403 	bic.w	r4, r4, #3
 800664c:	42a0      	cmp	r0, r4
 800664e:	d0f8      	beq.n	8006642 <sbrk_aligned+0x22>
 8006650:	1a21      	subs	r1, r4, r0
 8006652:	4628      	mov	r0, r5
 8006654:	f000 fb0a 	bl	8006c6c <_sbrk_r>
 8006658:	3001      	adds	r0, #1
 800665a:	d1f2      	bne.n	8006642 <sbrk_aligned+0x22>
 800665c:	e7ef      	b.n	800663e <sbrk_aligned+0x1e>
 800665e:	bf00      	nop
 8006660:	20000818 	.word	0x20000818

08006664 <_malloc_r>:
 8006664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006668:	1ccd      	adds	r5, r1, #3
 800666a:	f025 0503 	bic.w	r5, r5, #3
 800666e:	3508      	adds	r5, #8
 8006670:	2d0c      	cmp	r5, #12
 8006672:	bf38      	it	cc
 8006674:	250c      	movcc	r5, #12
 8006676:	2d00      	cmp	r5, #0
 8006678:	4606      	mov	r6, r0
 800667a:	db01      	blt.n	8006680 <_malloc_r+0x1c>
 800667c:	42a9      	cmp	r1, r5
 800667e:	d904      	bls.n	800668a <_malloc_r+0x26>
 8006680:	230c      	movs	r3, #12
 8006682:	6033      	str	r3, [r6, #0]
 8006684:	2000      	movs	r0, #0
 8006686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800668a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006760 <_malloc_r+0xfc>
 800668e:	f000 f869 	bl	8006764 <__malloc_lock>
 8006692:	f8d8 3000 	ldr.w	r3, [r8]
 8006696:	461c      	mov	r4, r3
 8006698:	bb44      	cbnz	r4, 80066ec <_malloc_r+0x88>
 800669a:	4629      	mov	r1, r5
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff ffbf 	bl	8006620 <sbrk_aligned>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	4604      	mov	r4, r0
 80066a6:	d158      	bne.n	800675a <_malloc_r+0xf6>
 80066a8:	f8d8 4000 	ldr.w	r4, [r8]
 80066ac:	4627      	mov	r7, r4
 80066ae:	2f00      	cmp	r7, #0
 80066b0:	d143      	bne.n	800673a <_malloc_r+0xd6>
 80066b2:	2c00      	cmp	r4, #0
 80066b4:	d04b      	beq.n	800674e <_malloc_r+0xea>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	4639      	mov	r1, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	eb04 0903 	add.w	r9, r4, r3
 80066c0:	f000 fad4 	bl	8006c6c <_sbrk_r>
 80066c4:	4581      	cmp	r9, r0
 80066c6:	d142      	bne.n	800674e <_malloc_r+0xea>
 80066c8:	6821      	ldr	r1, [r4, #0]
 80066ca:	1a6d      	subs	r5, r5, r1
 80066cc:	4629      	mov	r1, r5
 80066ce:	4630      	mov	r0, r6
 80066d0:	f7ff ffa6 	bl	8006620 <sbrk_aligned>
 80066d4:	3001      	adds	r0, #1
 80066d6:	d03a      	beq.n	800674e <_malloc_r+0xea>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	442b      	add	r3, r5
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	f8d8 3000 	ldr.w	r3, [r8]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	bb62      	cbnz	r2, 8006740 <_malloc_r+0xdc>
 80066e6:	f8c8 7000 	str.w	r7, [r8]
 80066ea:	e00f      	b.n	800670c <_malloc_r+0xa8>
 80066ec:	6822      	ldr	r2, [r4, #0]
 80066ee:	1b52      	subs	r2, r2, r5
 80066f0:	d420      	bmi.n	8006734 <_malloc_r+0xd0>
 80066f2:	2a0b      	cmp	r2, #11
 80066f4:	d917      	bls.n	8006726 <_malloc_r+0xc2>
 80066f6:	1961      	adds	r1, r4, r5
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	6025      	str	r5, [r4, #0]
 80066fc:	bf18      	it	ne
 80066fe:	6059      	strne	r1, [r3, #4]
 8006700:	6863      	ldr	r3, [r4, #4]
 8006702:	bf08      	it	eq
 8006704:	f8c8 1000 	streq.w	r1, [r8]
 8006708:	5162      	str	r2, [r4, r5]
 800670a:	604b      	str	r3, [r1, #4]
 800670c:	4630      	mov	r0, r6
 800670e:	f000 f82f 	bl	8006770 <__malloc_unlock>
 8006712:	f104 000b 	add.w	r0, r4, #11
 8006716:	1d23      	adds	r3, r4, #4
 8006718:	f020 0007 	bic.w	r0, r0, #7
 800671c:	1ac2      	subs	r2, r0, r3
 800671e:	bf1c      	itt	ne
 8006720:	1a1b      	subne	r3, r3, r0
 8006722:	50a3      	strne	r3, [r4, r2]
 8006724:	e7af      	b.n	8006686 <_malloc_r+0x22>
 8006726:	6862      	ldr	r2, [r4, #4]
 8006728:	42a3      	cmp	r3, r4
 800672a:	bf0c      	ite	eq
 800672c:	f8c8 2000 	streq.w	r2, [r8]
 8006730:	605a      	strne	r2, [r3, #4]
 8006732:	e7eb      	b.n	800670c <_malloc_r+0xa8>
 8006734:	4623      	mov	r3, r4
 8006736:	6864      	ldr	r4, [r4, #4]
 8006738:	e7ae      	b.n	8006698 <_malloc_r+0x34>
 800673a:	463c      	mov	r4, r7
 800673c:	687f      	ldr	r7, [r7, #4]
 800673e:	e7b6      	b.n	80066ae <_malloc_r+0x4a>
 8006740:	461a      	mov	r2, r3
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	42a3      	cmp	r3, r4
 8006746:	d1fb      	bne.n	8006740 <_malloc_r+0xdc>
 8006748:	2300      	movs	r3, #0
 800674a:	6053      	str	r3, [r2, #4]
 800674c:	e7de      	b.n	800670c <_malloc_r+0xa8>
 800674e:	230c      	movs	r3, #12
 8006750:	6033      	str	r3, [r6, #0]
 8006752:	4630      	mov	r0, r6
 8006754:	f000 f80c 	bl	8006770 <__malloc_unlock>
 8006758:	e794      	b.n	8006684 <_malloc_r+0x20>
 800675a:	6005      	str	r5, [r0, #0]
 800675c:	e7d6      	b.n	800670c <_malloc_r+0xa8>
 800675e:	bf00      	nop
 8006760:	2000081c 	.word	0x2000081c

08006764 <__malloc_lock>:
 8006764:	4801      	ldr	r0, [pc, #4]	@ (800676c <__malloc_lock+0x8>)
 8006766:	f000 bace 	b.w	8006d06 <__retarget_lock_acquire_recursive>
 800676a:	bf00      	nop
 800676c:	20000960 	.word	0x20000960

08006770 <__malloc_unlock>:
 8006770:	4801      	ldr	r0, [pc, #4]	@ (8006778 <__malloc_unlock+0x8>)
 8006772:	f000 bac9 	b.w	8006d08 <__retarget_lock_release_recursive>
 8006776:	bf00      	nop
 8006778:	20000960 	.word	0x20000960

0800677c <std>:
 800677c:	2300      	movs	r3, #0
 800677e:	b510      	push	{r4, lr}
 8006780:	4604      	mov	r4, r0
 8006782:	e9c0 3300 	strd	r3, r3, [r0]
 8006786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800678a:	6083      	str	r3, [r0, #8]
 800678c:	8181      	strh	r1, [r0, #12]
 800678e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006790:	81c2      	strh	r2, [r0, #14]
 8006792:	6183      	str	r3, [r0, #24]
 8006794:	4619      	mov	r1, r3
 8006796:	2208      	movs	r2, #8
 8006798:	305c      	adds	r0, #92	@ 0x5c
 800679a:	f000 fa19 	bl	8006bd0 <memset>
 800679e:	4b0d      	ldr	r3, [pc, #52]	@ (80067d4 <std+0x58>)
 80067a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80067a2:	4b0d      	ldr	r3, [pc, #52]	@ (80067d8 <std+0x5c>)
 80067a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067a6:	4b0d      	ldr	r3, [pc, #52]	@ (80067dc <std+0x60>)
 80067a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067aa:	4b0d      	ldr	r3, [pc, #52]	@ (80067e0 <std+0x64>)
 80067ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80067ae:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <std+0x68>)
 80067b0:	6224      	str	r4, [r4, #32]
 80067b2:	429c      	cmp	r4, r3
 80067b4:	d006      	beq.n	80067c4 <std+0x48>
 80067b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067ba:	4294      	cmp	r4, r2
 80067bc:	d002      	beq.n	80067c4 <std+0x48>
 80067be:	33d0      	adds	r3, #208	@ 0xd0
 80067c0:	429c      	cmp	r4, r3
 80067c2:	d105      	bne.n	80067d0 <std+0x54>
 80067c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067cc:	f000 ba9a 	b.w	8006d04 <__retarget_lock_init_recursive>
 80067d0:	bd10      	pop	{r4, pc}
 80067d2:	bf00      	nop
 80067d4:	08006a21 	.word	0x08006a21
 80067d8:	08006a43 	.word	0x08006a43
 80067dc:	08006a7b 	.word	0x08006a7b
 80067e0:	08006a9f 	.word	0x08006a9f
 80067e4:	20000820 	.word	0x20000820

080067e8 <stdio_exit_handler>:
 80067e8:	4a02      	ldr	r2, [pc, #8]	@ (80067f4 <stdio_exit_handler+0xc>)
 80067ea:	4903      	ldr	r1, [pc, #12]	@ (80067f8 <stdio_exit_handler+0x10>)
 80067ec:	4803      	ldr	r0, [pc, #12]	@ (80067fc <stdio_exit_handler+0x14>)
 80067ee:	f000 b869 	b.w	80068c4 <_fwalk_sglue>
 80067f2:	bf00      	nop
 80067f4:	200000c4 	.word	0x200000c4
 80067f8:	08007715 	.word	0x08007715
 80067fc:	200000d4 	.word	0x200000d4

08006800 <cleanup_stdio>:
 8006800:	6841      	ldr	r1, [r0, #4]
 8006802:	4b0c      	ldr	r3, [pc, #48]	@ (8006834 <cleanup_stdio+0x34>)
 8006804:	4299      	cmp	r1, r3
 8006806:	b510      	push	{r4, lr}
 8006808:	4604      	mov	r4, r0
 800680a:	d001      	beq.n	8006810 <cleanup_stdio+0x10>
 800680c:	f000 ff82 	bl	8007714 <_fflush_r>
 8006810:	68a1      	ldr	r1, [r4, #8]
 8006812:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <cleanup_stdio+0x38>)
 8006814:	4299      	cmp	r1, r3
 8006816:	d002      	beq.n	800681e <cleanup_stdio+0x1e>
 8006818:	4620      	mov	r0, r4
 800681a:	f000 ff7b 	bl	8007714 <_fflush_r>
 800681e:	68e1      	ldr	r1, [r4, #12]
 8006820:	4b06      	ldr	r3, [pc, #24]	@ (800683c <cleanup_stdio+0x3c>)
 8006822:	4299      	cmp	r1, r3
 8006824:	d004      	beq.n	8006830 <cleanup_stdio+0x30>
 8006826:	4620      	mov	r0, r4
 8006828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682c:	f000 bf72 	b.w	8007714 <_fflush_r>
 8006830:	bd10      	pop	{r4, pc}
 8006832:	bf00      	nop
 8006834:	20000820 	.word	0x20000820
 8006838:	20000888 	.word	0x20000888
 800683c:	200008f0 	.word	0x200008f0

08006840 <global_stdio_init.part.0>:
 8006840:	b510      	push	{r4, lr}
 8006842:	4b0b      	ldr	r3, [pc, #44]	@ (8006870 <global_stdio_init.part.0+0x30>)
 8006844:	4c0b      	ldr	r4, [pc, #44]	@ (8006874 <global_stdio_init.part.0+0x34>)
 8006846:	4a0c      	ldr	r2, [pc, #48]	@ (8006878 <global_stdio_init.part.0+0x38>)
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	4620      	mov	r0, r4
 800684c:	2200      	movs	r2, #0
 800684e:	2104      	movs	r1, #4
 8006850:	f7ff ff94 	bl	800677c <std>
 8006854:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006858:	2201      	movs	r2, #1
 800685a:	2109      	movs	r1, #9
 800685c:	f7ff ff8e 	bl	800677c <std>
 8006860:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006864:	2202      	movs	r2, #2
 8006866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800686a:	2112      	movs	r1, #18
 800686c:	f7ff bf86 	b.w	800677c <std>
 8006870:	20000958 	.word	0x20000958
 8006874:	20000820 	.word	0x20000820
 8006878:	080067e9 	.word	0x080067e9

0800687c <__sfp_lock_acquire>:
 800687c:	4801      	ldr	r0, [pc, #4]	@ (8006884 <__sfp_lock_acquire+0x8>)
 800687e:	f000 ba42 	b.w	8006d06 <__retarget_lock_acquire_recursive>
 8006882:	bf00      	nop
 8006884:	20000961 	.word	0x20000961

08006888 <__sfp_lock_release>:
 8006888:	4801      	ldr	r0, [pc, #4]	@ (8006890 <__sfp_lock_release+0x8>)
 800688a:	f000 ba3d 	b.w	8006d08 <__retarget_lock_release_recursive>
 800688e:	bf00      	nop
 8006890:	20000961 	.word	0x20000961

08006894 <__sinit>:
 8006894:	b510      	push	{r4, lr}
 8006896:	4604      	mov	r4, r0
 8006898:	f7ff fff0 	bl	800687c <__sfp_lock_acquire>
 800689c:	6a23      	ldr	r3, [r4, #32]
 800689e:	b11b      	cbz	r3, 80068a8 <__sinit+0x14>
 80068a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a4:	f7ff bff0 	b.w	8006888 <__sfp_lock_release>
 80068a8:	4b04      	ldr	r3, [pc, #16]	@ (80068bc <__sinit+0x28>)
 80068aa:	6223      	str	r3, [r4, #32]
 80068ac:	4b04      	ldr	r3, [pc, #16]	@ (80068c0 <__sinit+0x2c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f5      	bne.n	80068a0 <__sinit+0xc>
 80068b4:	f7ff ffc4 	bl	8006840 <global_stdio_init.part.0>
 80068b8:	e7f2      	b.n	80068a0 <__sinit+0xc>
 80068ba:	bf00      	nop
 80068bc:	08006801 	.word	0x08006801
 80068c0:	20000958 	.word	0x20000958

080068c4 <_fwalk_sglue>:
 80068c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c8:	4607      	mov	r7, r0
 80068ca:	4688      	mov	r8, r1
 80068cc:	4614      	mov	r4, r2
 80068ce:	2600      	movs	r6, #0
 80068d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068d4:	f1b9 0901 	subs.w	r9, r9, #1
 80068d8:	d505      	bpl.n	80068e6 <_fwalk_sglue+0x22>
 80068da:	6824      	ldr	r4, [r4, #0]
 80068dc:	2c00      	cmp	r4, #0
 80068de:	d1f7      	bne.n	80068d0 <_fwalk_sglue+0xc>
 80068e0:	4630      	mov	r0, r6
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d907      	bls.n	80068fc <_fwalk_sglue+0x38>
 80068ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068f0:	3301      	adds	r3, #1
 80068f2:	d003      	beq.n	80068fc <_fwalk_sglue+0x38>
 80068f4:	4629      	mov	r1, r5
 80068f6:	4638      	mov	r0, r7
 80068f8:	47c0      	blx	r8
 80068fa:	4306      	orrs	r6, r0
 80068fc:	3568      	adds	r5, #104	@ 0x68
 80068fe:	e7e9      	b.n	80068d4 <_fwalk_sglue+0x10>

08006900 <iprintf>:
 8006900:	b40f      	push	{r0, r1, r2, r3}
 8006902:	b507      	push	{r0, r1, r2, lr}
 8006904:	4906      	ldr	r1, [pc, #24]	@ (8006920 <iprintf+0x20>)
 8006906:	ab04      	add	r3, sp, #16
 8006908:	6808      	ldr	r0, [r1, #0]
 800690a:	f853 2b04 	ldr.w	r2, [r3], #4
 800690e:	6881      	ldr	r1, [r0, #8]
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	f000 fbd5 	bl	80070c0 <_vfiprintf_r>
 8006916:	b003      	add	sp, #12
 8006918:	f85d eb04 	ldr.w	lr, [sp], #4
 800691c:	b004      	add	sp, #16
 800691e:	4770      	bx	lr
 8006920:	200000d0 	.word	0x200000d0

08006924 <_puts_r>:
 8006924:	6a03      	ldr	r3, [r0, #32]
 8006926:	b570      	push	{r4, r5, r6, lr}
 8006928:	6884      	ldr	r4, [r0, #8]
 800692a:	4605      	mov	r5, r0
 800692c:	460e      	mov	r6, r1
 800692e:	b90b      	cbnz	r3, 8006934 <_puts_r+0x10>
 8006930:	f7ff ffb0 	bl	8006894 <__sinit>
 8006934:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006936:	07db      	lsls	r3, r3, #31
 8006938:	d405      	bmi.n	8006946 <_puts_r+0x22>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	0598      	lsls	r0, r3, #22
 800693e:	d402      	bmi.n	8006946 <_puts_r+0x22>
 8006940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006942:	f000 f9e0 	bl	8006d06 <__retarget_lock_acquire_recursive>
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	0719      	lsls	r1, r3, #28
 800694a:	d502      	bpl.n	8006952 <_puts_r+0x2e>
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d135      	bne.n	80069be <_puts_r+0x9a>
 8006952:	4621      	mov	r1, r4
 8006954:	4628      	mov	r0, r5
 8006956:	f000 f8e5 	bl	8006b24 <__swsetup_r>
 800695a:	b380      	cbz	r0, 80069be <_puts_r+0x9a>
 800695c:	f04f 35ff 	mov.w	r5, #4294967295
 8006960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006962:	07da      	lsls	r2, r3, #31
 8006964:	d405      	bmi.n	8006972 <_puts_r+0x4e>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	059b      	lsls	r3, r3, #22
 800696a:	d402      	bmi.n	8006972 <_puts_r+0x4e>
 800696c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800696e:	f000 f9cb 	bl	8006d08 <__retarget_lock_release_recursive>
 8006972:	4628      	mov	r0, r5
 8006974:	bd70      	pop	{r4, r5, r6, pc}
 8006976:	2b00      	cmp	r3, #0
 8006978:	da04      	bge.n	8006984 <_puts_r+0x60>
 800697a:	69a2      	ldr	r2, [r4, #24]
 800697c:	429a      	cmp	r2, r3
 800697e:	dc17      	bgt.n	80069b0 <_puts_r+0x8c>
 8006980:	290a      	cmp	r1, #10
 8006982:	d015      	beq.n	80069b0 <_puts_r+0x8c>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	6022      	str	r2, [r4, #0]
 800698a:	7019      	strb	r1, [r3, #0]
 800698c:	68a3      	ldr	r3, [r4, #8]
 800698e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006992:	3b01      	subs	r3, #1
 8006994:	60a3      	str	r3, [r4, #8]
 8006996:	2900      	cmp	r1, #0
 8006998:	d1ed      	bne.n	8006976 <_puts_r+0x52>
 800699a:	2b00      	cmp	r3, #0
 800699c:	da11      	bge.n	80069c2 <_puts_r+0x9e>
 800699e:	4622      	mov	r2, r4
 80069a0:	210a      	movs	r1, #10
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f87f 	bl	8006aa6 <__swbuf_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d0d7      	beq.n	800695c <_puts_r+0x38>
 80069ac:	250a      	movs	r5, #10
 80069ae:	e7d7      	b.n	8006960 <_puts_r+0x3c>
 80069b0:	4622      	mov	r2, r4
 80069b2:	4628      	mov	r0, r5
 80069b4:	f000 f877 	bl	8006aa6 <__swbuf_r>
 80069b8:	3001      	adds	r0, #1
 80069ba:	d1e7      	bne.n	800698c <_puts_r+0x68>
 80069bc:	e7ce      	b.n	800695c <_puts_r+0x38>
 80069be:	3e01      	subs	r6, #1
 80069c0:	e7e4      	b.n	800698c <_puts_r+0x68>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	6022      	str	r2, [r4, #0]
 80069c8:	220a      	movs	r2, #10
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	e7ee      	b.n	80069ac <_puts_r+0x88>
	...

080069d0 <puts>:
 80069d0:	4b02      	ldr	r3, [pc, #8]	@ (80069dc <puts+0xc>)
 80069d2:	4601      	mov	r1, r0
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	f7ff bfa5 	b.w	8006924 <_puts_r>
 80069da:	bf00      	nop
 80069dc:	200000d0 	.word	0x200000d0

080069e0 <siprintf>:
 80069e0:	b40e      	push	{r1, r2, r3}
 80069e2:	b500      	push	{lr}
 80069e4:	b09c      	sub	sp, #112	@ 0x70
 80069e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80069e8:	9002      	str	r0, [sp, #8]
 80069ea:	9006      	str	r0, [sp, #24]
 80069ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069f0:	4809      	ldr	r0, [pc, #36]	@ (8006a18 <siprintf+0x38>)
 80069f2:	9107      	str	r1, [sp, #28]
 80069f4:	9104      	str	r1, [sp, #16]
 80069f6:	4909      	ldr	r1, [pc, #36]	@ (8006a1c <siprintf+0x3c>)
 80069f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069fc:	9105      	str	r1, [sp, #20]
 80069fe:	6800      	ldr	r0, [r0, #0]
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	a902      	add	r1, sp, #8
 8006a04:	f000 fa36 	bl	8006e74 <_svfiprintf_r>
 8006a08:	9b02      	ldr	r3, [sp, #8]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	b01c      	add	sp, #112	@ 0x70
 8006a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a14:	b003      	add	sp, #12
 8006a16:	4770      	bx	lr
 8006a18:	200000d0 	.word	0x200000d0
 8006a1c:	ffff0208 	.word	0xffff0208

08006a20 <__sread>:
 8006a20:	b510      	push	{r4, lr}
 8006a22:	460c      	mov	r4, r1
 8006a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a28:	f000 f90e 	bl	8006c48 <_read_r>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	bfab      	itete	ge
 8006a30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a32:	89a3      	ldrhlt	r3, [r4, #12]
 8006a34:	181b      	addge	r3, r3, r0
 8006a36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a3a:	bfac      	ite	ge
 8006a3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a3e:	81a3      	strhlt	r3, [r4, #12]
 8006a40:	bd10      	pop	{r4, pc}

08006a42 <__swrite>:
 8006a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a46:	461f      	mov	r7, r3
 8006a48:	898b      	ldrh	r3, [r1, #12]
 8006a4a:	05db      	lsls	r3, r3, #23
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	4616      	mov	r6, r2
 8006a52:	d505      	bpl.n	8006a60 <__swrite+0x1e>
 8006a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a58:	2302      	movs	r3, #2
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f000 f8e2 	bl	8006c24 <_lseek_r>
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	4632      	mov	r2, r6
 8006a6e:	463b      	mov	r3, r7
 8006a70:	4628      	mov	r0, r5
 8006a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a76:	f000 b909 	b.w	8006c8c <_write_r>

08006a7a <__sseek>:
 8006a7a:	b510      	push	{r4, lr}
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a82:	f000 f8cf 	bl	8006c24 <_lseek_r>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	bf15      	itete	ne
 8006a8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a96:	81a3      	strheq	r3, [r4, #12]
 8006a98:	bf18      	it	ne
 8006a9a:	81a3      	strhne	r3, [r4, #12]
 8006a9c:	bd10      	pop	{r4, pc}

08006a9e <__sclose>:
 8006a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa2:	f000 b8af 	b.w	8006c04 <_close_r>

08006aa6 <__swbuf_r>:
 8006aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa8:	460e      	mov	r6, r1
 8006aaa:	4614      	mov	r4, r2
 8006aac:	4605      	mov	r5, r0
 8006aae:	b118      	cbz	r0, 8006ab8 <__swbuf_r+0x12>
 8006ab0:	6a03      	ldr	r3, [r0, #32]
 8006ab2:	b90b      	cbnz	r3, 8006ab8 <__swbuf_r+0x12>
 8006ab4:	f7ff feee 	bl	8006894 <__sinit>
 8006ab8:	69a3      	ldr	r3, [r4, #24]
 8006aba:	60a3      	str	r3, [r4, #8]
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	071a      	lsls	r2, r3, #28
 8006ac0:	d501      	bpl.n	8006ac6 <__swbuf_r+0x20>
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	b943      	cbnz	r3, 8006ad8 <__swbuf_r+0x32>
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f82b 	bl	8006b24 <__swsetup_r>
 8006ace:	b118      	cbz	r0, 8006ad8 <__swbuf_r+0x32>
 8006ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	6922      	ldr	r2, [r4, #16]
 8006adc:	1a98      	subs	r0, r3, r2
 8006ade:	6963      	ldr	r3, [r4, #20]
 8006ae0:	b2f6      	uxtb	r6, r6
 8006ae2:	4283      	cmp	r3, r0
 8006ae4:	4637      	mov	r7, r6
 8006ae6:	dc05      	bgt.n	8006af4 <__swbuf_r+0x4e>
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4628      	mov	r0, r5
 8006aec:	f000 fe12 	bl	8007714 <_fflush_r>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d1ed      	bne.n	8006ad0 <__swbuf_r+0x2a>
 8006af4:	68a3      	ldr	r3, [r4, #8]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	60a3      	str	r3, [r4, #8]
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	6022      	str	r2, [r4, #0]
 8006b00:	701e      	strb	r6, [r3, #0]
 8006b02:	6962      	ldr	r2, [r4, #20]
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d004      	beq.n	8006b14 <__swbuf_r+0x6e>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	07db      	lsls	r3, r3, #31
 8006b0e:	d5e1      	bpl.n	8006ad4 <__swbuf_r+0x2e>
 8006b10:	2e0a      	cmp	r6, #10
 8006b12:	d1df      	bne.n	8006ad4 <__swbuf_r+0x2e>
 8006b14:	4621      	mov	r1, r4
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 fdfc 	bl	8007714 <_fflush_r>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d0d9      	beq.n	8006ad4 <__swbuf_r+0x2e>
 8006b20:	e7d6      	b.n	8006ad0 <__swbuf_r+0x2a>
	...

08006b24 <__swsetup_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4b29      	ldr	r3, [pc, #164]	@ (8006bcc <__swsetup_r+0xa8>)
 8006b28:	4605      	mov	r5, r0
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	b118      	cbz	r0, 8006b38 <__swsetup_r+0x14>
 8006b30:	6a03      	ldr	r3, [r0, #32]
 8006b32:	b90b      	cbnz	r3, 8006b38 <__swsetup_r+0x14>
 8006b34:	f7ff feae 	bl	8006894 <__sinit>
 8006b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3c:	0719      	lsls	r1, r3, #28
 8006b3e:	d422      	bmi.n	8006b86 <__swsetup_r+0x62>
 8006b40:	06da      	lsls	r2, r3, #27
 8006b42:	d407      	bmi.n	8006b54 <__swsetup_r+0x30>
 8006b44:	2209      	movs	r2, #9
 8006b46:	602a      	str	r2, [r5, #0]
 8006b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b52:	e033      	b.n	8006bbc <__swsetup_r+0x98>
 8006b54:	0758      	lsls	r0, r3, #29
 8006b56:	d512      	bpl.n	8006b7e <__swsetup_r+0x5a>
 8006b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b5a:	b141      	cbz	r1, 8006b6e <__swsetup_r+0x4a>
 8006b5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b60:	4299      	cmp	r1, r3
 8006b62:	d002      	beq.n	8006b6a <__swsetup_r+0x46>
 8006b64:	4628      	mov	r0, r5
 8006b66:	f000 f8df 	bl	8006d28 <_free_r>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	2300      	movs	r3, #0
 8006b78:	6063      	str	r3, [r4, #4]
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	f043 0308 	orr.w	r3, r3, #8
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	6923      	ldr	r3, [r4, #16]
 8006b88:	b94b      	cbnz	r3, 8006b9e <__swsetup_r+0x7a>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b94:	d003      	beq.n	8006b9e <__swsetup_r+0x7a>
 8006b96:	4621      	mov	r1, r4
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 fe09 	bl	80077b0 <__smakebuf_r>
 8006b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ba2:	f013 0201 	ands.w	r2, r3, #1
 8006ba6:	d00a      	beq.n	8006bbe <__swsetup_r+0x9a>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	60a2      	str	r2, [r4, #8]
 8006bac:	6962      	ldr	r2, [r4, #20]
 8006bae:	4252      	negs	r2, r2
 8006bb0:	61a2      	str	r2, [r4, #24]
 8006bb2:	6922      	ldr	r2, [r4, #16]
 8006bb4:	b942      	cbnz	r2, 8006bc8 <__swsetup_r+0xa4>
 8006bb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006bba:	d1c5      	bne.n	8006b48 <__swsetup_r+0x24>
 8006bbc:	bd38      	pop	{r3, r4, r5, pc}
 8006bbe:	0799      	lsls	r1, r3, #30
 8006bc0:	bf58      	it	pl
 8006bc2:	6962      	ldrpl	r2, [r4, #20]
 8006bc4:	60a2      	str	r2, [r4, #8]
 8006bc6:	e7f4      	b.n	8006bb2 <__swsetup_r+0x8e>
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e7f7      	b.n	8006bbc <__swsetup_r+0x98>
 8006bcc:	200000d0 	.word	0x200000d0

08006bd0 <memset>:
 8006bd0:	4402      	add	r2, r0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d100      	bne.n	8006bda <memset+0xa>
 8006bd8:	4770      	bx	lr
 8006bda:	f803 1b01 	strb.w	r1, [r3], #1
 8006bde:	e7f9      	b.n	8006bd4 <memset+0x4>

08006be0 <strncmp>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	b16a      	cbz	r2, 8006c00 <strncmp+0x20>
 8006be4:	3901      	subs	r1, #1
 8006be6:	1884      	adds	r4, r0, r2
 8006be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d103      	bne.n	8006bfc <strncmp+0x1c>
 8006bf4:	42a0      	cmp	r0, r4
 8006bf6:	d001      	beq.n	8006bfc <strncmp+0x1c>
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	d1f5      	bne.n	8006be8 <strncmp+0x8>
 8006bfc:	1ad0      	subs	r0, r2, r3
 8006bfe:	bd10      	pop	{r4, pc}
 8006c00:	4610      	mov	r0, r2
 8006c02:	e7fc      	b.n	8006bfe <strncmp+0x1e>

08006c04 <_close_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d06      	ldr	r5, [pc, #24]	@ (8006c20 <_close_r+0x1c>)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	602b      	str	r3, [r5, #0]
 8006c10:	f7fb fe8b 	bl	800292a <_close>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_close_r+0x1a>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_close_r+0x1a>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	2000095c 	.word	0x2000095c

08006c24 <_lseek_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4d07      	ldr	r5, [pc, #28]	@ (8006c44 <_lseek_r+0x20>)
 8006c28:	4604      	mov	r4, r0
 8006c2a:	4608      	mov	r0, r1
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	2200      	movs	r2, #0
 8006c30:	602a      	str	r2, [r5, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f7fb fea0 	bl	8002978 <_lseek>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_lseek_r+0x1e>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_lseek_r+0x1e>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	2000095c 	.word	0x2000095c

08006c48 <_read_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d07      	ldr	r5, [pc, #28]	@ (8006c68 <_read_r+0x20>)
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	4608      	mov	r0, r1
 8006c50:	4611      	mov	r1, r2
 8006c52:	2200      	movs	r2, #0
 8006c54:	602a      	str	r2, [r5, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f7fb fe2e 	bl	80028b8 <_read>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_read_r+0x1e>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_read_r+0x1e>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	2000095c 	.word	0x2000095c

08006c6c <_sbrk_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4d06      	ldr	r5, [pc, #24]	@ (8006c88 <_sbrk_r+0x1c>)
 8006c70:	2300      	movs	r3, #0
 8006c72:	4604      	mov	r4, r0
 8006c74:	4608      	mov	r0, r1
 8006c76:	602b      	str	r3, [r5, #0]
 8006c78:	f7fb fe8c 	bl	8002994 <_sbrk>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_sbrk_r+0x1a>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_sbrk_r+0x1a>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	2000095c 	.word	0x2000095c

08006c8c <_write_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d07      	ldr	r5, [pc, #28]	@ (8006cac <_write_r+0x20>)
 8006c90:	4604      	mov	r4, r0
 8006c92:	4608      	mov	r0, r1
 8006c94:	4611      	mov	r1, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	602a      	str	r2, [r5, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f7fb fe29 	bl	80028f2 <_write>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_write_r+0x1e>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_write_r+0x1e>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	2000095c 	.word	0x2000095c

08006cb0 <__errno>:
 8006cb0:	4b01      	ldr	r3, [pc, #4]	@ (8006cb8 <__errno+0x8>)
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	200000d0 	.word	0x200000d0

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4d0d      	ldr	r5, [pc, #52]	@ (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	@ (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	42a6      	cmp	r6, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	@ (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f000 fe1c 	bl	800790c <_init>
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2600      	movs	r6, #0
 8006cda:	42a6      	cmp	r6, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce4:	4798      	blx	r3
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cee:	4798      	blx	r3
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	08007d10 	.word	0x08007d10
 8006cf8:	08007d10 	.word	0x08007d10
 8006cfc:	08007d10 	.word	0x08007d10
 8006d00:	08007d14 	.word	0x08007d14

08006d04 <__retarget_lock_init_recursive>:
 8006d04:	4770      	bx	lr

08006d06 <__retarget_lock_acquire_recursive>:
 8006d06:	4770      	bx	lr

08006d08 <__retarget_lock_release_recursive>:
 8006d08:	4770      	bx	lr

08006d0a <memcpy>:
 8006d0a:	440a      	add	r2, r1
 8006d0c:	4291      	cmp	r1, r2
 8006d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d12:	d100      	bne.n	8006d16 <memcpy+0xc>
 8006d14:	4770      	bx	lr
 8006d16:	b510      	push	{r4, lr}
 8006d18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d20:	4291      	cmp	r1, r2
 8006d22:	d1f9      	bne.n	8006d18 <memcpy+0xe>
 8006d24:	bd10      	pop	{r4, pc}
	...

08006d28 <_free_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	d041      	beq.n	8006db4 <_free_r+0x8c>
 8006d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d34:	1f0c      	subs	r4, r1, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfb8      	it	lt
 8006d3a:	18e4      	addlt	r4, r4, r3
 8006d3c:	f7ff fd12 	bl	8006764 <__malloc_lock>
 8006d40:	4a1d      	ldr	r2, [pc, #116]	@ (8006db8 <_free_r+0x90>)
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	b933      	cbnz	r3, 8006d54 <_free_r+0x2c>
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	6014      	str	r4, [r2, #0]
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d50:	f7ff bd0e 	b.w	8006770 <__malloc_unlock>
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	d908      	bls.n	8006d6a <_free_r+0x42>
 8006d58:	6820      	ldr	r0, [r4, #0]
 8006d5a:	1821      	adds	r1, r4, r0
 8006d5c:	428b      	cmp	r3, r1
 8006d5e:	bf01      	itttt	eq
 8006d60:	6819      	ldreq	r1, [r3, #0]
 8006d62:	685b      	ldreq	r3, [r3, #4]
 8006d64:	1809      	addeq	r1, r1, r0
 8006d66:	6021      	streq	r1, [r4, #0]
 8006d68:	e7ed      	b.n	8006d46 <_free_r+0x1e>
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	b10b      	cbz	r3, 8006d74 <_free_r+0x4c>
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d9fa      	bls.n	8006d6a <_free_r+0x42>
 8006d74:	6811      	ldr	r1, [r2, #0]
 8006d76:	1850      	adds	r0, r2, r1
 8006d78:	42a0      	cmp	r0, r4
 8006d7a:	d10b      	bne.n	8006d94 <_free_r+0x6c>
 8006d7c:	6820      	ldr	r0, [r4, #0]
 8006d7e:	4401      	add	r1, r0
 8006d80:	1850      	adds	r0, r2, r1
 8006d82:	4283      	cmp	r3, r0
 8006d84:	6011      	str	r1, [r2, #0]
 8006d86:	d1e0      	bne.n	8006d4a <_free_r+0x22>
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	6053      	str	r3, [r2, #4]
 8006d8e:	4408      	add	r0, r1
 8006d90:	6010      	str	r0, [r2, #0]
 8006d92:	e7da      	b.n	8006d4a <_free_r+0x22>
 8006d94:	d902      	bls.n	8006d9c <_free_r+0x74>
 8006d96:	230c      	movs	r3, #12
 8006d98:	602b      	str	r3, [r5, #0]
 8006d9a:	e7d6      	b.n	8006d4a <_free_r+0x22>
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	1821      	adds	r1, r4, r0
 8006da0:	428b      	cmp	r3, r1
 8006da2:	bf04      	itt	eq
 8006da4:	6819      	ldreq	r1, [r3, #0]
 8006da6:	685b      	ldreq	r3, [r3, #4]
 8006da8:	6063      	str	r3, [r4, #4]
 8006daa:	bf04      	itt	eq
 8006dac:	1809      	addeq	r1, r1, r0
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	6054      	str	r4, [r2, #4]
 8006db2:	e7ca      	b.n	8006d4a <_free_r+0x22>
 8006db4:	bd38      	pop	{r3, r4, r5, pc}
 8006db6:	bf00      	nop
 8006db8:	2000081c 	.word	0x2000081c

08006dbc <__ssputs_r>:
 8006dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc0:	688e      	ldr	r6, [r1, #8]
 8006dc2:	461f      	mov	r7, r3
 8006dc4:	42be      	cmp	r6, r7
 8006dc6:	680b      	ldr	r3, [r1, #0]
 8006dc8:	4682      	mov	sl, r0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	4690      	mov	r8, r2
 8006dce:	d82d      	bhi.n	8006e2c <__ssputs_r+0x70>
 8006dd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006dd8:	d026      	beq.n	8006e28 <__ssputs_r+0x6c>
 8006dda:	6965      	ldr	r5, [r4, #20]
 8006ddc:	6909      	ldr	r1, [r1, #16]
 8006dde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006de2:	eba3 0901 	sub.w	r9, r3, r1
 8006de6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dea:	1c7b      	adds	r3, r7, #1
 8006dec:	444b      	add	r3, r9
 8006dee:	106d      	asrs	r5, r5, #1
 8006df0:	429d      	cmp	r5, r3
 8006df2:	bf38      	it	cc
 8006df4:	461d      	movcc	r5, r3
 8006df6:	0553      	lsls	r3, r2, #21
 8006df8:	d527      	bpl.n	8006e4a <__ssputs_r+0x8e>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	f7ff fc32 	bl	8006664 <_malloc_r>
 8006e00:	4606      	mov	r6, r0
 8006e02:	b360      	cbz	r0, 8006e5e <__ssputs_r+0xa2>
 8006e04:	6921      	ldr	r1, [r4, #16]
 8006e06:	464a      	mov	r2, r9
 8006e08:	f7ff ff7f 	bl	8006d0a <memcpy>
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	6126      	str	r6, [r4, #16]
 8006e1a:	6165      	str	r5, [r4, #20]
 8006e1c:	444e      	add	r6, r9
 8006e1e:	eba5 0509 	sub.w	r5, r5, r9
 8006e22:	6026      	str	r6, [r4, #0]
 8006e24:	60a5      	str	r5, [r4, #8]
 8006e26:	463e      	mov	r6, r7
 8006e28:	42be      	cmp	r6, r7
 8006e2a:	d900      	bls.n	8006e2e <__ssputs_r+0x72>
 8006e2c:	463e      	mov	r6, r7
 8006e2e:	6820      	ldr	r0, [r4, #0]
 8006e30:	4632      	mov	r2, r6
 8006e32:	4641      	mov	r1, r8
 8006e34:	f000 fcf8 	bl	8007828 <memmove>
 8006e38:	68a3      	ldr	r3, [r4, #8]
 8006e3a:	1b9b      	subs	r3, r3, r6
 8006e3c:	60a3      	str	r3, [r4, #8]
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	4433      	add	r3, r6
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	2000      	movs	r0, #0
 8006e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	f000 fd28 	bl	80078a0 <_realloc_r>
 8006e50:	4606      	mov	r6, r0
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d1e0      	bne.n	8006e18 <__ssputs_r+0x5c>
 8006e56:	6921      	ldr	r1, [r4, #16]
 8006e58:	4650      	mov	r0, sl
 8006e5a:	f7ff ff65 	bl	8006d28 <_free_r>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	f8ca 3000 	str.w	r3, [sl]
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	e7e9      	b.n	8006e46 <__ssputs_r+0x8a>
	...

08006e74 <_svfiprintf_r>:
 8006e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	4698      	mov	r8, r3
 8006e7a:	898b      	ldrh	r3, [r1, #12]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	b09d      	sub	sp, #116	@ 0x74
 8006e80:	4607      	mov	r7, r0
 8006e82:	460d      	mov	r5, r1
 8006e84:	4614      	mov	r4, r2
 8006e86:	d510      	bpl.n	8006eaa <_svfiprintf_r+0x36>
 8006e88:	690b      	ldr	r3, [r1, #16]
 8006e8a:	b973      	cbnz	r3, 8006eaa <_svfiprintf_r+0x36>
 8006e8c:	2140      	movs	r1, #64	@ 0x40
 8006e8e:	f7ff fbe9 	bl	8006664 <_malloc_r>
 8006e92:	6028      	str	r0, [r5, #0]
 8006e94:	6128      	str	r0, [r5, #16]
 8006e96:	b930      	cbnz	r0, 8006ea6 <_svfiprintf_r+0x32>
 8006e98:	230c      	movs	r3, #12
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	b01d      	add	sp, #116	@ 0x74
 8006ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea6:	2340      	movs	r3, #64	@ 0x40
 8006ea8:	616b      	str	r3, [r5, #20]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eae:	2320      	movs	r3, #32
 8006eb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb8:	2330      	movs	r3, #48	@ 0x30
 8006eba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007058 <_svfiprintf_r+0x1e4>
 8006ebe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ec2:	f04f 0901 	mov.w	r9, #1
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	469a      	mov	sl, r3
 8006eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ece:	b10a      	cbz	r2, 8006ed4 <_svfiprintf_r+0x60>
 8006ed0:	2a25      	cmp	r2, #37	@ 0x25
 8006ed2:	d1f9      	bne.n	8006ec8 <_svfiprintf_r+0x54>
 8006ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed8:	d00b      	beq.n	8006ef2 <_svfiprintf_r+0x7e>
 8006eda:	465b      	mov	r3, fp
 8006edc:	4622      	mov	r2, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f7ff ff6b 	bl	8006dbc <__ssputs_r>
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f000 80a7 	beq.w	800703a <_svfiprintf_r+0x1c6>
 8006eec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eee:	445a      	add	r2, fp
 8006ef0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 809f 	beq.w	800703a <_svfiprintf_r+0x1c6>
 8006efc:	2300      	movs	r3, #0
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f06:	f10a 0a01 	add.w	sl, sl, #1
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	9307      	str	r3, [sp, #28]
 8006f0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f12:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f14:	4654      	mov	r4, sl
 8006f16:	2205      	movs	r2, #5
 8006f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1c:	484e      	ldr	r0, [pc, #312]	@ (8007058 <_svfiprintf_r+0x1e4>)
 8006f1e:	f7f9 f977 	bl	8000210 <memchr>
 8006f22:	9a04      	ldr	r2, [sp, #16]
 8006f24:	b9d8      	cbnz	r0, 8006f5e <_svfiprintf_r+0xea>
 8006f26:	06d0      	lsls	r0, r2, #27
 8006f28:	bf44      	itt	mi
 8006f2a:	2320      	movmi	r3, #32
 8006f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f30:	0711      	lsls	r1, r2, #28
 8006f32:	bf44      	itt	mi
 8006f34:	232b      	movmi	r3, #43	@ 0x2b
 8006f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f40:	d015      	beq.n	8006f6e <_svfiprintf_r+0xfa>
 8006f42:	9a07      	ldr	r2, [sp, #28]
 8006f44:	4654      	mov	r4, sl
 8006f46:	2000      	movs	r0, #0
 8006f48:	f04f 0c0a 	mov.w	ip, #10
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f52:	3b30      	subs	r3, #48	@ 0x30
 8006f54:	2b09      	cmp	r3, #9
 8006f56:	d94b      	bls.n	8006ff0 <_svfiprintf_r+0x17c>
 8006f58:	b1b0      	cbz	r0, 8006f88 <_svfiprintf_r+0x114>
 8006f5a:	9207      	str	r2, [sp, #28]
 8006f5c:	e014      	b.n	8006f88 <_svfiprintf_r+0x114>
 8006f5e:	eba0 0308 	sub.w	r3, r0, r8
 8006f62:	fa09 f303 	lsl.w	r3, r9, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	46a2      	mov	sl, r4
 8006f6c:	e7d2      	b.n	8006f14 <_svfiprintf_r+0xa0>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	1d19      	adds	r1, r3, #4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	9103      	str	r1, [sp, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfbb      	ittet	lt
 8006f7a:	425b      	neglt	r3, r3
 8006f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f80:	9307      	strge	r3, [sp, #28]
 8006f82:	9307      	strlt	r3, [sp, #28]
 8006f84:	bfb8      	it	lt
 8006f86:	9204      	strlt	r2, [sp, #16]
 8006f88:	7823      	ldrb	r3, [r4, #0]
 8006f8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f8c:	d10a      	bne.n	8006fa4 <_svfiprintf_r+0x130>
 8006f8e:	7863      	ldrb	r3, [r4, #1]
 8006f90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f92:	d132      	bne.n	8006ffa <_svfiprintf_r+0x186>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	1d1a      	adds	r2, r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	9203      	str	r2, [sp, #12]
 8006f9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fa0:	3402      	adds	r4, #2
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007068 <_svfiprintf_r+0x1f4>
 8006fa8:	7821      	ldrb	r1, [r4, #0]
 8006faa:	2203      	movs	r2, #3
 8006fac:	4650      	mov	r0, sl
 8006fae:	f7f9 f92f 	bl	8000210 <memchr>
 8006fb2:	b138      	cbz	r0, 8006fc4 <_svfiprintf_r+0x150>
 8006fb4:	9b04      	ldr	r3, [sp, #16]
 8006fb6:	eba0 000a 	sub.w	r0, r0, sl
 8006fba:	2240      	movs	r2, #64	@ 0x40
 8006fbc:	4082      	lsls	r2, r0
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	3401      	adds	r4, #1
 8006fc2:	9304      	str	r3, [sp, #16]
 8006fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc8:	4824      	ldr	r0, [pc, #144]	@ (800705c <_svfiprintf_r+0x1e8>)
 8006fca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fce:	2206      	movs	r2, #6
 8006fd0:	f7f9 f91e 	bl	8000210 <memchr>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d036      	beq.n	8007046 <_svfiprintf_r+0x1d2>
 8006fd8:	4b21      	ldr	r3, [pc, #132]	@ (8007060 <_svfiprintf_r+0x1ec>)
 8006fda:	bb1b      	cbnz	r3, 8007024 <_svfiprintf_r+0x1b0>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	3307      	adds	r3, #7
 8006fe0:	f023 0307 	bic.w	r3, r3, #7
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	9303      	str	r3, [sp, #12]
 8006fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fea:	4433      	add	r3, r6
 8006fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fee:	e76a      	b.n	8006ec6 <_svfiprintf_r+0x52>
 8006ff0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	e7a8      	b.n	8006f4c <_svfiprintf_r+0xd8>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	3401      	adds	r4, #1
 8006ffe:	9305      	str	r3, [sp, #20]
 8007000:	4619      	mov	r1, r3
 8007002:	f04f 0c0a 	mov.w	ip, #10
 8007006:	4620      	mov	r0, r4
 8007008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800700c:	3a30      	subs	r2, #48	@ 0x30
 800700e:	2a09      	cmp	r2, #9
 8007010:	d903      	bls.n	800701a <_svfiprintf_r+0x1a6>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0c6      	beq.n	8006fa4 <_svfiprintf_r+0x130>
 8007016:	9105      	str	r1, [sp, #20]
 8007018:	e7c4      	b.n	8006fa4 <_svfiprintf_r+0x130>
 800701a:	fb0c 2101 	mla	r1, ip, r1, r2
 800701e:	4604      	mov	r4, r0
 8007020:	2301      	movs	r3, #1
 8007022:	e7f0      	b.n	8007006 <_svfiprintf_r+0x192>
 8007024:	ab03      	add	r3, sp, #12
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	462a      	mov	r2, r5
 800702a:	4b0e      	ldr	r3, [pc, #56]	@ (8007064 <_svfiprintf_r+0x1f0>)
 800702c:	a904      	add	r1, sp, #16
 800702e:	4638      	mov	r0, r7
 8007030:	f3af 8000 	nop.w
 8007034:	1c42      	adds	r2, r0, #1
 8007036:	4606      	mov	r6, r0
 8007038:	d1d6      	bne.n	8006fe8 <_svfiprintf_r+0x174>
 800703a:	89ab      	ldrh	r3, [r5, #12]
 800703c:	065b      	lsls	r3, r3, #25
 800703e:	f53f af2d 	bmi.w	8006e9c <_svfiprintf_r+0x28>
 8007042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007044:	e72c      	b.n	8006ea0 <_svfiprintf_r+0x2c>
 8007046:	ab03      	add	r3, sp, #12
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	462a      	mov	r2, r5
 800704c:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <_svfiprintf_r+0x1f0>)
 800704e:	a904      	add	r1, sp, #16
 8007050:	4638      	mov	r0, r7
 8007052:	f000 f9bb 	bl	80073cc <_printf_i>
 8007056:	e7ed      	b.n	8007034 <_svfiprintf_r+0x1c0>
 8007058:	08007cd2 	.word	0x08007cd2
 800705c:	08007cdc 	.word	0x08007cdc
 8007060:	00000000 	.word	0x00000000
 8007064:	08006dbd 	.word	0x08006dbd
 8007068:	08007cd8 	.word	0x08007cd8

0800706c <__sfputc_r>:
 800706c:	6893      	ldr	r3, [r2, #8]
 800706e:	3b01      	subs	r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	b410      	push	{r4}
 8007074:	6093      	str	r3, [r2, #8]
 8007076:	da08      	bge.n	800708a <__sfputc_r+0x1e>
 8007078:	6994      	ldr	r4, [r2, #24]
 800707a:	42a3      	cmp	r3, r4
 800707c:	db01      	blt.n	8007082 <__sfputc_r+0x16>
 800707e:	290a      	cmp	r1, #10
 8007080:	d103      	bne.n	800708a <__sfputc_r+0x1e>
 8007082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007086:	f7ff bd0e 	b.w	8006aa6 <__swbuf_r>
 800708a:	6813      	ldr	r3, [r2, #0]
 800708c:	1c58      	adds	r0, r3, #1
 800708e:	6010      	str	r0, [r2, #0]
 8007090:	7019      	strb	r1, [r3, #0]
 8007092:	4608      	mov	r0, r1
 8007094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007098:	4770      	bx	lr

0800709a <__sfputs_r>:
 800709a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	4614      	mov	r4, r2
 80070a2:	18d5      	adds	r5, r2, r3
 80070a4:	42ac      	cmp	r4, r5
 80070a6:	d101      	bne.n	80070ac <__sfputs_r+0x12>
 80070a8:	2000      	movs	r0, #0
 80070aa:	e007      	b.n	80070bc <__sfputs_r+0x22>
 80070ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b0:	463a      	mov	r2, r7
 80070b2:	4630      	mov	r0, r6
 80070b4:	f7ff ffda 	bl	800706c <__sfputc_r>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d1f3      	bne.n	80070a4 <__sfputs_r+0xa>
 80070bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070c0 <_vfiprintf_r>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	460d      	mov	r5, r1
 80070c6:	b09d      	sub	sp, #116	@ 0x74
 80070c8:	4614      	mov	r4, r2
 80070ca:	4698      	mov	r8, r3
 80070cc:	4606      	mov	r6, r0
 80070ce:	b118      	cbz	r0, 80070d8 <_vfiprintf_r+0x18>
 80070d0:	6a03      	ldr	r3, [r0, #32]
 80070d2:	b90b      	cbnz	r3, 80070d8 <_vfiprintf_r+0x18>
 80070d4:	f7ff fbde 	bl	8006894 <__sinit>
 80070d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070da:	07d9      	lsls	r1, r3, #31
 80070dc:	d405      	bmi.n	80070ea <_vfiprintf_r+0x2a>
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	059a      	lsls	r2, r3, #22
 80070e2:	d402      	bmi.n	80070ea <_vfiprintf_r+0x2a>
 80070e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070e6:	f7ff fe0e 	bl	8006d06 <__retarget_lock_acquire_recursive>
 80070ea:	89ab      	ldrh	r3, [r5, #12]
 80070ec:	071b      	lsls	r3, r3, #28
 80070ee:	d501      	bpl.n	80070f4 <_vfiprintf_r+0x34>
 80070f0:	692b      	ldr	r3, [r5, #16]
 80070f2:	b99b      	cbnz	r3, 800711c <_vfiprintf_r+0x5c>
 80070f4:	4629      	mov	r1, r5
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7ff fd14 	bl	8006b24 <__swsetup_r>
 80070fc:	b170      	cbz	r0, 800711c <_vfiprintf_r+0x5c>
 80070fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007100:	07dc      	lsls	r4, r3, #31
 8007102:	d504      	bpl.n	800710e <_vfiprintf_r+0x4e>
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	b01d      	add	sp, #116	@ 0x74
 800710a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	0598      	lsls	r0, r3, #22
 8007112:	d4f7      	bmi.n	8007104 <_vfiprintf_r+0x44>
 8007114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007116:	f7ff fdf7 	bl	8006d08 <__retarget_lock_release_recursive>
 800711a:	e7f3      	b.n	8007104 <_vfiprintf_r+0x44>
 800711c:	2300      	movs	r3, #0
 800711e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007120:	2320      	movs	r3, #32
 8007122:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007126:	f8cd 800c 	str.w	r8, [sp, #12]
 800712a:	2330      	movs	r3, #48	@ 0x30
 800712c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80072dc <_vfiprintf_r+0x21c>
 8007130:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007134:	f04f 0901 	mov.w	r9, #1
 8007138:	4623      	mov	r3, r4
 800713a:	469a      	mov	sl, r3
 800713c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007140:	b10a      	cbz	r2, 8007146 <_vfiprintf_r+0x86>
 8007142:	2a25      	cmp	r2, #37	@ 0x25
 8007144:	d1f9      	bne.n	800713a <_vfiprintf_r+0x7a>
 8007146:	ebba 0b04 	subs.w	fp, sl, r4
 800714a:	d00b      	beq.n	8007164 <_vfiprintf_r+0xa4>
 800714c:	465b      	mov	r3, fp
 800714e:	4622      	mov	r2, r4
 8007150:	4629      	mov	r1, r5
 8007152:	4630      	mov	r0, r6
 8007154:	f7ff ffa1 	bl	800709a <__sfputs_r>
 8007158:	3001      	adds	r0, #1
 800715a:	f000 80a7 	beq.w	80072ac <_vfiprintf_r+0x1ec>
 800715e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007160:	445a      	add	r2, fp
 8007162:	9209      	str	r2, [sp, #36]	@ 0x24
 8007164:	f89a 3000 	ldrb.w	r3, [sl]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 809f 	beq.w	80072ac <_vfiprintf_r+0x1ec>
 800716e:	2300      	movs	r3, #0
 8007170:	f04f 32ff 	mov.w	r2, #4294967295
 8007174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007178:	f10a 0a01 	add.w	sl, sl, #1
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	9307      	str	r3, [sp, #28]
 8007180:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007184:	931a      	str	r3, [sp, #104]	@ 0x68
 8007186:	4654      	mov	r4, sl
 8007188:	2205      	movs	r2, #5
 800718a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718e:	4853      	ldr	r0, [pc, #332]	@ (80072dc <_vfiprintf_r+0x21c>)
 8007190:	f7f9 f83e 	bl	8000210 <memchr>
 8007194:	9a04      	ldr	r2, [sp, #16]
 8007196:	b9d8      	cbnz	r0, 80071d0 <_vfiprintf_r+0x110>
 8007198:	06d1      	lsls	r1, r2, #27
 800719a:	bf44      	itt	mi
 800719c:	2320      	movmi	r3, #32
 800719e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071a2:	0713      	lsls	r3, r2, #28
 80071a4:	bf44      	itt	mi
 80071a6:	232b      	movmi	r3, #43	@ 0x2b
 80071a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071ac:	f89a 3000 	ldrb.w	r3, [sl]
 80071b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80071b2:	d015      	beq.n	80071e0 <_vfiprintf_r+0x120>
 80071b4:	9a07      	ldr	r2, [sp, #28]
 80071b6:	4654      	mov	r4, sl
 80071b8:	2000      	movs	r0, #0
 80071ba:	f04f 0c0a 	mov.w	ip, #10
 80071be:	4621      	mov	r1, r4
 80071c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071c4:	3b30      	subs	r3, #48	@ 0x30
 80071c6:	2b09      	cmp	r3, #9
 80071c8:	d94b      	bls.n	8007262 <_vfiprintf_r+0x1a2>
 80071ca:	b1b0      	cbz	r0, 80071fa <_vfiprintf_r+0x13a>
 80071cc:	9207      	str	r2, [sp, #28]
 80071ce:	e014      	b.n	80071fa <_vfiprintf_r+0x13a>
 80071d0:	eba0 0308 	sub.w	r3, r0, r8
 80071d4:	fa09 f303 	lsl.w	r3, r9, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	9304      	str	r3, [sp, #16]
 80071dc:	46a2      	mov	sl, r4
 80071de:	e7d2      	b.n	8007186 <_vfiprintf_r+0xc6>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	1d19      	adds	r1, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	9103      	str	r1, [sp, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bfbb      	ittet	lt
 80071ec:	425b      	neglt	r3, r3
 80071ee:	f042 0202 	orrlt.w	r2, r2, #2
 80071f2:	9307      	strge	r3, [sp, #28]
 80071f4:	9307      	strlt	r3, [sp, #28]
 80071f6:	bfb8      	it	lt
 80071f8:	9204      	strlt	r2, [sp, #16]
 80071fa:	7823      	ldrb	r3, [r4, #0]
 80071fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80071fe:	d10a      	bne.n	8007216 <_vfiprintf_r+0x156>
 8007200:	7863      	ldrb	r3, [r4, #1]
 8007202:	2b2a      	cmp	r3, #42	@ 0x2a
 8007204:	d132      	bne.n	800726c <_vfiprintf_r+0x1ac>
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	1d1a      	adds	r2, r3, #4
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	9203      	str	r2, [sp, #12]
 800720e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007212:	3402      	adds	r4, #2
 8007214:	9305      	str	r3, [sp, #20]
 8007216:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80072ec <_vfiprintf_r+0x22c>
 800721a:	7821      	ldrb	r1, [r4, #0]
 800721c:	2203      	movs	r2, #3
 800721e:	4650      	mov	r0, sl
 8007220:	f7f8 fff6 	bl	8000210 <memchr>
 8007224:	b138      	cbz	r0, 8007236 <_vfiprintf_r+0x176>
 8007226:	9b04      	ldr	r3, [sp, #16]
 8007228:	eba0 000a 	sub.w	r0, r0, sl
 800722c:	2240      	movs	r2, #64	@ 0x40
 800722e:	4082      	lsls	r2, r0
 8007230:	4313      	orrs	r3, r2
 8007232:	3401      	adds	r4, #1
 8007234:	9304      	str	r3, [sp, #16]
 8007236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800723a:	4829      	ldr	r0, [pc, #164]	@ (80072e0 <_vfiprintf_r+0x220>)
 800723c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007240:	2206      	movs	r2, #6
 8007242:	f7f8 ffe5 	bl	8000210 <memchr>
 8007246:	2800      	cmp	r0, #0
 8007248:	d03f      	beq.n	80072ca <_vfiprintf_r+0x20a>
 800724a:	4b26      	ldr	r3, [pc, #152]	@ (80072e4 <_vfiprintf_r+0x224>)
 800724c:	bb1b      	cbnz	r3, 8007296 <_vfiprintf_r+0x1d6>
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	3307      	adds	r3, #7
 8007252:	f023 0307 	bic.w	r3, r3, #7
 8007256:	3308      	adds	r3, #8
 8007258:	9303      	str	r3, [sp, #12]
 800725a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800725c:	443b      	add	r3, r7
 800725e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007260:	e76a      	b.n	8007138 <_vfiprintf_r+0x78>
 8007262:	fb0c 3202 	mla	r2, ip, r2, r3
 8007266:	460c      	mov	r4, r1
 8007268:	2001      	movs	r0, #1
 800726a:	e7a8      	b.n	80071be <_vfiprintf_r+0xfe>
 800726c:	2300      	movs	r3, #0
 800726e:	3401      	adds	r4, #1
 8007270:	9305      	str	r3, [sp, #20]
 8007272:	4619      	mov	r1, r3
 8007274:	f04f 0c0a 	mov.w	ip, #10
 8007278:	4620      	mov	r0, r4
 800727a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800727e:	3a30      	subs	r2, #48	@ 0x30
 8007280:	2a09      	cmp	r2, #9
 8007282:	d903      	bls.n	800728c <_vfiprintf_r+0x1cc>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0c6      	beq.n	8007216 <_vfiprintf_r+0x156>
 8007288:	9105      	str	r1, [sp, #20]
 800728a:	e7c4      	b.n	8007216 <_vfiprintf_r+0x156>
 800728c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007290:	4604      	mov	r4, r0
 8007292:	2301      	movs	r3, #1
 8007294:	e7f0      	b.n	8007278 <_vfiprintf_r+0x1b8>
 8007296:	ab03      	add	r3, sp, #12
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	462a      	mov	r2, r5
 800729c:	4b12      	ldr	r3, [pc, #72]	@ (80072e8 <_vfiprintf_r+0x228>)
 800729e:	a904      	add	r1, sp, #16
 80072a0:	4630      	mov	r0, r6
 80072a2:	f3af 8000 	nop.w
 80072a6:	4607      	mov	r7, r0
 80072a8:	1c78      	adds	r0, r7, #1
 80072aa:	d1d6      	bne.n	800725a <_vfiprintf_r+0x19a>
 80072ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072ae:	07d9      	lsls	r1, r3, #31
 80072b0:	d405      	bmi.n	80072be <_vfiprintf_r+0x1fe>
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	059a      	lsls	r2, r3, #22
 80072b6:	d402      	bmi.n	80072be <_vfiprintf_r+0x1fe>
 80072b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ba:	f7ff fd25 	bl	8006d08 <__retarget_lock_release_recursive>
 80072be:	89ab      	ldrh	r3, [r5, #12]
 80072c0:	065b      	lsls	r3, r3, #25
 80072c2:	f53f af1f 	bmi.w	8007104 <_vfiprintf_r+0x44>
 80072c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072c8:	e71e      	b.n	8007108 <_vfiprintf_r+0x48>
 80072ca:	ab03      	add	r3, sp, #12
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	462a      	mov	r2, r5
 80072d0:	4b05      	ldr	r3, [pc, #20]	@ (80072e8 <_vfiprintf_r+0x228>)
 80072d2:	a904      	add	r1, sp, #16
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 f879 	bl	80073cc <_printf_i>
 80072da:	e7e4      	b.n	80072a6 <_vfiprintf_r+0x1e6>
 80072dc:	08007cd2 	.word	0x08007cd2
 80072e0:	08007cdc 	.word	0x08007cdc
 80072e4:	00000000 	.word	0x00000000
 80072e8:	0800709b 	.word	0x0800709b
 80072ec:	08007cd8 	.word	0x08007cd8

080072f0 <_printf_common>:
 80072f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	4616      	mov	r6, r2
 80072f6:	4698      	mov	r8, r3
 80072f8:	688a      	ldr	r2, [r1, #8]
 80072fa:	690b      	ldr	r3, [r1, #16]
 80072fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007300:	4293      	cmp	r3, r2
 8007302:	bfb8      	it	lt
 8007304:	4613      	movlt	r3, r2
 8007306:	6033      	str	r3, [r6, #0]
 8007308:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800730c:	4607      	mov	r7, r0
 800730e:	460c      	mov	r4, r1
 8007310:	b10a      	cbz	r2, 8007316 <_printf_common+0x26>
 8007312:	3301      	adds	r3, #1
 8007314:	6033      	str	r3, [r6, #0]
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	0699      	lsls	r1, r3, #26
 800731a:	bf42      	ittt	mi
 800731c:	6833      	ldrmi	r3, [r6, #0]
 800731e:	3302      	addmi	r3, #2
 8007320:	6033      	strmi	r3, [r6, #0]
 8007322:	6825      	ldr	r5, [r4, #0]
 8007324:	f015 0506 	ands.w	r5, r5, #6
 8007328:	d106      	bne.n	8007338 <_printf_common+0x48>
 800732a:	f104 0a19 	add.w	sl, r4, #25
 800732e:	68e3      	ldr	r3, [r4, #12]
 8007330:	6832      	ldr	r2, [r6, #0]
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	42ab      	cmp	r3, r5
 8007336:	dc26      	bgt.n	8007386 <_printf_common+0x96>
 8007338:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800733c:	6822      	ldr	r2, [r4, #0]
 800733e:	3b00      	subs	r3, #0
 8007340:	bf18      	it	ne
 8007342:	2301      	movne	r3, #1
 8007344:	0692      	lsls	r2, r2, #26
 8007346:	d42b      	bmi.n	80073a0 <_printf_common+0xb0>
 8007348:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800734c:	4641      	mov	r1, r8
 800734e:	4638      	mov	r0, r7
 8007350:	47c8      	blx	r9
 8007352:	3001      	adds	r0, #1
 8007354:	d01e      	beq.n	8007394 <_printf_common+0xa4>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	6922      	ldr	r2, [r4, #16]
 800735a:	f003 0306 	and.w	r3, r3, #6
 800735e:	2b04      	cmp	r3, #4
 8007360:	bf02      	ittt	eq
 8007362:	68e5      	ldreq	r5, [r4, #12]
 8007364:	6833      	ldreq	r3, [r6, #0]
 8007366:	1aed      	subeq	r5, r5, r3
 8007368:	68a3      	ldr	r3, [r4, #8]
 800736a:	bf0c      	ite	eq
 800736c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007370:	2500      	movne	r5, #0
 8007372:	4293      	cmp	r3, r2
 8007374:	bfc4      	itt	gt
 8007376:	1a9b      	subgt	r3, r3, r2
 8007378:	18ed      	addgt	r5, r5, r3
 800737a:	2600      	movs	r6, #0
 800737c:	341a      	adds	r4, #26
 800737e:	42b5      	cmp	r5, r6
 8007380:	d11a      	bne.n	80073b8 <_printf_common+0xc8>
 8007382:	2000      	movs	r0, #0
 8007384:	e008      	b.n	8007398 <_printf_common+0xa8>
 8007386:	2301      	movs	r3, #1
 8007388:	4652      	mov	r2, sl
 800738a:	4641      	mov	r1, r8
 800738c:	4638      	mov	r0, r7
 800738e:	47c8      	blx	r9
 8007390:	3001      	adds	r0, #1
 8007392:	d103      	bne.n	800739c <_printf_common+0xac>
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739c:	3501      	adds	r5, #1
 800739e:	e7c6      	b.n	800732e <_printf_common+0x3e>
 80073a0:	18e1      	adds	r1, r4, r3
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	2030      	movs	r0, #48	@ 0x30
 80073a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073aa:	4422      	add	r2, r4
 80073ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073b4:	3302      	adds	r3, #2
 80073b6:	e7c7      	b.n	8007348 <_printf_common+0x58>
 80073b8:	2301      	movs	r3, #1
 80073ba:	4622      	mov	r2, r4
 80073bc:	4641      	mov	r1, r8
 80073be:	4638      	mov	r0, r7
 80073c0:	47c8      	blx	r9
 80073c2:	3001      	adds	r0, #1
 80073c4:	d0e6      	beq.n	8007394 <_printf_common+0xa4>
 80073c6:	3601      	adds	r6, #1
 80073c8:	e7d9      	b.n	800737e <_printf_common+0x8e>
	...

080073cc <_printf_i>:
 80073cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073d0:	7e0f      	ldrb	r7, [r1, #24]
 80073d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073d4:	2f78      	cmp	r7, #120	@ 0x78
 80073d6:	4691      	mov	r9, r2
 80073d8:	4680      	mov	r8, r0
 80073da:	460c      	mov	r4, r1
 80073dc:	469a      	mov	sl, r3
 80073de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073e2:	d807      	bhi.n	80073f4 <_printf_i+0x28>
 80073e4:	2f62      	cmp	r7, #98	@ 0x62
 80073e6:	d80a      	bhi.n	80073fe <_printf_i+0x32>
 80073e8:	2f00      	cmp	r7, #0
 80073ea:	f000 80d2 	beq.w	8007592 <_printf_i+0x1c6>
 80073ee:	2f58      	cmp	r7, #88	@ 0x58
 80073f0:	f000 80b9 	beq.w	8007566 <_printf_i+0x19a>
 80073f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073fc:	e03a      	b.n	8007474 <_printf_i+0xa8>
 80073fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007402:	2b15      	cmp	r3, #21
 8007404:	d8f6      	bhi.n	80073f4 <_printf_i+0x28>
 8007406:	a101      	add	r1, pc, #4	@ (adr r1, 800740c <_printf_i+0x40>)
 8007408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800740c:	08007465 	.word	0x08007465
 8007410:	08007479 	.word	0x08007479
 8007414:	080073f5 	.word	0x080073f5
 8007418:	080073f5 	.word	0x080073f5
 800741c:	080073f5 	.word	0x080073f5
 8007420:	080073f5 	.word	0x080073f5
 8007424:	08007479 	.word	0x08007479
 8007428:	080073f5 	.word	0x080073f5
 800742c:	080073f5 	.word	0x080073f5
 8007430:	080073f5 	.word	0x080073f5
 8007434:	080073f5 	.word	0x080073f5
 8007438:	08007579 	.word	0x08007579
 800743c:	080074a3 	.word	0x080074a3
 8007440:	08007533 	.word	0x08007533
 8007444:	080073f5 	.word	0x080073f5
 8007448:	080073f5 	.word	0x080073f5
 800744c:	0800759b 	.word	0x0800759b
 8007450:	080073f5 	.word	0x080073f5
 8007454:	080074a3 	.word	0x080074a3
 8007458:	080073f5 	.word	0x080073f5
 800745c:	080073f5 	.word	0x080073f5
 8007460:	0800753b 	.word	0x0800753b
 8007464:	6833      	ldr	r3, [r6, #0]
 8007466:	1d1a      	adds	r2, r3, #4
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6032      	str	r2, [r6, #0]
 800746c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007470:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007474:	2301      	movs	r3, #1
 8007476:	e09d      	b.n	80075b4 <_printf_i+0x1e8>
 8007478:	6833      	ldr	r3, [r6, #0]
 800747a:	6820      	ldr	r0, [r4, #0]
 800747c:	1d19      	adds	r1, r3, #4
 800747e:	6031      	str	r1, [r6, #0]
 8007480:	0606      	lsls	r6, r0, #24
 8007482:	d501      	bpl.n	8007488 <_printf_i+0xbc>
 8007484:	681d      	ldr	r5, [r3, #0]
 8007486:	e003      	b.n	8007490 <_printf_i+0xc4>
 8007488:	0645      	lsls	r5, r0, #25
 800748a:	d5fb      	bpl.n	8007484 <_printf_i+0xb8>
 800748c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007490:	2d00      	cmp	r5, #0
 8007492:	da03      	bge.n	800749c <_printf_i+0xd0>
 8007494:	232d      	movs	r3, #45	@ 0x2d
 8007496:	426d      	negs	r5, r5
 8007498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800749c:	4859      	ldr	r0, [pc, #356]	@ (8007604 <_printf_i+0x238>)
 800749e:	230a      	movs	r3, #10
 80074a0:	e011      	b.n	80074c6 <_printf_i+0xfa>
 80074a2:	6821      	ldr	r1, [r4, #0]
 80074a4:	6833      	ldr	r3, [r6, #0]
 80074a6:	0608      	lsls	r0, r1, #24
 80074a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80074ac:	d402      	bmi.n	80074b4 <_printf_i+0xe8>
 80074ae:	0649      	lsls	r1, r1, #25
 80074b0:	bf48      	it	mi
 80074b2:	b2ad      	uxthmi	r5, r5
 80074b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80074b6:	4853      	ldr	r0, [pc, #332]	@ (8007604 <_printf_i+0x238>)
 80074b8:	6033      	str	r3, [r6, #0]
 80074ba:	bf14      	ite	ne
 80074bc:	230a      	movne	r3, #10
 80074be:	2308      	moveq	r3, #8
 80074c0:	2100      	movs	r1, #0
 80074c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074c6:	6866      	ldr	r6, [r4, #4]
 80074c8:	60a6      	str	r6, [r4, #8]
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	bfa2      	ittt	ge
 80074ce:	6821      	ldrge	r1, [r4, #0]
 80074d0:	f021 0104 	bicge.w	r1, r1, #4
 80074d4:	6021      	strge	r1, [r4, #0]
 80074d6:	b90d      	cbnz	r5, 80074dc <_printf_i+0x110>
 80074d8:	2e00      	cmp	r6, #0
 80074da:	d04b      	beq.n	8007574 <_printf_i+0x1a8>
 80074dc:	4616      	mov	r6, r2
 80074de:	fbb5 f1f3 	udiv	r1, r5, r3
 80074e2:	fb03 5711 	mls	r7, r3, r1, r5
 80074e6:	5dc7      	ldrb	r7, [r0, r7]
 80074e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074ec:	462f      	mov	r7, r5
 80074ee:	42bb      	cmp	r3, r7
 80074f0:	460d      	mov	r5, r1
 80074f2:	d9f4      	bls.n	80074de <_printf_i+0x112>
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d10b      	bne.n	8007510 <_printf_i+0x144>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	07df      	lsls	r7, r3, #31
 80074fc:	d508      	bpl.n	8007510 <_printf_i+0x144>
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	6861      	ldr	r1, [r4, #4]
 8007502:	4299      	cmp	r1, r3
 8007504:	bfde      	ittt	le
 8007506:	2330      	movle	r3, #48	@ 0x30
 8007508:	f806 3c01 	strble.w	r3, [r6, #-1]
 800750c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007510:	1b92      	subs	r2, r2, r6
 8007512:	6122      	str	r2, [r4, #16]
 8007514:	f8cd a000 	str.w	sl, [sp]
 8007518:	464b      	mov	r3, r9
 800751a:	aa03      	add	r2, sp, #12
 800751c:	4621      	mov	r1, r4
 800751e:	4640      	mov	r0, r8
 8007520:	f7ff fee6 	bl	80072f0 <_printf_common>
 8007524:	3001      	adds	r0, #1
 8007526:	d14a      	bne.n	80075be <_printf_i+0x1f2>
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	b004      	add	sp, #16
 800752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	f043 0320 	orr.w	r3, r3, #32
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	4833      	ldr	r0, [pc, #204]	@ (8007608 <_printf_i+0x23c>)
 800753c:	2778      	movs	r7, #120	@ 0x78
 800753e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	6831      	ldr	r1, [r6, #0]
 8007546:	061f      	lsls	r7, r3, #24
 8007548:	f851 5b04 	ldr.w	r5, [r1], #4
 800754c:	d402      	bmi.n	8007554 <_printf_i+0x188>
 800754e:	065f      	lsls	r7, r3, #25
 8007550:	bf48      	it	mi
 8007552:	b2ad      	uxthmi	r5, r5
 8007554:	6031      	str	r1, [r6, #0]
 8007556:	07d9      	lsls	r1, r3, #31
 8007558:	bf44      	itt	mi
 800755a:	f043 0320 	orrmi.w	r3, r3, #32
 800755e:	6023      	strmi	r3, [r4, #0]
 8007560:	b11d      	cbz	r5, 800756a <_printf_i+0x19e>
 8007562:	2310      	movs	r3, #16
 8007564:	e7ac      	b.n	80074c0 <_printf_i+0xf4>
 8007566:	4827      	ldr	r0, [pc, #156]	@ (8007604 <_printf_i+0x238>)
 8007568:	e7e9      	b.n	800753e <_printf_i+0x172>
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	f023 0320 	bic.w	r3, r3, #32
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	e7f6      	b.n	8007562 <_printf_i+0x196>
 8007574:	4616      	mov	r6, r2
 8007576:	e7bd      	b.n	80074f4 <_printf_i+0x128>
 8007578:	6833      	ldr	r3, [r6, #0]
 800757a:	6825      	ldr	r5, [r4, #0]
 800757c:	6961      	ldr	r1, [r4, #20]
 800757e:	1d18      	adds	r0, r3, #4
 8007580:	6030      	str	r0, [r6, #0]
 8007582:	062e      	lsls	r6, r5, #24
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	d501      	bpl.n	800758c <_printf_i+0x1c0>
 8007588:	6019      	str	r1, [r3, #0]
 800758a:	e002      	b.n	8007592 <_printf_i+0x1c6>
 800758c:	0668      	lsls	r0, r5, #25
 800758e:	d5fb      	bpl.n	8007588 <_printf_i+0x1bc>
 8007590:	8019      	strh	r1, [r3, #0]
 8007592:	2300      	movs	r3, #0
 8007594:	6123      	str	r3, [r4, #16]
 8007596:	4616      	mov	r6, r2
 8007598:	e7bc      	b.n	8007514 <_printf_i+0x148>
 800759a:	6833      	ldr	r3, [r6, #0]
 800759c:	1d1a      	adds	r2, r3, #4
 800759e:	6032      	str	r2, [r6, #0]
 80075a0:	681e      	ldr	r6, [r3, #0]
 80075a2:	6862      	ldr	r2, [r4, #4]
 80075a4:	2100      	movs	r1, #0
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7f8 fe32 	bl	8000210 <memchr>
 80075ac:	b108      	cbz	r0, 80075b2 <_printf_i+0x1e6>
 80075ae:	1b80      	subs	r0, r0, r6
 80075b0:	6060      	str	r0, [r4, #4]
 80075b2:	6863      	ldr	r3, [r4, #4]
 80075b4:	6123      	str	r3, [r4, #16]
 80075b6:	2300      	movs	r3, #0
 80075b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075bc:	e7aa      	b.n	8007514 <_printf_i+0x148>
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	4632      	mov	r2, r6
 80075c2:	4649      	mov	r1, r9
 80075c4:	4640      	mov	r0, r8
 80075c6:	47d0      	blx	sl
 80075c8:	3001      	adds	r0, #1
 80075ca:	d0ad      	beq.n	8007528 <_printf_i+0x15c>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	079b      	lsls	r3, r3, #30
 80075d0:	d413      	bmi.n	80075fa <_printf_i+0x22e>
 80075d2:	68e0      	ldr	r0, [r4, #12]
 80075d4:	9b03      	ldr	r3, [sp, #12]
 80075d6:	4298      	cmp	r0, r3
 80075d8:	bfb8      	it	lt
 80075da:	4618      	movlt	r0, r3
 80075dc:	e7a6      	b.n	800752c <_printf_i+0x160>
 80075de:	2301      	movs	r3, #1
 80075e0:	4632      	mov	r2, r6
 80075e2:	4649      	mov	r1, r9
 80075e4:	4640      	mov	r0, r8
 80075e6:	47d0      	blx	sl
 80075e8:	3001      	adds	r0, #1
 80075ea:	d09d      	beq.n	8007528 <_printf_i+0x15c>
 80075ec:	3501      	adds	r5, #1
 80075ee:	68e3      	ldr	r3, [r4, #12]
 80075f0:	9903      	ldr	r1, [sp, #12]
 80075f2:	1a5b      	subs	r3, r3, r1
 80075f4:	42ab      	cmp	r3, r5
 80075f6:	dcf2      	bgt.n	80075de <_printf_i+0x212>
 80075f8:	e7eb      	b.n	80075d2 <_printf_i+0x206>
 80075fa:	2500      	movs	r5, #0
 80075fc:	f104 0619 	add.w	r6, r4, #25
 8007600:	e7f5      	b.n	80075ee <_printf_i+0x222>
 8007602:	bf00      	nop
 8007604:	08007ce3 	.word	0x08007ce3
 8007608:	08007cf4 	.word	0x08007cf4

0800760c <__sflush_r>:
 800760c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007614:	0716      	lsls	r6, r2, #28
 8007616:	4605      	mov	r5, r0
 8007618:	460c      	mov	r4, r1
 800761a:	d454      	bmi.n	80076c6 <__sflush_r+0xba>
 800761c:	684b      	ldr	r3, [r1, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	dc02      	bgt.n	8007628 <__sflush_r+0x1c>
 8007622:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007624:	2b00      	cmp	r3, #0
 8007626:	dd48      	ble.n	80076ba <__sflush_r+0xae>
 8007628:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800762a:	2e00      	cmp	r6, #0
 800762c:	d045      	beq.n	80076ba <__sflush_r+0xae>
 800762e:	2300      	movs	r3, #0
 8007630:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007634:	682f      	ldr	r7, [r5, #0]
 8007636:	6a21      	ldr	r1, [r4, #32]
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	d030      	beq.n	800769e <__sflush_r+0x92>
 800763c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	0759      	lsls	r1, r3, #29
 8007642:	d505      	bpl.n	8007650 <__sflush_r+0x44>
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	1ad2      	subs	r2, r2, r3
 8007648:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800764a:	b10b      	cbz	r3, 8007650 <__sflush_r+0x44>
 800764c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	2300      	movs	r3, #0
 8007652:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007654:	6a21      	ldr	r1, [r4, #32]
 8007656:	4628      	mov	r0, r5
 8007658:	47b0      	blx	r6
 800765a:	1c43      	adds	r3, r0, #1
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	d106      	bne.n	800766e <__sflush_r+0x62>
 8007660:	6829      	ldr	r1, [r5, #0]
 8007662:	291d      	cmp	r1, #29
 8007664:	d82b      	bhi.n	80076be <__sflush_r+0xb2>
 8007666:	4a2a      	ldr	r2, [pc, #168]	@ (8007710 <__sflush_r+0x104>)
 8007668:	410a      	asrs	r2, r1
 800766a:	07d6      	lsls	r6, r2, #31
 800766c:	d427      	bmi.n	80076be <__sflush_r+0xb2>
 800766e:	2200      	movs	r2, #0
 8007670:	6062      	str	r2, [r4, #4]
 8007672:	04d9      	lsls	r1, r3, #19
 8007674:	6922      	ldr	r2, [r4, #16]
 8007676:	6022      	str	r2, [r4, #0]
 8007678:	d504      	bpl.n	8007684 <__sflush_r+0x78>
 800767a:	1c42      	adds	r2, r0, #1
 800767c:	d101      	bne.n	8007682 <__sflush_r+0x76>
 800767e:	682b      	ldr	r3, [r5, #0]
 8007680:	b903      	cbnz	r3, 8007684 <__sflush_r+0x78>
 8007682:	6560      	str	r0, [r4, #84]	@ 0x54
 8007684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007686:	602f      	str	r7, [r5, #0]
 8007688:	b1b9      	cbz	r1, 80076ba <__sflush_r+0xae>
 800768a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800768e:	4299      	cmp	r1, r3
 8007690:	d002      	beq.n	8007698 <__sflush_r+0x8c>
 8007692:	4628      	mov	r0, r5
 8007694:	f7ff fb48 	bl	8006d28 <_free_r>
 8007698:	2300      	movs	r3, #0
 800769a:	6363      	str	r3, [r4, #52]	@ 0x34
 800769c:	e00d      	b.n	80076ba <__sflush_r+0xae>
 800769e:	2301      	movs	r3, #1
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b0      	blx	r6
 80076a4:	4602      	mov	r2, r0
 80076a6:	1c50      	adds	r0, r2, #1
 80076a8:	d1c9      	bne.n	800763e <__sflush_r+0x32>
 80076aa:	682b      	ldr	r3, [r5, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0c6      	beq.n	800763e <__sflush_r+0x32>
 80076b0:	2b1d      	cmp	r3, #29
 80076b2:	d001      	beq.n	80076b8 <__sflush_r+0xac>
 80076b4:	2b16      	cmp	r3, #22
 80076b6:	d11e      	bne.n	80076f6 <__sflush_r+0xea>
 80076b8:	602f      	str	r7, [r5, #0]
 80076ba:	2000      	movs	r0, #0
 80076bc:	e022      	b.n	8007704 <__sflush_r+0xf8>
 80076be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076c2:	b21b      	sxth	r3, r3
 80076c4:	e01b      	b.n	80076fe <__sflush_r+0xf2>
 80076c6:	690f      	ldr	r7, [r1, #16]
 80076c8:	2f00      	cmp	r7, #0
 80076ca:	d0f6      	beq.n	80076ba <__sflush_r+0xae>
 80076cc:	0793      	lsls	r3, r2, #30
 80076ce:	680e      	ldr	r6, [r1, #0]
 80076d0:	bf08      	it	eq
 80076d2:	694b      	ldreq	r3, [r1, #20]
 80076d4:	600f      	str	r7, [r1, #0]
 80076d6:	bf18      	it	ne
 80076d8:	2300      	movne	r3, #0
 80076da:	eba6 0807 	sub.w	r8, r6, r7
 80076de:	608b      	str	r3, [r1, #8]
 80076e0:	f1b8 0f00 	cmp.w	r8, #0
 80076e4:	dde9      	ble.n	80076ba <__sflush_r+0xae>
 80076e6:	6a21      	ldr	r1, [r4, #32]
 80076e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076ea:	4643      	mov	r3, r8
 80076ec:	463a      	mov	r2, r7
 80076ee:	4628      	mov	r0, r5
 80076f0:	47b0      	blx	r6
 80076f2:	2800      	cmp	r0, #0
 80076f4:	dc08      	bgt.n	8007708 <__sflush_r+0xfc>
 80076f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	f04f 30ff 	mov.w	r0, #4294967295
 8007704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007708:	4407      	add	r7, r0
 800770a:	eba8 0800 	sub.w	r8, r8, r0
 800770e:	e7e7      	b.n	80076e0 <__sflush_r+0xd4>
 8007710:	dfbffffe 	.word	0xdfbffffe

08007714 <_fflush_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	690b      	ldr	r3, [r1, #16]
 8007718:	4605      	mov	r5, r0
 800771a:	460c      	mov	r4, r1
 800771c:	b913      	cbnz	r3, 8007724 <_fflush_r+0x10>
 800771e:	2500      	movs	r5, #0
 8007720:	4628      	mov	r0, r5
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	b118      	cbz	r0, 800772e <_fflush_r+0x1a>
 8007726:	6a03      	ldr	r3, [r0, #32]
 8007728:	b90b      	cbnz	r3, 800772e <_fflush_r+0x1a>
 800772a:	f7ff f8b3 	bl	8006894 <__sinit>
 800772e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0f3      	beq.n	800771e <_fflush_r+0xa>
 8007736:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007738:	07d0      	lsls	r0, r2, #31
 800773a:	d404      	bmi.n	8007746 <_fflush_r+0x32>
 800773c:	0599      	lsls	r1, r3, #22
 800773e:	d402      	bmi.n	8007746 <_fflush_r+0x32>
 8007740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007742:	f7ff fae0 	bl	8006d06 <__retarget_lock_acquire_recursive>
 8007746:	4628      	mov	r0, r5
 8007748:	4621      	mov	r1, r4
 800774a:	f7ff ff5f 	bl	800760c <__sflush_r>
 800774e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007750:	07da      	lsls	r2, r3, #31
 8007752:	4605      	mov	r5, r0
 8007754:	d4e4      	bmi.n	8007720 <_fflush_r+0xc>
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	059b      	lsls	r3, r3, #22
 800775a:	d4e1      	bmi.n	8007720 <_fflush_r+0xc>
 800775c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800775e:	f7ff fad3 	bl	8006d08 <__retarget_lock_release_recursive>
 8007762:	e7dd      	b.n	8007720 <_fflush_r+0xc>

08007764 <__swhatbuf_r>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	460c      	mov	r4, r1
 8007768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800776c:	2900      	cmp	r1, #0
 800776e:	b096      	sub	sp, #88	@ 0x58
 8007770:	4615      	mov	r5, r2
 8007772:	461e      	mov	r6, r3
 8007774:	da0d      	bge.n	8007792 <__swhatbuf_r+0x2e>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800777c:	f04f 0100 	mov.w	r1, #0
 8007780:	bf14      	ite	ne
 8007782:	2340      	movne	r3, #64	@ 0x40
 8007784:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007788:	2000      	movs	r0, #0
 800778a:	6031      	str	r1, [r6, #0]
 800778c:	602b      	str	r3, [r5, #0]
 800778e:	b016      	add	sp, #88	@ 0x58
 8007790:	bd70      	pop	{r4, r5, r6, pc}
 8007792:	466a      	mov	r2, sp
 8007794:	f000 f862 	bl	800785c <_fstat_r>
 8007798:	2800      	cmp	r0, #0
 800779a:	dbec      	blt.n	8007776 <__swhatbuf_r+0x12>
 800779c:	9901      	ldr	r1, [sp, #4]
 800779e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80077a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80077a6:	4259      	negs	r1, r3
 80077a8:	4159      	adcs	r1, r3
 80077aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077ae:	e7eb      	b.n	8007788 <__swhatbuf_r+0x24>

080077b0 <__smakebuf_r>:
 80077b0:	898b      	ldrh	r3, [r1, #12]
 80077b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077b4:	079d      	lsls	r5, r3, #30
 80077b6:	4606      	mov	r6, r0
 80077b8:	460c      	mov	r4, r1
 80077ba:	d507      	bpl.n	80077cc <__smakebuf_r+0x1c>
 80077bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	2301      	movs	r3, #1
 80077c6:	6163      	str	r3, [r4, #20]
 80077c8:	b003      	add	sp, #12
 80077ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077cc:	ab01      	add	r3, sp, #4
 80077ce:	466a      	mov	r2, sp
 80077d0:	f7ff ffc8 	bl	8007764 <__swhatbuf_r>
 80077d4:	9f00      	ldr	r7, [sp, #0]
 80077d6:	4605      	mov	r5, r0
 80077d8:	4639      	mov	r1, r7
 80077da:	4630      	mov	r0, r6
 80077dc:	f7fe ff42 	bl	8006664 <_malloc_r>
 80077e0:	b948      	cbnz	r0, 80077f6 <__smakebuf_r+0x46>
 80077e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077e6:	059a      	lsls	r2, r3, #22
 80077e8:	d4ee      	bmi.n	80077c8 <__smakebuf_r+0x18>
 80077ea:	f023 0303 	bic.w	r3, r3, #3
 80077ee:	f043 0302 	orr.w	r3, r3, #2
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	e7e2      	b.n	80077bc <__smakebuf_r+0xc>
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	6020      	str	r0, [r4, #0]
 80077fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	9b01      	ldr	r3, [sp, #4]
 8007802:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007806:	b15b      	cbz	r3, 8007820 <__smakebuf_r+0x70>
 8007808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800780c:	4630      	mov	r0, r6
 800780e:	f000 f837 	bl	8007880 <_isatty_r>
 8007812:	b128      	cbz	r0, 8007820 <__smakebuf_r+0x70>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f023 0303 	bic.w	r3, r3, #3
 800781a:	f043 0301 	orr.w	r3, r3, #1
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	431d      	orrs	r5, r3
 8007824:	81a5      	strh	r5, [r4, #12]
 8007826:	e7cf      	b.n	80077c8 <__smakebuf_r+0x18>

08007828 <memmove>:
 8007828:	4288      	cmp	r0, r1
 800782a:	b510      	push	{r4, lr}
 800782c:	eb01 0402 	add.w	r4, r1, r2
 8007830:	d902      	bls.n	8007838 <memmove+0x10>
 8007832:	4284      	cmp	r4, r0
 8007834:	4623      	mov	r3, r4
 8007836:	d807      	bhi.n	8007848 <memmove+0x20>
 8007838:	1e43      	subs	r3, r0, #1
 800783a:	42a1      	cmp	r1, r4
 800783c:	d008      	beq.n	8007850 <memmove+0x28>
 800783e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007842:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007846:	e7f8      	b.n	800783a <memmove+0x12>
 8007848:	4402      	add	r2, r0
 800784a:	4601      	mov	r1, r0
 800784c:	428a      	cmp	r2, r1
 800784e:	d100      	bne.n	8007852 <memmove+0x2a>
 8007850:	bd10      	pop	{r4, pc}
 8007852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800785a:	e7f7      	b.n	800784c <memmove+0x24>

0800785c <_fstat_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4d07      	ldr	r5, [pc, #28]	@ (800787c <_fstat_r+0x20>)
 8007860:	2300      	movs	r3, #0
 8007862:	4604      	mov	r4, r0
 8007864:	4608      	mov	r0, r1
 8007866:	4611      	mov	r1, r2
 8007868:	602b      	str	r3, [r5, #0]
 800786a:	f7fb f86a 	bl	8002942 <_fstat>
 800786e:	1c43      	adds	r3, r0, #1
 8007870:	d102      	bne.n	8007878 <_fstat_r+0x1c>
 8007872:	682b      	ldr	r3, [r5, #0]
 8007874:	b103      	cbz	r3, 8007878 <_fstat_r+0x1c>
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	bd38      	pop	{r3, r4, r5, pc}
 800787a:	bf00      	nop
 800787c:	2000095c 	.word	0x2000095c

08007880 <_isatty_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d06      	ldr	r5, [pc, #24]	@ (800789c <_isatty_r+0x1c>)
 8007884:	2300      	movs	r3, #0
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	602b      	str	r3, [r5, #0]
 800788c:	f7fb f869 	bl	8002962 <_isatty>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_isatty_r+0x1a>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b103      	cbz	r3, 800789a <_isatty_r+0x1a>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	2000095c 	.word	0x2000095c

080078a0 <_realloc_r>:
 80078a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a4:	4680      	mov	r8, r0
 80078a6:	4615      	mov	r5, r2
 80078a8:	460c      	mov	r4, r1
 80078aa:	b921      	cbnz	r1, 80078b6 <_realloc_r+0x16>
 80078ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	4611      	mov	r1, r2
 80078b2:	f7fe bed7 	b.w	8006664 <_malloc_r>
 80078b6:	b92a      	cbnz	r2, 80078c4 <_realloc_r+0x24>
 80078b8:	f7ff fa36 	bl	8006d28 <_free_r>
 80078bc:	2400      	movs	r4, #0
 80078be:	4620      	mov	r0, r4
 80078c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c4:	f000 f81a 	bl	80078fc <_malloc_usable_size_r>
 80078c8:	4285      	cmp	r5, r0
 80078ca:	4606      	mov	r6, r0
 80078cc:	d802      	bhi.n	80078d4 <_realloc_r+0x34>
 80078ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80078d2:	d8f4      	bhi.n	80078be <_realloc_r+0x1e>
 80078d4:	4629      	mov	r1, r5
 80078d6:	4640      	mov	r0, r8
 80078d8:	f7fe fec4 	bl	8006664 <_malloc_r>
 80078dc:	4607      	mov	r7, r0
 80078de:	2800      	cmp	r0, #0
 80078e0:	d0ec      	beq.n	80078bc <_realloc_r+0x1c>
 80078e2:	42b5      	cmp	r5, r6
 80078e4:	462a      	mov	r2, r5
 80078e6:	4621      	mov	r1, r4
 80078e8:	bf28      	it	cs
 80078ea:	4632      	movcs	r2, r6
 80078ec:	f7ff fa0d 	bl	8006d0a <memcpy>
 80078f0:	4621      	mov	r1, r4
 80078f2:	4640      	mov	r0, r8
 80078f4:	f7ff fa18 	bl	8006d28 <_free_r>
 80078f8:	463c      	mov	r4, r7
 80078fa:	e7e0      	b.n	80078be <_realloc_r+0x1e>

080078fc <_malloc_usable_size_r>:
 80078fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007900:	1f18      	subs	r0, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfbc      	itt	lt
 8007906:	580b      	ldrlt	r3, [r1, r0]
 8007908:	18c0      	addlt	r0, r0, r3
 800790a:	4770      	bx	lr

0800790c <_init>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr

08007918 <_fini>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr
