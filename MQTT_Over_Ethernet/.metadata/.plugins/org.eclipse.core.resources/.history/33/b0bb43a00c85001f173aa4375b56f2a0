
11_w5500_mqtt_publish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000755c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  080076fc  080076fc  000086fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a80  08007a80  00009130  2**0
                  CONTENTS
  4 .ARM          00000008  08007a80  08007a80  00008a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a88  08007a88  00009130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a88  08007a88  00008a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a8c  08007a8c  00008a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08007a90  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  20000130  08007bc0  00009130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08007bc0  00009974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009130  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083c9  00000000  00000000  00009160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002419  00000000  00000000  00011529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00013948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000682  00000000  00000000  000141b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000119a3  00000000  00000000  0001483a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b616  00000000  00000000  000261dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b06f  00000000  00000000  000317f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008c862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  0008c8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0008f128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000130 	.word	0x20000130
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080076e4 	.word	0x080076e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000134 	.word	0x20000134
 80001dc:	080076e4 	.word	0x080076e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d003      	beq.n	80002d0 <getNextPacketId+0x1c>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	e000      	b.n	80002d2 <getNextPacketId+0x1e>
 80002d0:	2301      	movs	r3, #1
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	6013      	str	r3, [r2, #0]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
}
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 80002e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e8:	b087      	sub	sp, #28
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	60f8      	str	r0, [r7, #12]
 80002ee:	60b9      	str	r1, [r7, #8]
 80002f0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295
 80002f6:	617b      	str	r3, [r7, #20]
        sent = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80002fc:	e018      	b.n	8000330 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000302:	689c      	ldr	r4, [r3, #8]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	691a      	ldr	r2, [r3, #16]
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	18d6      	adds	r6, r2, r3
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f001 fb11 	bl	8001938 <TimerLeftMS>
 8000316:	4603      	mov	r3, r0
 8000318:	68ba      	ldr	r2, [r7, #8]
 800031a:	4631      	mov	r1, r6
 800031c:	4628      	mov	r0, r5
 800031e:	47a0      	blx	r4
 8000320:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	2b00      	cmp	r3, #0
 8000326:	db0e      	blt.n	8000346 <sendPacket+0x60>
            break;
        sent += rc;
 8000328:	693a      	ldr	r2, [r7, #16]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	4413      	add	r3, r2
 800032e:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8000330:	693a      	ldr	r2, [r7, #16]
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	429a      	cmp	r2, r3
 8000336:	da07      	bge.n	8000348 <sendPacket+0x62>
 8000338:	6878      	ldr	r0, [r7, #4]
 800033a:	f001 fabb 	bl	80018b4 <TimerIsExpired>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0dc      	beq.n	80002fe <sendPacket+0x18>
 8000344:	e000      	b.n	8000348 <sendPacket+0x62>
            break;
 8000346:	bf00      	nop
    }
    if (sent == length)
 8000348:	693a      	ldr	r2, [r7, #16]
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	429a      	cmp	r2, r3
 800034e:	d10b      	bne.n	8000368 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4619      	mov	r1, r3
 800035c:	4610      	mov	r0, r2
 800035e:	f001 fad3 	bl	8001908 <TimerCountdown>
        rc = SUCCESS_;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	e002      	b.n	800036e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8000368:	f04f 33ff 	mov.w	r3, #4294967295
 800036c:	617b      	str	r3, [r7, #20]
    return rc;
 800036e:	697b      	ldr	r3, [r7, #20]
}
 8000370:	4618      	mov	r0, r3
 8000372:	371c      	adds	r7, #28
 8000374:	46bd      	mov	sp, r7
 8000376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000378 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
 8000384:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	68ba      	ldr	r2, [r7, #8]
 800038a:	655a      	str	r2, [r3, #84]	@ 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e008      	b.n	80003a4 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	697a      	ldr	r2, [r7, #20]
 8000396:	3205      	adds	r2, #5
 8000398:	2100      	movs	r1, #0
 800039a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	ddf3      	ble.n	8000392 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	6a3a      	ldr	r2, [r7, #32]
 80003ba:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80003c0:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80003c6:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	2200      	movs	r2, #0
 80003d2:	625a      	str	r2, [r3, #36]	@ 0x24
    c->ping_outstanding = 0;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	2200      	movs	r2, #0
 80003d8:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2200      	movs	r2, #0
 80003de:	651a      	str	r2, [r3, #80]	@ 0x50
	  c->next_packetid = 1;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	2201      	movs	r2, #1
 80003e4:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3358      	adds	r3, #88	@ 0x58
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 fa54 	bl	8001898 <TimerInit>
    TimerInit(&c->last_received);
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3360      	adds	r3, #96	@ 0x60
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fa4f 	bl	8001898 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8000402:	b590      	push	{r4, r7, lr}
 8000404:	b08b      	sub	sp, #44	@ 0x2c
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800040e:	2301      	movs	r3, #1
 8000410:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8000416:	2304      	movs	r3, #4
 8000418:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8000420:	f04f 33ff 	mov.w	r3, #4294967295
 8000424:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000426:	6a3b      	ldr	r3, [r7, #32]
 8000428:	3301      	adds	r3, #1
 800042a:	623b      	str	r3, [r7, #32]
 800042c:	6a3a      	ldr	r2, [r7, #32]
 800042e:	69fb      	ldr	r3, [r7, #28]
 8000430:	429a      	cmp	r2, r3
 8000432:	dd03      	ble.n	800043c <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8000434:	f04f 33ff 	mov.w	r3, #4294967295
 8000438:	61bb      	str	r3, [r7, #24]
            goto exit;
 800043a:	e021      	b.n	8000480 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000440:	685c      	ldr	r4, [r3, #4]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8000446:	f107 0117 	add.w	r1, r7, #23
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2201      	movs	r2, #1
 800044e:	47a0      	blx	r4
 8000450:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d112      	bne.n	800047e <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	7dfb      	ldrb	r3, [r7, #23]
 800045e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000462:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000464:	fb01 f303 	mul.w	r3, r1, r3
 8000468:	441a      	add	r2, r3
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800046e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000470:	01db      	lsls	r3, r3, #7
 8000472:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 8000474:	7dfb      	ldrb	r3, [r7, #23]
 8000476:	b25b      	sxtb	r3, r3
 8000478:	2b00      	cmp	r3, #0
 800047a:	dbd1      	blt.n	8000420 <decodePacket+0x1e>
exit:
 800047c:	e000      	b.n	8000480 <decodePacket+0x7e>
            goto exit;
 800047e:	bf00      	nop
    return len;
 8000480:	6a3b      	ldr	r3, [r7, #32]
}
 8000482:	4618      	mov	r0, r3
 8000484:	372c      	adds	r7, #44	@ 0x2c
 8000486:	46bd      	mov	sp, r7
 8000488:	bd90      	pop	{r4, r7, pc}

0800048a <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800048a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048c:	b089      	sub	sp, #36	@ 0x24
 800048e:	af00      	add	r7, sp, #0
 8000490:	60f8      	str	r0, [r7, #12]
 8000492:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
    int len = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80004a4:	685c      	ldr	r4, [r3, #4]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	695e      	ldr	r6, [r3, #20]
 80004ae:	68b8      	ldr	r0, [r7, #8]
 80004b0:	f001 fa42 	bl	8001938 <TimerLeftMS>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2201      	movs	r2, #1
 80004b8:	4631      	mov	r1, r6
 80004ba:	4628      	mov	r0, r5
 80004bc:	47a0      	blx	r4
 80004be:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d15d      	bne.n	8000582 <readPacket+0xf8>
        goto exit;

    len = 1;
 80004c6:	2301      	movs	r3, #1
 80004c8:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 80004ca:	68b8      	ldr	r0, [r7, #8]
 80004cc:	f001 fa34 	bl	8001938 <TimerLeftMS>
 80004d0:	4602      	mov	r2, r0
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	4619      	mov	r1, r3
 80004d8:	68f8      	ldr	r0, [r7, #12]
 80004da:	f7ff ff92 	bl	8000402 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	3301      	adds	r3, #1
 80004e4:	693a      	ldr	r2, [r7, #16]
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fed6 	bl	800129a <MQTTPacket_encode>
 80004ee:	4602      	mov	r2, r0
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	4413      	add	r3, r2
 80004f4:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	68da      	ldr	r2, [r3, #12]
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	4293      	cmp	r3, r2
 8000502:	d203      	bcs.n	800050c <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8000504:	f06f 0301 	mvn.w	r3, #1
 8000508:	61fb      	str	r3, [r7, #28]
        goto exit;
 800050a:	e03d      	b.n	8000588 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	2b00      	cmp	r3, #0
 8000510:	dd20      	ble.n	8000554 <readPacket+0xca>
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000516:	685c      	ldr	r4, [r3, #4]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	69bb      	ldr	r3, [r7, #24]
 8000522:	18d6      	adds	r6, r2, r3
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	68b8      	ldr	r0, [r7, #8]
 800052a:	f001 fa05 	bl	8001938 <TimerLeftMS>
 800052e:	4603      	mov	r3, r0
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4631      	mov	r1, r6
 8000534:	4628      	mov	r0, r5
 8000536:	47a0      	blx	r4
 8000538:	4602      	mov	r2, r0
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	429a      	cmp	r2, r3
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <readPacket+0xca>
        rc = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
        goto exit;
 8000552:	e019      	b.n	8000588 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800055c:	7d3b      	ldrb	r3, [r7, #20]
 800055e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000562:	b2db      	uxtb	r3, r3
 8000564:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00b      	beq.n	8000586 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4619      	mov	r1, r3
 800057a:	4610      	mov	r0, r2
 800057c:	f001 f9c4 	bl	8001908 <TimerCountdown>
 8000580:	e002      	b.n	8000588 <readPacket+0xfe>
        goto exit;
 8000582:	bf00      	nop
 8000584:	e000      	b.n	8000588 <readPacket+0xfe>
exit:
 8000586:	bf00      	nop
    return rc;
 8000588:	69fb      	ldr	r3, [r7, #28]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3724      	adds	r7, #36	@ 0x24
 800058e:	46bd      	mov	sp, r7
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000592 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8000592:	b480      	push	{r7}
 8000594:	b087      	sub	sp, #28
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	461a      	mov	r2, r3
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	4413      	add	r3, r2
 80005b0:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 80005b2:	e039      	b.n	8000628 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80005ba:	d103      	bne.n	80005c4 <isTopicMatched+0x32>
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80005c2:	d13a      	bne.n	800063a <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b2b      	cmp	r3, #43	@ 0x2b
 80005ca:	d009      	beq.n	80005e0 <isTopicMatched+0x4e>
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b23      	cmp	r3, #35	@ 0x23
 80005d2:	d005      	beq.n	80005e0 <isTopicMatched+0x4e>
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d12e      	bne.n	800063e <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b2b      	cmp	r3, #43	@ 0x2b
 80005e6:	d112      	bne.n	800060e <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	3301      	adds	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80005ee:	e005      	b.n	80005fc <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	3301      	adds	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	3301      	adds	r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	429a      	cmp	r2, r3
 8000602:	d20b      	bcs.n	800061c <isTopicMatched+0x8a>
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b2f      	cmp	r3, #47	@ 0x2f
 800060a:	d1f1      	bne.n	80005f0 <isTopicMatched+0x5e>
 800060c:	e006      	b.n	800061c <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b23      	cmp	r3, #35	@ 0x23
 8000614:	d102      	bne.n	800061c <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	3b01      	subs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
        curf++;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3301      	adds	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
        curn++;
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	3301      	adds	r3, #1
 8000626:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d007      	beq.n	8000640 <isTopicMatched+0xae>
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	429a      	cmp	r2, r3
 8000636:	d3bd      	bcc.n	80005b4 <isTopicMatched+0x22>
 8000638:	e002      	b.n	8000640 <isTopicMatched+0xae>
            break;
 800063a:	bf00      	nop
 800063c:	e000      	b.n	8000640 <isTopicMatched+0xae>
            break;
 800063e:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8000640:	693a      	ldr	r2, [r7, #16]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	429a      	cmp	r2, r3
 8000646:	d105      	bne.n	8000654 <isTopicMatched+0xc2>
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d101      	bne.n	8000654 <isTopicMatched+0xc2>
 8000650:	2301      	movs	r3, #1
 8000652:	e000      	b.n	8000656 <isTopicMatched+0xc4>
 8000654:	2300      	movs	r3, #0
 8000656:	b2db      	uxtb	r3, r3
}
 8000658:	4618      	mov	r0, r3
 800065a:	371c      	adds	r7, #28
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
 800067a:	e03c      	b.n	80006f6 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000680:	3205      	adds	r2, #5
 8000682:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d032      	beq.n	80006f0 <deliverMessage+0x8c>
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800068e:	3205      	adds	r2, #5
 8000690:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000694:	4619      	mov	r1, r3
 8000696:	68b8      	ldr	r0, [r7, #8]
 8000698:	f000 ffce 	bl	8001638 <MQTTPacket_equals>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d10b      	bne.n	80006ba <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006a6:	3205      	adds	r2, #5
 80006a8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006ac:	68b9      	ldr	r1, [r7, #8]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff6f 	bl	8000592 <isTopicMatched>
 80006b4:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d01a      	beq.n	80006f0 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006be:	3305      	adds	r3, #5
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	4413      	add	r3, r2
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d012      	beq.n	80006f0 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fddc 	bl	8000290 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006dc:	3305      	adds	r3, #5
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	4413      	add	r3, r2
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f107 0218 	add.w	r2, r7, #24
 80006e8:	4610      	mov	r0, r2
 80006ea:	4798      	blx	r3
                rc = SUCCESS_;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80006f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f2:	3301      	adds	r3, #1
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80006f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	ddbf      	ble.n	800067c <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000702:	d112      	bne.n	800072a <deliverMessage+0xc6>
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00e      	beq.n	800072a <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	68b9      	ldr	r1, [r7, #8]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fdbb 	bl	8000290 <NewMessageData>
        c->defaultMessageHandler(&md);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800071e:	f107 0210 	add.w	r2, r7, #16
 8000722:	4610      	mov	r0, r2
 8000724:	4798      	blx	r3
        rc = SUCCESS_;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800072a:	6a3b      	ldr	r3, [r7, #32]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <keepalive>:


int keepalive(MQTTClient* c)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    int rc = SUCCESS_;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d03e      	beq.n	80007c6 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3358      	adds	r3, #88	@ 0x58
 800074c:	4618      	mov	r0, r3
 800074e:	f001 f8b1 	bl	80018b4 <TimerIsExpired>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d107      	bne.n	8000768 <keepalive+0x34>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3360      	adds	r3, #96	@ 0x60
 800075c:	4618      	mov	r0, r3
 800075e:	f001 f8a9 	bl	80018b4 <TimerIsExpired>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d030      	beq.n	80007ca <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7f1b      	ldrb	r3, [r3, #28]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d003      	beq.n	8000778 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	e029      	b.n	80007cc <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f88b 	bl	8001898 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f8a8 	bl	80018e0 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	691a      	ldr	r2, [r3, #16]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	4619      	mov	r1, r3
 800079a:	4610      	mov	r0, r2
 800079c:	f000 fcb1 	bl	8001102 <MQTTSerialize_pingreq>
 80007a0:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS_) // send the ping packet
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dd11      	ble.n	80007cc <keepalive+0x98>
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	461a      	mov	r2, r3
 80007ae:	6939      	ldr	r1, [r7, #16]
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fd98 	bl	80002e6 <sendPacket>
 80007b6:	6178      	str	r0, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d106      	bne.n	80007cc <keepalive+0x98>
                c->ping_outstanding = 1;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2201      	movs	r2, #1
 80007c2:	771a      	strb	r2, [r3, #28]
 80007c4:	e002      	b.n	80007cc <keepalive+0x98>
        goto exit;
 80007c6:	bf00      	nop
 80007c8:	e000      	b.n	80007cc <keepalive+0x98>
        }
    }

exit:
 80007ca:	bf00      	nop
    return rc;
 80007cc:	697b      	ldr	r3, [r7, #20]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
    int i = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e008      	b.n	80007fa <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	3205      	adds	r2, #5
 80007ee:	2100      	movs	r1, #0
 80007f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	ddf3      	ble.n	80007e8 <MQTTCleanSession+0x12>
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffd3 	bl	80007d6 <MQTTCleanSession>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	b095      	sub	sp, #84	@ 0x54
 800083c:	af06      	add	r7, sp, #24
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    int len = 0,
 8000842:	2300      	movs	r3, #0
 8000844:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = SUCCESS_;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	@ 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 800084a:	6839      	ldr	r1, [r7, #0]
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff fe1c 	bl	800048a <readPacket>
 8000852:	62f8      	str	r0, [r7, #44]	@ 0x2c

    switch (packet_type)
 8000854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000856:	2b0d      	cmp	r3, #13
 8000858:	d81e      	bhi.n	8000898 <cycle+0x60>
 800085a:	a201      	add	r2, pc, #4	@ (adr r2, 8000860 <cycle+0x28>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	080009ef 	.word	0x080009ef
 8000864:	08000899 	.word	0x08000899
 8000868:	080009ef 	.word	0x080009ef
 800086c:	0800089f 	.word	0x0800089f
 8000870:	080009ef 	.word	0x080009ef
 8000874:	0800096b 	.word	0x0800096b
 8000878:	0800096b 	.word	0x0800096b
 800087c:	080009ef 	.word	0x080009ef
 8000880:	08000899 	.word	0x08000899
 8000884:	080009ef 	.word	0x080009ef
 8000888:	08000899 	.word	0x08000899
 800088c:	080009ef 	.word	0x080009ef
 8000890:	08000899 	.word	0x08000899
 8000894:	080009e7 	.word	0x080009e7
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8000898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800089a:	633b      	str	r3, [r7, #48]	@ 0x30
            goto exit;
 800089c:	e0b9      	b.n	8000a12 <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80008aa:	4616      	mov	r6, r2
 80008ac:	f107 0210 	add.w	r2, r7, #16
 80008b0:	1d15      	adds	r5, r2, #4
 80008b2:	f107 0210 	add.w	r2, r7, #16
 80008b6:	1c54      	adds	r4, r2, #1
 80008b8:	f107 010c 	add.w	r1, r7, #12
 80008bc:	f107 0210 	add.w	r2, r7, #16
 80008c0:	1c90      	adds	r0, r2, #2
 80008c2:	9604      	str	r6, [sp, #16]
 80008c4:	9303      	str	r3, [sp, #12]
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	330c      	adds	r3, #12
 80008cc:	9302      	str	r3, [sp, #8]
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	3308      	adds	r3, #8
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	462b      	mov	r3, r5
 80008de:	4622      	mov	r2, r4
 80008e0:	f000 fc1e 	bl	8001120 <MQTTDeserialize_publish>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	f040 8090 	bne.w	8000a0c <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80008f2:	f107 0210 	add.w	r2, r7, #16
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	4619      	mov	r1, r3
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff feb1 	bl	8000664 <deliverMessage>
            if (msg.qos != QOS0)
 8000902:	7c3b      	ldrb	r3, [r7, #16]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d074      	beq.n	80009f2 <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8000908:	7c3b      	ldrb	r3, [r7, #16]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d10c      	bne.n	8000928 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6918      	ldr	r0, [r3, #16]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	4619      	mov	r1, r3
 8000918:	8abb      	ldrh	r3, [r7, #20]
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2300      	movs	r3, #0
 800091e:	2204      	movs	r2, #4
 8000920:	f000 ff57 	bl	80017d2 <MQTTSerialize_ack>
 8000924:	6378      	str	r0, [r7, #52]	@ 0x34
 8000926:	e00e      	b.n	8000946 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8000928:	7c3b      	ldrb	r3, [r7, #16]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d10b      	bne.n	8000946 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6918      	ldr	r0, [r3, #16]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	4619      	mov	r1, r3
 8000938:	8abb      	ldrh	r3, [r7, #20]
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2205      	movs	r2, #5
 8000940:	f000 ff47 	bl	80017d2 <MQTTSerialize_ack>
 8000944:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 8000946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000948:	2b00      	cmp	r3, #0
 800094a:	dc03      	bgt.n	8000954 <cycle+0x11c>
                    rc = FAILURE;
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	633b      	str	r3, [r7, #48]	@ 0x30
 8000952:	e005      	b.n	8000960 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fcc4 	bl	80002e6 <sendPacket>
 800095e:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 8000960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000966:	d144      	bne.n	80009f2 <cycle+0x1ba>
                    goto exit; // there was a problem
 8000968:	e053      	b.n	8000a12 <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	695c      	ldr	r4, [r3, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	f107 020a 	add.w	r2, r7, #10
 8000976:	f107 0109 	add.w	r1, r7, #9
 800097a:	f107 0008 	add.w	r0, r7, #8
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	4623      	mov	r3, r4
 8000982:	f000 fc3f 	bl	8001204 <MQTTDeserialize_ack>
 8000986:	4603      	mov	r3, r0
 8000988:	2b01      	cmp	r3, #1
 800098a:	d003      	beq.n	8000994 <cycle+0x15c>
                rc = FAILURE;
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	633b      	str	r3, [r7, #48]	@ 0x30
 8000992:	e023      	b.n	80009dc <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6918      	ldr	r0, [r3, #16]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	4619      	mov	r1, r3
 800099e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009a0:	2b05      	cmp	r3, #5
 80009a2:	d101      	bne.n	80009a8 <cycle+0x170>
 80009a4:	2206      	movs	r2, #6
 80009a6:	e000      	b.n	80009aa <cycle+0x172>
 80009a8:	2207      	movs	r2, #7
 80009aa:	897b      	ldrh	r3, [r7, #10]
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	f000 ff0f 	bl	80017d2 <MQTTSerialize_ack>
 80009b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80009b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dc03      	bgt.n	80009c4 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80009c2:	e00b      	b.n	80009dc <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS_) // send the PUBREL packet
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fc8c 	bl	80002e6 <sendPacket>
 80009ce:	6338      	str	r0, [r7, #48]	@ 0x30
 80009d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 80009dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e2:	d108      	bne.n	80009f6 <cycle+0x1be>
                goto exit; // there was a problem
 80009e4:	e015      	b.n	8000a12 <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	771a      	strb	r2, [r3, #28]
            break;
 80009ec:	e004      	b.n	80009f8 <cycle+0x1c0>
            break;
 80009ee:	bf00      	nop
 80009f0:	e002      	b.n	80009f8 <cycle+0x1c0>
            break;
 80009f2:	bf00      	nop
 80009f4:	e000      	b.n	80009f8 <cycle+0x1c0>
            break;
 80009f6:	bf00      	nop
    }

    if (keepalive(c) != SUCCESS_) {
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fe9b 	bl	8000734 <keepalive>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
 8000a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a0a:	e002      	b.n	8000a12 <cycle+0x1da>
                goto exit;
 8000a0c:	bf00      	nop
 8000a0e:	e000      	b.n	8000a12 <cycle+0x1da>
    }

exit:
 8000a10:	bf00      	nop
    if (rc == SUCCESS_)
 8000a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <cycle+0x1e6>
        rc = packet_type;
 8000a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a1c:	e006      	b.n	8000a2c <cycle+0x1f4>
    else if (c->isconnected)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6a1b      	ldr	r3, [r3, #32]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <cycle+0x1f4>
        MQTTCloseSession(c);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fef1 	bl	800080e <MQTTCloseSession>
    return rc;
 8000a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	373c      	adds	r7, #60	@ 0x3c
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a36:	bf00      	nop

08000a38 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 ff32 	bl	80018b4 <TimerIsExpired>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10c      	bne.n	8000a70 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff feed 	bl	8000838 <cycle>
 8000a5e:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d004      	beq.n	8000a72 <waitfor+0x3a>
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	daed      	bge.n	8000a4a <waitfor+0x12>
 8000a6e:	e000      	b.n	8000a72 <waitfor+0x3a>
            break; // we timed out
 8000a70:	bf00      	nop

    return rc;
 8000a72:	697b      	ldr	r3, [r7, #20]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09e      	sub	sp, #120	@ 0x78
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8000a8e:	4a43      	ldr	r2, [pc, #268]	@ (8000b9c <MQTTConnectWithResults+0x120>)
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4611      	mov	r1, r2
 8000a96:	2258      	movs	r2, #88	@ 0x58
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f006 f822 	bl	8006ae2 <memcpy>
    int len = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d164      	bne.n	8000b74 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8000aaa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fef2 	bl	8001898 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 ff0e 	bl	80018e0 <TimerCountdownMS>

    if (options == 0)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d102      	bne.n	8000ad0 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	8b1b      	ldrh	r3, [r3, #24]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	7e9b      	ldrb	r3, [r3, #26]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f000 ff09 	bl	8001908 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6918      	ldr	r0, [r3, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f000 f985 	bl	8000e10 <MQTTSerialize_connect>
 8000b06:	6738      	str	r0, [r7, #112]	@ 0x70
 8000b08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	dd34      	ble.n	8000b78 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS_)  // send the connect packet
 8000b0e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b12:	461a      	mov	r2, r3
 8000b14:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff fbe5 	bl	80002e6 <sendPacket>
 8000b1c:	6778      	str	r0, [r7, #116]	@ 0x74
 8000b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d12b      	bne.n	8000b7c <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8000b24:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff ff83 	bl	8000a38 <waitfor>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d119      	bne.n	8000b6c <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	1c58      	adds	r0, r3, #1
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	695a      	ldr	r2, [r3, #20]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	f000 fa49 	bl	8000fe8 <MQTTDeserialize_connack>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d103      	bne.n	8000b64 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b62:	e00c      	b.n	8000b7e <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b6a:	e008      	b.n	8000b7e <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b72:	e004      	b.n	8000b7e <MQTTConnectWithResults+0x102>
		  goto exit;
 8000b74:	bf00      	nop
 8000b76:	e002      	b.n	8000b7e <MQTTConnectWithResults+0x102>
        goto exit;
 8000b78:	bf00      	nop
 8000b7a:	e000      	b.n	8000b7e <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8000b7c:	bf00      	nop

exit:
    if (rc == SUCCESS_)
 8000b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d105      	bne.n	8000b90 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2201      	movs	r2, #1
 8000b88:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8000b90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3778      	adds	r7, #120	@ 0x78
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	080076fc 	.word	0x080076fc

08000ba0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	461a      	mov	r2, r3
 8000bb0:	6839      	ldr	r1, [r7, #0]
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ff62 	bl	8000a7c <MQTTConnectWithResults>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8000bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc4:	b097      	sub	sp, #92	@ 0x5c
 8000bc6:	af08      	add	r7, sp, #32
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicName;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	6a1b      	ldr	r3, [r3, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f000 809b 	beq.w	8000d28 <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 8000bf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fe4e 	bl	8001898 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fe6a 	bl	80018e0 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d003      	beq.n	8000c1c <MQTTPublish+0x5a>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d106      	bne.n	8000c2a <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f7ff fb49 	bl	80002b4 <getNextPacketId>
 8000c22:	4603      	mov	r3, r0
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	469c      	mov	ip, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	469e      	mov	lr, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	785d      	ldrb	r5, [r3, #1]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8000c4c:	9206      	str	r2, [sp, #24]
 8000c4e:	9305      	str	r3, [sp, #20]
 8000c50:	ac02      	add	r4, sp, #8
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c5e:	9601      	str	r6, [sp, #4]
 8000c60:	9500      	str	r5, [sp, #0]
 8000c62:	4673      	mov	r3, lr
 8000c64:	2200      	movs	r2, #0
 8000c66:	4661      	mov	r1, ip
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f000 fd3c 	bl	80016e6 <MQTTSerialize_publish>
 8000c6e:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 8000c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dd5a      	ble.n	8000d2c <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS_) // send the subscribe packet
 8000c76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff fb31 	bl	80002e6 <sendPacket>
 8000c84:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d151      	bne.n	8000d30 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d122      	bne.n	8000cda <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8000c94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f7ff fecb 	bl	8000a38 <waitfor>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d114      	bne.n	8000cd2 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	695c      	ldr	r4, [r3, #20]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	f107 021a 	add.w	r2, r7, #26
 8000cb4:	f107 0119 	add.w	r1, r7, #25
 8000cb8:	f107 0018 	add.w	r0, r7, #24
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	f000 faa0 	bl	8001204 <MQTTDeserialize_ack>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d035      	beq.n	8000d36 <MQTTPublish+0x174>
                rc = FAILURE;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cd0:	e031      	b.n	8000d36 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cd8:	e02d      	b.n	8000d36 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d128      	bne.n	8000d34 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8000ce2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	2107      	movs	r1, #7
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff fea4 	bl	8000a38 <waitfor>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d114      	bne.n	8000d20 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	695c      	ldr	r4, [r3, #20]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	f107 0216 	add.w	r2, r7, #22
 8000d02:	f107 0115 	add.w	r1, r7, #21
 8000d06:	f107 0014 	add.w	r0, r7, #20
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	f000 fa79 	bl	8001204 <MQTTDeserialize_ack>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d00e      	beq.n	8000d36 <MQTTPublish+0x174>
                rc = FAILURE;
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d1e:	e00a      	b.n	8000d36 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d26:	e006      	b.n	8000d36 <MQTTPublish+0x174>
		    goto exit;
 8000d28:	bf00      	nop
 8000d2a:	e004      	b.n	8000d36 <MQTTPublish+0x174>
        goto exit;
 8000d2c:	bf00      	nop
 8000d2e:	e002      	b.n	8000d36 <MQTTPublish+0x174>
        goto exit; // there was a problem
 8000d30:	bf00      	nop
 8000d32:	e000      	b.n	8000d36 <MQTTPublish+0x174>
    }

exit:
 8000d34:	bf00      	nop
    if (rc == FAILURE)
 8000d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3c:	d102      	bne.n	8000d44 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff fd65 	bl	800080e <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8000d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	373c      	adds	r7, #60	@ 0x3c
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d4e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8000d4e:	b590      	push	{r4, r7, lr}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7a1b      	ldrb	r3, [r3, #8]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d102      	bne.n	8000d68 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000d62:	230c      	movs	r3, #12
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e005      	b.n	8000d74 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7a1b      	ldrb	r3, [r3, #8]
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d101      	bne.n	8000d74 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8000d70:	230a      	movs	r3, #10
 8000d72:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	330c      	adds	r3, #12
 8000d78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d7c:	f000 fc43 	bl	8001606 <MQTTstrlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	3302      	adds	r3, #2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7edb      	ldrb	r3, [r3, #27]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d013      	beq.n	8000dba <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3324      	adds	r3, #36	@ 0x24
 8000d96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d9a:	f000 fc34 	bl	8001606 <MQTTstrlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	1c9c      	adds	r4, r3, #2
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3330      	adds	r3, #48	@ 0x30
 8000da6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000daa:	f000 fc2c 	bl	8001606 <MQTTstrlen>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4423      	add	r3, r4
 8000db2:	3302      	adds	r3, #2
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d103      	bne.n	8000dca <MQTTSerialize_connectLength+0x7c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00a      	beq.n	8000de0 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3340      	adds	r3, #64	@ 0x40
 8000dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000dd2:	f000 fc18 	bl	8001606 <MQTTstrlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	3302      	adds	r3, #2
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d103      	bne.n	8000df0 <MQTTSerialize_connectLength+0xa2>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00a      	beq.n	8000e06 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	334c      	adds	r3, #76	@ 0x4c
 8000df4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000df8:	f000 fc05 	bl	8001606 <MQTTstrlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	3302      	adds	r3, #2
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd90      	pop	{r4, r7, pc}

08000e10 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff8b 	bl	8000d4e <MQTTSerialize_connectLength>
 8000e38:	6238      	str	r0, [r7, #32]
 8000e3a:	6a38      	ldr	r0, [r7, #32]
 8000e3c:	f000 fa98 	bl	8001370 <MQTTPacket_len>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	4293      	cmp	r3, r2
 8000e46:	da03      	bge.n	8000e50 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000e48:	f06f 0301 	mvn.w	r3, #1
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8000e4e:	e0c2      	b.n	8000fd6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000e54:	7e3b      	ldrb	r3, [r7, #24]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f362 1307 	bfi	r3, r2, #4, #4
 8000e5c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000e5e:	7e3a      	ldrb	r2, [r7, #24]
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fb11 	bl	800148e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	6a39      	ldr	r1, [r7, #32]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fa12 	bl	800129a <MQTTPacket_encode>
 8000e76:	4602      	mov	r2, r0
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7a1b      	ldrb	r3, [r3, #8]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d10c      	bne.n	8000ea0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4955      	ldr	r1, [pc, #340]	@ (8000fe0 <MQTTSerialize_connect+0x1d0>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fb3c 	bl	800150a <writeCString>
		writeChar(&ptr, (char) 4);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2104      	movs	r1, #4
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 faf8 	bl	800148e <writeChar>
 8000e9e:	e00b      	b.n	8000eb8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	494f      	ldr	r1, [pc, #316]	@ (8000fe4 <MQTTSerialize_connect+0x1d4>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fb2f 	bl	800150a <writeCString>
		writeChar(&ptr, (char) 3);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 faeb 	bl	800148e <writeChar>
	}

	flags.all = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7e9b      	ldrb	r3, [r3, #26]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	7d3b      	ldrb	r3, [r7, #20]
 8000ec8:	f362 0341 	bfi	r3, r2, #1, #1
 8000ecc:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7edb      	ldrb	r3, [r3, #27]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bf14      	ite	ne
 8000ed6:	2301      	movne	r3, #1
 8000ed8:	2300      	moveq	r3, #0
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	7d3b      	ldrb	r3, [r7, #20]
 8000ede:	f362 0382 	bfi	r3, r2, #2, #1
 8000ee2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000ee4:	7d3b      	ldrb	r3, [r7, #20]
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	7d3b      	ldrb	r3, [r7, #20]
 8000efe:	f362 03c4 	bfi	r3, r2, #3, #2
 8000f02:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	7d3b      	ldrb	r3, [r7, #20]
 8000f12:	f362 1345 	bfi	r3, r2, #5, #1
 8000f16:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d103      	bne.n	8000f28 <MQTTSerialize_connect+0x118>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8000f28:	7d3b      	ldrb	r3, [r7, #20]
 8000f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f2e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <MQTTSerialize_connect+0x130>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8000f40:	7d3b      	ldrb	r3, [r7, #20]
 8000f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f46:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8000f48:	7d3a      	ldrb	r2, [r7, #20]
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fa9c 	bl	800148e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	8b1b      	ldrh	r3, [r3, #24]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 faa8 	bl	80014b8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f107 001c 	add.w	r0, r7, #28
 8000f6e:	330c      	adds	r3, #12
 8000f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f72:	f000 fae9 	bl	8001548 <writeMQTTString>
	if (options->willFlag)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7edb      	ldrb	r3, [r3, #27]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00d      	beq.n	8000f9a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f107 001c 	add.w	r0, r7, #28
 8000f84:	3324      	adds	r3, #36	@ 0x24
 8000f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f88:	f000 fade 	bl	8001548 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f107 001c 	add.w	r0, r7, #28
 8000f92:	3330      	adds	r3, #48	@ 0x30
 8000f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f96:	f000 fad7 	bl	8001548 <writeMQTTString>
	}
	if (flags.bits.username)
 8000f9a:	7d3b      	ldrb	r3, [r7, #20]
 8000f9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f107 001c 	add.w	r0, r7, #28
 8000fac:	3340      	adds	r3, #64	@ 0x40
 8000fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb0:	f000 faca 	bl	8001548 <writeMQTTString>
	if (flags.bits.password)
 8000fb4:	7d3b      	ldrb	r3, [r7, #20]
 8000fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f107 001c 	add.w	r0, r7, #28
 8000fc6:	334c      	adds	r3, #76	@ 0x4c
 8000fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fca:	f000 fabd 	bl	8001548 <writeMQTTString>

	rc = ptr - buf;
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3728      	adds	r7, #40	@ 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	08007754 	.word	0x08007754
 8000fe4:	0800775c 	.word	0x0800775c

08000fe8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fa29 	bl	8001466 <readChar>
 8001014:	4603      	mov	r3, r0
 8001016:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8001018:	7f3b      	ldrb	r3, [r7, #28]
 800101a:	f023 030f 	bic.w	r3, r3, #15
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b20      	cmp	r3, #32
 8001022:	d12e      	bne.n	8001082 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	f107 0214 	add.w	r2, r7, #20
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f9e9 	bl	8001404 <MQTTPacket_decodeBuf>
 8001032:	6278      	str	r0, [r7, #36]	@ 0x24
 8001034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4413      	add	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4413      	add	r3, r2
 8001042:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6a3a      	ldr	r2, [r7, #32]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b01      	cmp	r3, #1
 800104c:	dd1b      	ble.n	8001086 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fa07 	bl	8001466 <readChar>
 8001058:	4603      	mov	r3, r0
 800105a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800105c:	7c3b      	ldrb	r3, [r7, #16]
 800105e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f9f9 	bl	8001466 <readChar>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001080:	e002      	b.n	8001088 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001082:	bf00      	nop
 8001084:	e000      	b.n	8001088 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001086:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800108a:	4618      	mov	r0, r3
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b088      	sub	sp, #32
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	4613      	mov	r3, r2
 800109e:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	dc03      	bgt.n	80010bc <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80010b4:	f06f 0301 	mvn.w	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
		goto exit;
 80010ba:	e01d      	b.n	80010f8 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	7e3b      	ldrb	r3, [r7, #24]
 80010ca:	f362 1307 	bfi	r3, r2, #4, #4
 80010ce:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80010d0:	7e3a      	ldrb	r2, [r7, #24]
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f9d8 	bl	800148e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f8d9 	bl	800129a <MQTTPacket_encode>
 80010e8:	4602      	mov	r2, r0
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	4413      	add	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80010f8:	69fb      	ldr	r3, [r7, #28]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800110c:	220c      	movs	r2, #12
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ffbe 	bl	8001092 <MQTTSerialize_zero>
 8001116:	4603      	mov	r3, r0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001134:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f98d 	bl	8001466 <readChar>
 800114c:	4603      	mov	r3, r0
 800114e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8001150:	7f3b      	ldrb	r3, [r7, #28]
 8001152:	f023 030f 	bic.w	r3, r3, #15
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b30      	cmp	r3, #48	@ 0x30
 800115a:	d14b      	bne.n	80011f4 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800115c:	7f3b      	ldrb	r3, [r7, #28]
 800115e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800116a:	7f3b      	ldrb	r3, [r7, #28]
 800116c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001170:	b2db      	uxtb	r3, r3
 8001172:	461a      	mov	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8001178:	7f3b      	ldrb	r3, [r7, #28]
 800117a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f107 0214 	add.w	r2, r7, #20
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f938 	bl	8001404 <MQTTPacket_decodeBuf>
 8001194:	6278      	str	r0, [r7, #36]	@ 0x24
 8001196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	4413      	add	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	4413      	add	r3, r2
 80011a4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	6a3a      	ldr	r2, [r7, #32]
 80011ac:	4619      	mov	r1, r3
 80011ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011b0:	f000 f9f8 	bl	80015a4 <readMQTTLenString>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d01e      	beq.n	80011f8 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6a3a      	ldr	r2, [r7, #32]
 80011be:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db19      	blt.n	80011f8 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	dd08      	ble.n	80011de <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f92d 	bl	8001430 <readInt>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	6a3a      	ldr	r2, [r7, #32]
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011e6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ec:	601a      	str	r2, [r3, #0]
	rc = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f2:	e002      	b.n	80011fa <MQTTDeserialize_publish+0xda>
		goto exit;
 80011f4:	bf00      	nop
 80011f6:	e000      	b.n	80011fa <MQTTDeserialize_publish+0xda>
		goto exit;
 80011f8:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3728      	adds	r7, #40	@ 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f91d 	bl	8001466 <readChar>
 800122c:	4603      	mov	r3, r0
 800122e:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8001230:	7f3b      	ldrb	r3, [r7, #28]
 8001232:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800123e:	7f3b      	ldrb	r3, [r7, #28]
 8001240:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	f107 0214 	add.w	r2, r7, #20
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f8d5 	bl	8001404 <MQTTPacket_decodeBuf>
 800125a:	6278      	str	r0, [r7, #36]	@ 0x24
 800125c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4413      	add	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4413      	add	r3, r2
 800126a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	dd0b      	ble.n	800128e <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f8d8 	bl	8001430 <readInt>
 8001280:	4603      	mov	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
 800128c:	e000      	b.n	8001290 <MQTTDeserialize_ack+0x8c>
		goto exit;
 800128e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001292:	4618      	mov	r0, r3
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	425a      	negs	r2, r3
 80012ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80012b4:	bf58      	it	pl
 80012b6:	4253      	negpl	r3, r2
 80012b8:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da00      	bge.n	80012c2 <MQTTPacket_encode+0x28>
 80012c0:	337f      	adds	r3, #127	@ 0x7f
 80012c2:	11db      	asrs	r3, r3, #7
 80012c4:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dd03      	ble.n	80012d4 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012d2:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60fa      	str	r2, [r7, #12]
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	7afa      	ldrb	r2, [r7, #11]
 80012e2:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	dcde      	bgt.n	80012a8 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	3301      	adds	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b04      	cmp	r3, #4
 8001320:	dd03      	ble.n	800132a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	60fb      	str	r3, [r7, #12]
			goto exit;
 8001328:	e01d      	b.n	8001366 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800132a:	f107 020b 	add.w	r2, r7, #11
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2101      	movs	r1, #1
 8001332:	4610      	mov	r0, r2
 8001334:	4798      	blx	r3
 8001336:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d112      	bne.n	8001364 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	7afb      	ldrb	r3, [r7, #11]
 8001344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001348:	6979      	ldr	r1, [r7, #20]
 800134a:	fb01 f303 	mul.w	r3, r1, r3
 800134e:	441a      	add	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	01db      	lsls	r3, r3, #7
 8001358:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	dbd6      	blt.n	8001310 <MQTTPacket_decode+0x18>
exit:
 8001362:	e000      	b.n	8001366 <MQTTPacket_decode+0x6e>
			goto exit;
 8001364:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8001366:	693b      	ldr	r3, [r7, #16]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3301      	adds	r3, #1
 800137c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b7f      	cmp	r3, #127	@ 0x7f
 8001382:	dc03      	bgt.n	800138c <MQTTPacket_len+0x1c>
		rem_len += 1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3301      	adds	r3, #1
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	e012      	b.n	80013b2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001392:	da03      	bge.n	800139c <MQTTPacket_len+0x2c>
		rem_len += 2;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3302      	adds	r3, #2
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e00a      	b.n	80013b2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <MQTTPacket_len+0x50>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	dc03      	bgt.n	80013ac <MQTTPacket_len+0x3c>
		rem_len += 3;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3303      	adds	r3, #3
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e002      	b.n	80013b2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3304      	adds	r3, #4
 80013b0:	607b      	str	r3, [r7, #4]
	return rem_len;
 80013b2:	687b      	ldr	r3, [r7, #4]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	001ffffe 	.word	0x001ffffe

080013c4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	e00a      	b.n	80013ea <bufchar+0x26>
		*c = *bufptr++;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <bufchar+0x3c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	4909      	ldr	r1, [pc, #36]	@ (8001400 <bufchar+0x3c>)
 80013dc:	600a      	str	r2, [r1, #0]
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf0      	blt.n	80013d4 <bufchar+0x10>
	return count;
 80013f2:	683b      	ldr	r3, [r7, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	2000014c 	.word	0x2000014c

08001404 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800140e:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <MQTTPacket_decodeBuf+0x24>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <MQTTPacket_decodeBuf+0x28>)
 8001418:	f7ff ff6e 	bl	80012f8 <MQTTPacket_decode>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000014c 	.word	0x2000014c
 800142c:	080013c5 	.word	0x080013c5

08001430 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	3201      	adds	r2, #1
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	4413      	add	r3, r2
 800144c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1c9a      	adds	r2, r3, #2
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	601a      	str	r2, [r3, #0]
	return len;
 8001458:	68bb      	ldr	r3, [r7, #8]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	601a      	str	r2, [r3, #0]
	return c;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	601a      	str	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	da00      	bge.n	80014ca <writeInt+0x12>
 80014c8:	33ff      	adds	r3, #255	@ 0xff
 80014ca:	121b      	asrs	r3, r3, #8
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	425a      	negs	r2, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	bf58      	it	pl
 80014ea:	4253      	negpl	r3, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8001514:	6838      	ldr	r0, [r7, #0]
 8001516:	f7fe fe63 	bl	80001e0 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800151e:	68f9      	ldr	r1, [r7, #12]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffc9 	bl	80014b8 <writeInt>
	memcpy(*pptr, string, len);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	6839      	ldr	r1, [r7, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fad7 	bl	8006ae2 <memcpy>
	*pptr += len;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	441a      	add	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	4638      	mov	r0, r7
 8001552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	dd12      	ble.n	8001582 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4619      	mov	r1, r3
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff ffa9 	bl	80014b8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4618      	mov	r0, r3
 8001570:	f005 fab7 	bl	8006ae2 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	441a      	add	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8001580:	e00c      	b.n	800159c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff ffbc 	bl	800150a <writeCString>
}
 8001592:	e003      	b.n	800159c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8001594:	2100      	movs	r1, #0
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff ff8e 	bl	80014b8 <writeInt>
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	dd1a      	ble.n	80015f6 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80015c0:	68b8      	ldr	r0, [r7, #8]
 80015c2:	f7ff ff35 	bl	8001430 <readInt>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	6852      	ldr	r2, [r2, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d30c      	bcc.n	80015f6 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	6852      	ldr	r2, [r2, #4]
 80015ec:	441a      	add	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	601a      	str	r2, [r3, #0]
			rc = 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 80015fc:	697b      	ldr	r3, [r7, #20]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fdde 	bl	80001e0 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e001      	b.n	800162e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	617b      	str	r3, [r7, #20]
	return rc;
 800162e:	697b      	ldr	r3, [r7, #20]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
		blen = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00a      	beq.n	8001668 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fdbf 	bl	80001e0 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e005      	b.n	8001674 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7fe fdb3 	bl	80001e0 <strlen>
 800167a:	4603      	mov	r3, r0
 800167c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	429a      	cmp	r2, r3
 8001684:	d10a      	bne.n	800169c <MQTTPacket_equals+0x64>
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	461a      	mov	r2, r3
 800168a:	6839      	ldr	r1, [r7, #0]
 800168c:	6938      	ldr	r0, [r7, #16]
 800168e:	f005 f993 	bl	80069b8 <strncmp>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <MQTTPacket_equals+0x64>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <MQTTPacket_equals+0x66>
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	4638      	mov	r0, r7
 80016b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80016b8:	463b      	mov	r3, r7
 80016ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016be:	f7ff ffa2 	bl	8001606 <MQTTstrlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	1c9a      	adds	r2, r3, #2
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	4413      	add	r3, r2
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4413      	add	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	dd02      	ble.n	80016dc <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3302      	adds	r3, #2
 80016da:	617b      	str	r3, [r7, #20]
	return len;
 80016dc:	697b      	ldr	r3, [r7, #20]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b08a      	sub	sp, #40	@ 0x28
 80016ea:	af02      	add	r7, sp, #8
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4613      	mov	r3, r2
 80016f4:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8001706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800170e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f7ff ffc8 	bl	80016a6 <MQTTSerialize_publishLength>
 8001716:	61b8      	str	r0, [r7, #24]
 8001718:	69b8      	ldr	r0, [r7, #24]
 800171a:	f7ff fe29 	bl	8001370 <MQTTPacket_len>
 800171e:	4602      	mov	r2, r0
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4293      	cmp	r3, r2
 8001724:	da03      	bge.n	800172e <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001726:	f06f 0301 	mvn.w	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800172c:	e04c      	b.n	80017c8 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800172e:	7c3b      	ldrb	r3, [r7, #16]
 8001730:	2203      	movs	r2, #3
 8001732:	f362 1307 	bfi	r3, r2, #4, #4
 8001736:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	b2da      	uxtb	r2, r3
 8001740:	7c3b      	ldrb	r3, [r7, #16]
 8001742:	f362 03c3 	bfi	r3, r2, #3, #1
 8001746:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	7c3b      	ldrb	r3, [r7, #16]
 8001752:	f362 0342 	bfi	r3, r2, #1, #2
 8001756:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8001758:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	b2da      	uxtb	r2, r3
 8001762:	7c3b      	ldrb	r3, [r7, #16]
 8001764:	f362 0300 	bfi	r3, r2, #0, #1
 8001768:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800176a:	7c3a      	ldrb	r2, [r7, #16]
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe8b 	bl	800148e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fd8c 	bl	800129a <MQTTPacket_encode>
 8001782:	4602      	mov	r2, r0
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	4413      	add	r3, r2
 8001788:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800178a:	f107 0014 	add.w	r0, r7, #20
 800178e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001794:	f7ff fed8 	bl	8001548 <writeMQTTString>

	if (qos > 0)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	dd06      	ble.n	80017ac <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800179e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fe86 	bl	80014b8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80017b2:	4618      	mov	r0, r3
 80017b4:	f005 f995 	bl	8006ae2 <memcpy>
	ptr += payloadlen;
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017bc:	4413      	add	r3, r2
 80017be:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80017c8:	69fb      	ldr	r3, [r7, #28]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b088      	sub	sp, #32
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	4611      	mov	r1, r2
 80017de:	461a      	mov	r2, r3
 80017e0:	460b      	mov	r3, r1
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	4613      	mov	r3, r2
 80017e6:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	dc03      	bgt.n	8001802 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80017fa:	f06f 0301 	mvn.w	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001800:	e037      	b.n	8001872 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	b2da      	uxtb	r2, r3
 800180a:	7e3b      	ldrb	r3, [r7, #24]
 800180c:	f362 1307 	bfi	r3, r2, #4, #4
 8001810:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	7e3b      	ldrb	r3, [r7, #24]
 800181c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001820:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b06      	cmp	r3, #6
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	b2da      	uxtb	r2, r3
 8001834:	7e3b      	ldrb	r3, [r7, #24]
 8001836:	f362 0342 	bfi	r3, r2, #1, #2
 800183a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800183c:	7e3a      	ldrb	r2, [r7, #24]
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fe22 	bl	800148e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2102      	movs	r1, #2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fd23 	bl	800129a <MQTTPacket_encode>
 8001854:	4602      	mov	r2, r0
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	4413      	add	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800185c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fe27 	bl	80014b8 <writeInt>
	rc = ptr - buf;
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001872:	69fb      	ldr	r3, [r7, #28]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	MilliTimer++;
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <MilliTimer_Handler+0x18>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a03      	ldr	r2, [pc, #12]	@ (8001894 <MilliTimer_Handler+0x18>)
 8001888:	6013      	str	r3, [r2, #0]
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	20000150 	.word	0x20000150

08001898 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	605a      	str	r2, [r3, #4]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <TimerIsExpired+0x28>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	0fdb      	lsrs	r3, r3, #31
 80018cc:	b2db      	uxtb	r3, r3
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000150 	.word	0x20000150

080018e0 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <TimerCountdownMS+0x24>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	441a      	add	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	605a      	str	r2, [r3, #4]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000150 	.word	0x20000150

08001908 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001918:	fb03 f202 	mul.w	r2, r3, r2
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <TimerCountdown+0x2c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	441a      	add	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	605a      	str	r2, [r3, #4]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000150 	.word	0x20000150

08001938 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <TimerLeftMS+0x28>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000150 	.word	0x20000150

08001964 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <NewNetwork+0x30>)
 8001978:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a06      	ldr	r2, [pc, #24]	@ (8001998 <NewNetwork+0x34>)
 800197e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a06      	ldr	r2, [pc, #24]	@ (800199c <NewNetwork+0x38>)
 8001984:	60da      	str	r2, [r3, #12]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	080019a1 	.word	0x080019a1
 8001998:	080019fb 	.word	0x080019fb
 800199c:	08001a43 	.word	0x08001a43

080019a0 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	3301      	adds	r3, #1
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 fd77 	bl	80054b0 <WIZCHIP_READ>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b17      	cmp	r3, #23
 80019c6:	d113      	bne.n	80019f0 <w5x00_read+0x50>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 ff11 	bl	80057f6 <getSn_RX_RSR>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00a      	beq.n	80019f0 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	b292      	uxth	r2, r2
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f98e 	bl	8004d08 <recv>
 80019ec:	4603      	mov	r3, r0
 80019ee:	e000      	b.n	80019f2 <w5x00_read+0x52>

	return SOCK_ERROR;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	3301      	adds	r3, #1
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fd4a 	bl	80054b0 <WIZCHIP_READ>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b17      	cmp	r3, #23
 8001a20:	d10a      	bne.n	8001a38 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 f872 	bl	8004b18 <send>
 8001a34:	4603      	mov	r3, r0
 8001a36:	e000      	b.n	8001a3a <w5x00_write+0x40>

	return SOCK_ERROR;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 ffeb 	bl	8004a2c <disconnect>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8001a6c:	f243 0339 	movw	r3, #12345	@ 0x3039
 8001a70:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b2d8      	uxtb	r0, r3
 8001a78:	8afa      	ldrh	r2, [r7, #22]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	f002 fd77 	bl	8004570 <socket>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e00d      	b.n	8001aae <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	88fa      	ldrh	r2, [r7, #6]
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fee9 	bl	8004874 <connect>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d001      	beq.n	8001aac <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e000      	b.n	8001aae <ConnectNetwork+0x50>

	return SOCK_OK;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <pa1_adc_init+0x58>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac0:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <pa1_adc_init+0x58>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <pa1_adc_init+0x5c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a11      	ldr	r2, [pc, #68]	@ (8001b14 <pa1_adc_init+0x5c>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <pa1_adc_init+0x5c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b14 <pa1_adc_init+0x5c>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <pa1_adc_init+0x58>)
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <pa1_adc_init+0x58>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aea:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <pa1_adc_init+0x60>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <pa1_adc_init+0x60>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <pa1_adc_init+0x60>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a06      	ldr	r2, [pc, #24]	@ (8001b18 <pa1_adc_init+0x60>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6093      	str	r3, [r2, #8]

}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40012000 	.word	0x40012000

08001b1c <start_conversion>:


void start_conversion(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <start_conversion+0x28>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <start_conversion+0x28>)
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <start_conversion+0x28>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <start_conversion+0x28>)
 8001b32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b36:	6093      	str	r3, [r2, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40012000 	.word	0x40012000

08001b48 <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <button_init+0x34>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b50:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <button_init+0x34>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <button_init+0x38>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a08      	ldr	r2, [pc, #32]	@ (8001b80 <button_init+0x38>)
 8001b5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001b62:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <button_init+0x38>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <button_init+0x38>)
 8001b6a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001b6e:	6013      	str	r3, [r2, #0]

}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020800 	.word	0x40020800

08001b84 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <fpu_enable+0x50>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8e:	4a11      	ldr	r2, [pc, #68]	@ (8001bd4 <fpu_enable+0x50>)
 8001b90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 8001b98:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <fpu_enable+0x50>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <fpu_enable+0x50>)
 8001ba0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <fpu_enable+0x50>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bae:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <fpu_enable+0x50>)
 8001bb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <fpu_enable+0x50>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bbe:	4a05      	ldr	r2, [pc, #20]	@ (8001bd4 <fpu_enable+0x50>)
 8001bc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <check_cable_connection>:


wiz_PhyConf current_phy_conf;

void check_cable_connection(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
	uint8_t cable_status;

	do{

		printf("\r\nGetting cable status...\r\n");
 8001bde:	480e      	ldr	r0, [pc, #56]	@ (8001c18 <check_cable_connection+0x40>)
 8001be0:	f004 fde2 	bl	80067a8 <puts>
		ctlwizchip(CW_GET_PHYLINK,(void *)&cable_status);
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	4619      	mov	r1, r3
 8001be8:	200f      	movs	r0, #15
 8001bea:	f004 f829 	bl	8005c40 <ctlwizchip>

		if(cable_status ==  PHY_LINK_OFF)
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d106      	bne.n	8001c02 <check_cable_connection+0x2a>
		{
			printf("No cable detected ...\r\n");
 8001bf4:	4809      	ldr	r0, [pc, #36]	@ (8001c1c <check_cable_connection+0x44>)
 8001bf6:	f004 fdd7 	bl	80067a8 <puts>
			delay(1000);
 8001bfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bfe:	f000 fdeb 	bl	80027d8 <delay>
		}

	}while(cable_status ==  PHY_LINK_OFF);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ea      	beq.n	8001bde <check_cable_connection+0x6>

	printf("Cable connected...\r\n");
 8001c08:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <check_cable_connection+0x48>)
 8001c0a:	f004 fdcd 	bl	80067a8 <puts>

}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	0800776c 	.word	0x0800776c
 8001c1c:	08007788 	.word	0x08007788
 8001c20:	080077a0 	.word	0x080077a0

08001c24 <display_phy_config>:

void display_phy_config(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_conf;
	ctlwizchip(CW_GET_PHYCONF,(void*)&phy_conf);
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	200b      	movs	r0, #11
 8001c30:	f004 f806 	bl	8005c40 <ctlwizchip>

	if(phy_conf.by == PHY_CONFBY_HW)
 8001c34:	793b      	ldrb	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d103      	bne.n	8001c42 <display_phy_config+0x1e>
	{
		printf("\n\rPHY is currently configured by hardware.");
 8001c3a:	4816      	ldr	r0, [pc, #88]	@ (8001c94 <display_phy_config+0x70>)
 8001c3c:	f004 fd4c 	bl	80066d8 <iprintf>
 8001c40:	e002      	b.n	8001c48 <display_phy_config+0x24>
	}
	else{
		printf("\n\rPHY is currently configured by software.");
 8001c42:	4815      	ldr	r0, [pc, #84]	@ (8001c98 <display_phy_config+0x74>)
 8001c44:	f004 fd48 	bl	80066d8 <iprintf>

	}
	printf("\r\nSTATUS: Autonegotiation %s",(phy_conf.mode == PHY_MODE_AUTONEGO) ? "Enabled" : "Disabled");
 8001c48:	797b      	ldrb	r3, [r7, #5]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <display_phy_config+0x2e>
 8001c4e:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <display_phy_config+0x78>)
 8001c50:	e000      	b.n	8001c54 <display_phy_config+0x30>
 8001c52:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <display_phy_config+0x7c>)
 8001c54:	4619      	mov	r1, r3
 8001c56:	4813      	ldr	r0, [pc, #76]	@ (8001ca4 <display_phy_config+0x80>)
 8001c58:	f004 fd3e 	bl	80066d8 <iprintf>
	printf("\r\nSTATUS: Duplex Mode: %s",(phy_conf.duplex == PHY_DUPLEX_FULL) ? "Full Duplex" : "Half Duplex");
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <display_phy_config+0x42>
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <display_phy_config+0x84>)
 8001c64:	e000      	b.n	8001c68 <display_phy_config+0x44>
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <display_phy_config+0x88>)
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4811      	ldr	r0, [pc, #68]	@ (8001cb0 <display_phy_config+0x8c>)
 8001c6c:	f004 fd34 	bl	80066d8 <iprintf>
	printf("\r\nSTATUS: Speed: %dMbps",(phy_conf.speed == PHY_SPEED_10) ? 10 : 100);
 8001c70:	79bb      	ldrb	r3, [r7, #6]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <display_phy_config+0x56>
 8001c76:	230a      	movs	r3, #10
 8001c78:	e000      	b.n	8001c7c <display_phy_config+0x58>
 8001c7a:	2364      	movs	r3, #100	@ 0x64
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	@ (8001cb4 <display_phy_config+0x90>)
 8001c80:	f004 fd2a 	bl	80066d8 <iprintf>
  printf("\r\n...");
 8001c84:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <display_phy_config+0x94>)
 8001c86:	f004 fd27 	bl	80066d8 <iprintf>

}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	080077b4 	.word	0x080077b4
 8001c98:	080077e0 	.word	0x080077e0
 8001c9c:	0800780c 	.word	0x0800780c
 8001ca0:	08007814 	.word	0x08007814
 8001ca4:	08007820 	.word	0x08007820
 8001ca8:	08007840 	.word	0x08007840
 8001cac:	0800784c 	.word	0x0800784c
 8001cb0:	08007858 	.word	0x08007858
 8001cb4:	08007874 	.word	0x08007874
 8001cb8:	0800788c 	.word	0x0800788c

08001cbc <handle_error>:

void handle_error(const char * message)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	printf("ERROR: %s\r\n",message);
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <handle_error+0x14>)
 8001cc8:	f004 fd06 	bl	80066d8 <iprintf>

	while(1){
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <handle_error+0x10>
 8001cd0:	08007894 	.word	0x08007894

08001cd4 <main>:
		//Do something e.g. blink LED
	}
}
int main()
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af04      	add	r7, sp, #16
	/*Enable FPU*/
	fpu_enable();
 8001cda:	f7ff ff53 	bl	8001b84 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 8001cde:	f000 fdbd 	bl	800285c <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 8001ce2:	f000 fdf3 	bl	80028cc <debug_uart_init>

	/*Initialize Push button*/
	button_init();
 8001ce6:	f7ff ff2f 	bl	8001b48 <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 8001cea:	f7ff fee5 	bl	8001ab8 <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 8001cee:	f7ff ff15 	bl	8001b1c <start_conversion>

    wizchip_cs_pin_init();
 8001cf2:	f000 fe99 	bl	8002a28 <wizchip_cs_pin_init>
    w5500_spi_init();
 8001cf6:	f000 ff19 	bl	8002b2c <w5500_spi_init>
    w5500_init();
 8001cfa:	f000 ff43 	bl	8002b84 <w5500_init>

    display_phy_config();
 8001cfe:	f7ff ff91 	bl	8001c24 <display_phy_config>

    current_phy_conf.by =  PHY_CONFBY_SW;
 8001d02:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <main+0xf4>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
    current_phy_conf.duplex =  PHY_DUPLEX_FULL;
 8001d08:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc8 <main+0xf4>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	70da      	strb	r2, [r3, #3]
    current_phy_conf.mode   =  PHY_MODE_AUTONEGO;
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <main+0xf4>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	705a      	strb	r2, [r3, #1]
    current_phy_conf.speed =  PHY_SPEED_10;
 8001d14:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc8 <main+0xf4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	709a      	strb	r2, [r3, #2]

    ctlwizchip(CW_SET_PHYCONF,(void*)&current_phy_conf);
 8001d1a:	492b      	ldr	r1, [pc, #172]	@ (8001dc8 <main+0xf4>)
 8001d1c:	200a      	movs	r0, #10
 8001d1e:	f003 ff8f 	bl	8005c40 <ctlwizchip>

    check_cable_connection();
 8001d22:	f7ff ff59 	bl	8001bd8 <check_cable_connection>

    display_phy_config();
 8001d26:	f7ff ff7d 	bl	8001c24 <display_phy_config>

    printf("\n\r*****************************MQTTClient Initialization*******************\r\n");
 8001d2a:	4828      	ldr	r0, [pc, #160]	@ (8001dcc <main+0xf8>)
 8001d2c:	f004 fd3c 	bl	80067a8 <puts>

    /*Configure the client connection data*/
    connect_data.MQTTVersion =  3;
 8001d30:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <main+0xfc>)
 8001d32:	2203      	movs	r2, #3
 8001d34:	721a      	strb	r2, [r3, #8]
    connect_data.willFlag = 0;
 8001d36:	4b26      	ldr	r3, [pc, #152]	@ (8001dd0 <main+0xfc>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	76da      	strb	r2, [r3, #27]
    connect_data.clientID.cstring = "eexpert015";
 8001d3c:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <main+0xfc>)
 8001d3e:	4a25      	ldr	r2, [pc, #148]	@ (8001dd4 <main+0x100>)
 8001d40:	60da      	str	r2, [r3, #12]
    connect_data.keepAliveInterval = 60;
 8001d42:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <main+0xfc>)
 8001d44:	223c      	movs	r2, #60	@ 0x3c
 8001d46:	831a      	strh	r2, [r3, #24]
    connect_data.cleansession =  1;
 8001d48:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <main+0xfc>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	769a      	strb	r2, [r3, #26]


    NewNetwork(&network,1);
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4821      	ldr	r0, [pc, #132]	@ (8001dd8 <main+0x104>)
 8001d52:	f7ff fe07 	bl	8001964 <NewNetwork>

    printf("Connecting to MQTT Broker...\r\n");
 8001d56:	4821      	ldr	r0, [pc, #132]	@ (8001ddc <main+0x108>)
 8001d58:	f004 fd26 	bl	80067a8 <puts>

    if(ConnectNetwork(&network,broker_ip,broker_port) != SOCK_OK)
 8001d5c:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <main+0x10c>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4920      	ldr	r1, [pc, #128]	@ (8001de4 <main+0x110>)
 8001d64:	481c      	ldr	r0, [pc, #112]	@ (8001dd8 <main+0x104>)
 8001d66:	f7ff fe7a 	bl	8001a5e <ConnectNetwork>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d002      	beq.n	8001d76 <main+0xa2>
    {
    	handle_error("Cannot connect to broker.");
 8001d70:	481d      	ldr	r0, [pc, #116]	@ (8001de8 <main+0x114>)
 8001d72:	f7ff ffa3 	bl	8001cbc <handle_error>
    }


     /*Initialize the client with the network parameters*/
    MQTTClientInit(&mqtt_client, &network, 1000, tx_buffer,sizeof(tx_buffer), rx_buffer, sizeof(rx_buffer));
 8001d76:	2380      	movs	r3, #128	@ 0x80
 8001d78:	9302      	str	r3, [sp, #8]
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <main+0x118>)
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <main+0x11c>)
 8001d84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d88:	4913      	ldr	r1, [pc, #76]	@ (8001dd8 <main+0x104>)
 8001d8a:	481a      	ldr	r0, [pc, #104]	@ (8001df4 <main+0x120>)
 8001d8c:	f7fe faf4 	bl	8000378 <MQTTClientInit>

    printf("Sending MQTT Connect Packet...\r\n");
 8001d90:	4819      	ldr	r0, [pc, #100]	@ (8001df8 <main+0x124>)
 8001d92:	f004 fd09 	bl	80067a8 <puts>

    /*Attempt to connect with the broker*/

    if(MQTTConnect(&mqtt_client,&connect_data) != 0 )
 8001d96:	490e      	ldr	r1, [pc, #56]	@ (8001dd0 <main+0xfc>)
 8001d98:	4816      	ldr	r0, [pc, #88]	@ (8001df4 <main+0x120>)
 8001d9a:	f7fe ff01 	bl	8000ba0 <MQTTConnect>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <main+0xd6>
    {
    	handle_error("MQTT connection failed.");
 8001da4:	4815      	ldr	r0, [pc, #84]	@ (8001dfc <main+0x128>)
 8001da6:	f7ff ff89 	bl	8001cbc <handle_error>

    }

    printf("MQTT Connection successful.\n\r");
 8001daa:	4815      	ldr	r0, [pc, #84]	@ (8001e00 <main+0x12c>)
 8001dac:	f004 fc94 	bl	80066d8 <iprintf>

	while(1)
	{
         /*Publish message to a specific topic*/
		MQTTPublish(&mqtt_client, "eexpert11/topic1", &mqtt_msg);
 8001db0:	4a14      	ldr	r2, [pc, #80]	@ (8001e04 <main+0x130>)
 8001db2:	4915      	ldr	r1, [pc, #84]	@ (8001e08 <main+0x134>)
 8001db4:	480f      	ldr	r0, [pc, #60]	@ (8001df4 <main+0x120>)
 8001db6:	f7fe ff04 	bl	8000bc2 <MQTTPublish>
		delay(1000);
 8001dba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dbe:	f000 fd0b 	bl	80027d8 <delay>
		MQTTPublish(&mqtt_client, "eexpert11/topic1", &mqtt_msg);
 8001dc2:	bf00      	nop
 8001dc4:	e7f4      	b.n	8001db0 <main+0xdc>
 8001dc6:	bf00      	nop
 8001dc8:	200002cc 	.word	0x200002cc
 8001dcc:	080078a0 	.word	0x080078a0
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	080078f0 	.word	0x080078f0
 8001dd8:	200001bc 	.word	0x200001bc
 8001ddc:	080078fc 	.word	0x080078fc
 8001de0:	2000006c 	.word	0x2000006c
 8001de4:	20000068 	.word	0x20000068
 8001de8:	0800791c 	.word	0x0800791c
 8001dec:	2000024c 	.word	0x2000024c
 8001df0:	200001cc 	.word	0x200001cc
 8001df4:	20000154 	.word	0x20000154
 8001df8:	08007938 	.word	0x08007938
 8001dfc:	08007958 	.word	0x08007958
 8001e00:	08007970 	.word	0x08007970
 8001e04:	20000058 	.word	0x20000058
 8001e08:	08007990 	.word	0x08007990

08001e0c <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8001e10:	4b3e      	ldr	r3, [pc, #248]	@ (8001f0c <spi1_gpio_init+0x100>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	4a3d      	ldr	r2, [pc, #244]	@ (8001f0c <spi1_gpio_init+0x100>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 8001e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3b      	ldr	r2, [pc, #236]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e26:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8001e28:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a38      	ldr	r2, [pc, #224]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e32:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8001e34:	4b36      	ldr	r3, [pc, #216]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a35      	ldr	r2, [pc, #212]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e3e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8001e40:	4b33      	ldr	r3, [pc, #204]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a32      	ldr	r2, [pc, #200]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e4a:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8001e4c:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a2f      	ldr	r2, [pc, #188]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e56:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8001e58:	4b2d      	ldr	r3, [pc, #180]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e62:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8001e64:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a29      	ldr	r2, [pc, #164]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e6e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8001e70:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a26      	ldr	r2, [pc, #152]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e7a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8001e7c:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e86:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e8e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e92:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 8001e94:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a1d      	ldr	r2, [pc, #116]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e9e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001ea6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a17      	ldr	r2, [pc, #92]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001eb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001eb6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a14      	ldr	r2, [pc, #80]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001ebe:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001ec2:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a11      	ldr	r2, [pc, #68]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ece:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001ed6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001eda:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001ee2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ee6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <spi1_gpio_init+0x104>)
 8001eee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ef2:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <spi1_gpio_init+0x100>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef8:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <spi1_gpio_init+0x100>)
 8001efa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001efe:	6453      	str	r3, [r2, #68]	@ 0x44

}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000

08001f14 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <spi_init+0x12>
	{
		return DEV_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e05a      	b.n	8001fdc <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	629a      	str	r2, [r3, #40]	@ 0x28

	if(hspi->State == SPI_STATE_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <spi_init+0x26>
	{
		spi1_gpio_init();
 8001f36:	f7ff ff69 	bl	8001e0c <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f50:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	ea42 0103 	orr.w	r1, r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	0c1b      	lsrs	r3, r3, #16
 8001fb8:	f003 0104 	and.w	r1, r3, #4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	f003 0210 	and.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->State =  SPI_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   return DEV_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <spi_transmit>:




StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code;// = DEV_OK;
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	83fb      	strh	r3, [r7, #30]
	tickstart = get_tick();
 8001ff8:	f000 fc0c 	bl	8002814 <get_tick>
 8001ffc:	61b8      	str	r0, [r7, #24]



	if((p_data == NULL) || (size  == 0))
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <spi_transmit+0x26>
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <spi_transmit+0x2a>
	{

		return DEV_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e106      	b.n	800221c <spi_transmit+0x238>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2203      	movs	r2, #3
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  size;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	88fa      	ldrh	r2, [r7, #6]
 8002026:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	865a      	strh	r2, [r3, #50]	@ 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  0;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  0;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	875a      	strh	r2, [r3, #58]	@ 0x3a


	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002048:	d10f      	bne.n	800206a <spi_transmit+0x86>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002058:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002068:	601a      	str	r2, [r3, #0]

	}



	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002074:	2b40      	cmp	r3, #64	@ 0x40
 8002076:	d007      	beq.n	8002088 <spi_transmit+0xa4>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002086:	601a      	str	r2, [r3, #0]
	}

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002092:	2b40      	cmp	r3, #64	@ 0x40
 8002094:	d007      	beq.n	80020a6 <spi_transmit+0xc2>
	  {

			SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020a4:	601a      	str	r2, [r3, #0]

	  }

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020ae:	d14e      	bne.n	800214e <spi_transmit+0x16a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <spi_transmit+0xda>
 80020b8:	8bfb      	ldrh	r3, [r7, #30]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d141      	bne.n	8002142 <spi_transmit+0x15e>
		{
			hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c2:	881a      	ldrh	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	1c9a      	adds	r2, r3, #2
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	865a      	strh	r2, [r3, #50]	@ 0x32
		}

		while(hspi->TxXferCount> 0)
 80020e2:	e02e      	b.n	8002142 <spi_transmit+0x15e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d012      	beq.n	8002118 <spi_transmit+0x134>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	881a      	ldrh	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002102:	1c9a      	adds	r2, r3, #2
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002116:	e014      	b.n	8002142 <spi_transmit+0x15e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8002118:	f000 fb7c 	bl	8002814 <get_tick>
 800211c:	4602      	mov	r2, r0
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d803      	bhi.n	8002130 <spi_transmit+0x14c>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d102      	bne.n	8002136 <spi_transmit+0x152>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d105      	bne.n	8002142 <spi_transmit+0x15e>
		         {
					hspi->State = SPI_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return DEV_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e06c      	b.n	800221c <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1cb      	bne.n	80020e4 <spi_transmit+0x100>
 800214c:	e051      	b.n	80021f2 <spi_transmit+0x20e>
	}


	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <spi_transmit+0x178>
 8002156:	8bfb      	ldrh	r3, [r7, #30]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d145      	bne.n	80021e8 <spi_transmit+0x204>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) =  *((const uint8_t *)hspi->pTxBuffPtr);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	330c      	adds	r3, #12
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	865a      	strh	r2, [r3, #50]	@ 0x32
		}
		while(hspi->TxXferCount> 0)
 8002182:	e031      	b.n	80021e8 <spi_transmit+0x204>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d013      	beq.n	80021ba <spi_transmit+0x1d6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*(const uint8_t *)hspi->pTxBuffPtr);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	330c      	adds	r3, #12
 800219c:	7812      	ldrb	r2, [r2, #0]
 800219e:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	865a      	strh	r2, [r3, #50]	@ 0x32
 80021b8:	e016      	b.n	80021e8 <spi_transmit+0x204>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80021ba:	f000 fb2b 	bl	8002814 <get_tick>
 80021be:	4602      	mov	r2, r0
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d803      	bhi.n	80021d2 <spi_transmit+0x1ee>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d102      	bne.n	80021d8 <spi_transmit+0x1f4>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <spi_transmit+0x204>
		         {
					error_code = DEV_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	e019      	b.n	800221c <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1c8      	bne.n	8002184 <spi_transmit+0x1a0>
			}
		}

	}

	  __IO uint32_t tmpreg_ovr = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->DR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->SR;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]

		hspi->State =  SPI_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <spi_transmit+0x236>
	{
		return DEV_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <spi_transmit+0x238>
	}
	else
	{
		return DEV_OK;
 800221a:	2300      	movs	r3, #0

	}

}
 800221c:	4618      	mov	r0, r3
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	75fb      	strb	r3, [r7, #23]



	if(hspi->State != SPI_STATE_READY)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800223e:	2b01      	cmp	r3, #1
 8002240:	d007      	beq.n	8002252 <spi_receive+0x2e>
	{
		error_code = DEV_BUSY;
 8002242:	2302      	movs	r3, #2
 8002244:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 800224e:	7dfb      	ldrb	r3, [r7, #23]
 8002250:	e0d1      	b.n	80023f6 <spi_receive+0x1d2>
	}

	  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800225a:	d112      	bne.n	8002282 <spi_receive+0x5e>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10e      	bne.n	8002282 <spi_receive+0x5e>
	  {
	    hspi->State = SPI_STATE_BUSY_RX;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2204      	movs	r2, #4
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
	    return spi_transmit_receive(hspi, p_data, p_data, size, timeout);
 800226c:	88fa      	ldrh	r2, [r7, #6]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f8c0 	bl	80023fe <spi_transmit_receive>
 800227e:	4603      	mov	r3, r0
 8002280:	e0b9      	b.n	80023f6 <spi_receive+0x1d2>
	  }

		tickstart = get_tick();
 8002282:	f000 fac7 	bl	8002814 <get_tick>
 8002286:	6138      	str	r0, [r7, #16]

	if((p_data == NULL) || (size  == 0))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <spi_receive+0x70>
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <spi_receive+0x80>
	{
		error_code =  DEV_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	e0a8      	b.n	80023f6 <spi_receive+0x1d2>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2204      	movs	r2, #4
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	875a      	strh	r2, [r3, #58]	@ 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  0;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  0;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	865a      	strh	r2, [r3, #50]	@ 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e0:	2b40      	cmp	r3, #64	@ 0x40
 80022e2:	d007      	beq.n	80022f4 <spi_receive+0xd0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022f2:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d16c      	bne.n	80023d6 <spi_receive+0x1b2>
	{
		while(hspi->RxXferCount > 0)
 80022fc:	e033      	b.n	8002366 <spi_receive+0x142>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d015      	beq.n	8002338 <spi_receive+0x114>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f103 020c 	add.w	r2, r3, #12
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8002336:	e016      	b.n	8002366 <spi_receive+0x142>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8002338:	f000 fa6c 	bl	8002814 <get_tick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d803      	bhi.n	8002350 <spi_receive+0x12c>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d102      	bne.n	8002356 <spi_receive+0x132>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <spi_receive+0x142>
		         {
					error_code = DEV_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	e047      	b.n	80023f6 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1c6      	bne.n	80022fe <spi_receive+0xda>
 8002370:	e036      	b.n	80023e0 <spi_receive+0x1bc>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <spi_receive+0x184>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800238a:	b292      	uxth	r2, r2
 800238c:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002392:	1c9a      	adds	r2, r3, #2
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	875a      	strh	r2, [r3, #58]	@ 0x3a
 80023a6:	e016      	b.n	80023d6 <spi_receive+0x1b2>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80023a8:	f000 fa34 	bl	8002814 <get_tick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d803      	bhi.n	80023c0 <spi_receive+0x19c>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d102      	bne.n	80023c6 <spi_receive+0x1a2>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <spi_receive+0x1b2>
		         {
					error_code = DEV_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
 80023d4:	e00f      	b.n	80023f6 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1c8      	bne.n	8002372 <spi_receive+0x14e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <spi_receive+0x1c8>
	{
		error_code = DEV_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return error_code;
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <spi_transmit_receive>:


StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b08a      	sub	sp, #40	@ 0x28
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 800240c:	2301      	movs	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
	  StatusTypeDef        error_code = DEV_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 8002416:	f000 f9fd 	bl	8002814 <get_tick>
 800241a:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002422:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	635a      	str	r2, [r3, #52]	@ 0x34
	  hspi->RxXferCount = size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	887a      	ldrh	r2, [r7, #2]
 800243e:	875a      	strh	r2, [r3, #58]	@ 0x3a
	  hspi->RxXferSize  = size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	871a      	strh	r2, [r3, #56]	@ 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi->TxXferCount = size;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	865a      	strh	r2, [r3, #50]	@ 0x32
	  hspi->TxXferSize  = size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	887a      	ldrh	r2, [r7, #2]
 8002456:	861a      	strh	r2, [r3, #48]	@ 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002462:	2b40      	cmp	r3, #64	@ 0x40
 8002464:	d007      	beq.n	8002476 <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002474:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800247e:	d17e      	bne.n	800257e <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <spi_transmit_receive+0x90>
 8002488:	8a7b      	ldrh	r3, [r7, #18]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d16c      	bne.n	8002568 <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002492:	881a      	ldrh	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249e:	1c9a      	adds	r2, r3, #2
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b2:	e059      	b.n	8002568 <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d01b      	beq.n	80024fa <spi_transmit_receive+0xfc>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d016      	beq.n	80024fa <spi_transmit_receive+0xfc>
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d113      	bne.n	80024fa <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e2:	1c9a      	adds	r2, r3, #2
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d019      	beq.n	800253c <spi_transmit_receive+0x13e>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d014      	beq.n	800253c <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251c:	b292      	uxth	r2, r2
 800251e:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002524:	1c9a      	adds	r2, r3, #2
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8002538:	2301      	movs	r3, #1
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 800253c:	f000 f96a 	bl	8002814 <get_tick>
 8002540:	4602      	mov	r2, r0
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002548:	429a      	cmp	r2, r3
 800254a:	d80d      	bhi.n	8002568 <spi_transmit_receive+0x16a>
 800254c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002552:	d009      	beq.n	8002568 <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8002562:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002566:	e08f      	b.n	8002688 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1a0      	bne.n	80024b4 <spi_transmit_receive+0xb6>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d19b      	bne.n	80024b4 <spi_transmit_receive+0xb6>
 800257c:	e082      	b.n	8002684 <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <spi_transmit_receive+0x18e>
 8002586:	8a7b      	ldrh	r3, [r7, #18]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d171      	bne.n	8002670 <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b2:	e05d      	b.n	8002670 <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d01c      	beq.n	80025fc <spi_transmit_receive+0x1fe>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d017      	beq.n	80025fc <spi_transmit_receive+0x1fe>
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d114      	bne.n	80025fc <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	330c      	adds	r3, #12
 80025dc:	7812      	ldrb	r2, [r2, #0]
 80025de:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d019      	beq.n	800263e <spi_transmit_receive+0x240>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d014      	beq.n	800263e <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 800263a:	2301      	movs	r3, #1
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 800263e:	f000 f8e9 	bl	8002814 <get_tick>
 8002642:	4602      	mov	r2, r0
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800264a:	429a      	cmp	r2, r3
 800264c:	d803      	bhi.n	8002656 <spi_transmit_receive+0x258>
 800264e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d102      	bne.n	800265c <spi_transmit_receive+0x25e>
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	2b00      	cmp	r3, #0
 800265a:	d109      	bne.n	8002670 <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 800266a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800266e:	e00b      	b.n	8002688 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d19c      	bne.n	80025b4 <spi_transmit_receive+0x1b6>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d197      	bne.n	80025b4 <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 8002684:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002688:	4618      	mov	r0, r3
 800268a:	3728      	adds	r7, #40	@ 0x28
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e00a      	b.n	80026b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026a2:	f3af 8000 	nop.w
 80026a6:	4601      	mov	r1, r0
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	60ba      	str	r2, [r7, #8]
 80026ae:	b2ca      	uxtb	r2, r1
 80026b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3301      	adds	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbf0      	blt.n	80026a2 <_read+0x12>
	}

return len;
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	e009      	b.n	80026f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	60ba      	str	r2, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f8e5 	bl	80028b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3301      	adds	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dbf1      	blt.n	80026dc <_write+0x12>
	}
	return len;
 80026f8:	687b      	ldr	r3, [r7, #4]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_close>:

int _close(int file)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
	return -1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800272a:	605a      	str	r2, [r3, #4]
	return 0;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <_isatty>:

int _isatty(int file)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
	return 1;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
	return 0;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002774:	4a14      	ldr	r2, [pc, #80]	@ (80027c8 <_sbrk+0x5c>)
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <_sbrk+0x60>)
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002780:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002788:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <_sbrk+0x64>)
 800278a:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <_sbrk+0x68>)
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <_sbrk+0x64>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	429a      	cmp	r2, r3
 800279a:	d207      	bcs.n	80027ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800279c:	f004 f974 	bl	8006a88 <__errno>
 80027a0:	4603      	mov	r3, r0
 80027a2:	220c      	movs	r2, #12
 80027a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	e009      	b.n	80027c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ac:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b2:	4b07      	ldr	r3, [pc, #28]	@ (80027d0 <_sbrk+0x64>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	4a05      	ldr	r2, [pc, #20]	@ (80027d0 <_sbrk+0x64>)
 80027bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20020000 	.word	0x20020000
 80027cc:	00000400 	.word	0x00000400
 80027d0:	200002d0 	.word	0x200002d0
 80027d4:	20000978 	.word	0x20000978

080027d8 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 80027e0:	f000 f818 	bl	8002814 <get_tick>
 80027e4:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d002      	beq.n	80027f8 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3301      	adds	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 80027f8:	bf00      	nop
 80027fa:	f000 f80b 	bl	8002814 <get_tick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	429a      	cmp	r2, r3
 8002808:	d8f7      	bhi.n	80027fa <delay+0x22>

}
 800280a:	bf00      	nop
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <get_tick>:

uint32_t get_tick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002818:	b672      	cpsid	i
}
 800281a:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <get_tick+0x24>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a06      	ldr	r2, [pc, #24]	@ (800283c <get_tick+0x28>)
 8002822:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002824:	b662      	cpsie	i
}
 8002826:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8002828:	4b04      	ldr	r3, [pc, #16]	@ (800283c <get_tick+0x28>)
 800282a:	681b      	ldr	r3, [r3, #0]

}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	200002d4 	.word	0x200002d4
 800283c:	200002d8 	.word	0x200002d8

08002840 <tick_increment>:
static void tick_increment(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <tick_increment+0x18>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	4a03      	ldr	r2, [pc, #12]	@ (8002858 <tick_increment+0x18>)
 800284c:	6013      	str	r3, [r2, #0]
}
 800284e:	bf00      	nop
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	200002d4 	.word	0x200002d4

0800285c <timebase_init>:
void timebase_init(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002860:	b672      	cpsid	i
}
 8002862:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 8002864:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <timebase_init+0x44>)
 8002866:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800286a:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <timebase_init+0x44>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8002872:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <timebase_init+0x44>)
 8002874:	2204      	movs	r2, #4
 8002876:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8002878:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <timebase_init+0x44>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a08      	ldr	r2, [pc, #32]	@ (80028a0 <timebase_init+0x44>)
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8002884:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <timebase_init+0x44>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <timebase_init+0x44>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002890:	b662      	cpsie	i
}
 8002892:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	tick_increment();
 80028a8:	f7ff ffca 	bl	8002840 <tick_increment>
	MilliTimer_Handler();
 80028ac:	f7fe ffe6 	bl	800187c <MilliTimer_Handler>
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f84f 	bl	8002960 <uart_write>
	return ch;
 80028c2:	687b      	ldr	r3, [r7, #4]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <debug_uart_init>:

void debug_uart_init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002950 <debug_uart_init+0x84>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002950 <debug_uart_init+0x84>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <debug_uart_init+0x88>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002954 <debug_uart_init+0x88>)
 80028e2:	f023 0310 	bic.w	r3, r3, #16
 80028e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80028e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002954 <debug_uart_init+0x88>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a19      	ldr	r2, [pc, #100]	@ (8002954 <debug_uart_init+0x88>)
 80028ee:	f043 0320 	orr.w	r3, r3, #32
 80028f2:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 80028f4:	4b17      	ldr	r3, [pc, #92]	@ (8002954 <debug_uart_init+0x88>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4a16      	ldr	r2, [pc, #88]	@ (8002954 <debug_uart_init+0x88>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8002900:	4b14      	ldr	r3, [pc, #80]	@ (8002954 <debug_uart_init+0x88>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4a13      	ldr	r2, [pc, #76]	@ (8002954 <debug_uart_init+0x88>)
 8002906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800290a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <debug_uart_init+0x88>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4a10      	ldr	r2, [pc, #64]	@ (8002954 <debug_uart_init+0x88>)
 8002912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002916:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8002918:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <debug_uart_init+0x88>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a0d      	ldr	r2, [pc, #52]	@ (8002954 <debug_uart_init+0x88>)
 800291e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002922:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <debug_uart_init+0x84>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <debug_uart_init+0x84>)
 800292a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800292e:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8002930:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002934:	4808      	ldr	r0, [pc, #32]	@ (8002958 <debug_uart_init+0x8c>)
 8002936:	f000 f83f 	bl	80029b8 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 800293a:	4b08      	ldr	r3, [pc, #32]	@ (800295c <debug_uart_init+0x90>)
 800293c:	2208      	movs	r2, #8
 800293e:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <debug_uart_init+0x90>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a05      	ldr	r2, [pc, #20]	@ (800295c <debug_uart_init+0x90>)
 8002946:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000
 8002958:	00f42400 	.word	0x00f42400
 800295c:	40004400 	.word	0x40004400

08002960 <uart_write>:



static void uart_write(int ch)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8002968:	bf00      	nop
 800296a:	4b08      	ldr	r3, [pc, #32]	@ (800298c <uart_write+0x2c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f9      	beq.n	800296a <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a04      	ldr	r2, [pc, #16]	@ (800298c <uart_write+0x2c>)
 800297a:	b2db      	uxtb	r3, r3
 800297c:	6053      	str	r3, [r2, #4]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40004400 	.word	0x40004400

08002990 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	085a      	lsrs	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	441a      	add	r2, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	b29b      	uxth	r3, r3
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ffe3 	bl	8002990 <compute_uart_bd>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <uart_set_baudrate+0x24>)
 80029d0:	609a      	str	r2, [r3, #8]
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40004400 	.word	0x40004400

080029e0 <ip_assigned_callback>:

volatile bool is_ip_assigned =  false;


void ip_assigned_callback(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 80029e4:	4b03      	ldr	r3, [pc, #12]	@ (80029f4 <ip_assigned_callback+0x14>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	200007cc 	.word	0x200007cc

080029f8 <ip_update_callback>:

void ip_update_callback(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <ip_update_callback+0x14>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	200007cc 	.word	0x200007cc

08002a10 <ip_conflict_callback>:
void ip_conflict_callback(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
	is_ip_assigned =  false;
 8002a14:	4b03      	ldr	r3, [pc, #12]	@ (8002a24 <ip_conflict_callback+0x14>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	200007cc 	.word	0x200007cc

08002a28 <wizchip_cs_pin_init>:
    .dhcp =  NETINFO_DHCP
};
/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <wizchip_cs_pin_init+0x34>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <wizchip_cs_pin_init+0x34>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 8002a38:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <wizchip_cs_pin_init+0x38>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a08      	ldr	r2, [pc, #32]	@ (8002a60 <wizchip_cs_pin_init+0x38>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a42:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <wizchip_cs_pin_init+0x38>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a05      	ldr	r2, [pc, #20]	@ (8002a60 <wizchip_cs_pin_init+0x38>)
 8002a4a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a4e:	6013      	str	r3, [r2, #0]

}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000

08002a64 <wizchip_pin_cs_select>:
/*Select W5500 by pulling CS pin low*/
void wizchip_pin_cs_select(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <wizchip_pin_cs_select+0x1c>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <wizchip_pin_cs_select+0x1c>)
 8002a6e:	f023 0310 	bic.w	r3, r3, #16
 8002a72:	6153      	str	r3, [r2, #20]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40020000 	.word	0x40020000

08002a84 <wizchip_pin_cs_deselect>:

/*Unselect W5500 by pulling CS pin high*/
void wizchip_pin_cs_deselect(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <wizchip_pin_cs_deselect+0x1c>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <wizchip_pin_cs_deselect+0x1c>)
 8002a8e:	f043 0310 	orr.w	r3, r3, #16
 8002a92:	6153      	str	r3, [r2, #20]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40020000 	.word	0x40020000

08002aa4 <wizchip_read_burst>:

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);
 8002ab0:	887a      	ldrh	r2, [r7, #2]
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4803      	ldr	r0, [pc, #12]	@ (8002ac8 <wizchip_read_burst+0x24>)
 8002aba:	f7ff fbb3 	bl	8002224 <spi_receive>

}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200002dc 	.word	0x200002dc

08002acc <wizchip_read_byte>:

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ffe4 	bl	8002aa4 <wizchip_read_burst>
	return byte;
 8002adc:	79fb      	ldrb	r3, [r7, #7]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <wizchip_write_burst>:
/*Spi write multiple bytes*/
void wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4803      	ldr	r0, [pc, #12]	@ (8002b0c <wizchip_write_burst+0x24>)
 8002afe:	f7ff fa71 	bl	8001fe4 <spi_transmit>

}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200002dc 	.word	0x200002dc

08002b10 <wizchip_write_byte>:

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
	wizchip_write_burst(&byte,sizeof(byte));
 8002b1a:	1dfb      	adds	r3, r7, #7
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ffe2 	bl	8002ae8 <wizchip_write_burst>
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <w5500_spi_init>:
 void w5500_spi_init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8002b30:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b32:	4a13      	ldr	r2, [pc, #76]	@ (8002b80 <w5500_spi_init+0x54>)
 8002b34:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b3c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b44:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8002b50:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8002b56:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b5c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b6a:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Initialize spi*/
	spi_init(&hspi1);
 8002b70:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <w5500_spi_init+0x50>)
 8002b72:	f7ff f9cf 	bl	8001f14 <spi_init>

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200002dc 	.word	0x200002dc
 8002b80:	40013000 	.word	0x40013000

08002b84 <w5500_init>:


 void w5500_init(void)
 {
 8002b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b86:	b093      	sub	sp, #76	@ 0x4c
 8002b88:	af0a      	add	r7, sp, #40	@ 0x28
     //Set RX and TX Buffer sizes

	 /*Set 2KB buffer for each of the 8 sockets*/
	 uint8_t rx_tx_buff_sizes[]= {2,2,2,2,2,2,2,2};
 8002b8a:	4a4a      	ldr	r2, [pc, #296]	@ (8002cb4 <w5500_init+0x130>)
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b94:	e883 0003 	stmia.w	r3, {r0, r1}

	 /*Initialize the W5500 with the RX and TX buffer sizes*/
	 wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8002b98:	f107 0214 	add.w	r2, r7, #20
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 f978 	bl	8005e98 <wizchip_init>

	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_pin_cs_select,wizchip_pin_cs_deselect);
 8002ba8:	4943      	ldr	r1, [pc, #268]	@ (8002cb8 <w5500_init+0x134>)
 8002baa:	4844      	ldr	r0, [pc, #272]	@ (8002cbc <w5500_init+0x138>)
 8002bac:	f002 ffca 	bl	8005b44 <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
 8002bb0:	4943      	ldr	r1, [pc, #268]	@ (8002cc0 <w5500_init+0x13c>)
 8002bb2:	4844      	ldr	r0, [pc, #272]	@ (8002cc4 <w5500_init+0x140>)
 8002bb4:	f002 ffec 	bl	8005b90 <reg_wizchip_spi_cbfunc>
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 8002bb8:	4943      	ldr	r1, [pc, #268]	@ (8002cc8 <w5500_init+0x144>)
 8002bba:	4844      	ldr	r0, [pc, #272]	@ (8002ccc <w5500_init+0x148>)
 8002bbc:	f003 f814 	bl	8005be8 <reg_wizchip_spiburst_cbfunc>

	 /*Set MAC Address*/
	 setSHAR(net_info.mac);
 8002bc0:	2206      	movs	r2, #6
 8002bc2:	4943      	ldr	r1, [pc, #268]	@ (8002cd0 <w5500_init+0x14c>)
 8002bc4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002bc8:	f002 fd6c 	bl	80056a4 <WIZCHIP_WRITE_BUF>

	 /*Initialize DHCP*/
	 DHCP_init(DHCP_SOCKET,dhcp_buffer);
 8002bcc:	4941      	ldr	r1, [pc, #260]	@ (8002cd4 <w5500_init+0x150>)
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f001 fbaa 	bl	8004328 <DHCP_init>

	 //Register DHCP Callbacks
	 reg_dhcp_cbfunc(ip_assigned_callback,ip_update_callback,ip_conflict_callback);
 8002bd4:	4a40      	ldr	r2, [pc, #256]	@ (8002cd8 <w5500_init+0x154>)
 8002bd6:	4941      	ldr	r1, [pc, #260]	@ (8002cdc <w5500_init+0x158>)
 8002bd8:	4841      	ldr	r0, [pc, #260]	@ (8002ce0 <w5500_init+0x15c>)
 8002bda:	f000 f903 	bl	8002de4 <reg_dhcp_cbfunc>

	 /*Wait for IP assignment from DHCP*/
	 uint16_t timeout_counter =  10000;
 8002bde:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002be2:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002be4:	e004      	b.n	8002bf0 <w5500_init+0x6c>
	 {
		 DHCP_run();
 8002be6:	f001 f9e7 	bl	8003fb8 <DHCP_run>
		 timeout_counter--;
 8002bea:	8bfb      	ldrh	r3, [r7, #30]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce4 <w5500_init+0x160>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <w5500_init+0x82>
 8002c00:	8bfb      	ldrh	r3, [r7, #30]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ef      	bne.n	8002be6 <w5500_init+0x62>
	 }

	 if(!is_ip_assigned)
 8002c06:	4b37      	ldr	r3, [pc, #220]	@ (8002ce4 <w5500_init+0x160>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f083 0301 	eor.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d149      	bne.n	8002caa <w5500_init+0x126>
	 {
		 return;
	 }

	 /*Get network settings from DHCP*/
	 getIPfromDHCP(net_info.ip);
 8002c16:	4834      	ldr	r0, [pc, #208]	@ (8002ce8 <w5500_init+0x164>)
 8002c18:	f001 fc30 	bl	800447c <getIPfromDHCP>
	 getGWfromDHCP(net_info.gw);
 8002c1c:	4833      	ldr	r0, [pc, #204]	@ (8002cec <w5500_init+0x168>)
 8002c1e:	f001 fc4d 	bl	80044bc <getGWfromDHCP>
	 getSNfromDHCP(net_info.sn);
 8002c22:	4833      	ldr	r0, [pc, #204]	@ (8002cf0 <w5500_init+0x16c>)
 8002c24:	f001 fc6a 	bl	80044fc <getSNfromDHCP>


	/* Format and print the assigned IP, Gateway, and Subnet mask */
	sprintf(temp_buffer,
		"IP Address:  %d.%d.%d.%d\r\nGateway:  %d.%d.%d.%d\r\nSubnet mask: %d.%d.%d.%d\r\n",
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002c28:	4b29      	ldr	r3, [pc, #164]	@ (8002cd0 <w5500_init+0x14c>)
 8002c2a:	799b      	ldrb	r3, [r3, #6]
	sprintf(temp_buffer,
 8002c2c:	469c      	mov	ip, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002c2e:	4b28      	ldr	r3, [pc, #160]	@ (8002cd0 <w5500_init+0x14c>)
 8002c30:	79db      	ldrb	r3, [r3, #7]
	sprintf(temp_buffer,
 8002c32:	469e      	mov	lr, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002c34:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <w5500_init+0x14c>)
 8002c36:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(temp_buffer,
 8002c38:	461a      	mov	r2, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002c3a:	4b25      	ldr	r3, [pc, #148]	@ (8002cd0 <w5500_init+0x14c>)
 8002c3c:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(temp_buffer,
 8002c3e:	4619      	mov	r1, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002c40:	4b23      	ldr	r3, [pc, #140]	@ (8002cd0 <w5500_init+0x14c>)
 8002c42:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(temp_buffer,
 8002c44:	4618      	mov	r0, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002c46:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <w5500_init+0x14c>)
 8002c48:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(temp_buffer,
 8002c4a:	461c      	mov	r4, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002c4c:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <w5500_init+0x14c>)
 8002c4e:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(temp_buffer,
 8002c50:	461d      	mov	r5, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002c52:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd0 <w5500_init+0x14c>)
 8002c54:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(temp_buffer,
 8002c56:	461e      	mov	r6, r3
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002c58:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <w5500_init+0x14c>)
 8002c5a:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(temp_buffer,
 8002c5c:	60fb      	str	r3, [r7, #12]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd0 <w5500_init+0x14c>)
 8002c60:	7adb      	ldrb	r3, [r3, #11]
	sprintf(temp_buffer,
 8002c62:	60bb      	str	r3, [r7, #8]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002c64:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <w5500_init+0x14c>)
 8002c66:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(temp_buffer,
 8002c68:	607b      	str	r3, [r7, #4]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002c6a:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <w5500_init+0x14c>)
 8002c6c:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(temp_buffer,
 8002c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	9308      	str	r3, [sp, #32]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	9307      	str	r3, [sp, #28]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	9306      	str	r3, [sp, #24]
 8002c7c:	9605      	str	r6, [sp, #20]
 8002c7e:	9504      	str	r5, [sp, #16]
 8002c80:	9403      	str	r4, [sp, #12]
 8002c82:	9002      	str	r0, [sp, #8]
 8002c84:	9101      	str	r1, [sp, #4]
 8002c86:	9200      	str	r2, [sp, #0]
 8002c88:	4673      	mov	r3, lr
 8002c8a:	4662      	mov	r2, ip
 8002c8c:	4919      	ldr	r1, [pc, #100]	@ (8002cf4 <w5500_init+0x170>)
 8002c8e:	481a      	ldr	r0, [pc, #104]	@ (8002cf8 <w5500_init+0x174>)
 8002c90:	f003 fd92 	bl	80067b8 <siprintf>
	);

    printf("*************Network Information************************\r\n");
 8002c94:	4819      	ldr	r0, [pc, #100]	@ (8002cfc <w5500_init+0x178>)
 8002c96:	f003 fd87 	bl	80067a8 <puts>
    printf("%s", temp_buffer);
 8002c9a:	4917      	ldr	r1, [pc, #92]	@ (8002cf8 <w5500_init+0x174>)
 8002c9c:	4818      	ldr	r0, [pc, #96]	@ (8002d00 <w5500_init+0x17c>)
 8002c9e:	f003 fd1b 	bl	80066d8 <iprintf>

    /*Apply the network configurations to the W5500*/
    wizchip_setnetinfo(&net_info);
 8002ca2:	480b      	ldr	r0, [pc, #44]	@ (8002cd0 <w5500_init+0x14c>)
 8002ca4:	f003 fb68 	bl	8006378 <wizchip_setnetinfo>
 8002ca8:	e000      	b.n	8002cac <w5500_init+0x128>
		 return;
 8002caa:	bf00      	nop

 }
 8002cac:	3724      	adds	r7, #36	@ 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	08007a30 	.word	0x08007a30
 8002cb8:	08002a85 	.word	0x08002a85
 8002cbc:	08002a65 	.word	0x08002a65
 8002cc0:	08002b11 	.word	0x08002b11
 8002cc4:	08002acd 	.word	0x08002acd
 8002cc8:	08002ae9 	.word	0x08002ae9
 8002ccc:	08002aa5 	.word	0x08002aa5
 8002cd0:	20000070 	.word	0x20000070
 8002cd4:	200003cc 	.word	0x200003cc
 8002cd8:	08002a11 	.word	0x08002a11
 8002cdc:	080029f9 	.word	0x080029f9
 8002ce0:	080029e1 	.word	0x080029e1
 8002ce4:	200007cc 	.word	0x200007cc
 8002ce8:	20000076 	.word	0x20000076
 8002cec:	2000007e 	.word	0x2000007e
 8002cf0:	2000007a 	.word	0x2000007a
 8002cf4:	080079a4 	.word	0x080079a4
 8002cf8:	20000320 	.word	0x20000320
 8002cfc:	080079f0 	.word	0x080079f0
 8002d00:	08007a2c 	.word	0x08007a2c

08002d04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d04:	480d      	ldr	r0, [pc, #52]	@ (8002d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d06:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d0c:	480c      	ldr	r0, [pc, #48]	@ (8002d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d0e:	490d      	ldr	r1, [pc, #52]	@ (8002d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d10:	4a0d      	ldr	r2, [pc, #52]	@ (8002d48 <LoopForever+0xe>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d14:	e002      	b.n	8002d1c <LoopCopyDataInit>

08002d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1a:	3304      	adds	r3, #4

08002d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d20:	d3f9      	bcc.n	8002d16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d22:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d24:	4c0a      	ldr	r4, [pc, #40]	@ (8002d50 <LoopForever+0x16>)
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d28:	e001      	b.n	8002d2e <LoopFillZerobss>

08002d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d2c:	3204      	adds	r2, #4

08002d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d30:	d3fb      	bcc.n	8002d2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d32:	f003 feaf 	bl	8006a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d36:	f7fe ffcd 	bl	8001cd4 <main>

08002d3a <LoopForever>:

LoopForever:
    b LoopForever
 8002d3a:	e7fe      	b.n	8002d3a <LoopForever>
  ldr   r0, =_estack
 8002d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d44:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002d48:	08007a90 	.word	0x08007a90
  ldr r2, =_sbss
 8002d4c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002d50:	20000974 	.word	0x20000974

08002d54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d54:	e7fe      	b.n	8002d54 <ADC_IRQHandler>
	...

08002d58 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	4909      	ldr	r1, [pc, #36]	@ (8002d84 <default_ip_assign+0x2c>)
 8002d60:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002d64:	f002 fc9e 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8002d68:	2204      	movs	r2, #4
 8002d6a:	4907      	ldr	r1, [pc, #28]	@ (8002d88 <default_ip_assign+0x30>)
 8002d6c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002d70:	f002 fc98 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8002d74:	2204      	movs	r2, #4
 8002d76:	4905      	ldr	r1, [pc, #20]	@ (8002d8c <default_ip_assign+0x34>)
 8002d78:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002d7c:	f002 fc92 	bl	80056a4 <WIZCHIP_WRITE_BUF>
}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200007dc 	.word	0x200007dc
 8002d88:	200007e4 	.word	0x200007e4
 8002d8c:	200007e0 	.word	0x200007e0

08002d90 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8002d94:	2180      	movs	r1, #128	@ 0x80
 8002d96:	2000      	movs	r0, #0
 8002d98:	f002 fbd6 	bl	8005548 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f002 fb87 	bl	80054b0 <WIZCHIP_READ>
   default_ip_assign();
 8002da2:	f7ff ffd9 	bl	8002d58 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8002da6:	2206      	movs	r2, #6
 8002da8:	4903      	ldr	r1, [pc, #12]	@ (8002db8 <default_ip_update+0x28>)
 8002daa:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002dae:	f002 fc79 	bl	80056a4 <WIZCHIP_WRITE_BUF>
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200007fc 	.word	0x200007fc

08002dbc <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8002dc0:	2180      	movs	r1, #128	@ 0x80
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f002 fbc0 	bl	8005548 <WIZCHIP_WRITE>
	getMR(); // for delay
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f002 fb71 	bl	80054b0 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8002dce:	2206      	movs	r2, #6
 8002dd0:	4903      	ldr	r1, [pc, #12]	@ (8002de0 <default_ip_conflict+0x24>)
 8002dd2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002dd6:	f002 fc65 	bl	80056a4 <WIZCHIP_WRITE_BUF>
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200007fc 	.word	0x200007fc

08002de4 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8002df0:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <reg_dhcp_cbfunc+0x50>)
 8002df2:	4a11      	ldr	r2, [pc, #68]	@ (8002e38 <reg_dhcp_cbfunc+0x54>)
 8002df4:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8002df6:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <reg_dhcp_cbfunc+0x58>)
 8002df8:	4a11      	ldr	r2, [pc, #68]	@ (8002e40 <reg_dhcp_cbfunc+0x5c>)
 8002dfa:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <reg_dhcp_cbfunc+0x60>)
 8002dfe:	4a12      	ldr	r2, [pc, #72]	@ (8002e48 <reg_dhcp_cbfunc+0x64>)
 8002e00:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <reg_dhcp_cbfunc+0x2a>
 8002e08:	4a0a      	ldr	r2, [pc, #40]	@ (8002e34 <reg_dhcp_cbfunc+0x50>)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <reg_dhcp_cbfunc+0x36>
 8002e14:	4a09      	ldr	r2, [pc, #36]	@ (8002e3c <reg_dhcp_cbfunc+0x58>)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <reg_dhcp_cbfunc+0x42>
 8002e20:	4a08      	ldr	r2, [pc, #32]	@ (8002e44 <reg_dhcp_cbfunc+0x60>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000098 	.word	0x20000098
 8002e38:	08002d59 	.word	0x08002d59
 8002e3c:	2000009c 	.word	0x2000009c
 8002e40:	08002d91 	.word	0x08002d91
 8002e44:	200000a0 	.word	0x200000a0
 8002e48:	08002dbd 	.word	0x08002dbd

08002e4c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8002e52:	463b      	mov	r3, r7
 8002e54:	2206      	movs	r2, #6
 8002e56:	4619      	mov	r1, r3
 8002e58:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002e5c:	f002 fbc2 	bl	80055e4 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8002e60:	4b72      	ldr	r3, [pc, #456]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8002e68:	4b70      	ldr	r3, [pc, #448]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8002e70:	4b6e      	ldr	r3, [pc, #440]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2206      	movs	r2, #6
 8002e76:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8002e78:	4b6c      	ldr	r3, [pc, #432]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8002e80:	4b6a      	ldr	r3, [pc, #424]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3304      	adds	r3, #4
 8002e86:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8002e88:	4b69      	ldr	r3, [pc, #420]	@ (8003030 <makeDHCPMSG+0x1e4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e1b      	lsrs	r3, r3, #24
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8002e94:	4b66      	ldr	r3, [pc, #408]	@ (8003030 <makeDHCPMSG+0x1e4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0c1a      	lsrs	r2, r3, #16
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8002ea2:	4b63      	ldr	r3, [pc, #396]	@ (8003030 <makeDHCPMSG+0x1e4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0a1a      	lsrs	r2, r3, #8
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	3302      	adds	r3, #2
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8002eb0:	4b5f      	ldr	r3, [pc, #380]	@ (8003030 <makeDHCPMSG+0x1e4>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	3303      	adds	r3, #3
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8002ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8002ec4:	4b59      	ldr	r3, [pc, #356]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330a      	adds	r3, #10
 8002eca:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2280      	movs	r2, #128	@ 0x80
 8002ed0:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8002eda:	4b54      	ldr	r3, [pc, #336]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8002ee2:	4b52      	ldr	r3, [pc, #328]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8002eea:	4b50      	ldr	r3, [pc, #320]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8002ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8002efa:	4b4c      	ldr	r3, [pc, #304]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8002f02:	4b4a      	ldr	r3, [pc, #296]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8002f0a:	4b48      	ldr	r3, [pc, #288]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8002f12:	4b46      	ldr	r3, [pc, #280]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8002f1a:	4b44      	ldr	r3, [pc, #272]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8002f22:	4b42      	ldr	r3, [pc, #264]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8002f2a:	4b40      	ldr	r3, [pc, #256]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8002f32:	4b3e      	ldr	r3, [pc, #248]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8002f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8002f42:	4b3a      	ldr	r3, [pc, #232]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2200      	movs	r2, #0
 8002f48:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8002f4a:	4b38      	ldr	r3, [pc, #224]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8002f52:	4b36      	ldr	r3, [pc, #216]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8002f5a:	4b34      	ldr	r3, [pc, #208]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a35      	ldr	r2, [pc, #212]	@ (8003034 <makeDHCPMSG+0x1e8>)
 8002f60:	7812      	ldrb	r2, [r2, #0]
 8002f62:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8002f64:	4b31      	ldr	r3, [pc, #196]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a32      	ldr	r2, [pc, #200]	@ (8003034 <makeDHCPMSG+0x1e8>)
 8002f6a:	7852      	ldrb	r2, [r2, #1]
 8002f6c:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8002f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a30      	ldr	r2, [pc, #192]	@ (8003034 <makeDHCPMSG+0x1e8>)
 8002f74:	7892      	ldrb	r2, [r2, #2]
 8002f76:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8002f78:	4b2c      	ldr	r3, [pc, #176]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003034 <makeDHCPMSG+0x1e8>)
 8002f7e:	78d2      	ldrb	r2, [r2, #3]
 8002f80:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8002f82:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2b      	ldr	r2, [pc, #172]	@ (8003034 <makeDHCPMSG+0x1e8>)
 8002f88:	7912      	ldrb	r2, [r2, #4]
 8002f8a:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8002f8e:	4b27      	ldr	r3, [pc, #156]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a28      	ldr	r2, [pc, #160]	@ (8003034 <makeDHCPMSG+0x1e8>)
 8002f94:	7952      	ldrb	r2, [r2, #5]
 8002f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8002f9a:	2306      	movs	r3, #6
 8002f9c:	73fb      	strb	r3, [r7, #15]
 8002f9e:	e008      	b.n	8002fb2 <makeDHCPMSG+0x166>
 8002fa0:	4b22      	ldr	r3, [pc, #136]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b0f      	cmp	r3, #15
 8002fb6:	d9f3      	bls.n	8002fa0 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	e009      	b.n	8002fd2 <makeDHCPMSG+0x186>
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fd6:	d9f2      	bls.n	8002fbe <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e009      	b.n	8002ff2 <makeDHCPMSG+0x1a6>
 8002fde:	4b13      	ldr	r3, [pc, #76]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	daf1      	bge.n	8002fde <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <makeDHCPMSG+0x1e0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2263      	movs	r2, #99	@ 0x63
 8003000:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8003004:	4b09      	ldr	r3, [pc, #36]	@ (800302c <makeDHCPMSG+0x1e0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2282      	movs	r2, #130	@ 0x82
 800300a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800300e:	4b07      	ldr	r3, [pc, #28]	@ (800302c <makeDHCPMSG+0x1e0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2253      	movs	r2, #83	@ 0x53
 8003014:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8003018:	4b04      	ldr	r3, [pc, #16]	@ (800302c <makeDHCPMSG+0x1e0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2263      	movs	r2, #99	@ 0x63
 800301e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200007f8 	.word	0x200007f8
 8003030:	200007f4 	.word	0x200007f4
 8003034:	200007fc 	.word	0x200007fc

08003038 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8003042:	f7ff ff03 	bl	8002e4c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8003046:	4b56      	ldr	r3, [pc, #344]	@ (80031a0 <send_DHCP_DISCOVER+0x168>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 800304c:	4b54      	ldr	r3, [pc, #336]	@ (80031a0 <send_DHCP_DISCOVER+0x168>)
 800304e:	2200      	movs	r2, #0
 8003050:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8003052:	4b53      	ldr	r3, [pc, #332]	@ (80031a0 <send_DHCP_DISCOVER+0x168>)
 8003054:	2200      	movs	r2, #0
 8003056:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8003058:	4b51      	ldr	r3, [pc, #324]	@ (80031a0 <send_DHCP_DISCOVER+0x168>)
 800305a:	2200      	movs	r2, #0
 800305c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800305e:	4b51      	ldr	r3, [pc, #324]	@ (80031a4 <send_DHCP_DISCOVER+0x16c>)
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8003064:	4b4f      	ldr	r3, [pc, #316]	@ (80031a4 <send_DHCP_DISCOVER+0x16c>)
 8003066:	2200      	movs	r2, #0
 8003068:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 800306a:	4b4e      	ldr	r3, [pc, #312]	@ (80031a4 <send_DHCP_DISCOVER+0x16c>)
 800306c:	2200      	movs	r2, #0
 800306e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8003070:	4b4c      	ldr	r3, [pc, #304]	@ (80031a4 <send_DHCP_DISCOVER+0x16c>)
 8003072:	2200      	movs	r2, #0
 8003074:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003076:	2304      	movs	r3, #4
 8003078:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800307a:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	88bb      	ldrh	r3, [r7, #4]
 8003080:	1c59      	adds	r1, r3, #1
 8003082:	80b9      	strh	r1, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	2235      	movs	r2, #53	@ 0x35
 8003088:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800308c:	4b46      	ldr	r3, [pc, #280]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	88bb      	ldrh	r3, [r7, #4]
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	80b9      	strh	r1, [r7, #4]
 8003096:	4413      	add	r3, r2
 8003098:	2201      	movs	r2, #1
 800309a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 800309e:	4b42      	ldr	r3, [pc, #264]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	88bb      	ldrh	r3, [r7, #4]
 80030a4:	1c59      	adds	r1, r3, #1
 80030a6:	80b9      	strh	r1, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80030b0:	4b3d      	ldr	r3, [pc, #244]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	88bb      	ldrh	r3, [r7, #4]
 80030b6:	1c59      	adds	r1, r3, #1
 80030b8:	80b9      	strh	r1, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	223d      	movs	r2, #61	@ 0x3d
 80030be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80030c2:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	88bb      	ldrh	r3, [r7, #4]
 80030c8:	1c59      	adds	r1, r3, #1
 80030ca:	80b9      	strh	r1, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	2207      	movs	r2, #7
 80030d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80030d4:	4b34      	ldr	r3, [pc, #208]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	88bb      	ldrh	r3, [r7, #4]
 80030da:	1c59      	adds	r1, r3, #1
 80030dc:	80b9      	strh	r1, [r7, #4]
 80030de:	4413      	add	r3, r2
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80030e6:	4b30      	ldr	r3, [pc, #192]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	88bb      	ldrh	r3, [r7, #4]
 80030ec:	1c59      	adds	r1, r3, #1
 80030ee:	80b9      	strh	r1, [r7, #4]
 80030f0:	4618      	mov	r0, r3
 80030f2:	4b2e      	ldr	r3, [pc, #184]	@ (80031ac <send_DHCP_DISCOVER+0x174>)
 80030f4:	7819      	ldrb	r1, [r3, #0]
 80030f6:	1813      	adds	r3, r2, r0
 80030f8:	460a      	mov	r2, r1
 80030fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80030fe:	4b2a      	ldr	r3, [pc, #168]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	88bb      	ldrh	r3, [r7, #4]
 8003104:	1c59      	adds	r1, r3, #1
 8003106:	80b9      	strh	r1, [r7, #4]
 8003108:	4618      	mov	r0, r3
 800310a:	4b28      	ldr	r3, [pc, #160]	@ (80031ac <send_DHCP_DISCOVER+0x174>)
 800310c:	7859      	ldrb	r1, [r3, #1]
 800310e:	1813      	adds	r3, r2, r0
 8003110:	460a      	mov	r2, r1
 8003112:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003116:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	88bb      	ldrh	r3, [r7, #4]
 800311c:	1c59      	adds	r1, r3, #1
 800311e:	80b9      	strh	r1, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	4b22      	ldr	r3, [pc, #136]	@ (80031ac <send_DHCP_DISCOVER+0x174>)
 8003124:	7899      	ldrb	r1, [r3, #2]
 8003126:	1813      	adds	r3, r2, r0
 8003128:	460a      	mov	r2, r1
 800312a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800312e:	4b1e      	ldr	r3, [pc, #120]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	88bb      	ldrh	r3, [r7, #4]
 8003134:	1c59      	adds	r1, r3, #1
 8003136:	80b9      	strh	r1, [r7, #4]
 8003138:	4618      	mov	r0, r3
 800313a:	4b1c      	ldr	r3, [pc, #112]	@ (80031ac <send_DHCP_DISCOVER+0x174>)
 800313c:	78d9      	ldrb	r1, [r3, #3]
 800313e:	1813      	adds	r3, r2, r0
 8003140:	460a      	mov	r2, r1
 8003142:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003146:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	88bb      	ldrh	r3, [r7, #4]
 800314c:	1c59      	adds	r1, r3, #1
 800314e:	80b9      	strh	r1, [r7, #4]
 8003150:	4618      	mov	r0, r3
 8003152:	4b16      	ldr	r3, [pc, #88]	@ (80031ac <send_DHCP_DISCOVER+0x174>)
 8003154:	7919      	ldrb	r1, [r3, #4]
 8003156:	1813      	adds	r3, r2, r0
 8003158:	460a      	mov	r2, r1
 800315a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800315e:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	88bb      	ldrh	r3, [r7, #4]
 8003164:	1c59      	adds	r1, r3, #1
 8003166:	80b9      	strh	r1, [r7, #4]
 8003168:	4618      	mov	r0, r3
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <send_DHCP_DISCOVER+0x174>)
 800316c:	7959      	ldrb	r1, [r3, #5]
 800316e:	1813      	adds	r3, r2, r0
 8003170:	460a      	mov	r2, r1
 8003172:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003176:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	88bb      	ldrh	r3, [r7, #4]
 800317c:	1c59      	adds	r1, r3, #1
 800317e:	80b9      	strh	r1, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	220c      	movs	r2, #12
 8003184:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8003188:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <send_DHCP_DISCOVER+0x170>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	88bb      	ldrh	r3, [r7, #4]
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	80b9      	strh	r1, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	2200      	movs	r2, #0
 8003196:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800319a:	2300      	movs	r3, #0
 800319c:	80fb      	strh	r3, [r7, #6]
 800319e:	e017      	b.n	80031d0 <send_DHCP_DISCOVER+0x198>
 80031a0:	200007d0 	.word	0x200007d0
 80031a4:	200007d4 	.word	0x200007d4
 80031a8:	200007f8 	.word	0x200007f8
 80031ac:	200007fc 	.word	0x200007fc
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80031b0:	88f9      	ldrh	r1, [r7, #6]
 80031b2:	4b80      	ldr	r3, [pc, #512]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	88bb      	ldrh	r3, [r7, #4]
 80031b8:	1c58      	adds	r0, r3, #1
 80031ba:	80b8      	strh	r0, [r7, #4]
 80031bc:	4618      	mov	r0, r3
 80031be:	4b7e      	ldr	r3, [pc, #504]	@ (80033b8 <send_DHCP_DISCOVER+0x380>)
 80031c0:	5c59      	ldrb	r1, [r3, r1]
 80031c2:	1813      	adds	r3, r2, r0
 80031c4:	460a      	mov	r2, r1
 80031c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	3301      	adds	r3, #1
 80031ce:	80fb      	strh	r3, [r7, #6]
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	4a79      	ldr	r2, [pc, #484]	@ (80033b8 <send_DHCP_DISCOVER+0x380>)
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ea      	bne.n	80031b0 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80031da:	4b78      	ldr	r3, [pc, #480]	@ (80033bc <send_DHCP_DISCOVER+0x384>)
 80031dc:	78db      	ldrb	r3, [r3, #3]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4b74      	ldr	r3, [pc, #464]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 80031e4:	681c      	ldr	r4, [r3, #0]
 80031e6:	88bb      	ldrh	r3, [r7, #4]
 80031e8:	1c59      	adds	r1, r3, #1
 80031ea:	80b9      	strh	r1, [r7, #4]
 80031ec:	461d      	mov	r5, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f001 f9a4 	bl	800453c <NibbleToHex>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	1963      	adds	r3, r4, r5
 80031fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80031fe:	4b6f      	ldr	r3, [pc, #444]	@ (80033bc <send_DHCP_DISCOVER+0x384>)
 8003200:	78da      	ldrb	r2, [r3, #3]
 8003202:	4b6c      	ldr	r3, [pc, #432]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 8003204:	681c      	ldr	r4, [r3, #0]
 8003206:	88bb      	ldrh	r3, [r7, #4]
 8003208:	1c59      	adds	r1, r3, #1
 800320a:	80b9      	strh	r1, [r7, #4]
 800320c:	461d      	mov	r5, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f001 f994 	bl	800453c <NibbleToHex>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	1963      	adds	r3, r4, r5
 800321a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800321e:	4b67      	ldr	r3, [pc, #412]	@ (80033bc <send_DHCP_DISCOVER+0x384>)
 8003220:	791b      	ldrb	r3, [r3, #4]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	b2da      	uxtb	r2, r3
 8003226:	4b63      	ldr	r3, [pc, #396]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 8003228:	681c      	ldr	r4, [r3, #0]
 800322a:	88bb      	ldrh	r3, [r7, #4]
 800322c:	1c59      	adds	r1, r3, #1
 800322e:	80b9      	strh	r1, [r7, #4]
 8003230:	461d      	mov	r5, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f001 f982 	bl	800453c <NibbleToHex>
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	1963      	adds	r3, r4, r5
 800323e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8003242:	4b5e      	ldr	r3, [pc, #376]	@ (80033bc <send_DHCP_DISCOVER+0x384>)
 8003244:	791a      	ldrb	r2, [r3, #4]
 8003246:	4b5b      	ldr	r3, [pc, #364]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 8003248:	681c      	ldr	r4, [r3, #0]
 800324a:	88bb      	ldrh	r3, [r7, #4]
 800324c:	1c59      	adds	r1, r3, #1
 800324e:	80b9      	strh	r1, [r7, #4]
 8003250:	461d      	mov	r5, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f001 f972 	bl	800453c <NibbleToHex>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	1963      	adds	r3, r4, r5
 800325e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8003262:	4b56      	ldr	r3, [pc, #344]	@ (80033bc <send_DHCP_DISCOVER+0x384>)
 8003264:	795b      	ldrb	r3, [r3, #5]
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4b52      	ldr	r3, [pc, #328]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 800326c:	681c      	ldr	r4, [r3, #0]
 800326e:	88bb      	ldrh	r3, [r7, #4]
 8003270:	1c59      	adds	r1, r3, #1
 8003272:	80b9      	strh	r1, [r7, #4]
 8003274:	461d      	mov	r5, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f001 f960 	bl	800453c <NibbleToHex>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	1963      	adds	r3, r4, r5
 8003282:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8003286:	4b4d      	ldr	r3, [pc, #308]	@ (80033bc <send_DHCP_DISCOVER+0x384>)
 8003288:	795a      	ldrb	r2, [r3, #5]
 800328a:	4b4a      	ldr	r3, [pc, #296]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 800328c:	681c      	ldr	r4, [r3, #0]
 800328e:	88bb      	ldrh	r3, [r7, #4]
 8003290:	1c59      	adds	r1, r3, #1
 8003292:	80b9      	strh	r1, [r7, #4]
 8003294:	461d      	mov	r5, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f001 f950 	bl	800453c <NibbleToHex>
 800329c:	4603      	mov	r3, r0
 800329e:	461a      	mov	r2, r3
 80032a0:	1963      	adds	r3, r4, r5
 80032a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	b2d9      	uxtb	r1, r3
 80032aa:	4b42      	ldr	r3, [pc, #264]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	88b8      	ldrh	r0, [r7, #4]
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	3307      	adds	r3, #7
 80032b4:	1ac3      	subs	r3, r0, r3
 80032b6:	3106      	adds	r1, #6
 80032b8:	b2c9      	uxtb	r1, r1
 80032ba:	4413      	add	r3, r2
 80032bc:	460a      	mov	r2, r1
 80032be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80032c2:	4b3c      	ldr	r3, [pc, #240]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	88bb      	ldrh	r3, [r7, #4]
 80032c8:	1c59      	adds	r1, r3, #1
 80032ca:	80b9      	strh	r1, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	2237      	movs	r2, #55	@ 0x37
 80032d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80032d4:	4b37      	ldr	r3, [pc, #220]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	88bb      	ldrh	r3, [r7, #4]
 80032da:	1c59      	adds	r1, r3, #1
 80032dc:	80b9      	strh	r1, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	2206      	movs	r2, #6
 80032e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80032e6:	4b33      	ldr	r3, [pc, #204]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	88bb      	ldrh	r3, [r7, #4]
 80032ec:	1c59      	adds	r1, r3, #1
 80032ee:	80b9      	strh	r1, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80032f8:	4b2e      	ldr	r3, [pc, #184]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	88bb      	ldrh	r3, [r7, #4]
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	80b9      	strh	r1, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	2203      	movs	r2, #3
 8003306:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 800330a:	4b2a      	ldr	r3, [pc, #168]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	88bb      	ldrh	r3, [r7, #4]
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	80b9      	strh	r1, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	2206      	movs	r2, #6
 8003318:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800331c:	4b25      	ldr	r3, [pc, #148]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	88bb      	ldrh	r3, [r7, #4]
 8003322:	1c59      	adds	r1, r3, #1
 8003324:	80b9      	strh	r1, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	220f      	movs	r2, #15
 800332a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800332e:	4b21      	ldr	r3, [pc, #132]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	88bb      	ldrh	r3, [r7, #4]
 8003334:	1c59      	adds	r1, r3, #1
 8003336:	80b9      	strh	r1, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	223a      	movs	r2, #58	@ 0x3a
 800333c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8003340:	4b1c      	ldr	r3, [pc, #112]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	88bb      	ldrh	r3, [r7, #4]
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	80b9      	strh	r1, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	223b      	movs	r2, #59	@ 0x3b
 800334e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8003352:	4b18      	ldr	r3, [pc, #96]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	88bb      	ldrh	r3, [r7, #4]
 8003358:	1c59      	adds	r1, r3, #1
 800335a:	80b9      	strh	r1, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	22ff      	movs	r2, #255	@ 0xff
 8003360:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003364:	88bb      	ldrh	r3, [r7, #4]
 8003366:	80fb      	strh	r3, [r7, #6]
 8003368:	e009      	b.n	800337e <send_DHCP_DISCOVER+0x346>
 800336a:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4413      	add	r3, r2
 8003372:	2200      	movs	r2, #0
 8003374:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	3301      	adds	r3, #1
 800337c:	80fb      	strh	r3, [r7, #6]
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003384:	d3f1      	bcc.n	800336a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8003386:	23ff      	movs	r3, #255	@ 0xff
 8003388:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 800338a:	23ff      	movs	r3, #255	@ 0xff
 800338c:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800338e:	23ff      	movs	r3, #255	@ 0xff
 8003390:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8003392:	23ff      	movs	r3, #255	@ 0xff
 8003394:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003396:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <send_DHCP_DISCOVER+0x388>)
 8003398:	7818      	ldrb	r0, [r3, #0]
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <send_DHCP_DISCOVER+0x37c>)
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	463b      	mov	r3, r7
 80033a0:	2243      	movs	r2, #67	@ 0x43
 80033a2:	9200      	str	r2, [sp, #0]
 80033a4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80033a8:	f001 fd62 	bl	8004e70 <sendto>
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bdb0      	pop	{r4, r5, r7, pc}
 80033b4:	200007f8 	.word	0x200007f8
 80033b8:	20000090 	.word	0x20000090
 80033bc:	200007fc 	.word	0x200007fc
 80033c0:	200007cd 	.word	0x200007cd

080033c4 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80033c4:	b5b0      	push	{r4, r5, r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80033ce:	f7ff fd3d 	bl	8002e4c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80033d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <send_DHCP_REQUEST+0x7c>)
 80033d4:	f993 3000 	ldrsb.w	r3, [r3]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d004      	beq.n	80033e6 <send_DHCP_REQUEST+0x22>
 80033dc:	4b18      	ldr	r3, [pc, #96]	@ (8003440 <send_DHCP_REQUEST+0x7c>)
 80033de:	f993 3000 	ldrsb.w	r3, [r3]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d134      	bne.n	8003450 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80033e6:	4b17      	ldr	r3, [pc, #92]	@ (8003444 <send_DHCP_REQUEST+0x80>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330a      	adds	r3, #10
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80033f0:	4b14      	ldr	r3, [pc, #80]	@ (8003444 <send_DHCP_REQUEST+0x80>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330a      	adds	r3, #10
 80033f6:	3301      	adds	r3, #1
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80033fc:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <send_DHCP_REQUEST+0x80>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <send_DHCP_REQUEST+0x84>)
 8003402:	7812      	ldrb	r2, [r2, #0]
 8003404:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8003406:	4b0f      	ldr	r3, [pc, #60]	@ (8003444 <send_DHCP_REQUEST+0x80>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a0f      	ldr	r2, [pc, #60]	@ (8003448 <send_DHCP_REQUEST+0x84>)
 800340c:	7852      	ldrb	r2, [r2, #1]
 800340e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8003410:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <send_DHCP_REQUEST+0x80>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0c      	ldr	r2, [pc, #48]	@ (8003448 <send_DHCP_REQUEST+0x84>)
 8003416:	7892      	ldrb	r2, [r2, #2]
 8003418:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800341a:	4b0a      	ldr	r3, [pc, #40]	@ (8003444 <send_DHCP_REQUEST+0x80>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <send_DHCP_REQUEST+0x84>)
 8003420:	78d2      	ldrb	r2, [r2, #3]
 8003422:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8003424:	4b09      	ldr	r3, [pc, #36]	@ (800344c <send_DHCP_REQUEST+0x88>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800342a:	4b08      	ldr	r3, [pc, #32]	@ (800344c <send_DHCP_REQUEST+0x88>)
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8003430:	4b06      	ldr	r3, [pc, #24]	@ (800344c <send_DHCP_REQUEST+0x88>)
 8003432:	789b      	ldrb	r3, [r3, #2]
 8003434:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8003436:	4b05      	ldr	r3, [pc, #20]	@ (800344c <send_DHCP_REQUEST+0x88>)
 8003438:	78db      	ldrb	r3, [r3, #3]
 800343a:	71fb      	strb	r3, [r7, #7]
 800343c:	e010      	b.n	8003460 <send_DHCP_REQUEST+0x9c>
 800343e:	bf00      	nop
 8003440:	200007ec 	.word	0x200007ec
 8003444:	200007f8 	.word	0x200007f8
 8003448:	200007dc 	.word	0x200007dc
 800344c:	200007d0 	.word	0x200007d0
   }
   else
   {
   	ip[0] = 255;
 8003450:	23ff      	movs	r3, #255	@ 0xff
 8003452:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8003454:	23ff      	movs	r3, #255	@ 0xff
 8003456:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8003458:	23ff      	movs	r3, #255	@ 0xff
 800345a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 800345c:	23ff      	movs	r3, #255	@ 0xff
 800345e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003460:	2304      	movs	r3, #4
 8003462:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003464:	4b8d      	ldr	r3, [pc, #564]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	897b      	ldrh	r3, [r7, #10]
 800346a:	1c59      	adds	r1, r3, #1
 800346c:	8179      	strh	r1, [r7, #10]
 800346e:	4413      	add	r3, r2
 8003470:	2235      	movs	r2, #53	@ 0x35
 8003472:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003476:	4b89      	ldr	r3, [pc, #548]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	1c59      	adds	r1, r3, #1
 800347e:	8179      	strh	r1, [r7, #10]
 8003480:	4413      	add	r3, r2
 8003482:	2201      	movs	r2, #1
 8003484:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8003488:	4b84      	ldr	r3, [pc, #528]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	897b      	ldrh	r3, [r7, #10]
 800348e:	1c59      	adds	r1, r3, #1
 8003490:	8179      	strh	r1, [r7, #10]
 8003492:	4413      	add	r3, r2
 8003494:	2203      	movs	r2, #3
 8003496:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800349a:	4b80      	ldr	r3, [pc, #512]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	897b      	ldrh	r3, [r7, #10]
 80034a0:	1c59      	adds	r1, r3, #1
 80034a2:	8179      	strh	r1, [r7, #10]
 80034a4:	4413      	add	r3, r2
 80034a6:	223d      	movs	r2, #61	@ 0x3d
 80034a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80034ac:	4b7b      	ldr	r3, [pc, #492]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	897b      	ldrh	r3, [r7, #10]
 80034b2:	1c59      	adds	r1, r3, #1
 80034b4:	8179      	strh	r1, [r7, #10]
 80034b6:	4413      	add	r3, r2
 80034b8:	2207      	movs	r2, #7
 80034ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80034be:	4b77      	ldr	r3, [pc, #476]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	897b      	ldrh	r3, [r7, #10]
 80034c4:	1c59      	adds	r1, r3, #1
 80034c6:	8179      	strh	r1, [r7, #10]
 80034c8:	4413      	add	r3, r2
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80034d0:	4b72      	ldr	r3, [pc, #456]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	1c59      	adds	r1, r3, #1
 80034d8:	8179      	strh	r1, [r7, #10]
 80034da:	4618      	mov	r0, r3
 80034dc:	4b70      	ldr	r3, [pc, #448]	@ (80036a0 <send_DHCP_REQUEST+0x2dc>)
 80034de:	7819      	ldrb	r1, [r3, #0]
 80034e0:	1813      	adds	r3, r2, r0
 80034e2:	460a      	mov	r2, r1
 80034e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80034e8:	4b6c      	ldr	r3, [pc, #432]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	897b      	ldrh	r3, [r7, #10]
 80034ee:	1c59      	adds	r1, r3, #1
 80034f0:	8179      	strh	r1, [r7, #10]
 80034f2:	4618      	mov	r0, r3
 80034f4:	4b6a      	ldr	r3, [pc, #424]	@ (80036a0 <send_DHCP_REQUEST+0x2dc>)
 80034f6:	7859      	ldrb	r1, [r3, #1]
 80034f8:	1813      	adds	r3, r2, r0
 80034fa:	460a      	mov	r2, r1
 80034fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003500:	4b66      	ldr	r3, [pc, #408]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	897b      	ldrh	r3, [r7, #10]
 8003506:	1c59      	adds	r1, r3, #1
 8003508:	8179      	strh	r1, [r7, #10]
 800350a:	4618      	mov	r0, r3
 800350c:	4b64      	ldr	r3, [pc, #400]	@ (80036a0 <send_DHCP_REQUEST+0x2dc>)
 800350e:	7899      	ldrb	r1, [r3, #2]
 8003510:	1813      	adds	r3, r2, r0
 8003512:	460a      	mov	r2, r1
 8003514:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003518:	4b60      	ldr	r3, [pc, #384]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	897b      	ldrh	r3, [r7, #10]
 800351e:	1c59      	adds	r1, r3, #1
 8003520:	8179      	strh	r1, [r7, #10]
 8003522:	4618      	mov	r0, r3
 8003524:	4b5e      	ldr	r3, [pc, #376]	@ (80036a0 <send_DHCP_REQUEST+0x2dc>)
 8003526:	78d9      	ldrb	r1, [r3, #3]
 8003528:	1813      	adds	r3, r2, r0
 800352a:	460a      	mov	r2, r1
 800352c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003530:	4b5a      	ldr	r3, [pc, #360]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	897b      	ldrh	r3, [r7, #10]
 8003536:	1c59      	adds	r1, r3, #1
 8003538:	8179      	strh	r1, [r7, #10]
 800353a:	4618      	mov	r0, r3
 800353c:	4b58      	ldr	r3, [pc, #352]	@ (80036a0 <send_DHCP_REQUEST+0x2dc>)
 800353e:	7919      	ldrb	r1, [r3, #4]
 8003540:	1813      	adds	r3, r2, r0
 8003542:	460a      	mov	r2, r1
 8003544:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003548:	4b54      	ldr	r3, [pc, #336]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	897b      	ldrh	r3, [r7, #10]
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	8179      	strh	r1, [r7, #10]
 8003552:	4618      	mov	r0, r3
 8003554:	4b52      	ldr	r3, [pc, #328]	@ (80036a0 <send_DHCP_REQUEST+0x2dc>)
 8003556:	7959      	ldrb	r1, [r3, #5]
 8003558:	1813      	adds	r3, r2, r0
 800355a:	460a      	mov	r2, r1
 800355c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	2bff      	cmp	r3, #255	@ 0xff
 8003564:	f040 8084 	bne.w	8003670 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003568:	4b4c      	ldr	r3, [pc, #304]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	897b      	ldrh	r3, [r7, #10]
 800356e:	1c59      	adds	r1, r3, #1
 8003570:	8179      	strh	r1, [r7, #10]
 8003572:	4413      	add	r3, r2
 8003574:	2232      	movs	r2, #50	@ 0x32
 8003576:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800357a:	4b48      	ldr	r3, [pc, #288]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	1c59      	adds	r1, r3, #1
 8003582:	8179      	strh	r1, [r7, #10]
 8003584:	4413      	add	r3, r2
 8003586:	2204      	movs	r2, #4
 8003588:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800358c:	4b43      	ldr	r3, [pc, #268]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	897b      	ldrh	r3, [r7, #10]
 8003592:	1c59      	adds	r1, r3, #1
 8003594:	8179      	strh	r1, [r7, #10]
 8003596:	4618      	mov	r0, r3
 8003598:	4b42      	ldr	r3, [pc, #264]	@ (80036a4 <send_DHCP_REQUEST+0x2e0>)
 800359a:	7819      	ldrb	r1, [r3, #0]
 800359c:	1813      	adds	r3, r2, r0
 800359e:	460a      	mov	r2, r1
 80035a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80035a4:	4b3d      	ldr	r3, [pc, #244]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	1c59      	adds	r1, r3, #1
 80035ac:	8179      	strh	r1, [r7, #10]
 80035ae:	4618      	mov	r0, r3
 80035b0:	4b3c      	ldr	r3, [pc, #240]	@ (80036a4 <send_DHCP_REQUEST+0x2e0>)
 80035b2:	7859      	ldrb	r1, [r3, #1]
 80035b4:	1813      	adds	r3, r2, r0
 80035b6:	460a      	mov	r2, r1
 80035b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80035bc:	4b37      	ldr	r3, [pc, #220]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	897b      	ldrh	r3, [r7, #10]
 80035c2:	1c59      	adds	r1, r3, #1
 80035c4:	8179      	strh	r1, [r7, #10]
 80035c6:	4618      	mov	r0, r3
 80035c8:	4b36      	ldr	r3, [pc, #216]	@ (80036a4 <send_DHCP_REQUEST+0x2e0>)
 80035ca:	7899      	ldrb	r1, [r3, #2]
 80035cc:	1813      	adds	r3, r2, r0
 80035ce:	460a      	mov	r2, r1
 80035d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80035d4:	4b31      	ldr	r3, [pc, #196]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	897b      	ldrh	r3, [r7, #10]
 80035da:	1c59      	adds	r1, r3, #1
 80035dc:	8179      	strh	r1, [r7, #10]
 80035de:	4618      	mov	r0, r3
 80035e0:	4b30      	ldr	r3, [pc, #192]	@ (80036a4 <send_DHCP_REQUEST+0x2e0>)
 80035e2:	78d9      	ldrb	r1, [r3, #3]
 80035e4:	1813      	adds	r3, r2, r0
 80035e6:	460a      	mov	r2, r1
 80035e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80035ec:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	897b      	ldrh	r3, [r7, #10]
 80035f2:	1c59      	adds	r1, r3, #1
 80035f4:	8179      	strh	r1, [r7, #10]
 80035f6:	4413      	add	r3, r2
 80035f8:	2236      	movs	r2, #54	@ 0x36
 80035fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80035fe:	4b27      	ldr	r3, [pc, #156]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	1c59      	adds	r1, r3, #1
 8003606:	8179      	strh	r1, [r7, #10]
 8003608:	4413      	add	r3, r2
 800360a:	2204      	movs	r2, #4
 800360c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003610:	4b22      	ldr	r3, [pc, #136]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	897b      	ldrh	r3, [r7, #10]
 8003616:	1c59      	adds	r1, r3, #1
 8003618:	8179      	strh	r1, [r7, #10]
 800361a:	4618      	mov	r0, r3
 800361c:	4b22      	ldr	r3, [pc, #136]	@ (80036a8 <send_DHCP_REQUEST+0x2e4>)
 800361e:	7819      	ldrb	r1, [r3, #0]
 8003620:	1813      	adds	r3, r2, r0
 8003622:	460a      	mov	r2, r1
 8003624:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003628:	4b1c      	ldr	r3, [pc, #112]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	8179      	strh	r1, [r7, #10]
 8003632:	4618      	mov	r0, r3
 8003634:	4b1c      	ldr	r3, [pc, #112]	@ (80036a8 <send_DHCP_REQUEST+0x2e4>)
 8003636:	7859      	ldrb	r1, [r3, #1]
 8003638:	1813      	adds	r3, r2, r0
 800363a:	460a      	mov	r2, r1
 800363c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003640:	4b16      	ldr	r3, [pc, #88]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	897b      	ldrh	r3, [r7, #10]
 8003646:	1c59      	adds	r1, r3, #1
 8003648:	8179      	strh	r1, [r7, #10]
 800364a:	4618      	mov	r0, r3
 800364c:	4b16      	ldr	r3, [pc, #88]	@ (80036a8 <send_DHCP_REQUEST+0x2e4>)
 800364e:	7899      	ldrb	r1, [r3, #2]
 8003650:	1813      	adds	r3, r2, r0
 8003652:	460a      	mov	r2, r1
 8003654:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003658:	4b10      	ldr	r3, [pc, #64]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	897b      	ldrh	r3, [r7, #10]
 800365e:	1c59      	adds	r1, r3, #1
 8003660:	8179      	strh	r1, [r7, #10]
 8003662:	4618      	mov	r0, r3
 8003664:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <send_DHCP_REQUEST+0x2e4>)
 8003666:	78d9      	ldrb	r1, [r3, #3]
 8003668:	1813      	adds	r3, r2, r0
 800366a:	460a      	mov	r2, r1
 800366c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003670:	4b0a      	ldr	r3, [pc, #40]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	897b      	ldrh	r3, [r7, #10]
 8003676:	1c59      	adds	r1, r3, #1
 8003678:	8179      	strh	r1, [r7, #10]
 800367a:	4413      	add	r3, r2
 800367c:	220c      	movs	r2, #12
 800367e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <send_DHCP_REQUEST+0x2d8>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	1c59      	adds	r1, r3, #1
 800368a:	8179      	strh	r1, [r7, #10]
 800368c:	4413      	add	r3, r2
 800368e:	2200      	movs	r2, #0
 8003690:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e019      	b.n	80036ce <send_DHCP_REQUEST+0x30a>
 800369a:	bf00      	nop
 800369c:	200007f8 	.word	0x200007f8
 80036a0:	200007fc 	.word	0x200007fc
 80036a4:	200007dc 	.word	0x200007dc
 80036a8:	200007d0 	.word	0x200007d0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80036ac:	4b86      	ldr	r3, [pc, #536]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	897b      	ldrh	r3, [r7, #10]
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	8179      	strh	r1, [r7, #10]
 80036b6:	4618      	mov	r0, r3
 80036b8:	4984      	ldr	r1, [pc, #528]	@ (80038cc <send_DHCP_REQUEST+0x508>)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	440b      	add	r3, r1
 80036be:	7819      	ldrb	r1, [r3, #0]
 80036c0:	1813      	adds	r3, r2, r0
 80036c2:	460a      	mov	r2, r1
 80036c4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3301      	adds	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	4a7f      	ldr	r2, [pc, #508]	@ (80038cc <send_DHCP_REQUEST+0x508>)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e8      	bne.n	80036ac <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80036da:	4b7d      	ldr	r3, [pc, #500]	@ (80038d0 <send_DHCP_REQUEST+0x50c>)
 80036dc:	78db      	ldrb	r3, [r3, #3]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4b79      	ldr	r3, [pc, #484]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 80036e4:	681c      	ldr	r4, [r3, #0]
 80036e6:	897b      	ldrh	r3, [r7, #10]
 80036e8:	1c59      	adds	r1, r3, #1
 80036ea:	8179      	strh	r1, [r7, #10]
 80036ec:	461d      	mov	r5, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f000 ff24 	bl	800453c <NibbleToHex>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	1963      	adds	r3, r4, r5
 80036fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80036fe:	4b74      	ldr	r3, [pc, #464]	@ (80038d0 <send_DHCP_REQUEST+0x50c>)
 8003700:	78da      	ldrb	r2, [r3, #3]
 8003702:	4b71      	ldr	r3, [pc, #452]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 8003704:	681c      	ldr	r4, [r3, #0]
 8003706:	897b      	ldrh	r3, [r7, #10]
 8003708:	1c59      	adds	r1, r3, #1
 800370a:	8179      	strh	r1, [r7, #10]
 800370c:	461d      	mov	r5, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 ff14 	bl	800453c <NibbleToHex>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	1963      	adds	r3, r4, r5
 800371a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800371e:	4b6c      	ldr	r3, [pc, #432]	@ (80038d0 <send_DHCP_REQUEST+0x50c>)
 8003720:	791b      	ldrb	r3, [r3, #4]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4b68      	ldr	r3, [pc, #416]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 8003728:	681c      	ldr	r4, [r3, #0]
 800372a:	897b      	ldrh	r3, [r7, #10]
 800372c:	1c59      	adds	r1, r3, #1
 800372e:	8179      	strh	r1, [r7, #10]
 8003730:	461d      	mov	r5, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f000 ff02 	bl	800453c <NibbleToHex>
 8003738:	4603      	mov	r3, r0
 800373a:	461a      	mov	r2, r3
 800373c:	1963      	adds	r3, r4, r5
 800373e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8003742:	4b63      	ldr	r3, [pc, #396]	@ (80038d0 <send_DHCP_REQUEST+0x50c>)
 8003744:	791a      	ldrb	r2, [r3, #4]
 8003746:	4b60      	ldr	r3, [pc, #384]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 8003748:	681c      	ldr	r4, [r3, #0]
 800374a:	897b      	ldrh	r3, [r7, #10]
 800374c:	1c59      	adds	r1, r3, #1
 800374e:	8179      	strh	r1, [r7, #10]
 8003750:	461d      	mov	r5, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f000 fef2 	bl	800453c <NibbleToHex>
 8003758:	4603      	mov	r3, r0
 800375a:	461a      	mov	r2, r3
 800375c:	1963      	adds	r3, r4, r5
 800375e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8003762:	4b5b      	ldr	r3, [pc, #364]	@ (80038d0 <send_DHCP_REQUEST+0x50c>)
 8003764:	795b      	ldrb	r3, [r3, #5]
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b57      	ldr	r3, [pc, #348]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 800376c:	681c      	ldr	r4, [r3, #0]
 800376e:	897b      	ldrh	r3, [r7, #10]
 8003770:	1c59      	adds	r1, r3, #1
 8003772:	8179      	strh	r1, [r7, #10]
 8003774:	461d      	mov	r5, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f000 fee0 	bl	800453c <NibbleToHex>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	1963      	adds	r3, r4, r5
 8003782:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8003786:	4b52      	ldr	r3, [pc, #328]	@ (80038d0 <send_DHCP_REQUEST+0x50c>)
 8003788:	795a      	ldrb	r2, [r3, #5]
 800378a:	4b4f      	ldr	r3, [pc, #316]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 800378c:	681c      	ldr	r4, [r3, #0]
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	1c59      	adds	r1, r3, #1
 8003792:	8179      	strh	r1, [r7, #10]
 8003794:	461d      	mov	r5, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f000 fed0 	bl	800453c <NibbleToHex>
 800379c:	4603      	mov	r3, r0
 800379e:	461a      	mov	r2, r3
 80037a0:	1963      	adds	r3, r4, r5
 80037a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	b2d9      	uxtb	r1, r3
 80037aa:	4b47      	ldr	r3, [pc, #284]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	8978      	ldrh	r0, [r7, #10]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3307      	adds	r3, #7
 80037b4:	1ac3      	subs	r3, r0, r3
 80037b6:	3106      	adds	r1, #6
 80037b8:	b2c9      	uxtb	r1, r1
 80037ba:	4413      	add	r3, r2
 80037bc:	460a      	mov	r2, r1
 80037be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80037c2:	4b41      	ldr	r3, [pc, #260]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	897b      	ldrh	r3, [r7, #10]
 80037c8:	1c59      	adds	r1, r3, #1
 80037ca:	8179      	strh	r1, [r7, #10]
 80037cc:	4413      	add	r3, r2
 80037ce:	2237      	movs	r2, #55	@ 0x37
 80037d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80037d4:	4b3c      	ldr	r3, [pc, #240]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	897b      	ldrh	r3, [r7, #10]
 80037da:	1c59      	adds	r1, r3, #1
 80037dc:	8179      	strh	r1, [r7, #10]
 80037de:	4413      	add	r3, r2
 80037e0:	2208      	movs	r2, #8
 80037e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80037e6:	4b38      	ldr	r3, [pc, #224]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	897b      	ldrh	r3, [r7, #10]
 80037ec:	1c59      	adds	r1, r3, #1
 80037ee:	8179      	strh	r1, [r7, #10]
 80037f0:	4413      	add	r3, r2
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80037f8:	4b33      	ldr	r3, [pc, #204]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	897b      	ldrh	r3, [r7, #10]
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	8179      	strh	r1, [r7, #10]
 8003802:	4413      	add	r3, r2
 8003804:	2203      	movs	r2, #3
 8003806:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 800380a:	4b2f      	ldr	r3, [pc, #188]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	897b      	ldrh	r3, [r7, #10]
 8003810:	1c59      	adds	r1, r3, #1
 8003812:	8179      	strh	r1, [r7, #10]
 8003814:	4413      	add	r3, r2
 8003816:	2206      	movs	r2, #6
 8003818:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800381c:	4b2a      	ldr	r3, [pc, #168]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	897b      	ldrh	r3, [r7, #10]
 8003822:	1c59      	adds	r1, r3, #1
 8003824:	8179      	strh	r1, [r7, #10]
 8003826:	4413      	add	r3, r2
 8003828:	220f      	movs	r2, #15
 800382a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800382e:	4b26      	ldr	r3, [pc, #152]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	897b      	ldrh	r3, [r7, #10]
 8003834:	1c59      	adds	r1, r3, #1
 8003836:	8179      	strh	r1, [r7, #10]
 8003838:	4413      	add	r3, r2
 800383a:	223a      	movs	r2, #58	@ 0x3a
 800383c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8003840:	4b21      	ldr	r3, [pc, #132]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	897b      	ldrh	r3, [r7, #10]
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	8179      	strh	r1, [r7, #10]
 800384a:	4413      	add	r3, r2
 800384c:	223b      	movs	r2, #59	@ 0x3b
 800384e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8003852:	4b1d      	ldr	r3, [pc, #116]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	897b      	ldrh	r3, [r7, #10]
 8003858:	1c59      	adds	r1, r3, #1
 800385a:	8179      	strh	r1, [r7, #10]
 800385c:	4413      	add	r3, r2
 800385e:	221f      	movs	r2, #31
 8003860:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8003864:	4b18      	ldr	r3, [pc, #96]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	897b      	ldrh	r3, [r7, #10]
 800386a:	1c59      	adds	r1, r3, #1
 800386c:	8179      	strh	r1, [r7, #10]
 800386e:	4413      	add	r3, r2
 8003870:	2221      	movs	r2, #33	@ 0x21
 8003872:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8003876:	4b14      	ldr	r3, [pc, #80]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	897b      	ldrh	r3, [r7, #10]
 800387c:	1c59      	adds	r1, r3, #1
 800387e:	8179      	strh	r1, [r7, #10]
 8003880:	4413      	add	r3, r2
 8003882:	22ff      	movs	r2, #255	@ 0xff
 8003884:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003888:	897b      	ldrh	r3, [r7, #10]
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e009      	b.n	80038a2 <send_DHCP_REQUEST+0x4de>
 800388e:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	33ec      	adds	r3, #236	@ 0xec
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3301      	adds	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80038a8:	dbf1      	blt.n	800388e <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80038aa:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <send_DHCP_REQUEST+0x510>)
 80038ac:	7818      	ldrb	r0, [r3, #0]
 80038ae:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <send_DHCP_REQUEST+0x504>)
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	2243      	movs	r2, #67	@ 0x43
 80038b6:	9200      	str	r2, [sp, #0]
 80038b8:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80038bc:	f001 fad8 	bl	8004e70 <sendto>

}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bdb0      	pop	{r4, r5, r7, pc}
 80038c8:	200007f8 	.word	0x200007f8
 80038cc:	20000090 	.word	0x20000090
 80038d0:	200007fc 	.word	0x200007fc
 80038d4:	200007cd 	.word	0x200007cd

080038d8 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 80038e2:	f7ff fab3 	bl	8002e4c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80038e6:	2304      	movs	r3, #4
 80038e8:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80038ea:	4b9f      	ldr	r3, [pc, #636]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330a      	adds	r3, #10
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80038f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330a      	adds	r3, #10
 80038fa:	3301      	adds	r3, #1
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003900:	4b99      	ldr	r3, [pc, #612]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	897b      	ldrh	r3, [r7, #10]
 8003906:	1c59      	adds	r1, r3, #1
 8003908:	8179      	strh	r1, [r7, #10]
 800390a:	4413      	add	r3, r2
 800390c:	2235      	movs	r2, #53	@ 0x35
 800390e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003912:	4b95      	ldr	r3, [pc, #596]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	1c59      	adds	r1, r3, #1
 800391a:	8179      	strh	r1, [r7, #10]
 800391c:	4413      	add	r3, r2
 800391e:	2201      	movs	r2, #1
 8003920:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8003924:	4b90      	ldr	r3, [pc, #576]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	897b      	ldrh	r3, [r7, #10]
 800392a:	1c59      	adds	r1, r3, #1
 800392c:	8179      	strh	r1, [r7, #10]
 800392e:	4413      	add	r3, r2
 8003930:	2204      	movs	r2, #4
 8003932:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003936:	4b8c      	ldr	r3, [pc, #560]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	897b      	ldrh	r3, [r7, #10]
 800393c:	1c59      	adds	r1, r3, #1
 800393e:	8179      	strh	r1, [r7, #10]
 8003940:	4413      	add	r3, r2
 8003942:	223d      	movs	r2, #61	@ 0x3d
 8003944:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003948:	4b87      	ldr	r3, [pc, #540]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	897b      	ldrh	r3, [r7, #10]
 800394e:	1c59      	adds	r1, r3, #1
 8003950:	8179      	strh	r1, [r7, #10]
 8003952:	4413      	add	r3, r2
 8003954:	2207      	movs	r2, #7
 8003956:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800395a:	4b83      	ldr	r3, [pc, #524]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	1c59      	adds	r1, r3, #1
 8003962:	8179      	strh	r1, [r7, #10]
 8003964:	4413      	add	r3, r2
 8003966:	2201      	movs	r2, #1
 8003968:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800396c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	897b      	ldrh	r3, [r7, #10]
 8003972:	1c59      	adds	r1, r3, #1
 8003974:	8179      	strh	r1, [r7, #10]
 8003976:	4618      	mov	r0, r3
 8003978:	4b7c      	ldr	r3, [pc, #496]	@ (8003b6c <send_DHCP_DECLINE+0x294>)
 800397a:	7819      	ldrb	r1, [r3, #0]
 800397c:	1813      	adds	r3, r2, r0
 800397e:	460a      	mov	r2, r1
 8003980:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003984:	4b78      	ldr	r3, [pc, #480]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	897b      	ldrh	r3, [r7, #10]
 800398a:	1c59      	adds	r1, r3, #1
 800398c:	8179      	strh	r1, [r7, #10]
 800398e:	4618      	mov	r0, r3
 8003990:	4b76      	ldr	r3, [pc, #472]	@ (8003b6c <send_DHCP_DECLINE+0x294>)
 8003992:	7859      	ldrb	r1, [r3, #1]
 8003994:	1813      	adds	r3, r2, r0
 8003996:	460a      	mov	r2, r1
 8003998:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800399c:	4b72      	ldr	r3, [pc, #456]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	897b      	ldrh	r3, [r7, #10]
 80039a2:	1c59      	adds	r1, r3, #1
 80039a4:	8179      	strh	r1, [r7, #10]
 80039a6:	4618      	mov	r0, r3
 80039a8:	4b70      	ldr	r3, [pc, #448]	@ (8003b6c <send_DHCP_DECLINE+0x294>)
 80039aa:	7899      	ldrb	r1, [r3, #2]
 80039ac:	1813      	adds	r3, r2, r0
 80039ae:	460a      	mov	r2, r1
 80039b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80039b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	1c59      	adds	r1, r3, #1
 80039bc:	8179      	strh	r1, [r7, #10]
 80039be:	4618      	mov	r0, r3
 80039c0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b6c <send_DHCP_DECLINE+0x294>)
 80039c2:	78d9      	ldrb	r1, [r3, #3]
 80039c4:	1813      	adds	r3, r2, r0
 80039c6:	460a      	mov	r2, r1
 80039c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80039cc:	4b66      	ldr	r3, [pc, #408]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	1c59      	adds	r1, r3, #1
 80039d4:	8179      	strh	r1, [r7, #10]
 80039d6:	4618      	mov	r0, r3
 80039d8:	4b64      	ldr	r3, [pc, #400]	@ (8003b6c <send_DHCP_DECLINE+0x294>)
 80039da:	7919      	ldrb	r1, [r3, #4]
 80039dc:	1813      	adds	r3, r2, r0
 80039de:	460a      	mov	r2, r1
 80039e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80039e4:	4b60      	ldr	r3, [pc, #384]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	897b      	ldrh	r3, [r7, #10]
 80039ea:	1c59      	adds	r1, r3, #1
 80039ec:	8179      	strh	r1, [r7, #10]
 80039ee:	4618      	mov	r0, r3
 80039f0:	4b5e      	ldr	r3, [pc, #376]	@ (8003b6c <send_DHCP_DECLINE+0x294>)
 80039f2:	7959      	ldrb	r1, [r3, #5]
 80039f4:	1813      	adds	r3, r2, r0
 80039f6:	460a      	mov	r2, r1
 80039f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80039fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	897b      	ldrh	r3, [r7, #10]
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	8179      	strh	r1, [r7, #10]
 8003a06:	4413      	add	r3, r2
 8003a08:	2232      	movs	r2, #50	@ 0x32
 8003a0a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003a0e:	4b56      	ldr	r3, [pc, #344]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	1c59      	adds	r1, r3, #1
 8003a16:	8179      	strh	r1, [r7, #10]
 8003a18:	4413      	add	r3, r2
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003a20:	4b51      	ldr	r3, [pc, #324]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	897b      	ldrh	r3, [r7, #10]
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	8179      	strh	r1, [r7, #10]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	4b50      	ldr	r3, [pc, #320]	@ (8003b70 <send_DHCP_DECLINE+0x298>)
 8003a2e:	7819      	ldrb	r1, [r3, #0]
 8003a30:	1813      	adds	r3, r2, r0
 8003a32:	460a      	mov	r2, r1
 8003a34:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003a38:	4b4b      	ldr	r3, [pc, #300]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	897b      	ldrh	r3, [r7, #10]
 8003a3e:	1c59      	adds	r1, r3, #1
 8003a40:	8179      	strh	r1, [r7, #10]
 8003a42:	4618      	mov	r0, r3
 8003a44:	4b4a      	ldr	r3, [pc, #296]	@ (8003b70 <send_DHCP_DECLINE+0x298>)
 8003a46:	7859      	ldrb	r1, [r3, #1]
 8003a48:	1813      	adds	r3, r2, r0
 8003a4a:	460a      	mov	r2, r1
 8003a4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003a50:	4b45      	ldr	r3, [pc, #276]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	897b      	ldrh	r3, [r7, #10]
 8003a56:	1c59      	adds	r1, r3, #1
 8003a58:	8179      	strh	r1, [r7, #10]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	4b44      	ldr	r3, [pc, #272]	@ (8003b70 <send_DHCP_DECLINE+0x298>)
 8003a5e:	7899      	ldrb	r1, [r3, #2]
 8003a60:	1813      	adds	r3, r2, r0
 8003a62:	460a      	mov	r2, r1
 8003a64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003a68:	4b3f      	ldr	r3, [pc, #252]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	897b      	ldrh	r3, [r7, #10]
 8003a6e:	1c59      	adds	r1, r3, #1
 8003a70:	8179      	strh	r1, [r7, #10]
 8003a72:	4618      	mov	r0, r3
 8003a74:	4b3e      	ldr	r3, [pc, #248]	@ (8003b70 <send_DHCP_DECLINE+0x298>)
 8003a76:	78d9      	ldrb	r1, [r3, #3]
 8003a78:	1813      	adds	r3, r2, r0
 8003a7a:	460a      	mov	r2, r1
 8003a7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003a80:	4b39      	ldr	r3, [pc, #228]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	897b      	ldrh	r3, [r7, #10]
 8003a86:	1c59      	adds	r1, r3, #1
 8003a88:	8179      	strh	r1, [r7, #10]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	2236      	movs	r2, #54	@ 0x36
 8003a8e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003a92:	4b35      	ldr	r3, [pc, #212]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	1c59      	adds	r1, r3, #1
 8003a9a:	8179      	strh	r1, [r7, #10]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003aa4:	4b30      	ldr	r3, [pc, #192]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	897b      	ldrh	r3, [r7, #10]
 8003aaa:	1c59      	adds	r1, r3, #1
 8003aac:	8179      	strh	r1, [r7, #10]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	4b30      	ldr	r3, [pc, #192]	@ (8003b74 <send_DHCP_DECLINE+0x29c>)
 8003ab2:	7819      	ldrb	r1, [r3, #0]
 8003ab4:	1813      	adds	r3, r2, r0
 8003ab6:	460a      	mov	r2, r1
 8003ab8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003abc:	4b2a      	ldr	r3, [pc, #168]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	897b      	ldrh	r3, [r7, #10]
 8003ac2:	1c59      	adds	r1, r3, #1
 8003ac4:	8179      	strh	r1, [r7, #10]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b74 <send_DHCP_DECLINE+0x29c>)
 8003aca:	7859      	ldrb	r1, [r3, #1]
 8003acc:	1813      	adds	r3, r2, r0
 8003ace:	460a      	mov	r2, r1
 8003ad0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003ad4:	4b24      	ldr	r3, [pc, #144]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	897b      	ldrh	r3, [r7, #10]
 8003ada:	1c59      	adds	r1, r3, #1
 8003adc:	8179      	strh	r1, [r7, #10]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <send_DHCP_DECLINE+0x29c>)
 8003ae2:	7899      	ldrb	r1, [r3, #2]
 8003ae4:	1813      	adds	r3, r2, r0
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003aec:	4b1e      	ldr	r3, [pc, #120]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	897b      	ldrh	r3, [r7, #10]
 8003af2:	1c59      	adds	r1, r3, #1
 8003af4:	8179      	strh	r1, [r7, #10]
 8003af6:	4618      	mov	r0, r3
 8003af8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <send_DHCP_DECLINE+0x29c>)
 8003afa:	78d9      	ldrb	r1, [r3, #3]
 8003afc:	1813      	adds	r3, r2, r0
 8003afe:	460a      	mov	r2, r1
 8003b00:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8003b04:	4b18      	ldr	r3, [pc, #96]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	8179      	strh	r1, [r7, #10]
 8003b0e:	4413      	add	r3, r2
 8003b10:	22ff      	movs	r2, #255	@ 0xff
 8003b12:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003b16:	897b      	ldrh	r3, [r7, #10]
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e009      	b.n	8003b30 <send_DHCP_DECLINE+0x258>
 8003b1c:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	33ec      	adds	r3, #236	@ 0xec
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003b36:	dbf1      	blt.n	8003b1c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8003b38:	23ff      	movs	r3, #255	@ 0xff
 8003b3a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8003b3c:	23ff      	movs	r3, #255	@ 0xff
 8003b3e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003b40:	23ff      	movs	r3, #255	@ 0xff
 8003b42:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003b44:	23ff      	movs	r3, #255	@ 0xff
 8003b46:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003b48:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <send_DHCP_DECLINE+0x2a0>)
 8003b4a:	7818      	ldrb	r0, [r3, #0]
 8003b4c:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <send_DHCP_DECLINE+0x290>)
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	2243      	movs	r2, #67	@ 0x43
 8003b54:	9200      	str	r2, [sp, #0]
 8003b56:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8003b5a:	f001 f989 	bl	8004e70 <sendto>
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	200007f8 	.word	0x200007f8
 8003b6c:	200007fc 	.word	0x200007fc
 8003b70:	200007dc 	.word	0x200007dc
 8003b74:	200007d0 	.word	0x200007d0
 8003b78:	200007cd 	.word	0x200007cd

08003b7c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b089      	sub	sp, #36	@ 0x24
 8003b80:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8003b86:	4ba1      	ldr	r3, [pc, #644]	@ (8003e0c <parseDHCPMSG+0x290>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 fe33 	bl	80057f6 <getSn_RX_RSR>
 8003b90:	4603      	mov	r3, r0
 8003b92:	823b      	strh	r3, [r7, #16]
 8003b94:	8a3b      	ldrh	r3, [r7, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d011      	beq.n	8003bbe <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8003b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8003e0c <parseDHCPMSG+0x290>)
 8003b9c:	7818      	ldrb	r0, [r3, #0]
 8003b9e:	4b9c      	ldr	r3, [pc, #624]	@ (8003e10 <parseDHCPMSG+0x294>)
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	1d3c      	adds	r4, r7, #4
 8003ba4:	8a3a      	ldrh	r2, [r7, #16]
 8003ba6:	1cbb      	adds	r3, r7, #2
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	4623      	mov	r3, r4
 8003bac:	f001 fa94 	bl	80050d8 <recvfrom>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8003bb4:	887b      	ldrh	r3, [r7, #2]
 8003bb6:	2b43      	cmp	r3, #67	@ 0x43
 8003bb8:	f040 81ed 	bne.w	8003f96 <parseDHCPMSG+0x41a>
 8003bbc:	e001      	b.n	8003bc2 <parseDHCPMSG+0x46>
   else return 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e1eb      	b.n	8003f9a <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003bc2:	4b93      	ldr	r3, [pc, #588]	@ (8003e10 <parseDHCPMSG+0x294>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	7f1a      	ldrb	r2, [r3, #28]
 8003bc8:	4b92      	ldr	r3, [pc, #584]	@ (8003e14 <parseDHCPMSG+0x298>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d124      	bne.n	8003c1a <parseDHCPMSG+0x9e>
 8003bd0:	4b8f      	ldr	r3, [pc, #572]	@ (8003e10 <parseDHCPMSG+0x294>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	7f5a      	ldrb	r2, [r3, #29]
 8003bd6:	4b8f      	ldr	r3, [pc, #572]	@ (8003e14 <parseDHCPMSG+0x298>)
 8003bd8:	785b      	ldrb	r3, [r3, #1]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d11d      	bne.n	8003c1a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003bde:	4b8c      	ldr	r3, [pc, #560]	@ (8003e10 <parseDHCPMSG+0x294>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	7f9a      	ldrb	r2, [r3, #30]
 8003be4:	4b8b      	ldr	r3, [pc, #556]	@ (8003e14 <parseDHCPMSG+0x298>)
 8003be6:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d116      	bne.n	8003c1a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003bec:	4b88      	ldr	r3, [pc, #544]	@ (8003e10 <parseDHCPMSG+0x294>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	7fda      	ldrb	r2, [r3, #31]
 8003bf2:	4b88      	ldr	r3, [pc, #544]	@ (8003e14 <parseDHCPMSG+0x298>)
 8003bf4:	78db      	ldrb	r3, [r3, #3]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d10f      	bne.n	8003c1a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003bfa:	4b85      	ldr	r3, [pc, #532]	@ (8003e10 <parseDHCPMSG+0x294>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003c02:	4b84      	ldr	r3, [pc, #528]	@ (8003e14 <parseDHCPMSG+0x298>)
 8003c04:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d107      	bne.n	8003c1a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003c0a:	4b81      	ldr	r3, [pc, #516]	@ (8003e10 <parseDHCPMSG+0x294>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003c12:	4b80      	ldr	r3, [pc, #512]	@ (8003e14 <parseDHCPMSG+0x298>)
 8003c14:	795b      	ldrb	r3, [r3, #5]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d001      	beq.n	8003c1e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e1bd      	b.n	8003f9a <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8003c1e:	4b7e      	ldr	r3, [pc, #504]	@ (8003e18 <parseDHCPMSG+0x29c>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10b      	bne.n	8003c3e <parseDHCPMSG+0xc2>
 8003c26:	4b7c      	ldr	r3, [pc, #496]	@ (8003e18 <parseDHCPMSG+0x29c>)
 8003c28:	785b      	ldrb	r3, [r3, #1]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d107      	bne.n	8003c3e <parseDHCPMSG+0xc2>
 8003c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8003e18 <parseDHCPMSG+0x29c>)
 8003c30:	789b      	ldrb	r3, [r3, #2]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <parseDHCPMSG+0xc2>
 8003c36:	4b78      	ldr	r3, [pc, #480]	@ (8003e18 <parseDHCPMSG+0x29c>)
 8003c38:	78db      	ldrb	r3, [r3, #3]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d029      	beq.n	8003c92 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003c3e:	793a      	ldrb	r2, [r7, #4]
 8003c40:	4b75      	ldr	r3, [pc, #468]	@ (8003e18 <parseDHCPMSG+0x29c>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d10e      	bne.n	8003c66 <parseDHCPMSG+0xea>
 8003c48:	797a      	ldrb	r2, [r7, #5]
 8003c4a:	4b73      	ldr	r3, [pc, #460]	@ (8003e18 <parseDHCPMSG+0x29c>)
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d109      	bne.n	8003c66 <parseDHCPMSG+0xea>
 8003c52:	79ba      	ldrb	r2, [r7, #6]
 8003c54:	4b70      	ldr	r3, [pc, #448]	@ (8003e18 <parseDHCPMSG+0x29c>)
 8003c56:	789b      	ldrb	r3, [r3, #2]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d104      	bne.n	8003c66 <parseDHCPMSG+0xea>
 8003c5c:	79fa      	ldrb	r2, [r7, #7]
 8003c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8003e18 <parseDHCPMSG+0x29c>)
 8003c60:	78db      	ldrb	r3, [r3, #3]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d015      	beq.n	8003c92 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003c66:	793a      	ldrb	r2, [r7, #4]
 8003c68:	4b6c      	ldr	r3, [pc, #432]	@ (8003e1c <parseDHCPMSG+0x2a0>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d10e      	bne.n	8003c8e <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003c70:	797a      	ldrb	r2, [r7, #5]
 8003c72:	4b6a      	ldr	r3, [pc, #424]	@ (8003e1c <parseDHCPMSG+0x2a0>)
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d109      	bne.n	8003c8e <parseDHCPMSG+0x112>
 8003c7a:	79ba      	ldrb	r2, [r7, #6]
 8003c7c:	4b67      	ldr	r3, [pc, #412]	@ (8003e1c <parseDHCPMSG+0x2a0>)
 8003c7e:	789b      	ldrb	r3, [r3, #2]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d104      	bne.n	8003c8e <parseDHCPMSG+0x112>
 8003c84:	79fa      	ldrb	r2, [r7, #7]
 8003c86:	4b65      	ldr	r3, [pc, #404]	@ (8003e1c <parseDHCPMSG+0x2a0>)
 8003c88:	78db      	ldrb	r3, [r3, #3]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d001      	beq.n	8003c92 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e183      	b.n	8003f9a <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8003c92:	4b5f      	ldr	r3, [pc, #380]	@ (8003e10 <parseDHCPMSG+0x294>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	33f0      	adds	r3, #240	@ 0xf0
 8003c9c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8003c9e:	8a3b      	ldrh	r3, [r7, #16]
 8003ca0:	3bf0      	subs	r3, #240	@ 0xf0
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8003ca8:	e170      	b.n	8003f8c <parseDHCPMSG+0x410>

			switch ( *p ) {
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b36      	cmp	r3, #54	@ 0x36
 8003cb0:	dc76      	bgt.n	8003da0 <parseDHCPMSG+0x224>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f2c0 815d 	blt.w	8003f72 <parseDHCPMSG+0x3f6>
 8003cb8:	2b36      	cmp	r3, #54	@ 0x36
 8003cba:	f200 815a 	bhi.w	8003f72 <parseDHCPMSG+0x3f6>
 8003cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <parseDHCPMSG+0x148>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003dad 	.word	0x08003dad
 8003cc8:	08003dcd 	.word	0x08003dcd
 8003ccc:	08003f73 	.word	0x08003f73
 8003cd0:	08003e25 	.word	0x08003e25
 8003cd4:	08003f73 	.word	0x08003f73
 8003cd8:	08003f73 	.word	0x08003f73
 8003cdc:	08003e71 	.word	0x08003e71
 8003ce0:	08003f73 	.word	0x08003f73
 8003ce4:	08003f73 	.word	0x08003f73
 8003ce8:	08003f73 	.word	0x08003f73
 8003cec:	08003f73 	.word	0x08003f73
 8003cf0:	08003f73 	.word	0x08003f73
 8003cf4:	08003f73 	.word	0x08003f73
 8003cf8:	08003f73 	.word	0x08003f73
 8003cfc:	08003f73 	.word	0x08003f73
 8003d00:	08003f73 	.word	0x08003f73
 8003d04:	08003f73 	.word	0x08003f73
 8003d08:	08003f73 	.word	0x08003f73
 8003d0c:	08003f73 	.word	0x08003f73
 8003d10:	08003f73 	.word	0x08003f73
 8003d14:	08003f73 	.word	0x08003f73
 8003d18:	08003f73 	.word	0x08003f73
 8003d1c:	08003f73 	.word	0x08003f73
 8003d20:	08003f73 	.word	0x08003f73
 8003d24:	08003f73 	.word	0x08003f73
 8003d28:	08003f73 	.word	0x08003f73
 8003d2c:	08003f73 	.word	0x08003f73
 8003d30:	08003f73 	.word	0x08003f73
 8003d34:	08003f73 	.word	0x08003f73
 8003d38:	08003f73 	.word	0x08003f73
 8003d3c:	08003f73 	.word	0x08003f73
 8003d40:	08003f73 	.word	0x08003f73
 8003d44:	08003f73 	.word	0x08003f73
 8003d48:	08003f73 	.word	0x08003f73
 8003d4c:	08003f73 	.word	0x08003f73
 8003d50:	08003f73 	.word	0x08003f73
 8003d54:	08003f73 	.word	0x08003f73
 8003d58:	08003f73 	.word	0x08003f73
 8003d5c:	08003f73 	.word	0x08003f73
 8003d60:	08003f73 	.word	0x08003f73
 8003d64:	08003f73 	.word	0x08003f73
 8003d68:	08003f73 	.word	0x08003f73
 8003d6c:	08003f73 	.word	0x08003f73
 8003d70:	08003f73 	.word	0x08003f73
 8003d74:	08003f73 	.word	0x08003f73
 8003d78:	08003f73 	.word	0x08003f73
 8003d7c:	08003f73 	.word	0x08003f73
 8003d80:	08003f73 	.word	0x08003f73
 8003d84:	08003f73 	.word	0x08003f73
 8003d88:	08003f73 	.word	0x08003f73
 8003d8c:	08003f73 	.word	0x08003f73
 8003d90:	08003ebd 	.word	0x08003ebd
 8003d94:	08003f73 	.word	0x08003f73
 8003d98:	08003db5 	.word	0x08003db5
 8003d9c:	08003f19 	.word	0x08003f19
 8003da0:	2bff      	cmp	r3, #255	@ 0xff
 8003da2:	f040 80e6 	bne.w	8003f72 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	617b      	str	r3, [r7, #20]
   				break;
 8003daa:	e0ef      	b.n	8003f8c <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	3301      	adds	r3, #1
 8003db0:	617b      	str	r3, [r7, #20]
   				break;
 8003db2:	e0eb      	b.n	8003f8c <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	3301      	adds	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
   				p++;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	617a      	str	r2, [r7, #20]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	74fb      	strb	r3, [r7, #19]
   				break;
 8003dca:	e0df      	b.n	8003f8c <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]
   				p++;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	617a      	str	r2, [r7, #20]
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e20 <parseDHCPMSG+0x2a4>)
 8003de2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	617a      	str	r2, [r7, #20]
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <parseDHCPMSG+0x2a4>)
 8003dee:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	617a      	str	r2, [r7, #20]
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	4b09      	ldr	r3, [pc, #36]	@ (8003e20 <parseDHCPMSG+0x2a4>)
 8003dfa:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	617a      	str	r2, [r7, #20]
 8003e02:	781a      	ldrb	r2, [r3, #0]
 8003e04:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <parseDHCPMSG+0x2a4>)
 8003e06:	70da      	strb	r2, [r3, #3]
   				break;
 8003e08:	e0c0      	b.n	8003f8c <parseDHCPMSG+0x410>
 8003e0a:	bf00      	nop
 8003e0c:	200007cd 	.word	0x200007cd
 8003e10:	200007f8 	.word	0x200007f8
 8003e14:	200007fc 	.word	0x200007fc
 8003e18:	200007d0 	.word	0x200007d0
 8003e1c:	200007d4 	.word	0x200007d4
 8003e20:	200007e4 	.word	0x200007e4
   			case routersOnSubnet :
   				p++;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	617a      	str	r2, [r7, #20]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	617a      	str	r2, [r7, #20]
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	4b59      	ldr	r3, [pc, #356]	@ (8003fa4 <parseDHCPMSG+0x428>)
 8003e3e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	617a      	str	r2, [r7, #20]
 8003e46:	781a      	ldrb	r2, [r3, #0]
 8003e48:	4b56      	ldr	r3, [pc, #344]	@ (8003fa4 <parseDHCPMSG+0x428>)
 8003e4a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	617a      	str	r2, [r7, #20]
 8003e52:	781a      	ldrb	r2, [r3, #0]
 8003e54:	4b53      	ldr	r3, [pc, #332]	@ (8003fa4 <parseDHCPMSG+0x428>)
 8003e56:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	617a      	str	r2, [r7, #20]
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	4b50      	ldr	r3, [pc, #320]	@ (8003fa4 <parseDHCPMSG+0x428>)
 8003e62:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003e64:	7afb      	ldrb	r3, [r7, #11]
 8003e66:	3b04      	subs	r3, #4
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
   				break;
 8003e6e:	e08d      	b.n	8003f8c <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3301      	adds	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	617a      	str	r2, [r7, #20]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	617a      	str	r2, [r7, #20]
 8003e86:	781a      	ldrb	r2, [r3, #0]
 8003e88:	4b47      	ldr	r3, [pc, #284]	@ (8003fa8 <parseDHCPMSG+0x42c>)
 8003e8a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	617a      	str	r2, [r7, #20]
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	4b44      	ldr	r3, [pc, #272]	@ (8003fa8 <parseDHCPMSG+0x42c>)
 8003e96:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	617a      	str	r2, [r7, #20]
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	4b41      	ldr	r3, [pc, #260]	@ (8003fa8 <parseDHCPMSG+0x42c>)
 8003ea2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	617a      	str	r2, [r7, #20]
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa8 <parseDHCPMSG+0x42c>)
 8003eae:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
 8003eb2:	3b04      	subs	r3, #4
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
   				break;
 8003eba:	e067      	b.n	8003f8c <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	617a      	str	r2, [r7, #20]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	617a      	str	r2, [r7, #20]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4b35      	ldr	r3, [pc, #212]	@ (8003fac <parseDHCPMSG+0x430>)
 8003ed8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003eda:	4b34      	ldr	r3, [pc, #208]	@ (8003fac <parseDHCPMSG+0x430>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	1c59      	adds	r1, r3, #1
 8003ee4:	6179      	str	r1, [r7, #20]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	4413      	add	r3, r2
 8003eea:	4a30      	ldr	r2, [pc, #192]	@ (8003fac <parseDHCPMSG+0x430>)
 8003eec:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003eee:	4b2f      	ldr	r3, [pc, #188]	@ (8003fac <parseDHCPMSG+0x430>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	021a      	lsls	r2, r3, #8
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	1c59      	adds	r1, r3, #1
 8003ef8:	6179      	str	r1, [r7, #20]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	4413      	add	r3, r2
 8003efe:	4a2b      	ldr	r2, [pc, #172]	@ (8003fac <parseDHCPMSG+0x430>)
 8003f00:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003f02:	4b2a      	ldr	r3, [pc, #168]	@ (8003fac <parseDHCPMSG+0x430>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	021a      	lsls	r2, r3, #8
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1c59      	adds	r1, r3, #1
 8003f0c:	6179      	str	r1, [r7, #20]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	4413      	add	r3, r2
 8003f12:	4a26      	ldr	r2, [pc, #152]	@ (8003fac <parseDHCPMSG+0x430>)
 8003f14:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8003f16:	e039      	b.n	8003f8c <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	617a      	str	r2, [r7, #20]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	617a      	str	r2, [r7, #20]
 8003f2e:	781a      	ldrb	r2, [r3, #0]
 8003f30:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb0 <parseDHCPMSG+0x434>)
 8003f32:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	617a      	str	r2, [r7, #20]
 8003f3a:	781a      	ldrb	r2, [r3, #0]
 8003f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb0 <parseDHCPMSG+0x434>)
 8003f3e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	617a      	str	r2, [r7, #20]
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <parseDHCPMSG+0x434>)
 8003f4a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	617a      	str	r2, [r7, #20]
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	4b16      	ldr	r3, [pc, #88]	@ (8003fb0 <parseDHCPMSG+0x434>)
 8003f56:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8003f58:	793a      	ldrb	r2, [r7, #4]
 8003f5a:	4b16      	ldr	r3, [pc, #88]	@ (8003fb4 <parseDHCPMSG+0x438>)
 8003f5c:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8003f5e:	797a      	ldrb	r2, [r7, #5]
 8003f60:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <parseDHCPMSG+0x438>)
 8003f62:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8003f64:	79ba      	ldrb	r2, [r7, #6]
 8003f66:	4b13      	ldr	r3, [pc, #76]	@ (8003fb4 <parseDHCPMSG+0x438>)
 8003f68:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8003f6a:	79fa      	ldrb	r2, [r7, #7]
 8003f6c:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <parseDHCPMSG+0x438>)
 8003f6e:	70da      	strb	r2, [r3, #3]
   				break;
 8003f70:	e00c      	b.n	8003f8c <parseDHCPMSG+0x410>
   			default :
   				p++;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	3301      	adds	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	617a      	str	r2, [r7, #20]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8003f82:	7afb      	ldrb	r3, [r7, #11]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4413      	add	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
   				break;
 8003f8a:	bf00      	nop
		while ( p < e ) {
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	f4ff ae8a 	bcc.w	8003caa <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8003f96:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200007e0 	.word	0x200007e0
 8003fa8:	200007e8 	.word	0x200007e8
 8003fac:	20000088 	.word	0x20000088
 8003fb0:	200007d0 	.word	0x200007d0
 8003fb4:	200007d4 	.word	0x200007d4

08003fb8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8003fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80041bc <DHCP_run+0x204>)
 8003fc0:	f993 3000 	ldrsb.w	r3, [r3]
 8003fc4:	2b06      	cmp	r3, #6
 8003fc6:	d101      	bne.n	8003fcc <DHCP_run+0x14>
 8003fc8:	2305      	movs	r3, #5
 8003fca:	e0f3      	b.n	80041b4 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8003fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80041c0 <DHCP_run+0x208>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fa68 	bl	80054b0 <WIZCHIP_READ>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b22      	cmp	r3, #34	@ 0x22
 8003fe4:	d006      	beq.n	8003ff4 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8003fe6:	4b76      	ldr	r3, [pc, #472]	@ (80041c0 <DHCP_run+0x208>)
 8003fe8:	7818      	ldrb	r0, [r3, #0]
 8003fea:	2300      	movs	r3, #0
 8003fec:	2244      	movs	r2, #68	@ 0x44
 8003fee:	2102      	movs	r1, #2
 8003ff0:	f000 fabe 	bl	8004570 <socket>

	ret = DHCP_RUNNING;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8003ff8:	f7ff fdc0 	bl	8003b7c <parseDHCPMSG>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8004000:	4b6e      	ldr	r3, [pc, #440]	@ (80041bc <DHCP_run+0x204>)
 8004002:	f993 3000 	ldrsb.w	r3, [r3]
 8004006:	2b04      	cmp	r3, #4
 8004008:	f200 80d0 	bhi.w	80041ac <DHCP_run+0x1f4>
 800400c:	a201      	add	r2, pc, #4	@ (adr r2, 8004014 <DHCP_run+0x5c>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004029 	.word	0x08004029
 8004018:	0800404d 	.word	0x0800404d
 800401c:	08004091 	.word	0x08004091
 8004020:	080040e1 	.word	0x080040e1
 8004024:	0800413b 	.word	0x0800413b
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8004028:	4b66      	ldr	r3, [pc, #408]	@ (80041c4 <DHCP_run+0x20c>)
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800402e:	4b65      	ldr	r3, [pc, #404]	@ (80041c4 <DHCP_run+0x20c>)
 8004030:	2200      	movs	r2, #0
 8004032:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8004034:	4b63      	ldr	r3, [pc, #396]	@ (80041c4 <DHCP_run+0x20c>)
 8004036:	2200      	movs	r2, #0
 8004038:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800403a:	4b62      	ldr	r3, [pc, #392]	@ (80041c4 <DHCP_run+0x20c>)
 800403c:	2200      	movs	r2, #0
 800403e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8004040:	f7fe fffa 	bl	8003038 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8004044:	4b5d      	ldr	r3, [pc, #372]	@ (80041bc <DHCP_run+0x204>)
 8004046:	2201      	movs	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]
   		break;
 800404a:	e0b2      	b.n	80041b2 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 800404c:	79bb      	ldrb	r3, [r7, #6]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d119      	bne.n	8004086 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8004052:	4b5d      	ldr	r3, [pc, #372]	@ (80041c8 <DHCP_run+0x210>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	7c1a      	ldrb	r2, [r3, #16]
 8004058:	4b5a      	ldr	r3, [pc, #360]	@ (80041c4 <DHCP_run+0x20c>)
 800405a:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 800405c:	4b5a      	ldr	r3, [pc, #360]	@ (80041c8 <DHCP_run+0x210>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	7c5a      	ldrb	r2, [r3, #17]
 8004062:	4b58      	ldr	r3, [pc, #352]	@ (80041c4 <DHCP_run+0x20c>)
 8004064:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8004066:	4b58      	ldr	r3, [pc, #352]	@ (80041c8 <DHCP_run+0x210>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	7c9a      	ldrb	r2, [r3, #18]
 800406c:	4b55      	ldr	r3, [pc, #340]	@ (80041c4 <DHCP_run+0x20c>)
 800406e:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8004070:	4b55      	ldr	r3, [pc, #340]	@ (80041c8 <DHCP_run+0x210>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	7cda      	ldrb	r2, [r3, #19]
 8004076:	4b53      	ldr	r3, [pc, #332]	@ (80041c4 <DHCP_run+0x20c>)
 8004078:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 800407a:	f7ff f9a3 	bl	80033c4 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800407e:	4b4f      	ldr	r3, [pc, #316]	@ (80041bc <DHCP_run+0x204>)
 8004080:	2202      	movs	r2, #2
 8004082:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8004084:	e095      	b.n	80041b2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8004086:	f000 f8b1 	bl	80041ec <check_DHCP_timeout>
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
         break;
 800408e:	e090      	b.n	80041b2 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8004090:	79bb      	ldrb	r3, [r7, #6]
 8004092:	2b05      	cmp	r3, #5
 8004094:	d116      	bne.n	80040c4 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8004096:	f000 f909 	bl	80042ac <check_DHCP_leasedIP>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80040a0:	4b4a      	ldr	r3, [pc, #296]	@ (80041cc <DHCP_run+0x214>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4798      	blx	r3
					reset_DHCP_timeout();
 80040a6:	f000 f9d3 	bl	8004450 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80040aa:	4b44      	ldr	r3, [pc, #272]	@ (80041bc <DHCP_run+0x204>)
 80040ac:	2203      	movs	r2, #3
 80040ae:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80040b0:	e07f      	b.n	80041b2 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80040b2:	f000 f9cd 	bl	8004450 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80040b6:	4b46      	ldr	r3, [pc, #280]	@ (80041d0 <DHCP_run+0x218>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80040bc:	4b3f      	ldr	r3, [pc, #252]	@ (80041bc <DHCP_run+0x204>)
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
		break;
 80040c2:	e076      	b.n	80041b2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80040c4:	79bb      	ldrb	r3, [r7, #6]
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d105      	bne.n	80040d6 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 80040ca:	f000 f9c1 	bl	8004450 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80040ce:	4b3b      	ldr	r3, [pc, #236]	@ (80041bc <DHCP_run+0x204>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
		break;
 80040d4:	e06d      	b.n	80041b2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80040d6:	f000 f889 	bl	80041ec <check_DHCP_timeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	71fb      	strb	r3, [r7, #7]
		break;
 80040de:	e068      	b.n	80041b2 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 80040e0:	2304      	movs	r3, #4
 80040e2:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80040e4:	4b3b      	ldr	r3, [pc, #236]	@ (80041d4 <DHCP_run+0x21c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d060      	beq.n	80041b0 <DHCP_run+0x1f8>
 80040ee:	4b39      	ldr	r3, [pc, #228]	@ (80041d4 <DHCP_run+0x21c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	085a      	lsrs	r2, r3, #1
 80040f4:	4b38      	ldr	r3, [pc, #224]	@ (80041d8 <DHCP_run+0x220>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d259      	bcs.n	80041b0 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8004100:	4b30      	ldr	r3, [pc, #192]	@ (80041c4 <DHCP_run+0x20c>)
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	4b35      	ldr	r3, [pc, #212]	@ (80041dc <DHCP_run+0x224>)
 8004106:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8004108:	4b2e      	ldr	r3, [pc, #184]	@ (80041c4 <DHCP_run+0x20c>)
 800410a:	785a      	ldrb	r2, [r3, #1]
 800410c:	4b33      	ldr	r3, [pc, #204]	@ (80041dc <DHCP_run+0x224>)
 800410e:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8004110:	4b2c      	ldr	r3, [pc, #176]	@ (80041c4 <DHCP_run+0x20c>)
 8004112:	789a      	ldrb	r2, [r3, #2]
 8004114:	4b31      	ldr	r3, [pc, #196]	@ (80041dc <DHCP_run+0x224>)
 8004116:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8004118:	4b2a      	ldr	r3, [pc, #168]	@ (80041c4 <DHCP_run+0x20c>)
 800411a:	78da      	ldrb	r2, [r3, #3]
 800411c:	4b2f      	ldr	r3, [pc, #188]	@ (80041dc <DHCP_run+0x224>)
 800411e:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8004120:	4b2f      	ldr	r3, [pc, #188]	@ (80041e0 <DHCP_run+0x228>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	4a2e      	ldr	r2, [pc, #184]	@ (80041e0 <DHCP_run+0x228>)
 8004128:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800412a:	f7ff f94b 	bl	80033c4 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800412e:	f000 f98f 	bl	8004450 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8004132:	4b22      	ldr	r3, [pc, #136]	@ (80041bc <DHCP_run+0x204>)
 8004134:	2204      	movs	r2, #4
 8004136:	701a      	strb	r2, [r3, #0]
			}
		break;
 8004138:	e03a      	b.n	80041b0 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800413a:	2304      	movs	r3, #4
 800413c:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800413e:	79bb      	ldrb	r3, [r7, #6]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d125      	bne.n	8004190 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8004144:	4b27      	ldr	r3, [pc, #156]	@ (80041e4 <DHCP_run+0x22c>)
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800414a:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <DHCP_run+0x224>)
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <DHCP_run+0x20c>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d111      	bne.n	800417a <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8004156:	4b21      	ldr	r3, [pc, #132]	@ (80041dc <DHCP_run+0x224>)
 8004158:	785a      	ldrb	r2, [r3, #1]
 800415a:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <DHCP_run+0x20c>)
 800415c:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800415e:	429a      	cmp	r2, r3
 8004160:	d10b      	bne.n	800417a <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8004162:	4b1e      	ldr	r3, [pc, #120]	@ (80041dc <DHCP_run+0x224>)
 8004164:	789a      	ldrb	r2, [r3, #2]
 8004166:	4b17      	ldr	r3, [pc, #92]	@ (80041c4 <DHCP_run+0x20c>)
 8004168:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d105      	bne.n	800417a <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800416e:	4b1b      	ldr	r3, [pc, #108]	@ (80041dc <DHCP_run+0x224>)
 8004170:	78da      	ldrb	r2, [r3, #3]
 8004172:	4b14      	ldr	r3, [pc, #80]	@ (80041c4 <DHCP_run+0x20c>)
 8004174:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d004      	beq.n	8004184 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 800417a:	2303      	movs	r3, #3
 800417c:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800417e:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <DHCP_run+0x230>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8004184:	f000 f964 	bl	8004450 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8004188:	4b0c      	ldr	r3, [pc, #48]	@ (80041bc <DHCP_run+0x204>)
 800418a:	2203      	movs	r2, #3
 800418c:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800418e:	e010      	b.n	80041b2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8004190:	79bb      	ldrb	r3, [r7, #6]
 8004192:	2b06      	cmp	r3, #6
 8004194:	d105      	bne.n	80041a2 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8004196:	f000 f95b 	bl	8004450 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800419a:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <DHCP_run+0x204>)
 800419c:	2201      	movs	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
	   	break;
 80041a0:	e007      	b.n	80041b2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80041a2:	f000 f823 	bl	80041ec <check_DHCP_timeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
	   	break;
 80041aa:	e002      	b.n	80041b2 <DHCP_run+0x1fa>
		default :
   		break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <DHCP_run+0x1fa>
		break;
 80041b0:	bf00      	nop
	}

	return ret;
 80041b2:	79fb      	ldrb	r3, [r7, #7]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	200007ec 	.word	0x200007ec
 80041c0:	200007cd 	.word	0x200007cd
 80041c4:	200007dc 	.word	0x200007dc
 80041c8:	200007f8 	.word	0x200007f8
 80041cc:	20000098 	.word	0x20000098
 80041d0:	200000a0 	.word	0x200000a0
 80041d4:	20000088 	.word	0x20000088
 80041d8:	200007f0 	.word	0x200007f0
 80041dc:	200007d8 	.word	0x200007d8
 80041e0:	200007f4 	.word	0x200007f4
 80041e4:	200007ed 	.word	0x200007ed
 80041e8:	2000009c 	.word	0x2000009c

080041ec <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80041f2:	2301      	movs	r3, #1
 80041f4:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80041f6:	4b29      	ldr	r3, [pc, #164]	@ (800429c <check_DHCP_timeout+0xb0>)
 80041f8:	f993 3000 	ldrsb.w	r3, [r3]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	dc2d      	bgt.n	800425c <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8004200:	4b27      	ldr	r3, [pc, #156]	@ (80042a0 <check_DHCP_timeout+0xb4>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <check_DHCP_timeout+0xb8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d242      	bcs.n	8004292 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 800420c:	4b26      	ldr	r3, [pc, #152]	@ (80042a8 <check_DHCP_timeout+0xbc>)
 800420e:	f993 3000 	ldrsb.w	r3, [r3]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d00c      	beq.n	8004230 <check_DHCP_timeout+0x44>
 8004216:	2b04      	cmp	r3, #4
 8004218:	dc0d      	bgt.n	8004236 <check_DHCP_timeout+0x4a>
 800421a:	2b01      	cmp	r3, #1
 800421c:	d002      	beq.n	8004224 <check_DHCP_timeout+0x38>
 800421e:	2b02      	cmp	r3, #2
 8004220:	d003      	beq.n	800422a <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8004222:	e008      	b.n	8004236 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8004224:	f7fe ff08 	bl	8003038 <send_DHCP_DISCOVER>
				break;
 8004228:	e006      	b.n	8004238 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800422a:	f7ff f8cb 	bl	80033c4 <send_DHCP_REQUEST>
				break;
 800422e:	e003      	b.n	8004238 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8004230:	f7ff f8c8 	bl	80033c4 <send_DHCP_REQUEST>
				break;
 8004234:	e000      	b.n	8004238 <check_DHCP_timeout+0x4c>
				break;
 8004236:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8004238:	4b1a      	ldr	r3, [pc, #104]	@ (80042a4 <check_DHCP_timeout+0xb8>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800423e:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <check_DHCP_timeout+0xb8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330a      	adds	r3, #10
 8004244:	4a16      	ldr	r2, [pc, #88]	@ (80042a0 <check_DHCP_timeout+0xb4>)
 8004246:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8004248:	4b14      	ldr	r3, [pc, #80]	@ (800429c <check_DHCP_timeout+0xb0>)
 800424a:	f993 3000 	ldrsb.w	r3, [r3]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	3301      	adds	r3, #1
 8004252:	b2db      	uxtb	r3, r3
 8004254:	b25a      	sxtb	r2, r3
 8004256:	4b11      	ldr	r3, [pc, #68]	@ (800429c <check_DHCP_timeout+0xb0>)
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	e01a      	b.n	8004292 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 800425c:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <check_DHCP_timeout+0xbc>)
 800425e:	f993 3000 	ldrsb.w	r3, [r3]
 8004262:	2b04      	cmp	r3, #4
 8004264:	d00c      	beq.n	8004280 <check_DHCP_timeout+0x94>
 8004266:	2b04      	cmp	r3, #4
 8004268:	dc10      	bgt.n	800428c <check_DHCP_timeout+0xa0>
 800426a:	2b01      	cmp	r3, #1
 800426c:	d002      	beq.n	8004274 <check_DHCP_timeout+0x88>
 800426e:	2b02      	cmp	r3, #2
 8004270:	d006      	beq.n	8004280 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8004272:	e00b      	b.n	800428c <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8004274:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <check_DHCP_timeout+0xbc>)
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 800427a:	2300      	movs	r3, #0
 800427c:	71fb      	strb	r3, [r7, #7]
				break;
 800427e:	e006      	b.n	800428e <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8004280:	f7fe feda 	bl	8003038 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004284:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <check_DHCP_timeout+0xbc>)
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
				break;
 800428a:	e000      	b.n	800428e <check_DHCP_timeout+0xa2>
				break;
 800428c:	bf00      	nop
		}
		reset_DHCP_timeout();
 800428e:	f000 f8df 	bl	8004450 <reset_DHCP_timeout>
	}
	return ret;
 8004292:	79fb      	ldrb	r3, [r7, #7]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	200007ed 	.word	0x200007ed
 80042a0:	2000008c 	.word	0x2000008c
 80042a4:	200007f0 	.word	0x200007f0
 80042a8:	200007ec 	.word	0x200007ec

080042ac <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80042b2:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80042b6:	f001 f8fb 	bl	80054b0 <WIZCHIP_READ>
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80042be:	2103      	movs	r1, #3
 80042c0:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80042c4:	f001 f940 	bl	8005548 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80042c8:	4b13      	ldr	r3, [pc, #76]	@ (8004318 <check_DHCP_leasedIP+0x6c>)
 80042ca:	7818      	ldrb	r0, [r3, #0]
 80042cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	4b12      	ldr	r3, [pc, #72]	@ (800431c <check_DHCP_leasedIP+0x70>)
 80042d4:	2211      	movs	r2, #17
 80042d6:	4912      	ldr	r1, [pc, #72]	@ (8004320 <check_DHCP_leasedIP+0x74>)
 80042d8:	f000 fdca 	bl	8004e70 <sendto>
 80042dc:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	4619      	mov	r1, r3
 80042e2:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80042e6:	f001 f92f 	bl	8005548 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	f113 0f0d 	cmn.w	r3, #13
 80042f0:	d101      	bne.n	80042f6 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e00c      	b.n	8004310 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80042f6:	f7ff faef 	bl	80038d8 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80042fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <check_DHCP_leasedIP+0x78>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8004300:	bf00      	nop
 8004302:	4b08      	ldr	r3, [pc, #32]	@ (8004324 <check_DHCP_leasedIP+0x78>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d9f9      	bls.n	8004302 <check_DHCP_leasedIP+0x56>

		return 0;
 800430e:	2300      	movs	r3, #0
	}
}	
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	200007cd 	.word	0x200007cd
 800431c:	200007dc 	.word	0x200007dc
 8004320:	08007a38 	.word	0x08007a38
 8004324:	200007f0 	.word	0x200007f0

08004328 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	6039      	str	r1, [r7, #0]
 8004332:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8004338:	2206      	movs	r2, #6
 800433a:	493f      	ldr	r1, [pc, #252]	@ (8004438 <DHCP_init+0x110>)
 800433c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004340:	f001 f950 	bl	80055e4 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8004344:	4b3c      	ldr	r3, [pc, #240]	@ (8004438 <DHCP_init+0x110>)
 8004346:	781a      	ldrb	r2, [r3, #0]
 8004348:	4b3b      	ldr	r3, [pc, #236]	@ (8004438 <DHCP_init+0x110>)
 800434a:	785b      	ldrb	r3, [r3, #1]
 800434c:	4313      	orrs	r3, r2
 800434e:	b2da      	uxtb	r2, r3
 8004350:	4b39      	ldr	r3, [pc, #228]	@ (8004438 <DHCP_init+0x110>)
 8004352:	789b      	ldrb	r3, [r3, #2]
 8004354:	4313      	orrs	r3, r2
 8004356:	b2da      	uxtb	r2, r3
 8004358:	4b37      	ldr	r3, [pc, #220]	@ (8004438 <DHCP_init+0x110>)
 800435a:	78db      	ldrb	r3, [r3, #3]
 800435c:	4313      	orrs	r3, r2
 800435e:	b2da      	uxtb	r2, r3
 8004360:	4b35      	ldr	r3, [pc, #212]	@ (8004438 <DHCP_init+0x110>)
 8004362:	791b      	ldrb	r3, [r3, #4]
 8004364:	4313      	orrs	r3, r2
 8004366:	b2da      	uxtb	r2, r3
 8004368:	4b33      	ldr	r3, [pc, #204]	@ (8004438 <DHCP_init+0x110>)
 800436a:	795b      	ldrb	r3, [r3, #5]
 800436c:	4313      	orrs	r3, r2
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d117      	bne.n	80043a4 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8004374:	4b30      	ldr	r3, [pc, #192]	@ (8004438 <DHCP_init+0x110>)
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800437a:	4b2f      	ldr	r3, [pc, #188]	@ (8004438 <DHCP_init+0x110>)
 800437c:	2208      	movs	r2, #8
 800437e:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8004380:	4b2d      	ldr	r3, [pc, #180]	@ (8004438 <DHCP_init+0x110>)
 8004382:	22dc      	movs	r2, #220	@ 0xdc
 8004384:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8004386:	4b2c      	ldr	r3, [pc, #176]	@ (8004438 <DHCP_init+0x110>)
 8004388:	2200      	movs	r2, #0
 800438a:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 800438c:	4b2a      	ldr	r3, [pc, #168]	@ (8004438 <DHCP_init+0x110>)
 800438e:	2200      	movs	r2, #0
 8004390:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8004392:	4b29      	ldr	r3, [pc, #164]	@ (8004438 <DHCP_init+0x110>)
 8004394:	2200      	movs	r2, #0
 8004396:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8004398:	2206      	movs	r2, #6
 800439a:	4927      	ldr	r1, [pc, #156]	@ (8004438 <DHCP_init+0x110>)
 800439c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80043a0:	f001 f980 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 80043a4:	4a25      	ldr	r2, [pc, #148]	@ (800443c <DHCP_init+0x114>)
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80043aa:	4a25      	ldr	r2, [pc, #148]	@ (8004440 <DHCP_init+0x118>)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80043b0:	4b24      	ldr	r3, [pc, #144]	@ (8004444 <DHCP_init+0x11c>)
 80043b2:	4a25      	ldr	r2, [pc, #148]	@ (8004448 <DHCP_init+0x120>)
 80043b4:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80043b6:	4b20      	ldr	r3, [pc, #128]	@ (8004438 <DHCP_init+0x110>)
 80043b8:	78db      	ldrb	r3, [r3, #3]
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b21      	ldr	r3, [pc, #132]	@ (8004444 <DHCP_init+0x11c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4413      	add	r3, r2
 80043c2:	4a20      	ldr	r2, [pc, #128]	@ (8004444 <DHCP_init+0x11c>)
 80043c4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80043c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004438 <DHCP_init+0x110>)
 80043c8:	791b      	ldrb	r3, [r3, #4]
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004444 <DHCP_init+0x11c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4413      	add	r3, r2
 80043d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <DHCP_init+0x11c>)
 80043d4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80043d6:	4b18      	ldr	r3, [pc, #96]	@ (8004438 <DHCP_init+0x110>)
 80043d8:	795b      	ldrb	r3, [r3, #5]
 80043da:	461a      	mov	r2, r3
 80043dc:	4b19      	ldr	r3, [pc, #100]	@ (8004444 <DHCP_init+0x11c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4413      	add	r3, r2
 80043e2:	4a18      	ldr	r2, [pc, #96]	@ (8004444 <DHCP_init+0x11c>)
 80043e4:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80043e6:	4b14      	ldr	r3, [pc, #80]	@ (8004438 <DHCP_init+0x110>)
 80043e8:	78da      	ldrb	r2, [r3, #3]
 80043ea:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <DHCP_init+0x110>)
 80043ec:	791b      	ldrb	r3, [r3, #4]
 80043ee:	4053      	eors	r3, r2
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	4b11      	ldr	r3, [pc, #68]	@ (8004438 <DHCP_init+0x110>)
 80043f4:	795b      	ldrb	r3, [r3, #5]
 80043f6:	4053      	eors	r3, r2
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	4b11      	ldr	r3, [pc, #68]	@ (8004444 <DHCP_init+0x11c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4413      	add	r3, r2
 8004402:	4a10      	ldr	r2, [pc, #64]	@ (8004444 <DHCP_init+0x11c>)
 8004404:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8004406:	f107 030c 	add.w	r3, r7, #12
 800440a:	2204      	movs	r2, #4
 800440c:	4619      	mov	r1, r3
 800440e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004412:	f001 f947 	bl	80056a4 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8004416:	f107 030c 	add.w	r3, r7, #12
 800441a:	2204      	movs	r2, #4
 800441c:	4619      	mov	r1, r3
 800441e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004422:	f001 f93f 	bl	80056a4 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8004426:	f000 f813 	bl	8004450 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800442a:	4b08      	ldr	r3, [pc, #32]	@ (800444c <DHCP_init+0x124>)
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	200007fc 	.word	0x200007fc
 800443c:	200007cd 	.word	0x200007cd
 8004440:	200007f8 	.word	0x200007f8
 8004444:	200007f4 	.word	0x200007f4
 8004448:	12345678 	.word	0x12345678
 800444c:	200007ec 	.word	0x200007ec

08004450 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8004454:	4b06      	ldr	r3, [pc, #24]	@ (8004470 <reset_DHCP_timeout+0x20>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800445a:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <reset_DHCP_timeout+0x24>)
 800445c:	220a      	movs	r2, #10
 800445e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <reset_DHCP_timeout+0x28>)
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
}
 8004466:	bf00      	nop
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	200007f0 	.word	0x200007f0
 8004474:	2000008c 	.word	0x2000008c
 8004478:	200007ed 	.word	0x200007ed

0800447c <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8004484:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <getIPfromDHCP+0x3c>)
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3301      	adds	r3, #1
 8004490:	4a09      	ldr	r2, [pc, #36]	@ (80044b8 <getIPfromDHCP+0x3c>)
 8004492:	7852      	ldrb	r2, [r2, #1]
 8004494:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3302      	adds	r3, #2
 800449a:	4a07      	ldr	r2, [pc, #28]	@ (80044b8 <getIPfromDHCP+0x3c>)
 800449c:	7892      	ldrb	r2, [r2, #2]
 800449e:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3303      	adds	r3, #3
 80044a4:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <getIPfromDHCP+0x3c>)
 80044a6:	78d2      	ldrb	r2, [r2, #3]
 80044a8:	701a      	strb	r2, [r3, #0]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	200007dc 	.word	0x200007dc

080044bc <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80044c4:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <getGWfromDHCP+0x3c>)
 80044c6:	781a      	ldrb	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3301      	adds	r3, #1
 80044d0:	4a09      	ldr	r2, [pc, #36]	@ (80044f8 <getGWfromDHCP+0x3c>)
 80044d2:	7852      	ldrb	r2, [r2, #1]
 80044d4:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3302      	adds	r3, #2
 80044da:	4a07      	ldr	r2, [pc, #28]	@ (80044f8 <getGWfromDHCP+0x3c>)
 80044dc:	7892      	ldrb	r2, [r2, #2]
 80044de:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3303      	adds	r3, #3
 80044e4:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <getGWfromDHCP+0x3c>)
 80044e6:	78d2      	ldrb	r2, [r2, #3]
 80044e8:	701a      	strb	r2, [r3, #0]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	200007e0 	.word	0x200007e0

080044fc <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8004504:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <getSNfromDHCP+0x3c>)
 8004506:	781a      	ldrb	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3301      	adds	r3, #1
 8004510:	4a09      	ldr	r2, [pc, #36]	@ (8004538 <getSNfromDHCP+0x3c>)
 8004512:	7852      	ldrb	r2, [r2, #1]
 8004514:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3302      	adds	r3, #2
 800451a:	4a07      	ldr	r2, [pc, #28]	@ (8004538 <getSNfromDHCP+0x3c>)
 800451c:	7892      	ldrb	r2, [r2, #2]
 800451e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3303      	adds	r3, #3
 8004524:	4a04      	ldr	r2, [pc, #16]	@ (8004538 <getSNfromDHCP+0x3c>)
 8004526:	78d2      	ldrb	r2, [r2, #3]
 8004528:	701a      	strb	r2, [r3, #0]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	200007e4 	.word	0x200007e4

0800453c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	2b09      	cmp	r3, #9
 8004552:	d803      	bhi.n	800455c <NibbleToHex+0x20>
    return nibble + '0';
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	3330      	adds	r3, #48	@ 0x30
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e002      	b.n	8004562 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	3337      	adds	r3, #55	@ 0x37
 8004560:	b2db      	uxtb	r3, r3
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	4604      	mov	r4, r0
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	461a      	mov	r2, r3
 800457e:	4623      	mov	r3, r4
 8004580:	71fb      	strb	r3, [r7, #7]
 8004582:	4603      	mov	r3, r0
 8004584:	71bb      	strb	r3, [r7, #6]
 8004586:	460b      	mov	r3, r1
 8004588:	80bb      	strh	r3, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d902      	bls.n	800459a <socket+0x2a>
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
 8004598:	e0f0      	b.n	800477c <socket+0x20c>
	switch(protocol)
 800459a:	79bb      	ldrb	r3, [r7, #6]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d005      	beq.n	80045ac <socket+0x3c>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	dd11      	ble.n	80045c8 <socket+0x58>
 80045a4:	3b02      	subs	r3, #2
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d80e      	bhi.n	80045c8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80045aa:	e011      	b.n	80045d0 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80045ac:	f107 030c 	add.w	r3, r7, #12
 80045b0:	2204      	movs	r2, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80045b8:	f001 f814 	bl	80055e4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d105      	bne.n	80045ce <socket+0x5e>
 80045c2:	f06f 0302 	mvn.w	r3, #2
 80045c6:	e0d9      	b.n	800477c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80045c8:	f06f 0304 	mvn.w	r3, #4
 80045cc:	e0d6      	b.n	800477c <socket+0x20c>
	    break;
 80045ce:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <socket+0x70>
 80045da:	f06f 0305 	mvn.w	r3, #5
 80045de:	e0cd      	b.n	800477c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d028      	beq.n	8004638 <socket+0xc8>
	{
   	switch(protocol)
 80045e6:	79bb      	ldrb	r3, [r7, #6]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d002      	beq.n	80045f2 <socket+0x82>
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d008      	beq.n	8004602 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80045f0:	e022      	b.n	8004638 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11a      	bne.n	8004632 <socket+0xc2>
 80045fc:	f06f 0305 	mvn.w	r3, #5
 8004600:	e0bc      	b.n	800477c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d006      	beq.n	800461a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800460c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	db02      	blt.n	800461a <socket+0xaa>
 8004614:	f06f 0305 	mvn.w	r3, #5
 8004618:	e0b0      	b.n	800477c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004628:	2b00      	cmp	r3, #0
 800462a:	db04      	blt.n	8004636 <socket+0xc6>
 800462c:	f06f 0305 	mvn.w	r3, #5
 8004630:	e0a4      	b.n	800477c <socket+0x20c>
   	      break;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <socket+0xc8>
   	      break;
 8004636:	bf00      	nop
   	}
   }
	close(sn);
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	4618      	mov	r0, r3
 800463c:	f000 f8ac 	bl	8004798 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	3301      	adds	r3, #1
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4618      	mov	r0, r3
 800464a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800464e:	f023 030f 	bic.w	r3, r3, #15
 8004652:	b25a      	sxtb	r2, r3
 8004654:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004658:	4313      	orrs	r3, r2
 800465a:	b25b      	sxtb	r3, r3
 800465c:	b2db      	uxtb	r3, r3
 800465e:	4619      	mov	r1, r3
 8004660:	f000 ff72 	bl	8005548 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8004664:	88bb      	ldrh	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d110      	bne.n	800468c <socket+0x11c>
	{
	   port = sock_any_port++;
 800466a:	4b46      	ldr	r3, [pc, #280]	@ (8004784 <socket+0x214>)
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	b291      	uxth	r1, r2
 8004672:	4a44      	ldr	r2, [pc, #272]	@ (8004784 <socket+0x214>)
 8004674:	8011      	strh	r1, [r2, #0]
 8004676:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004678:	4b42      	ldr	r3, [pc, #264]	@ (8004784 <socket+0x214>)
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8004680:	4293      	cmp	r3, r2
 8004682:	d103      	bne.n	800468c <socket+0x11c>
 8004684:	4b3f      	ldr	r3, [pc, #252]	@ (8004784 <socket+0x214>)
 8004686:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800468a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	3301      	adds	r3, #1
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004698:	461a      	mov	r2, r3
 800469a:	88bb      	ldrh	r3, [r7, #4]
 800469c:	0a1b      	lsrs	r3, r3, #8
 800469e:	b29b      	uxth	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 ff4f 	bl	8005548 <WIZCHIP_WRITE>
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	3301      	adds	r3, #1
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b6:	461a      	mov	r2, r3
 80046b8:	88bb      	ldrh	r3, [r7, #4]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f000 ff42 	bl	8005548 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	3301      	adds	r3, #1
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ff38 	bl	8005548 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80046d8:	bf00      	nop
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	3301      	adds	r3, #1
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fee2 	bl	80054b0 <WIZCHIP_READ>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f3      	bne.n	80046da <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	2201      	movs	r2, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	b21b      	sxth	r3, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	b21a      	sxth	r2, r3
 8004700:	4b21      	ldr	r3, [pc, #132]	@ (8004788 <socket+0x218>)
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b21b      	sxth	r3, r3
 8004706:	4013      	ands	r3, r2
 8004708:	b21b      	sxth	r3, r3
 800470a:	b29a      	uxth	r2, r3
 800470c:	4b1e      	ldr	r3, [pc, #120]	@ (8004788 <socket+0x218>)
 800470e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	f003 0201 	and.w	r2, r3, #1
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	b21a      	sxth	r2, r3
 800471e:	4b1a      	ldr	r3, [pc, #104]	@ (8004788 <socket+0x218>)
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b21b      	sxth	r3, r3
 8004724:	4313      	orrs	r3, r2
 8004726:	b21b      	sxth	r3, r3
 8004728:	b29a      	uxth	r2, r3
 800472a:	4b17      	ldr	r3, [pc, #92]	@ (8004788 <socket+0x218>)
 800472c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	2201      	movs	r2, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	b21b      	sxth	r3, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	b21a      	sxth	r2, r3
 800473c:	4b13      	ldr	r3, [pc, #76]	@ (800478c <socket+0x21c>)
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b21b      	sxth	r3, r3
 8004742:	4013      	ands	r3, r2
 8004744:	b21b      	sxth	r3, r3
 8004746:	b29a      	uxth	r2, r3
 8004748:	4b10      	ldr	r3, [pc, #64]	@ (800478c <socket+0x21c>)
 800474a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	4a10      	ldr	r2, [pc, #64]	@ (8004790 <socket+0x220>)
 8004750:	2100      	movs	r1, #0
 8004752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	4a0e      	ldr	r2, [pc, #56]	@ (8004794 <socket+0x224>)
 800475a:	2100      	movs	r1, #0
 800475c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800475e:	bf00      	nop
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	3301      	adds	r3, #1
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fe9f 	bl	80054b0 <WIZCHIP_READ>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f3      	beq.n	8004760 <socket+0x1f0>
   return (int8_t)sn;
 8004778:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bd90      	pop	{r4, r7, pc}
 8004784:	200000a4 	.word	0x200000a4
 8004788:	20000802 	.word	0x20000802
 800478c:	20000804 	.word	0x20000804
 8004790:	20000808 	.word	0x20000808
 8004794:	20000818 	.word	0x20000818

08004798 <close>:

int8_t close(uint8_t sn)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d902      	bls.n	80047ae <close+0x16>
 80047a8:	f04f 33ff 	mov.w	r3, #4294967295
 80047ac:	e055      	b.n	800485a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	3301      	adds	r3, #1
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80047ba:	2110      	movs	r1, #16
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fec3 	bl	8005548 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80047c2:	bf00      	nop
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	3301      	adds	r3, #1
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fe6d 	bl	80054b0 <WIZCHIP_READ>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f3      	bne.n	80047c4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	3301      	adds	r3, #1
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80047e8:	211f      	movs	r1, #31
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 feac 	bl	8005548 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	2201      	movs	r2, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	b21b      	sxth	r3, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	b21a      	sxth	r2, r3
 80047fe:	4b19      	ldr	r3, [pc, #100]	@ (8004864 <close+0xcc>)
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b21b      	sxth	r3, r3
 8004804:	4013      	ands	r3, r2
 8004806:	b21b      	sxth	r3, r3
 8004808:	b29a      	uxth	r2, r3
 800480a:	4b16      	ldr	r3, [pc, #88]	@ (8004864 <close+0xcc>)
 800480c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	2201      	movs	r2, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	b21b      	sxth	r3, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	b21a      	sxth	r2, r3
 800481c:	4b12      	ldr	r3, [pc, #72]	@ (8004868 <close+0xd0>)
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b21b      	sxth	r3, r3
 8004822:	4013      	ands	r3, r2
 8004824:	b21b      	sxth	r3, r3
 8004826:	b29a      	uxth	r2, r3
 8004828:	4b0f      	ldr	r3, [pc, #60]	@ (8004868 <close+0xd0>)
 800482a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	4a0f      	ldr	r2, [pc, #60]	@ (800486c <close+0xd4>)
 8004830:	2100      	movs	r1, #0
 8004832:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	4a0d      	ldr	r2, [pc, #52]	@ (8004870 <close+0xd8>)
 800483a:	2100      	movs	r1, #0
 800483c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800483e:	bf00      	nop
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	3301      	adds	r3, #1
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fe2f 	bl	80054b0 <WIZCHIP_READ>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f3      	bne.n	8004840 <close+0xa8>
	return SOCK_OK;
 8004858:	2301      	movs	r3, #1
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000802 	.word	0x20000802
 8004868:	20000804 	.word	0x20000804
 800486c:	20000808 	.word	0x20000808
 8004870:	20000818 	.word	0x20000818

08004874 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	6039      	str	r1, [r7, #0]
 800487e:	71fb      	strb	r3, [r7, #7]
 8004880:	4613      	mov	r3, r2
 8004882:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	2b08      	cmp	r3, #8
 8004888:	d902      	bls.n	8004890 <connect+0x1c>
 800488a:	f04f 33ff 	mov.w	r3, #4294967295
 800488e:	e0c6      	b.n	8004a1e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	3301      	adds	r3, #1
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fe09 	bl	80054b0 <WIZCHIP_READ>
 800489e:	4603      	mov	r3, r0
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d002      	beq.n	80048ae <connect+0x3a>
 80048a8:	f06f 0304 	mvn.w	r3, #4
 80048ac:	e0b7      	b.n	8004a1e <connect+0x1aa>
   CHECK_SOCKINIT();
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	3301      	adds	r3, #1
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fdf8 	bl	80054b0 <WIZCHIP_READ>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b13      	cmp	r3, #19
 80048c4:	d002      	beq.n	80048cc <connect+0x58>
 80048c6:	f06f 0302 	mvn.w	r3, #2
 80048ca:	e0a8      	b.n	8004a1e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	3201      	adds	r2, #1
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	4413      	add	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	3202      	adds	r2, #2
 80048e8:	7812      	ldrb	r2, [r2, #0]
 80048ea:	4413      	add	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	3203      	adds	r2, #3
 80048f6:	7812      	ldrb	r2, [r2, #0]
 80048f8:	4413      	add	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d002      	beq.n	800490a <connect+0x96>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <connect+0x9c>
 800490a:	f06f 030b 	mvn.w	r3, #11
 800490e:	e086      	b.n	8004a1e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004910:	88bb      	ldrh	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <connect+0xa8>
 8004916:	f06f 030a 	mvn.w	r3, #10
 800491a:	e080      	b.n	8004a1e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	3301      	adds	r3, #1
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004928:	2204      	movs	r2, #4
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 feb9 	bl	80056a4 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	3301      	adds	r3, #1
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800493e:	461a      	mov	r2, r3
 8004940:	88bb      	ldrh	r3, [r7, #4]
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	b29b      	uxth	r3, r3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 fdfc 	bl	8005548 <WIZCHIP_WRITE>
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	3301      	adds	r3, #1
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800495c:	461a      	mov	r2, r3
 800495e:	88bb      	ldrh	r3, [r7, #4]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f000 fdef 	bl	8005548 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	3301      	adds	r3, #1
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004976:	2104      	movs	r1, #4
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fde5 	bl	8005548 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800497e:	bf00      	nop
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	3301      	adds	r3, #1
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fd8f 	bl	80054b0 <WIZCHIP_READ>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f3      	bne.n	8004980 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004998:	4b23      	ldr	r3, [pc, #140]	@ (8004a28 <connect+0x1b4>)
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	fa42 f303 	asr.w	r3, r2, r3
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02b      	beq.n	8004a04 <connect+0x190>
 80049ac:	2300      	movs	r3, #0
 80049ae:	e036      	b.n	8004a1e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	3301      	adds	r3, #1
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fd77 	bl	80054b0 <WIZCHIP_READ>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	3301      	adds	r3, #1
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80049d8:	2108      	movs	r1, #8
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fdb4 	bl	8005548 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80049e0:	f06f 030c 	mvn.w	r3, #12
 80049e4:	e01b      	b.n	8004a1e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	3301      	adds	r3, #1
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fd5c 	bl	80054b0 <WIZCHIP_READ>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80049fe:	f06f 0303 	mvn.w	r3, #3
 8004a02:	e00c      	b.n	8004a1e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	3301      	adds	r3, #1
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fd4d 	bl	80054b0 <WIZCHIP_READ>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b17      	cmp	r3, #23
 8004a1a:	d1c9      	bne.n	80049b0 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8004a1c:	2301      	movs	r3, #1
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000802 	.word	0x20000802

08004a2c <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d902      	bls.n	8004a42 <disconnect+0x16>
 8004a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a40:	e062      	b.n	8004b08 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	3301      	adds	r3, #1
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fd30 	bl	80054b0 <WIZCHIP_READ>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d002      	beq.n	8004a60 <disconnect+0x34>
 8004a5a:	f06f 0304 	mvn.w	r3, #4
 8004a5e:	e053      	b.n	8004b08 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	3301      	adds	r3, #1
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fd6a 	bl	8005548 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004a74:	bf00      	nop
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fd14 	bl	80054b0 <WIZCHIP_READ>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f3      	bne.n	8004a76 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	2201      	movs	r2, #1
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	b21a      	sxth	r2, r3
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b10 <disconnect+0xe4>)
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b21b      	sxth	r3, r3
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	b21b      	sxth	r3, r3
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <disconnect+0xe4>)
 8004aaa:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004aac:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <disconnect+0xe8>)
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	fa42 f303 	asr.w	r3, r2, r3
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d016      	beq.n	8004aee <disconnect+0xc2>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e021      	b.n	8004b08 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	3301      	adds	r3, #1
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fced 	bl	80054b0 <WIZCHIP_READ>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d006      	beq.n	8004aee <disconnect+0xc2>
	   {
	      close(sn);
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff fe58 	bl	8004798 <close>
	      return SOCKERR_TIMEOUT;
 8004ae8:	f06f 030c 	mvn.w	r3, #12
 8004aec:	e00c      	b.n	8004b08 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	3301      	adds	r3, #1
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fcd8 	bl	80054b0 <WIZCHIP_READ>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1de      	bne.n	8004ac4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8004b06:	2301      	movs	r3, #1
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000804 	.word	0x20000804
 8004b14:	20000802 	.word	0x20000802

08004b18 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	6039      	str	r1, [r7, #0]
 8004b22:	71fb      	strb	r3, [r7, #7]
 8004b24:	4613      	mov	r3, r2
 8004b26:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d902      	bls.n	8004b3c <send+0x24>
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	e0dd      	b.n	8004cf8 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	3301      	adds	r3, #1
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fcb3 	bl	80054b0 <WIZCHIP_READ>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d002      	beq.n	8004b5a <send+0x42>
 8004b54:	f06f 0304 	mvn.w	r3, #4
 8004b58:	e0ce      	b.n	8004cf8 <send+0x1e0>
   CHECK_SOCKDATA();
 8004b5a:	88bb      	ldrh	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <send+0x4e>
 8004b60:	f06f 030d 	mvn.w	r3, #13
 8004b64:	e0c8      	b.n	8004cf8 <send+0x1e0>
   tmp = getSn_SR(sn);
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fc9c 	bl	80054b0 <WIZCHIP_READ>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b17      	cmp	r3, #23
 8004b80:	d005      	beq.n	8004b8e <send+0x76>
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b1c      	cmp	r3, #28
 8004b86:	d002      	beq.n	8004b8e <send+0x76>
 8004b88:	f06f 0306 	mvn.w	r3, #6
 8004b8c:	e0b4      	b.n	8004cf8 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8004b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8004d00 <send+0x1e8>)
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	fa42 f303 	asr.w	r3, r2, r3
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d039      	beq.n	8004c16 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fc7e 	bl	80054b0 <WIZCHIP_READ>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d019      	beq.n	8004bfa <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	3301      	adds	r3, #1
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fcb7 	bl	8005548 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	b21b      	sxth	r3, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	b21a      	sxth	r2, r3
 8004be8:	4b45      	ldr	r3, [pc, #276]	@ (8004d00 <send+0x1e8>)
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b21b      	sxth	r3, r3
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	4b42      	ldr	r3, [pc, #264]	@ (8004d00 <send+0x1e8>)
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	e00d      	b.n	8004c16 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <send+0xfa>
      {
         close(sn);
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fdc6 	bl	8004798 <close>
         return SOCKERR_TIMEOUT;
 8004c0c:	f06f 030c 	mvn.w	r3, #12
 8004c10:	e072      	b.n	8004cf8 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e070      	b.n	8004cf8 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fc44 	bl	80054b0 <WIZCHIP_READ>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	029b      	lsls	r3, r3, #10
 8004c2c:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004c2e:	88ba      	ldrh	r2, [r7, #4]
 8004c30:	89bb      	ldrh	r3, [r7, #12]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d901      	bls.n	8004c3a <send+0x122>
 8004c36:	89bb      	ldrh	r3, [r7, #12]
 8004c38:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fd91 	bl	8005764 <getSn_TX_FSR>
 8004c42:	4603      	mov	r3, r0
 8004c44:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fc2c 	bl	80054b0 <WIZCHIP_READ>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	2b17      	cmp	r3, #23
 8004c60:	d009      	beq.n	8004c76 <send+0x15e>
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b1c      	cmp	r3, #28
 8004c66:	d006      	beq.n	8004c76 <send+0x15e>
      {
         close(sn);
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fd94 	bl	8004798 <close>
         return SOCKERR_SOCKSTATUS;
 8004c70:	f06f 0306 	mvn.w	r3, #6
 8004c74:	e040      	b.n	8004cf8 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004c76:	4b23      	ldr	r3, [pc, #140]	@ (8004d04 <send+0x1ec>)
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	fa42 f303 	asr.w	r3, r2, r3
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <send+0x17e>
 8004c8a:	88ba      	ldrh	r2, [r7, #4]
 8004c8c:	89bb      	ldrh	r3, [r7, #12]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d901      	bls.n	8004c96 <send+0x17e>
 8004c92:	2300      	movs	r3, #0
 8004c94:	e030      	b.n	8004cf8 <send+0x1e0>
      if(len <= freesize) break;
 8004c96:	88ba      	ldrh	r2, [r7, #4]
 8004c98:	89bb      	ldrh	r3, [r7, #12]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d900      	bls.n	8004ca0 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8004c9e:	e7cc      	b.n	8004c3a <send+0x122>
      if(len <= freesize) break;
 8004ca0:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004ca2:	88ba      	ldrh	r2, [r7, #4]
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fded 	bl	8005888 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004cba:	2120      	movs	r1, #32
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fc43 	bl	8005548 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004cc2:	bf00      	nop
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	3301      	adds	r3, #1
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fbed 	bl	80054b0 <WIZCHIP_READ>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f3      	bne.n	8004cc4 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	b21a      	sxth	r2, r3
 8004ce6:	4b06      	ldr	r3, [pc, #24]	@ (8004d00 <send+0x1e8>)
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	4b03      	ldr	r3, [pc, #12]	@ (8004d00 <send+0x1e8>)
 8004cf4:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004cf6:	88bb      	ldrh	r3, [r7, #4]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000804 	.word	0x20000804
 8004d04:	20000802 	.word	0x20000802

08004d08 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	6039      	str	r1, [r7, #0]
 8004d12:	71fb      	strb	r3, [r7, #7]
 8004d14:	4613      	mov	r3, r2
 8004d16:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d902      	bls.n	8004d2c <recv+0x24>
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2a:	e09b      	b.n	8004e64 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	3301      	adds	r3, #1
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fbbb 	bl	80054b0 <WIZCHIP_READ>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d002      	beq.n	8004d4a <recv+0x42>
 8004d44:	f06f 0304 	mvn.w	r3, #4
 8004d48:	e08c      	b.n	8004e64 <recv+0x15c>
   CHECK_SOCKDATA();
 8004d4a:	88bb      	ldrh	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <recv+0x4e>
 8004d50:	f06f 030d 	mvn.w	r3, #13
 8004d54:	e086      	b.n	8004e64 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fba4 	bl	80054b0 <WIZCHIP_READ>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	029b      	lsls	r3, r3, #10
 8004d6c:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004d6e:	89ba      	ldrh	r2, [r7, #12]
 8004d70:	88bb      	ldrh	r3, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d201      	bcs.n	8004d7a <recv+0x72>
 8004d76:	89bb      	ldrh	r3, [r7, #12]
 8004d78:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fd3a 	bl	80057f6 <getSn_RX_RSR>
 8004d82:	4603      	mov	r3, r0
 8004d84:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fb8c 	bl	80054b0 <WIZCHIP_READ>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b17      	cmp	r3, #23
 8004da0:	d026      	beq.n	8004df0 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b1c      	cmp	r3, #28
 8004da6:	d11c      	bne.n	8004de2 <recv+0xda>
            {
               if(recvsize != 0) break;
 8004da8:	89bb      	ldrh	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d133      	bne.n	8004e16 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fcd7 	bl	8005764 <getSn_TX_FSR>
 8004db6:	4603      	mov	r3, r0
 8004db8:	461c      	mov	r4, r3
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fb72 	bl	80054b0 <WIZCHIP_READ>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	429c      	cmp	r4, r3
 8004dd2:	d10d      	bne.n	8004df0 <recv+0xe8>
               {
                  close(sn);
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fcde 	bl	8004798 <close>
                  return SOCKERR_SOCKSTATUS;
 8004ddc:	f06f 0306 	mvn.w	r3, #6
 8004de0:	e040      	b.n	8004e64 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fcd7 	bl	8004798 <close>
               return SOCKERR_SOCKSTATUS;
 8004dea:	f06f 0306 	mvn.w	r3, #6
 8004dee:	e039      	b.n	8004e64 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004df0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e6c <recv+0x164>)
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	fa42 f303 	asr.w	r3, r2, r3
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <recv+0x106>
 8004e04:	89bb      	ldrh	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <recv+0x106>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e02a      	b.n	8004e64 <recv+0x15c>
         if(recvsize != 0) break;
 8004e0e:	89bb      	ldrh	r3, [r7, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8004e14:	e7b1      	b.n	8004d7a <recv+0x72>
               if(recvsize != 0) break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <recv+0x114>
         if(recvsize != 0) break;
 8004e1a:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004e1c:	89ba      	ldrh	r2, [r7, #12]
 8004e1e:	88bb      	ldrh	r3, [r7, #4]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d201      	bcs.n	8004e28 <recv+0x120>
 8004e24:	89bb      	ldrh	r3, [r7, #12]
 8004e26:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004e28:	88ba      	ldrh	r2, [r7, #4]
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	6839      	ldr	r1, [r7, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fd84 	bl	800593c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	3301      	adds	r3, #1
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004e40:	2140      	movs	r1, #64	@ 0x40
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fb80 	bl	8005548 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004e48:	bf00      	nop
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	3301      	adds	r3, #1
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fb2a 	bl	80054b0 <WIZCHIP_READ>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f3      	bne.n	8004e4a <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004e62:	88bb      	ldrh	r3, [r7, #4]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd90      	pop	{r4, r7, pc}
 8004e6c:	20000802 	.word	0x20000802

08004e70 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d902      	bls.n	8004e96 <sendto+0x26>
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295
 8004e94:	e11a      	b.n	80050cc <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fb06 	bl	80054b0 <WIZCHIP_READ>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	3b02      	subs	r3, #2
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d902      	bls.n	8004eb6 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004eb0:	f06f 0304 	mvn.w	r3, #4
 8004eb4:	e10a      	b.n	80050cc <sendto+0x25c>
         break;
 8004eb6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004eb8:	89bb      	ldrh	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <sendto+0x54>
 8004ebe:	f06f 030d 	mvn.w	r3, #13
 8004ec2:	e103      	b.n	80050cc <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	3201      	adds	r2, #1
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	3202      	adds	r2, #2
 8004ee0:	7812      	ldrb	r2, [r2, #0]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	3203      	adds	r2, #3
 8004eee:	7812      	ldrb	r2, [r2, #0]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10e      	bne.n	8004f18 <sendto+0xa8>
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	3301      	adds	r3, #1
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fad4 	bl	80054b0 <WIZCHIP_READ>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d002      	beq.n	8004f18 <sendto+0xa8>
 8004f12:	f06f 030b 	mvn.w	r3, #11
 8004f16:	e0d9      	b.n	80050cc <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8004f18:	8c3b      	ldrh	r3, [r7, #32]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10e      	bne.n	8004f3c <sendto+0xcc>
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	3301      	adds	r3, #1
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fac2 	bl	80054b0 <WIZCHIP_READ>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d002      	beq.n	8004f3c <sendto+0xcc>
 8004f36:	f06f 030a 	mvn.w	r3, #10
 8004f3a:	e0c7      	b.n	80050cc <sendto+0x25c>
   tmp = getSn_SR(sn);
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	3301      	adds	r3, #1
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fab1 	bl	80054b0 <WIZCHIP_READ>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
 8004f54:	2b42      	cmp	r3, #66	@ 0x42
 8004f56:	d008      	beq.n	8004f6a <sendto+0xfa>
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	2b22      	cmp	r3, #34	@ 0x22
 8004f5c:	d005      	beq.n	8004f6a <sendto+0xfa>
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	2b32      	cmp	r3, #50	@ 0x32
 8004f62:	d002      	beq.n	8004f6a <sendto+0xfa>
 8004f64:	f06f 0306 	mvn.w	r3, #6
 8004f68:	e0b0      	b.n	80050cc <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	3301      	adds	r3, #1
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004f76:	2204      	movs	r2, #4
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fb92 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	3301      	adds	r3, #1
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	8c3b      	ldrh	r3, [r7, #32]
 8004f90:	0a1b      	lsrs	r3, r3, #8
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	4619      	mov	r1, r3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	f000 fad5 	bl	8005548 <WIZCHIP_WRITE>
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8004faa:	461a      	mov	r2, r3
 8004fac:	8c3b      	ldrh	r3, [r7, #32]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f000 fac8 	bl	8005548 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fa73 	bl	80054b0 <WIZCHIP_READ>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004fd0:	89ba      	ldrh	r2, [r7, #12]
 8004fd2:	8abb      	ldrh	r3, [r7, #20]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d901      	bls.n	8004fdc <sendto+0x16c>
 8004fd8:	8abb      	ldrh	r3, [r7, #20]
 8004fda:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fbc0 	bl	8005764 <getSn_TX_FSR>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	3301      	adds	r3, #1
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fa5b 	bl	80054b0 <WIZCHIP_READ>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d102      	bne.n	8005006 <sendto+0x196>
 8005000:	f06f 0303 	mvn.w	r3, #3
 8005004:	e062      	b.n	80050cc <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005006:	4b33      	ldr	r3, [pc, #204]	@ (80050d4 <sendto+0x264>)
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	fa42 f303 	asr.w	r3, r2, r3
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <sendto+0x1b6>
 800501a:	89ba      	ldrh	r2, [r7, #12]
 800501c:	8abb      	ldrh	r3, [r7, #20]
 800501e:	429a      	cmp	r2, r3
 8005020:	d901      	bls.n	8005026 <sendto+0x1b6>
 8005022:	2300      	movs	r3, #0
 8005024:	e052      	b.n	80050cc <sendto+0x25c>
      if(len <= freesize) break;
 8005026:	89ba      	ldrh	r2, [r7, #12]
 8005028:	8abb      	ldrh	r3, [r7, #20]
 800502a:	429a      	cmp	r2, r3
 800502c:	d900      	bls.n	8005030 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 800502e:	e7d5      	b.n	8004fdc <sendto+0x16c>
      if(len <= freesize) break;
 8005030:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8005032:	89ba      	ldrh	r2, [r7, #12]
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fc25 	bl	8005888 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	3301      	adds	r3, #1
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800504a:	2120      	movs	r1, #32
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fa7b 	bl	8005548 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005052:	bf00      	nop
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	3301      	adds	r3, #1
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fa25 	bl	80054b0 <WIZCHIP_READ>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f3      	bne.n	8005054 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	3301      	adds	r3, #1
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fa19 	bl	80054b0 <WIZCHIP_READ>
 800507e:	4603      	mov	r3, r0
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8005086:	7dfb      	ldrb	r3, [r7, #23]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	3301      	adds	r3, #1
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800509c:	2110      	movs	r1, #16
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fa52 	bl	8005548 <WIZCHIP_WRITE>
         break;
 80050a4:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80050a6:	89bb      	ldrh	r3, [r7, #12]
 80050a8:	e010      	b.n	80050cc <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0db      	beq.n	800506c <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	3301      	adds	r3, #1
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80050c0:	2108      	movs	r1, #8
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fa40 	bl	8005548 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80050c8:	f06f 030c 	mvn.w	r3, #12
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000802 	.word	0x20000802

080050d8 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607b      	str	r3, [r7, #4]
 80050e2:	4603      	mov	r3, r0
 80050e4:	73fb      	strb	r3, [r7, #15]
 80050e6:	4613      	mov	r3, r2
 80050e8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d902      	bls.n	80050fa <recvfrom+0x22>
 80050f4:	f04f 33ff 	mov.w	r3, #4294967295
 80050f8:	e1d2      	b.n	80054a0 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	3301      	adds	r3, #1
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f9d4 	bl	80054b0 <WIZCHIP_READ>
 8005108:	4603      	mov	r3, r0
 800510a:	777b      	strb	r3, [r7, #29]
 800510c:	7f7b      	ldrb	r3, [r7, #29]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	3b02      	subs	r3, #2
 8005114:	2b02      	cmp	r3, #2
 8005116:	d902      	bls.n	800511e <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005118:	f06f 0304 	mvn.w	r3, #4
 800511c:	e1c0      	b.n	80054a0 <recvfrom+0x3c8>
         break;
 800511e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005120:	89bb      	ldrh	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <recvfrom+0x54>
 8005126:	f06f 030d 	mvn.w	r3, #13
 800512a:	e1b9      	b.n	80054a0 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	4a87      	ldr	r2, [pc, #540]	@ (800534c <recvfrom+0x274>)
 8005130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d128      	bne.n	800518a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fb5b 	bl	80057f6 <getSn_RX_RSR>
 8005140:	4603      	mov	r3, r0
 8005142:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	3301      	adds	r3, #1
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005150:	4618      	mov	r0, r3
 8005152:	f000 f9ad 	bl	80054b0 <WIZCHIP_READ>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d102      	bne.n	8005162 <recvfrom+0x8a>
 800515c:	f06f 0303 	mvn.w	r3, #3
 8005160:	e19e      	b.n	80054a0 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8005162:	4b7b      	ldr	r3, [pc, #492]	@ (8005350 <recvfrom+0x278>)
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	fa42 f303 	asr.w	r3, r2, r3
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d004      	beq.n	8005180 <recvfrom+0xa8>
 8005176:	8bfb      	ldrh	r3, [r7, #30]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <recvfrom+0xa8>
 800517c:	2300      	movs	r3, #0
 800517e:	e18f      	b.n	80054a0 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8005180:	8bfb      	ldrh	r3, [r7, #30]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d100      	bne.n	8005188 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8005186:	e7d7      	b.n	8005138 <recvfrom+0x60>
         if(pack_len != 0) break;
 8005188:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800518a:	7f7b      	ldrb	r3, [r7, #29]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	2b04      	cmp	r3, #4
 8005192:	d078      	beq.n	8005286 <recvfrom+0x1ae>
 8005194:	2b04      	cmp	r3, #4
 8005196:	f300 8140 	bgt.w	800541a <recvfrom+0x342>
 800519a:	2b02      	cmp	r3, #2
 800519c:	d003      	beq.n	80051a6 <recvfrom+0xce>
 800519e:	2b03      	cmp	r3, #3
 80051a0:	f000 80da 	beq.w	8005358 <recvfrom+0x280>
 80051a4:	e139      	b.n	800541a <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	4a68      	ldr	r2, [pc, #416]	@ (800534c <recvfrom+0x274>)
 80051aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d151      	bne.n	8005256 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80051b2:	f107 0114 	add.w	r1, r7, #20
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	2208      	movs	r2, #8
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fbbe 	bl	800593c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	3301      	adds	r3, #1
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80051cc:	2140      	movs	r1, #64	@ 0x40
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 f9ba 	bl	8005548 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80051d4:	bf00      	nop
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	3301      	adds	r3, #1
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f964 	bl	80054b0 <WIZCHIP_READ>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f3      	bne.n	80051d6 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80051ee:	7d3a      	ldrb	r2, [r7, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3301      	adds	r3, #1
 80051f8:	7d7a      	ldrb	r2, [r7, #21]
 80051fa:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3302      	adds	r3, #2
 8005200:	7dba      	ldrb	r2, [r7, #22]
 8005202:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3303      	adds	r3, #3
 8005208:	7dfa      	ldrb	r2, [r7, #23]
 800520a:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800520c:	7e3b      	ldrb	r3, [r7, #24]
 800520e:	461a      	mov	r2, r3
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	b29b      	uxth	r3, r3
 800521c:	7e7a      	ldrb	r2, [r7, #25]
 800521e:	4413      	add	r3, r2
 8005220:	b29a      	uxth	r2, r3
 8005222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005224:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8005226:	7eba      	ldrb	r2, [r7, #26]
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	4611      	mov	r1, r2
 800522c:	4a47      	ldr	r2, [pc, #284]	@ (800534c <recvfrom+0x274>)
 800522e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	4a45      	ldr	r2, [pc, #276]	@ (800534c <recvfrom+0x274>)
 8005236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	b29a      	uxth	r2, r3
 800523e:	7efb      	ldrb	r3, [r7, #27]
 8005240:	4619      	mov	r1, r3
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	440a      	add	r2, r1
 8005246:	b291      	uxth	r1, r2
 8005248:	4a40      	ldr	r2, [pc, #256]	@ (800534c <recvfrom+0x274>)
 800524a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	4a40      	ldr	r2, [pc, #256]	@ (8005354 <recvfrom+0x27c>)
 8005252:	2180      	movs	r1, #128	@ 0x80
 8005254:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	4a3c      	ldr	r2, [pc, #240]	@ (800534c <recvfrom+0x274>)
 800525a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800525e:	89ba      	ldrh	r2, [r7, #12]
 8005260:	429a      	cmp	r2, r3
 8005262:	d202      	bcs.n	800526a <recvfrom+0x192>
 8005264:	89bb      	ldrh	r3, [r7, #12]
 8005266:	83fb      	strh	r3, [r7, #30]
 8005268:	e004      	b.n	8005274 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	4a37      	ldr	r2, [pc, #220]	@ (800534c <recvfrom+0x274>)
 800526e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005272:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8005274:	8bfb      	ldrh	r3, [r7, #30]
 8005276:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005278:	8bfa      	ldrh	r2, [r7, #30]
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fb5c 	bl	800593c <wiz_recv_data>
			break;
 8005284:	e0d5      	b.n	8005432 <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	4a30      	ldr	r2, [pc, #192]	@ (800534c <recvfrom+0x274>)
 800528a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d145      	bne.n	800531e <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8005292:	f107 0114 	add.w	r1, r7, #20
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	2202      	movs	r2, #2
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fb4e 	bl	800593c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	3301      	adds	r3, #1
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80052ac:	2140      	movs	r1, #64	@ 0x40
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f94a 	bl	8005548 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80052b4:	bf00      	nop
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	3301      	adds	r3, #1
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f8f4 	bl	80054b0 <WIZCHIP_READ>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f3      	bne.n	80052b6 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80052ce:	7d3a      	ldrb	r2, [r7, #20]
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	4611      	mov	r1, r2
 80052d4:	4a1d      	ldr	r2, [pc, #116]	@ (800534c <recvfrom+0x274>)
 80052d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	@ (800534c <recvfrom+0x274>)
 80052de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	7d7a      	ldrb	r2, [r7, #21]
 80052e8:	4413      	add	r3, r2
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	3a02      	subs	r2, #2
 80052f0:	b291      	uxth	r1, r2
 80052f2:	4a16      	ldr	r2, [pc, #88]	@ (800534c <recvfrom+0x274>)
 80052f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	4a14      	ldr	r2, [pc, #80]	@ (800534c <recvfrom+0x274>)
 80052fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005300:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8005304:	4293      	cmp	r3, r2
 8005306:	d906      	bls.n	8005316 <recvfrom+0x23e>
   			{
   			   close(sn);
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fa44 	bl	8004798 <close>
   			   return SOCKFATAL_PACKLEN;
 8005310:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8005314:	e0c4      	b.n	80054a0 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	4a0e      	ldr	r2, [pc, #56]	@ (8005354 <recvfrom+0x27c>)
 800531a:	2180      	movs	r1, #128	@ 0x80
 800531c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	4a0a      	ldr	r2, [pc, #40]	@ (800534c <recvfrom+0x274>)
 8005322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005326:	89ba      	ldrh	r2, [r7, #12]
 8005328:	429a      	cmp	r2, r3
 800532a:	d202      	bcs.n	8005332 <recvfrom+0x25a>
 800532c:	89bb      	ldrh	r3, [r7, #12]
 800532e:	83fb      	strh	r3, [r7, #30]
 8005330:	e004      	b.n	800533c <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	4a05      	ldr	r2, [pc, #20]	@ (800534c <recvfrom+0x274>)
 8005336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800533a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800533c:	8bfa      	ldrh	r2, [r7, #30]
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fafa 	bl	800593c <wiz_recv_data>
		   break;
 8005348:	e073      	b.n	8005432 <recvfrom+0x35a>
 800534a:	bf00      	nop
 800534c:	20000808 	.word	0x20000808
 8005350:	20000802 	.word	0x20000802
 8005354:	20000818 	.word	0x20000818
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	4a53      	ldr	r2, [pc, #332]	@ (80054a8 <recvfrom+0x3d0>)
 800535c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d144      	bne.n	80053ee <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8005364:	f107 0114 	add.w	r1, r7, #20
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2206      	movs	r2, #6
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fae5 	bl	800593c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	3301      	adds	r3, #1
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800537e:	2140      	movs	r1, #64	@ 0x40
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f8e1 	bl	8005548 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005386:	bf00      	nop
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	3301      	adds	r3, #1
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f88b 	bl	80054b0 <WIZCHIP_READ>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f3      	bne.n	8005388 <recvfrom+0x2b0>
   			addr[0] = head[0];
 80053a0:	7d3a      	ldrb	r2, [r7, #20]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3301      	adds	r3, #1
 80053aa:	7d7a      	ldrb	r2, [r7, #21]
 80053ac:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3302      	adds	r3, #2
 80053b2:	7dba      	ldrb	r2, [r7, #22]
 80053b4:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3303      	adds	r3, #3
 80053ba:	7dfa      	ldrb	r2, [r7, #23]
 80053bc:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80053be:	7e3a      	ldrb	r2, [r7, #24]
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	4611      	mov	r1, r2
 80053c4:	4a38      	ldr	r2, [pc, #224]	@ (80054a8 <recvfrom+0x3d0>)
 80053c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	4a36      	ldr	r2, [pc, #216]	@ (80054a8 <recvfrom+0x3d0>)
 80053ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	7e7b      	ldrb	r3, [r7, #25]
 80053d8:	4619      	mov	r1, r3
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	440a      	add	r2, r1
 80053de:	b291      	uxth	r1, r2
 80053e0:	4a31      	ldr	r2, [pc, #196]	@ (80054a8 <recvfrom+0x3d0>)
 80053e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	4a30      	ldr	r2, [pc, #192]	@ (80054ac <recvfrom+0x3d4>)
 80053ea:	2180      	movs	r1, #128	@ 0x80
 80053ec:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	4a2d      	ldr	r2, [pc, #180]	@ (80054a8 <recvfrom+0x3d0>)
 80053f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f6:	89ba      	ldrh	r2, [r7, #12]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d202      	bcs.n	8005402 <recvfrom+0x32a>
 80053fc:	89bb      	ldrh	r3, [r7, #12]
 80053fe:	83fb      	strh	r3, [r7, #30]
 8005400:	e004      	b.n	800540c <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	4a28      	ldr	r2, [pc, #160]	@ (80054a8 <recvfrom+0x3d0>)
 8005406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800540a:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800540c:	8bfa      	ldrh	r2, [r7, #30]
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fa92 	bl	800593c <wiz_recv_data>
			break;
 8005418:	e00b      	b.n	8005432 <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800541a:	8bfa      	ldrh	r2, [r7, #30]
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	4611      	mov	r1, r2
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fae5 	bl	80059f0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	491f      	ldr	r1, [pc, #124]	@ (80054a8 <recvfrom+0x3d0>)
 800542a:	8bfa      	ldrh	r2, [r7, #30]
 800542c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8005430:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	3301      	adds	r3, #1
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800543e:	2140      	movs	r1, #64	@ 0x40
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f881 	bl	8005548 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8005446:	bf00      	nop
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	3301      	adds	r3, #1
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f82b 	bl	80054b0 <WIZCHIP_READ>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f3      	bne.n	8005448 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	4a11      	ldr	r2, [pc, #68]	@ (80054a8 <recvfrom+0x3d0>)
 8005464:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	8bfa      	ldrh	r2, [r7, #30]
 800546c:	1a8a      	subs	r2, r1, r2
 800546e:	b291      	uxth	r1, r2
 8005470:	4a0d      	ldr	r2, [pc, #52]	@ (80054a8 <recvfrom+0x3d0>)
 8005472:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	4a0b      	ldr	r2, [pc, #44]	@ (80054a8 <recvfrom+0x3d0>)
 800547a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	4a09      	ldr	r2, [pc, #36]	@ (80054ac <recvfrom+0x3d4>)
 8005486:	5cd2      	ldrb	r2, [r2, r3]
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	b2d1      	uxtb	r1, r2
 8005490:	4a06      	ldr	r2, [pc, #24]	@ (80054ac <recvfrom+0x3d4>)
 8005492:	54d1      	strb	r1, [r2, r3]
 8005494:	e003      	b.n	800549e <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	4a04      	ldr	r2, [pc, #16]	@ (80054ac <recvfrom+0x3d4>)
 800549a:	2100      	movs	r1, #0
 800549c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800549e:	8bfb      	ldrh	r3, [r7, #30]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000808 	.word	0x20000808
 80054ac:	20000818 	.word	0x20000818

080054b0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80054b8:	4b22      	ldr	r3, [pc, #136]	@ (8005544 <WIZCHIP_READ+0x94>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80054be:	4b21      	ldr	r3, [pc, #132]	@ (8005544 <WIZCHIP_READ+0x94>)
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80054c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005544 <WIZCHIP_READ+0x94>)
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <WIZCHIP_READ+0x24>
 80054cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005544 <WIZCHIP_READ+0x94>)
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d114      	bne.n	80054fe <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80054d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005544 <WIZCHIP_READ+0x94>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	0c12      	lsrs	r2, r2, #16
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	4610      	mov	r0, r2
 80054e0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80054e2:	4b18      	ldr	r3, [pc, #96]	@ (8005544 <WIZCHIP_READ+0x94>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	0a12      	lsrs	r2, r2, #8
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80054f0:	4b14      	ldr	r3, [pc, #80]	@ (8005544 <WIZCHIP_READ+0x94>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	4610      	mov	r0, r2
 80054fa:	4798      	blx	r3
 80054fc:	e011      	b.n	8005522 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	b2db      	uxtb	r3, r3
 8005504:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0a1b      	lsrs	r3, r3, #8
 800550a:	b2db      	uxtb	r3, r3
 800550c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005514:	4b0b      	ldr	r3, [pc, #44]	@ (8005544 <WIZCHIP_READ+0x94>)
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	f107 020c 	add.w	r2, r7, #12
 800551c:	2103      	movs	r1, #3
 800551e:	4610      	mov	r0, r2
 8005520:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8005522:	4b08      	ldr	r3, [pc, #32]	@ (8005544 <WIZCHIP_READ+0x94>)
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	4798      	blx	r3
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800552c:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <WIZCHIP_READ+0x94>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005532:	4b04      	ldr	r3, [pc, #16]	@ (8005544 <WIZCHIP_READ+0x94>)
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	4798      	blx	r3
   return ret;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	200000a8 	.word	0x200000a8

08005548 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8005554:	4b22      	ldr	r3, [pc, #136]	@ (80055e0 <WIZCHIP_WRITE+0x98>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4798      	blx	r3
   WIZCHIP.CS._select();
 800555a:	4b21      	ldr	r3, [pc, #132]	@ (80055e0 <WIZCHIP_WRITE+0x98>)
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f043 0304 	orr.w	r3, r3, #4
 8005566:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005568:	4b1d      	ldr	r3, [pc, #116]	@ (80055e0 <WIZCHIP_WRITE+0x98>)
 800556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556c:	2b00      	cmp	r3, #0
 800556e:	d119      	bne.n	80055a4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005570:	4b1b      	ldr	r3, [pc, #108]	@ (80055e0 <WIZCHIP_WRITE+0x98>)
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	0c12      	lsrs	r2, r2, #16
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	4610      	mov	r0, r2
 800557c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800557e:	4b18      	ldr	r3, [pc, #96]	@ (80055e0 <WIZCHIP_WRITE+0x98>)
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	0a12      	lsrs	r2, r2, #8
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	4610      	mov	r0, r2
 800558a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800558c:	4b14      	ldr	r3, [pc, #80]	@ (80055e0 <WIZCHIP_WRITE+0x98>)
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	4610      	mov	r0, r2
 8005596:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8005598:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <WIZCHIP_WRITE+0x98>)
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	78fa      	ldrb	r2, [r7, #3]
 800559e:	4610      	mov	r0, r2
 80055a0:	4798      	blx	r3
 80055a2:	e013      	b.n	80055cc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80055be:	4b08      	ldr	r3, [pc, #32]	@ (80055e0 <WIZCHIP_WRITE+0x98>)
 80055c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c2:	f107 020c 	add.w	r2, r7, #12
 80055c6:	2104      	movs	r1, #4
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80055cc:	4b04      	ldr	r3, [pc, #16]	@ (80055e0 <WIZCHIP_WRITE+0x98>)
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80055d2:	4b03      	ldr	r3, [pc, #12]	@ (80055e0 <WIZCHIP_WRITE+0x98>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	4798      	blx	r3
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200000a8 	.word	0x200000a8

080055e4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80055f2:	4b2b      	ldr	r3, [pc, #172]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80055f8:	4b29      	ldr	r3, [pc, #164]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80055fe:	4b28      	ldr	r3, [pc, #160]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <WIZCHIP_READ_BUF+0x2a>
 8005606:	4b26      	ldr	r3, [pc, #152]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 8005608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560a:	2b00      	cmp	r3, #0
 800560c:	d126      	bne.n	800565c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800560e:	4b24      	ldr	r3, [pc, #144]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	0c12      	lsrs	r2, r2, #16
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800561c:	4b20      	ldr	r3, [pc, #128]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	0a12      	lsrs	r2, r2, #8
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	4610      	mov	r0, r2
 8005628:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800562a:	4b1d      	ldr	r3, [pc, #116]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	4610      	mov	r0, r2
 8005634:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005636:	2300      	movs	r3, #0
 8005638:	82fb      	strh	r3, [r7, #22]
 800563a:	e00a      	b.n	8005652 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800563c:	4b18      	ldr	r3, [pc, #96]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	8afa      	ldrh	r2, [r7, #22]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	188c      	adds	r4, r1, r2
 8005646:	4798      	blx	r3
 8005648:	4603      	mov	r3, r0
 800564a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800564c:	8afb      	ldrh	r3, [r7, #22]
 800564e:	3301      	adds	r3, #1
 8005650:	82fb      	strh	r3, [r7, #22]
 8005652:	8afa      	ldrh	r2, [r7, #22]
 8005654:	88fb      	ldrh	r3, [r7, #6]
 8005656:	429a      	cmp	r2, r3
 8005658:	d3f0      	bcc.n	800563c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800565a:	e017      	b.n	800568c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	0c1b      	lsrs	r3, r3, #16
 8005660:	b2db      	uxtb	r3, r3
 8005662:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	b2db      	uxtb	r3, r3
 800566a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005672:	4b0b      	ldr	r3, [pc, #44]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	f107 0210 	add.w	r2, r7, #16
 800567a:	2103      	movs	r1, #3
 800567c:	4610      	mov	r0, r2
 800567e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8005680:	4b07      	ldr	r3, [pc, #28]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	88fa      	ldrh	r2, [r7, #6]
 8005686:	4611      	mov	r1, r2
 8005688:	68b8      	ldr	r0, [r7, #8]
 800568a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800568c:	4b04      	ldr	r3, [pc, #16]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005692:	4b03      	ldr	r3, [pc, #12]	@ (80056a0 <WIZCHIP_READ_BUF+0xbc>)
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	4798      	blx	r3
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd90      	pop	{r4, r7, pc}
 80056a0:	200000a8 	.word	0x200000a8

080056a4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80056b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80056b8:	4b29      	ldr	r3, [pc, #164]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f043 0304 	orr.w	r3, r3, #4
 80056c4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80056c6:	4b26      	ldr	r3, [pc, #152]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 80056c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d126      	bne.n	800571c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80056ce:	4b24      	ldr	r3, [pc, #144]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	0c12      	lsrs	r2, r2, #16
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	4610      	mov	r0, r2
 80056da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80056dc:	4b20      	ldr	r3, [pc, #128]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	0a12      	lsrs	r2, r2, #8
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	4610      	mov	r0, r2
 80056e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80056ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	4610      	mov	r0, r2
 80056f4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80056f6:	2300      	movs	r3, #0
 80056f8:	82fb      	strh	r3, [r7, #22]
 80056fa:	e00a      	b.n	8005712 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80056fc:	4b18      	ldr	r3, [pc, #96]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	8afa      	ldrh	r2, [r7, #22]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	440a      	add	r2, r1
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800570c:	8afb      	ldrh	r3, [r7, #22]
 800570e:	3301      	adds	r3, #1
 8005710:	82fb      	strh	r3, [r7, #22]
 8005712:	8afa      	ldrh	r2, [r7, #22]
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	429a      	cmp	r2, r3
 8005718:	d3f0      	bcc.n	80056fc <WIZCHIP_WRITE_BUF+0x58>
 800571a:	e017      	b.n	800574c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	0c1b      	lsrs	r3, r3, #16
 8005720:	b2db      	uxtb	r3, r3
 8005722:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	b2db      	uxtb	r3, r3
 800572a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005732:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 8005734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005736:	f107 0210 	add.w	r2, r7, #16
 800573a:	2103      	movs	r1, #3
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8005740:	4b07      	ldr	r3, [pc, #28]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	88fa      	ldrh	r2, [r7, #6]
 8005746:	4611      	mov	r1, r2
 8005748:	68b8      	ldr	r0, [r7, #8]
 800574a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800574c:	4b04      	ldr	r3, [pc, #16]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005752:	4b03      	ldr	r3, [pc, #12]	@ (8005760 <WIZCHIP_WRITE_BUF+0xbc>)
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	4798      	blx	r3
}
 8005758:	bf00      	nop
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	200000a8 	.word	0x200000a8

08005764 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8005764:	b590      	push	{r4, r7, lr}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800576e:	2300      	movs	r3, #0
 8005770:	81fb      	strh	r3, [r7, #14]
 8005772:	2300      	movs	r3, #0
 8005774:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	3301      	adds	r3, #1
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff fe94 	bl	80054b0 <WIZCHIP_READ>
 8005788:	4603      	mov	r3, r0
 800578a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800578c:	89bb      	ldrh	r3, [r7, #12]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	b29c      	uxth	r4, r3
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	3301      	adds	r3, #1
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fe86 	bl	80054b0 <WIZCHIP_READ>
 80057a4:	4603      	mov	r3, r0
 80057a6:	4423      	add	r3, r4
 80057a8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80057aa:	89bb      	ldrh	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d019      	beq.n	80057e4 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	3301      	adds	r3, #1
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fe77 	bl	80054b0 <WIZCHIP_READ>
 80057c2:	4603      	mov	r3, r0
 80057c4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80057c6:	89fb      	ldrh	r3, [r7, #14]
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	b29c      	uxth	r4, r3
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	3301      	adds	r3, #1
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fe69 	bl	80054b0 <WIZCHIP_READ>
 80057de:	4603      	mov	r3, r0
 80057e0:	4423      	add	r3, r4
 80057e2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80057e4:	89fa      	ldrh	r2, [r7, #14]
 80057e6:	89bb      	ldrh	r3, [r7, #12]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d1c4      	bne.n	8005776 <getSn_TX_FSR+0x12>
   return val;
 80057ec:	89fb      	ldrh	r3, [r7, #14]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd90      	pop	{r4, r7, pc}

080057f6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80057f6:	b590      	push	{r4, r7, lr}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	4603      	mov	r3, r0
 80057fe:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005800:	2300      	movs	r3, #0
 8005802:	81fb      	strh	r3, [r7, #14]
 8005804:	2300      	movs	r3, #0
 8005806:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	3301      	adds	r3, #1
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fe4b 	bl	80054b0 <WIZCHIP_READ>
 800581a:	4603      	mov	r3, r0
 800581c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800581e:	89bb      	ldrh	r3, [r7, #12]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	b29c      	uxth	r4, r3
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	3301      	adds	r3, #1
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fe3d 	bl	80054b0 <WIZCHIP_READ>
 8005836:	4603      	mov	r3, r0
 8005838:	4423      	add	r3, r4
 800583a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800583c:	89bb      	ldrh	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d019      	beq.n	8005876 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	3301      	adds	r3, #1
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff fe2e 	bl	80054b0 <WIZCHIP_READ>
 8005854:	4603      	mov	r3, r0
 8005856:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005858:	89fb      	ldrh	r3, [r7, #14]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	b29c      	uxth	r4, r3
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	3301      	adds	r3, #1
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff fe20 	bl	80054b0 <WIZCHIP_READ>
 8005870:	4603      	mov	r3, r0
 8005872:	4423      	add	r3, r4
 8005874:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005876:	89fa      	ldrh	r2, [r7, #14]
 8005878:	89bb      	ldrh	r3, [r7, #12]
 800587a:	429a      	cmp	r2, r3
 800587c:	d1c4      	bne.n	8005808 <getSn_RX_RSR+0x12>
   return val;
 800587e:	89fb      	ldrh	r3, [r7, #14]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	bd90      	pop	{r4, r7, pc}

08005888 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005888:	b590      	push	{r4, r7, lr}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	6039      	str	r1, [r7, #0]
 8005892:	71fb      	strb	r3, [r7, #7]
 8005894:	4613      	mov	r3, r2
 8005896:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80058a0:	88bb      	ldrh	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d046      	beq.n	8005934 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	3301      	adds	r3, #1
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fdfc 	bl	80054b0 <WIZCHIP_READ>
 80058b8:	4603      	mov	r3, r0
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	b29c      	uxth	r4, r3
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	3301      	adds	r3, #1
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff fdf0 	bl	80054b0 <WIZCHIP_READ>
 80058d0:	4603      	mov	r3, r0
 80058d2:	4423      	add	r3, r4
 80058d4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80058d6:	89fb      	ldrh	r3, [r7, #14]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	79fa      	ldrb	r2, [r7, #7]
 80058dc:	0092      	lsls	r2, r2, #2
 80058de:	3202      	adds	r2, #2
 80058e0:	00d2      	lsls	r2, r2, #3
 80058e2:	4413      	add	r3, r2
 80058e4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80058e6:	88bb      	ldrh	r3, [r7, #4]
 80058e8:	461a      	mov	r2, r3
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	68b8      	ldr	r0, [r7, #8]
 80058ee:	f7ff fed9 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80058f2:	89fa      	ldrh	r2, [r7, #14]
 80058f4:	88bb      	ldrh	r3, [r7, #4]
 80058f6:	4413      	add	r3, r2
 80058f8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	3301      	adds	r3, #1
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005906:	461a      	mov	r2, r3
 8005908:	89fb      	ldrh	r3, [r7, #14]
 800590a:	0a1b      	lsrs	r3, r3, #8
 800590c:	b29b      	uxth	r3, r3
 800590e:	b2db      	uxtb	r3, r3
 8005910:	4619      	mov	r1, r3
 8005912:	4610      	mov	r0, r2
 8005914:	f7ff fe18 	bl	8005548 <WIZCHIP_WRITE>
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	3301      	adds	r3, #1
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005924:	461a      	mov	r2, r3
 8005926:	89fb      	ldrh	r3, [r7, #14]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7ff fe0b 	bl	8005548 <WIZCHIP_WRITE>
 8005932:	e000      	b.n	8005936 <wiz_send_data+0xae>
   if(len == 0)  return;
 8005934:	bf00      	nop
}
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bd90      	pop	{r4, r7, pc}

0800593c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	6039      	str	r1, [r7, #0]
 8005946:	71fb      	strb	r3, [r7, #7]
 8005948:	4613      	mov	r3, r2
 800594a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005950:	2300      	movs	r3, #0
 8005952:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8005954:	88bb      	ldrh	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d046      	beq.n	80059e8 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	3301      	adds	r3, #1
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fda2 	bl	80054b0 <WIZCHIP_READ>
 800596c:	4603      	mov	r3, r0
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	b29c      	uxth	r4, r3
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	3301      	adds	r3, #1
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff fd96 	bl	80054b0 <WIZCHIP_READ>
 8005984:	4603      	mov	r3, r0
 8005986:	4423      	add	r3, r4
 8005988:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800598a:	89fb      	ldrh	r3, [r7, #14]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	79fa      	ldrb	r2, [r7, #7]
 8005990:	0092      	lsls	r2, r2, #2
 8005992:	3203      	adds	r2, #3
 8005994:	00d2      	lsls	r2, r2, #3
 8005996:	4413      	add	r3, r2
 8005998:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800599a:	88bb      	ldrh	r3, [r7, #4]
 800599c:	461a      	mov	r2, r3
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	68b8      	ldr	r0, [r7, #8]
 80059a2:	f7ff fe1f 	bl	80055e4 <WIZCHIP_READ_BUF>
   ptr += len;
 80059a6:	89fa      	ldrh	r2, [r7, #14]
 80059a8:	88bb      	ldrh	r3, [r7, #4]
 80059aa:	4413      	add	r3, r2
 80059ac:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	3301      	adds	r3, #1
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80059ba:	461a      	mov	r2, r3
 80059bc:	89fb      	ldrh	r3, [r7, #14]
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f7ff fdbe 	bl	8005548 <WIZCHIP_WRITE>
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	3301      	adds	r3, #1
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80059d8:	461a      	mov	r2, r3
 80059da:	89fb      	ldrh	r3, [r7, #14]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	4619      	mov	r1, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	f7ff fdb1 	bl	8005548 <WIZCHIP_WRITE>
 80059e6:	e000      	b.n	80059ea <wiz_recv_data+0xae>
   if(len == 0) return;
 80059e8:	bf00      	nop
}
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd90      	pop	{r4, r7, pc}

080059f0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	460a      	mov	r2, r1
 80059fa:	71fb      	strb	r3, [r7, #7]
 80059fc:	4613      	mov	r3, r2
 80059fe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	3301      	adds	r3, #1
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fd4d 	bl	80054b0 <WIZCHIP_READ>
 8005a16:	4603      	mov	r3, r0
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	b29c      	uxth	r4, r3
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	3301      	adds	r3, #1
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fd41 	bl	80054b0 <WIZCHIP_READ>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4423      	add	r3, r4
 8005a32:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8005a34:	89fa      	ldrh	r2, [r7, #14]
 8005a36:	88bb      	ldrh	r3, [r7, #4]
 8005a38:	4413      	add	r3, r2
 8005a3a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	3301      	adds	r3, #1
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005a48:	461a      	mov	r2, r3
 8005a4a:	89fb      	ldrh	r3, [r7, #14]
 8005a4c:	0a1b      	lsrs	r3, r3, #8
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7ff fd77 	bl	8005548 <WIZCHIP_WRITE>
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	3301      	adds	r3, #1
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005a66:	461a      	mov	r2, r3
 8005a68:	89fb      	ldrh	r3, [r7, #14]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7ff fd6a 	bl	8005548 <WIZCHIP_WRITE>
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd90      	pop	{r4, r7, pc}

08005a7c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	bf00      	nop
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005a8a:	b480      	push	{r7}
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	bf00      	nop
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	bf00      	nop
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005aa6:	b480      	push	{r7}
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	bf00      	nop
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	2300      	movs	r3, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	807b      	strh	r3, [r7, #2]
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	807b      	strh	r3, [r7, #2]
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <reg_wizchip_cs_cbfunc+0x16>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <reg_wizchip_cs_cbfunc+0x40>)
 8005b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b88 <reg_wizchip_cs_cbfunc+0x44>)
 8005b5e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005b60:	4b08      	ldr	r3, [pc, #32]	@ (8005b84 <reg_wizchip_cs_cbfunc+0x40>)
 8005b62:	4a0a      	ldr	r2, [pc, #40]	@ (8005b8c <reg_wizchip_cs_cbfunc+0x48>)
 8005b64:	619a      	str	r2, [r3, #24]
 8005b66:	e006      	b.n	8005b76 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005b68:	4a06      	ldr	r2, [pc, #24]	@ (8005b84 <reg_wizchip_cs_cbfunc+0x40>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005b6e:	4a05      	ldr	r2, [pc, #20]	@ (8005b84 <reg_wizchip_cs_cbfunc+0x40>)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	6193      	str	r3, [r2, #24]
   }
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	200000a8 	.word	0x200000a8
 8005b88:	08005a99 	.word	0x08005a99
 8005b8c:	08005aa7 	.word	0x08005aa7

08005b90 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005b9a:	bf00      	nop
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <reg_wizchip_spi_cbfunc+0x4c>)
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f9      	beq.n	8005b9c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <reg_wizchip_spi_cbfunc+0x24>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d106      	bne.n	8005bc2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005bb4:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <reg_wizchip_spi_cbfunc+0x4c>)
 8005bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005be0 <reg_wizchip_spi_cbfunc+0x50>)
 8005bb8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005bba:	4b08      	ldr	r3, [pc, #32]	@ (8005bdc <reg_wizchip_spi_cbfunc+0x4c>)
 8005bbc:	4a09      	ldr	r2, [pc, #36]	@ (8005be4 <reg_wizchip_spi_cbfunc+0x54>)
 8005bbe:	621a      	str	r2, [r3, #32]
 8005bc0:	e006      	b.n	8005bd0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005bc2:	4a06      	ldr	r2, [pc, #24]	@ (8005bdc <reg_wizchip_spi_cbfunc+0x4c>)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005bc8:	4a04      	ldr	r2, [pc, #16]	@ (8005bdc <reg_wizchip_spi_cbfunc+0x4c>)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6213      	str	r3, [r2, #32]
   }
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	200000a8 	.word	0x200000a8
 8005be0:	08005aed 	.word	0x08005aed
 8005be4:	08005afd 	.word	0x08005afd

08005be8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005bf2:	bf00      	nop
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c34 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0f9      	beq.n	8005bf4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <reg_wizchip_spiburst_cbfunc+0x24>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005c0c:	4b09      	ldr	r3, [pc, #36]	@ (8005c34 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c38 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005c10:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005c12:	4b08      	ldr	r3, [pc, #32]	@ (8005c34 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005c14:	4a09      	ldr	r2, [pc, #36]	@ (8005c3c <reg_wizchip_spiburst_cbfunc+0x54>)
 8005c16:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c18:	e006      	b.n	8005c28 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005c1a:	4a06      	ldr	r2, [pc, #24]	@ (8005c34 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005c20:	4a04      	ldr	r2, [pc, #16]	@ (8005c34 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8005c26:	bf00      	nop
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	200000a8 	.word	0x200000a8
 8005c38:	08005b13 	.word	0x08005b13
 8005c3c:	08005b2b 	.word	0x08005b2b

08005c40 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005c40:	b590      	push	{r4, r7, lr}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	6039      	str	r1, [r7, #0]
 8005c4a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	2b0f      	cmp	r3, #15
 8005c5c:	f200 80c5 	bhi.w	8005dea <ctlwizchip+0x1aa>
 8005c60:	a201      	add	r2, pc, #4	@ (adr r2, 8005c68 <ctlwizchip+0x28>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005ca9 	.word	0x08005ca9
 8005c6c:	08005caf 	.word	0x08005caf
 8005c70:	08005cdb 	.word	0x08005cdb
 8005c74:	08005ccf 	.word	0x08005ccf
 8005c78:	08005ce9 	.word	0x08005ce9
 8005c7c:	08005cf5 	.word	0x08005cf5
 8005c80:	08005d03 	.word	0x08005d03
 8005c84:	08005d29 	.word	0x08005d29
 8005c88:	08005d4b 	.word	0x08005d4b
 8005c8c:	08005d8f 	.word	0x08005d8f
 8005c90:	08005d95 	.word	0x08005d95
 8005c94:	08005d9d 	.word	0x08005d9d
 8005c98:	08005df1 	.word	0x08005df1
 8005c9c:	08005da5 	.word	0x08005da5
 8005ca0:	08005db3 	.word	0x08005db3
 8005ca4:	08005dcf 	.word	0x08005dcf
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005ca8:	f000 f8aa 	bl	8005e00 <wizchip_sw_reset>
         break;
 8005cac:	e0a1      	b.n	8005df2 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3308      	adds	r3, #8
 8005cbc:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 f8e7 	bl	8005e98 <wizchip_init>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	e092      	b.n	8005df4 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f96c 	bl	8005fb0 <wizchip_clrinterrupt>
         break;
 8005cd8:	e08b      	b.n	8005df2 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005cda:	f000 f99d 	bl	8006018 <wizchip_getinterrupt>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	801a      	strh	r2, [r3, #0]
         break;
 8005ce6:	e084      	b.n	8005df2 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 f9b8 	bl	8006062 <wizchip_setinterruptmask>
         break;         
 8005cf2:	e07e      	b.n	8005df2 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005cf4:	f000 f9d0 	bl	8006098 <wizchip_getinterruptmask>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	801a      	strh	r2, [r3, #0]
         break;
 8005d00:	e077      	b.n	8005df2 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	0a1b      	lsrs	r3, r3, #8
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005d12:	f7ff fc19 	bl	8005548 <WIZCHIP_WRITE>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005d22:	f7ff fc11 	bl	8005548 <WIZCHIP_WRITE>
         break;
 8005d26:	e064      	b.n	8005df2 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005d28:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005d2c:	f7ff fbc0 	bl	80054b0 <WIZCHIP_READ>
 8005d30:	4603      	mov	r3, r0
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	b29c      	uxth	r4, r3
 8005d36:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005d3a:	f7ff fbb9 	bl	80054b0 <WIZCHIP_READ>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4423      	add	r3, r4
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	801a      	strh	r2, [r3, #0]
         break;
 8005d48:	e053      	b.n	8005df2 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005dfc <ctlwizchip+0x1bc>)
 8005d4c:	789a      	ldrb	r2, [r3, #2]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	4a29      	ldr	r2, [pc, #164]	@ (8005dfc <ctlwizchip+0x1bc>)
 8005d58:	78d2      	ldrb	r2, [r2, #3]
 8005d5a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	3302      	adds	r3, #2
 8005d60:	4a26      	ldr	r2, [pc, #152]	@ (8005dfc <ctlwizchip+0x1bc>)
 8005d62:	7912      	ldrb	r2, [r2, #4]
 8005d64:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	3303      	adds	r3, #3
 8005d6a:	4a24      	ldr	r2, [pc, #144]	@ (8005dfc <ctlwizchip+0x1bc>)
 8005d6c:	7952      	ldrb	r2, [r2, #5]
 8005d6e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4a21      	ldr	r2, [pc, #132]	@ (8005dfc <ctlwizchip+0x1bc>)
 8005d76:	7992      	ldrb	r2, [r2, #6]
 8005d78:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	3305      	adds	r3, #5
 8005d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005dfc <ctlwizchip+0x1bc>)
 8005d80:	79d2      	ldrb	r2, [r2, #7]
 8005d82:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	3306      	adds	r3, #6
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
         break;
 8005d8c:	e031      	b.n	8005df2 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005d8e:	f000 f9d5 	bl	800613c <wizphy_reset>
         break;
 8005d92:	e02e      	b.n	8005df2 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005d94:	6838      	ldr	r0, [r7, #0]
 8005d96:	f000 f9f8 	bl	800618a <wizphy_setphyconf>
         break;
 8005d9a:	e02a      	b.n	8005df2 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005d9c:	6838      	ldr	r0, [r7, #0]
 8005d9e:	f000 fa37 	bl	8006210 <wizphy_getphyconf>
         break;
 8005da2:	e026      	b.n	8005df2 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fa9b 	bl	80062e4 <wizphy_setphypmode>
 8005dae:	4603      	mov	r3, r0
 8005db0:	e020      	b.n	8005df4 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005db2:	f000 f9aa 	bl	800610a <wizphy_getphypmode>
 8005db6:	4603      	mov	r3, r0
 8005db8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	2bff      	cmp	r3, #255	@ 0xff
 8005dbe:	d102      	bne.n	8005dc6 <ctlwizchip+0x186>
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	e016      	b.n	8005df4 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	7dfa      	ldrb	r2, [r7, #23]
 8005dca:	701a      	strb	r2, [r3, #0]
         break;
 8005dcc:	e011      	b.n	8005df2 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005dce:	f000 f986 	bl	80060de <wizphy_getphylink>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	2bff      	cmp	r3, #255	@ 0xff
 8005dda:	d102      	bne.n	8005de2 <ctlwizchip+0x1a2>
 8005ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8005de0:	e008      	b.n	8005df4 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	7dfa      	ldrb	r2, [r7, #23]
 8005de6:	701a      	strb	r2, [r3, #0]
         break;
 8005de8:	e003      	b.n	8005df2 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8005dea:	f04f 33ff 	mov.w	r3, #4294967295
 8005dee:	e001      	b.n	8005df4 <ctlwizchip+0x1b4>
         break;
 8005df0:	bf00      	nop
   }
   return 0;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd90      	pop	{r4, r7, pc}
 8005dfc:	200000a8 	.word	0x200000a8

08005e00 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	2206      	movs	r2, #6
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005e10:	f7ff fbe8 	bl	80055e4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005e14:	f107 0314 	add.w	r3, r7, #20
 8005e18:	2204      	movs	r2, #4
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005e20:	f7ff fbe0 	bl	80055e4 <WIZCHIP_READ_BUF>
 8005e24:	f107 0310 	add.w	r3, r7, #16
 8005e28:	2204      	movs	r2, #4
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005e30:	f7ff fbd8 	bl	80055e4 <WIZCHIP_READ_BUF>
 8005e34:	f107 030c 	add.w	r3, r7, #12
 8005e38:	2204      	movs	r2, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005e40:	f7ff fbd0 	bl	80055e4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005e44:	2180      	movs	r1, #128	@ 0x80
 8005e46:	2000      	movs	r0, #0
 8005e48:	f7ff fb7e 	bl	8005548 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f7ff fb2f 	bl	80054b0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005e52:	1d3b      	adds	r3, r7, #4
 8005e54:	2206      	movs	r2, #6
 8005e56:	4619      	mov	r1, r3
 8005e58:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005e5c:	f7ff fc22 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005e60:	f107 0314 	add.w	r3, r7, #20
 8005e64:	2204      	movs	r2, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005e6c:	f7ff fc1a 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005e70:	f107 0310 	add.w	r3, r7, #16
 8005e74:	2204      	movs	r2, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005e7c:	f7ff fc12 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005e80:	f107 030c 	add.w	r3, r7, #12
 8005e84:	2204      	movs	r2, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005e8c:	f7ff fc0a 	bl	80056a4 <WIZCHIP_WRITE_BUF>
}
 8005e90:	bf00      	nop
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005ea6:	f7ff ffab 	bl	8005e00 <wizchip_sw_reset>
   if(txsize)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d03b      	beq.n	8005f28 <wizchip_init+0x90>
   {
      tmp = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	73fb      	strb	r3, [r7, #15]
 8005eb8:	e015      	b.n	8005ee6 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	7bbb      	ldrb	r3, [r7, #14]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	dd02      	ble.n	8005eda <wizchip_init+0x42>
 8005ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed8:	e066      	b.n	8005fa8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	73fb      	strb	r3, [r7, #15]
 8005ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eea:	2b07      	cmp	r3, #7
 8005eec:	dde5      	ble.n	8005eba <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]
 8005ef2:	e015      	b.n	8005f20 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	3301      	adds	r3, #1
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005f02:	4618      	mov	r0, r3
 8005f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	f7ff fb1a 	bl	8005548 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f24:	2b07      	cmp	r3, #7
 8005f26:	dde5      	ble.n	8005ef4 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03b      	beq.n	8005fa6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	e015      	b.n	8005f64 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	4413      	add	r3, r2
 8005f40:	781a      	ldrb	r2, [r3, #0]
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
 8005f44:	4413      	add	r3, r2
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005f4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f4e:	2b10      	cmp	r3, #16
 8005f50:	dd02      	ble.n	8005f58 <wizchip_init+0xc0>
 8005f52:	f04f 33ff 	mov.w	r3, #4294967295
 8005f56:	e027      	b.n	8005fa8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	3301      	adds	r3, #1
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f68:	2b07      	cmp	r3, #7
 8005f6a:	dde5      	ble.n	8005f38 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]
 8005f70:	e015      	b.n	8005f9e <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	3301      	adds	r3, #1
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005f80:	4618      	mov	r0, r3
 8005f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4413      	add	r3, r2
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f7ff fadb 	bl	8005548 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	3301      	adds	r3, #1
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	73fb      	strb	r3, [r7, #15]
 8005f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fa2:	2b07      	cmp	r3, #7
 8005fa4:	dde5      	ble.n	8005f72 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	f023 030f 	bic.w	r3, r3, #15
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	4619      	mov	r1, r3
 8005fd0:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8005fd4:	f7ff fab8 	bl	8005548 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]
 8005fdc:	e014      	b.n	8006008 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8005fde:	7bba      	ldrb	r2, [r7, #14]
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	fa42 f303 	asr.w	r3, r2, r3
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d009      	beq.n	8006002 <wizchip_clrinterrupt+0x52>
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005ffa:	211f      	movs	r1, #31
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff faa3 	bl	8005548 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	3301      	adds	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b07      	cmp	r3, #7
 800600c:	d9e7      	bls.n	8005fde <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800600e:	bf00      	nop
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800602a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 800602e:	f7ff fa3f 	bl	80054b0 <WIZCHIP_READ>
 8006032:	4603      	mov	r3, r0
 8006034:	f023 030f 	bic.w	r3, r3, #15
 8006038:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800603a:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 800603e:	f7ff fa37 	bl	80054b0 <WIZCHIP_READ>
 8006042:	4603      	mov	r3, r0
 8006044:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8006046:	79bb      	ldrb	r3, [r7, #6]
 8006048:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800604a:	88bb      	ldrh	r3, [r7, #4]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	b29a      	uxth	r2, r3
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	b29b      	uxth	r3, r3
 8006054:	4413      	add	r3, r2
 8006056:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006058:	88bb      	ldrh	r3, [r7, #4]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	4603      	mov	r3, r0
 800606a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800606c:	88fb      	ldrh	r3, [r7, #6]
 800606e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	0a1b      	lsrs	r3, r3, #8
 8006074:	b29b      	uxth	r3, r3
 8006076:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	4619      	mov	r1, r3
 800607c:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8006080:	f7ff fa62 	bl	8005548 <WIZCHIP_WRITE>
   setSIMR(simr);
 8006084:	7bbb      	ldrb	r3, [r7, #14]
 8006086:	4619      	mov	r1, r3
 8006088:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800608c:	f7ff fa5c 	bl	8005548 <WIZCHIP_WRITE>
#endif   
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80060aa:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80060ae:	f7ff f9ff 	bl	80054b0 <WIZCHIP_READ>
 80060b2:	4603      	mov	r3, r0
 80060b4:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80060b6:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80060ba:	f7ff f9f9 	bl	80054b0 <WIZCHIP_READ>
 80060be:	4603      	mov	r3, r0
 80060c0:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80060c2:	79bb      	ldrb	r3, [r7, #6]
 80060c4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80060c6:	88bb      	ldrh	r3, [r7, #4]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80060d4:	88bb      	ldrh	r3, [r7, #4]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80060e4:	2300      	movs	r3, #0
 80060e6:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80060e8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80060ec:	f7ff f9e0 	bl	80054b0 <WIZCHIP_READ>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80060fa:	2301      	movs	r3, #1
 80060fc:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80060fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8006114:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006118:	f7ff f9ca 	bl	80054b0 <WIZCHIP_READ>
 800611c:	4603      	mov	r3, r0
 800611e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006122:	2b30      	cmp	r3, #48	@ 0x30
 8006124:	d102      	bne.n	800612c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8006126:	2301      	movs	r3, #1
 8006128:	71fb      	strb	r3, [r7, #7]
 800612a:	e001      	b.n	8006130 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800612c:	2300      	movs	r3, #0
 800612e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8006130:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8006142:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006146:	f7ff f9b3 	bl	80054b0 <WIZCHIP_READ>
 800614a:	4603      	mov	r3, r0
 800614c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006154:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	4619      	mov	r1, r3
 800615a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800615e:	f7ff f9f3 	bl	8005548 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8006162:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006166:	f7ff f9a3 	bl	80054b0 <WIZCHIP_READ>
 800616a:	4603      	mov	r3, r0
 800616c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006174:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	4619      	mov	r1, r3
 800617a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800617e:	f7ff f9e3 	bl	8005548 <WIZCHIP_WRITE>
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d104      	bne.n	80061a8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061a4:	73fb      	strb	r3, [r7, #15]
 80061a6:	e003      	b.n	80061b0 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ae:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d104      	bne.n	80061c2 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	e019      	b.n	80061f6 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	78db      	ldrb	r3, [r3, #3]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d10d      	bne.n	80061e6 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	789b      	ldrb	r3, [r3, #2]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d104      	bne.n	80061dc <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	f043 0318 	orr.w	r3, r3, #24
 80061d8:	73fb      	strb	r3, [r7, #15]
 80061da:	e00c      	b.n	80061f6 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	f043 0308 	orr.w	r3, r3, #8
 80061e2:	73fb      	strb	r3, [r7, #15]
 80061e4:	e007      	b.n	80061f6 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	789b      	ldrb	r3, [r3, #2]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d103      	bne.n	80061f6 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	f043 0310 	orr.w	r3, r3, #16
 80061f4:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	4619      	mov	r1, r3
 80061fa:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80061fe:	f7ff f9a3 	bl	8005548 <WIZCHIP_WRITE>
   wizphy_reset();
 8006202:	f7ff ff9b 	bl	800613c <wizphy_reset>
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800621c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006220:	f7ff f946 	bl	80054b0 <WIZCHIP_READ>
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	119b      	asrs	r3, r3, #6
 800622c:	b2db      	uxtb	r3, r3
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	b2da      	uxtb	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800623e:	2b20      	cmp	r3, #32
 8006240:	d001      	beq.n	8006246 <wizphy_getphyconf+0x36>
 8006242:	2b38      	cmp	r3, #56	@ 0x38
 8006244:	d103      	bne.n	800624e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	705a      	strb	r2, [r3, #1]
         break;
 800624c:	e003      	b.n	8006256 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	705a      	strb	r2, [r3, #1]
         break;
 8006254:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800625c:	3b10      	subs	r3, #16
 800625e:	2b10      	cmp	r3, #16
 8006260:	bf8c      	ite	hi
 8006262:	2201      	movhi	r2, #1
 8006264:	2200      	movls	r2, #0
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	2a00      	cmp	r2, #0
 800626a:	d10f      	bne.n	800628c <wizphy_getphyconf+0x7c>
 800626c:	4a1b      	ldr	r2, [pc, #108]	@ (80062dc <wizphy_getphyconf+0xcc>)
 800626e:	fa22 f303 	lsr.w	r3, r2, r3
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	bf14      	ite	ne
 800627a:	2301      	movne	r3, #1
 800627c:	2300      	moveq	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	709a      	strb	r2, [r3, #2]
         break;
 800628a:	e003      	b.n	8006294 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	709a      	strb	r2, [r3, #2]
         break;
 8006292:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800629a:	3b08      	subs	r3, #8
 800629c:	2b18      	cmp	r3, #24
 800629e:	bf8c      	ite	hi
 80062a0:	2201      	movhi	r2, #1
 80062a2:	2200      	movls	r2, #0
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	d10f      	bne.n	80062ca <wizphy_getphyconf+0xba>
 80062aa:	4a0d      	ldr	r2, [pc, #52]	@ (80062e0 <wizphy_getphyconf+0xd0>)
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	70da      	strb	r2, [r3, #3]
         break;
 80062c8:	e003      	b.n	80062d2 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	70da      	strb	r2, [r3, #3]
         break;
 80062d0:	bf00      	nop
   }
}
 80062d2:	bf00      	nop
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	00010101 	.word	0x00010101
 80062e0:	01010001 	.word	0x01010001

080062e4 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80062f2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80062f6:	f7ff f8db 	bl	80054b0 <WIZCHIP_READ>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <wizphy_setphypmode+0x2a>
 8006308:	f04f 33ff 	mov.w	r3, #4294967295
 800630c:	e030      	b.n	8006370 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006314:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d104      	bne.n	8006326 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8006322:	73fb      	strb	r3, [r7, #15]
 8006324:	e003      	b.n	800632e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800632c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	4619      	mov	r1, r3
 8006332:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006336:	f7ff f907 	bl	8005548 <WIZCHIP_WRITE>
   wizphy_reset();
 800633a:	f7ff feff 	bl	800613c <wizphy_reset>
   tmp = getPHYCFGR();
 800633e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006342:	f7ff f8b5 	bl	80054b0 <WIZCHIP_READ>
 8006346:	4603      	mov	r3, r0
 8006348:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d106      	bne.n	800635e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <wizphy_setphypmode+0x88>
 800635a:	2300      	movs	r3, #0
 800635c:	e008      	b.n	8006370 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <wizphy_setphypmode+0x88>
 8006368:	2300      	movs	r3, #0
 800636a:	e001      	b.n	8006370 <wizphy_setphypmode+0x8c>
   }
   return -1;
 800636c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2206      	movs	r2, #6
 8006384:	4619      	mov	r1, r3
 8006386:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800638a:	f7ff f98b 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	330e      	adds	r3, #14
 8006392:	2204      	movs	r2, #4
 8006394:	4619      	mov	r1, r3
 8006396:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800639a:	f7ff f983 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	330a      	adds	r3, #10
 80063a2:	2204      	movs	r2, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80063aa:	f7ff f97b 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3306      	adds	r3, #6
 80063b2:	2204      	movs	r2, #4
 80063b4:	4619      	mov	r1, r3
 80063b6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80063ba:	f7ff f973 	bl	80056a4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7c9a      	ldrb	r2, [r3, #18]
 80063c2:	4b0b      	ldr	r3, [pc, #44]	@ (80063f0 <wizchip_setnetinfo+0x78>)
 80063c4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	7cda      	ldrb	r2, [r3, #19]
 80063ca:	4b09      	ldr	r3, [pc, #36]	@ (80063f0 <wizchip_setnetinfo+0x78>)
 80063cc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	7d1a      	ldrb	r2, [r3, #20]
 80063d2:	4b07      	ldr	r3, [pc, #28]	@ (80063f0 <wizchip_setnetinfo+0x78>)
 80063d4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	7d5a      	ldrb	r2, [r3, #21]
 80063da:	4b05      	ldr	r3, [pc, #20]	@ (80063f0 <wizchip_setnetinfo+0x78>)
 80063dc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	7d9a      	ldrb	r2, [r3, #22]
 80063e2:	4b04      	ldr	r3, [pc, #16]	@ (80063f4 <wizchip_setnetinfo+0x7c>)
 80063e4:	701a      	strb	r2, [r3, #0]
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000820 	.word	0x20000820
 80063f4:	20000824 	.word	0x20000824

080063f8 <sbrk_aligned>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006438 <sbrk_aligned+0x40>)
 80063fc:	460c      	mov	r4, r1
 80063fe:	6831      	ldr	r1, [r6, #0]
 8006400:	4605      	mov	r5, r0
 8006402:	b911      	cbnz	r1, 800640a <sbrk_aligned+0x12>
 8006404:	f000 fb1e 	bl	8006a44 <_sbrk_r>
 8006408:	6030      	str	r0, [r6, #0]
 800640a:	4621      	mov	r1, r4
 800640c:	4628      	mov	r0, r5
 800640e:	f000 fb19 	bl	8006a44 <_sbrk_r>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	d103      	bne.n	800641e <sbrk_aligned+0x26>
 8006416:	f04f 34ff 	mov.w	r4, #4294967295
 800641a:	4620      	mov	r0, r4
 800641c:	bd70      	pop	{r4, r5, r6, pc}
 800641e:	1cc4      	adds	r4, r0, #3
 8006420:	f024 0403 	bic.w	r4, r4, #3
 8006424:	42a0      	cmp	r0, r4
 8006426:	d0f8      	beq.n	800641a <sbrk_aligned+0x22>
 8006428:	1a21      	subs	r1, r4, r0
 800642a:	4628      	mov	r0, r5
 800642c:	f000 fb0a 	bl	8006a44 <_sbrk_r>
 8006430:	3001      	adds	r0, #1
 8006432:	d1f2      	bne.n	800641a <sbrk_aligned+0x22>
 8006434:	e7ef      	b.n	8006416 <sbrk_aligned+0x1e>
 8006436:	bf00      	nop
 8006438:	20000828 	.word	0x20000828

0800643c <_malloc_r>:
 800643c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006440:	1ccd      	adds	r5, r1, #3
 8006442:	f025 0503 	bic.w	r5, r5, #3
 8006446:	3508      	adds	r5, #8
 8006448:	2d0c      	cmp	r5, #12
 800644a:	bf38      	it	cc
 800644c:	250c      	movcc	r5, #12
 800644e:	2d00      	cmp	r5, #0
 8006450:	4606      	mov	r6, r0
 8006452:	db01      	blt.n	8006458 <_malloc_r+0x1c>
 8006454:	42a9      	cmp	r1, r5
 8006456:	d904      	bls.n	8006462 <_malloc_r+0x26>
 8006458:	230c      	movs	r3, #12
 800645a:	6033      	str	r3, [r6, #0]
 800645c:	2000      	movs	r0, #0
 800645e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006538 <_malloc_r+0xfc>
 8006466:	f000 f869 	bl	800653c <__malloc_lock>
 800646a:	f8d8 3000 	ldr.w	r3, [r8]
 800646e:	461c      	mov	r4, r3
 8006470:	bb44      	cbnz	r4, 80064c4 <_malloc_r+0x88>
 8006472:	4629      	mov	r1, r5
 8006474:	4630      	mov	r0, r6
 8006476:	f7ff ffbf 	bl	80063f8 <sbrk_aligned>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	4604      	mov	r4, r0
 800647e:	d158      	bne.n	8006532 <_malloc_r+0xf6>
 8006480:	f8d8 4000 	ldr.w	r4, [r8]
 8006484:	4627      	mov	r7, r4
 8006486:	2f00      	cmp	r7, #0
 8006488:	d143      	bne.n	8006512 <_malloc_r+0xd6>
 800648a:	2c00      	cmp	r4, #0
 800648c:	d04b      	beq.n	8006526 <_malloc_r+0xea>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	4639      	mov	r1, r7
 8006492:	4630      	mov	r0, r6
 8006494:	eb04 0903 	add.w	r9, r4, r3
 8006498:	f000 fad4 	bl	8006a44 <_sbrk_r>
 800649c:	4581      	cmp	r9, r0
 800649e:	d142      	bne.n	8006526 <_malloc_r+0xea>
 80064a0:	6821      	ldr	r1, [r4, #0]
 80064a2:	1a6d      	subs	r5, r5, r1
 80064a4:	4629      	mov	r1, r5
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7ff ffa6 	bl	80063f8 <sbrk_aligned>
 80064ac:	3001      	adds	r0, #1
 80064ae:	d03a      	beq.n	8006526 <_malloc_r+0xea>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	442b      	add	r3, r5
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	f8d8 3000 	ldr.w	r3, [r8]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	bb62      	cbnz	r2, 8006518 <_malloc_r+0xdc>
 80064be:	f8c8 7000 	str.w	r7, [r8]
 80064c2:	e00f      	b.n	80064e4 <_malloc_r+0xa8>
 80064c4:	6822      	ldr	r2, [r4, #0]
 80064c6:	1b52      	subs	r2, r2, r5
 80064c8:	d420      	bmi.n	800650c <_malloc_r+0xd0>
 80064ca:	2a0b      	cmp	r2, #11
 80064cc:	d917      	bls.n	80064fe <_malloc_r+0xc2>
 80064ce:	1961      	adds	r1, r4, r5
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	6025      	str	r5, [r4, #0]
 80064d4:	bf18      	it	ne
 80064d6:	6059      	strne	r1, [r3, #4]
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	bf08      	it	eq
 80064dc:	f8c8 1000 	streq.w	r1, [r8]
 80064e0:	5162      	str	r2, [r4, r5]
 80064e2:	604b      	str	r3, [r1, #4]
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 f82f 	bl	8006548 <__malloc_unlock>
 80064ea:	f104 000b 	add.w	r0, r4, #11
 80064ee:	1d23      	adds	r3, r4, #4
 80064f0:	f020 0007 	bic.w	r0, r0, #7
 80064f4:	1ac2      	subs	r2, r0, r3
 80064f6:	bf1c      	itt	ne
 80064f8:	1a1b      	subne	r3, r3, r0
 80064fa:	50a3      	strne	r3, [r4, r2]
 80064fc:	e7af      	b.n	800645e <_malloc_r+0x22>
 80064fe:	6862      	ldr	r2, [r4, #4]
 8006500:	42a3      	cmp	r3, r4
 8006502:	bf0c      	ite	eq
 8006504:	f8c8 2000 	streq.w	r2, [r8]
 8006508:	605a      	strne	r2, [r3, #4]
 800650a:	e7eb      	b.n	80064e4 <_malloc_r+0xa8>
 800650c:	4623      	mov	r3, r4
 800650e:	6864      	ldr	r4, [r4, #4]
 8006510:	e7ae      	b.n	8006470 <_malloc_r+0x34>
 8006512:	463c      	mov	r4, r7
 8006514:	687f      	ldr	r7, [r7, #4]
 8006516:	e7b6      	b.n	8006486 <_malloc_r+0x4a>
 8006518:	461a      	mov	r2, r3
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	42a3      	cmp	r3, r4
 800651e:	d1fb      	bne.n	8006518 <_malloc_r+0xdc>
 8006520:	2300      	movs	r3, #0
 8006522:	6053      	str	r3, [r2, #4]
 8006524:	e7de      	b.n	80064e4 <_malloc_r+0xa8>
 8006526:	230c      	movs	r3, #12
 8006528:	6033      	str	r3, [r6, #0]
 800652a:	4630      	mov	r0, r6
 800652c:	f000 f80c 	bl	8006548 <__malloc_unlock>
 8006530:	e794      	b.n	800645c <_malloc_r+0x20>
 8006532:	6005      	str	r5, [r0, #0]
 8006534:	e7d6      	b.n	80064e4 <_malloc_r+0xa8>
 8006536:	bf00      	nop
 8006538:	2000082c 	.word	0x2000082c

0800653c <__malloc_lock>:
 800653c:	4801      	ldr	r0, [pc, #4]	@ (8006544 <__malloc_lock+0x8>)
 800653e:	f000 bace 	b.w	8006ade <__retarget_lock_acquire_recursive>
 8006542:	bf00      	nop
 8006544:	20000970 	.word	0x20000970

08006548 <__malloc_unlock>:
 8006548:	4801      	ldr	r0, [pc, #4]	@ (8006550 <__malloc_unlock+0x8>)
 800654a:	f000 bac9 	b.w	8006ae0 <__retarget_lock_release_recursive>
 800654e:	bf00      	nop
 8006550:	20000970 	.word	0x20000970

08006554 <std>:
 8006554:	2300      	movs	r3, #0
 8006556:	b510      	push	{r4, lr}
 8006558:	4604      	mov	r4, r0
 800655a:	e9c0 3300 	strd	r3, r3, [r0]
 800655e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006562:	6083      	str	r3, [r0, #8]
 8006564:	8181      	strh	r1, [r0, #12]
 8006566:	6643      	str	r3, [r0, #100]	@ 0x64
 8006568:	81c2      	strh	r2, [r0, #14]
 800656a:	6183      	str	r3, [r0, #24]
 800656c:	4619      	mov	r1, r3
 800656e:	2208      	movs	r2, #8
 8006570:	305c      	adds	r0, #92	@ 0x5c
 8006572:	f000 fa19 	bl	80069a8 <memset>
 8006576:	4b0d      	ldr	r3, [pc, #52]	@ (80065ac <std+0x58>)
 8006578:	6263      	str	r3, [r4, #36]	@ 0x24
 800657a:	4b0d      	ldr	r3, [pc, #52]	@ (80065b0 <std+0x5c>)
 800657c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800657e:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <std+0x60>)
 8006580:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006582:	4b0d      	ldr	r3, [pc, #52]	@ (80065b8 <std+0x64>)
 8006584:	6323      	str	r3, [r4, #48]	@ 0x30
 8006586:	4b0d      	ldr	r3, [pc, #52]	@ (80065bc <std+0x68>)
 8006588:	6224      	str	r4, [r4, #32]
 800658a:	429c      	cmp	r4, r3
 800658c:	d006      	beq.n	800659c <std+0x48>
 800658e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006592:	4294      	cmp	r4, r2
 8006594:	d002      	beq.n	800659c <std+0x48>
 8006596:	33d0      	adds	r3, #208	@ 0xd0
 8006598:	429c      	cmp	r4, r3
 800659a:	d105      	bne.n	80065a8 <std+0x54>
 800659c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a4:	f000 ba9a 	b.w	8006adc <__retarget_lock_init_recursive>
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	bf00      	nop
 80065ac:	080067f9 	.word	0x080067f9
 80065b0:	0800681b 	.word	0x0800681b
 80065b4:	08006853 	.word	0x08006853
 80065b8:	08006877 	.word	0x08006877
 80065bc:	20000830 	.word	0x20000830

080065c0 <stdio_exit_handler>:
 80065c0:	4a02      	ldr	r2, [pc, #8]	@ (80065cc <stdio_exit_handler+0xc>)
 80065c2:	4903      	ldr	r1, [pc, #12]	@ (80065d0 <stdio_exit_handler+0x10>)
 80065c4:	4803      	ldr	r0, [pc, #12]	@ (80065d4 <stdio_exit_handler+0x14>)
 80065c6:	f000 b869 	b.w	800669c <_fwalk_sglue>
 80065ca:	bf00      	nop
 80065cc:	200000d4 	.word	0x200000d4
 80065d0:	080074ed 	.word	0x080074ed
 80065d4:	200000e4 	.word	0x200000e4

080065d8 <cleanup_stdio>:
 80065d8:	6841      	ldr	r1, [r0, #4]
 80065da:	4b0c      	ldr	r3, [pc, #48]	@ (800660c <cleanup_stdio+0x34>)
 80065dc:	4299      	cmp	r1, r3
 80065de:	b510      	push	{r4, lr}
 80065e0:	4604      	mov	r4, r0
 80065e2:	d001      	beq.n	80065e8 <cleanup_stdio+0x10>
 80065e4:	f000 ff82 	bl	80074ec <_fflush_r>
 80065e8:	68a1      	ldr	r1, [r4, #8]
 80065ea:	4b09      	ldr	r3, [pc, #36]	@ (8006610 <cleanup_stdio+0x38>)
 80065ec:	4299      	cmp	r1, r3
 80065ee:	d002      	beq.n	80065f6 <cleanup_stdio+0x1e>
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 ff7b 	bl	80074ec <_fflush_r>
 80065f6:	68e1      	ldr	r1, [r4, #12]
 80065f8:	4b06      	ldr	r3, [pc, #24]	@ (8006614 <cleanup_stdio+0x3c>)
 80065fa:	4299      	cmp	r1, r3
 80065fc:	d004      	beq.n	8006608 <cleanup_stdio+0x30>
 80065fe:	4620      	mov	r0, r4
 8006600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006604:	f000 bf72 	b.w	80074ec <_fflush_r>
 8006608:	bd10      	pop	{r4, pc}
 800660a:	bf00      	nop
 800660c:	20000830 	.word	0x20000830
 8006610:	20000898 	.word	0x20000898
 8006614:	20000900 	.word	0x20000900

08006618 <global_stdio_init.part.0>:
 8006618:	b510      	push	{r4, lr}
 800661a:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <global_stdio_init.part.0+0x30>)
 800661c:	4c0b      	ldr	r4, [pc, #44]	@ (800664c <global_stdio_init.part.0+0x34>)
 800661e:	4a0c      	ldr	r2, [pc, #48]	@ (8006650 <global_stdio_init.part.0+0x38>)
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	4620      	mov	r0, r4
 8006624:	2200      	movs	r2, #0
 8006626:	2104      	movs	r1, #4
 8006628:	f7ff ff94 	bl	8006554 <std>
 800662c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006630:	2201      	movs	r2, #1
 8006632:	2109      	movs	r1, #9
 8006634:	f7ff ff8e 	bl	8006554 <std>
 8006638:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800663c:	2202      	movs	r2, #2
 800663e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006642:	2112      	movs	r1, #18
 8006644:	f7ff bf86 	b.w	8006554 <std>
 8006648:	20000968 	.word	0x20000968
 800664c:	20000830 	.word	0x20000830
 8006650:	080065c1 	.word	0x080065c1

08006654 <__sfp_lock_acquire>:
 8006654:	4801      	ldr	r0, [pc, #4]	@ (800665c <__sfp_lock_acquire+0x8>)
 8006656:	f000 ba42 	b.w	8006ade <__retarget_lock_acquire_recursive>
 800665a:	bf00      	nop
 800665c:	20000971 	.word	0x20000971

08006660 <__sfp_lock_release>:
 8006660:	4801      	ldr	r0, [pc, #4]	@ (8006668 <__sfp_lock_release+0x8>)
 8006662:	f000 ba3d 	b.w	8006ae0 <__retarget_lock_release_recursive>
 8006666:	bf00      	nop
 8006668:	20000971 	.word	0x20000971

0800666c <__sinit>:
 800666c:	b510      	push	{r4, lr}
 800666e:	4604      	mov	r4, r0
 8006670:	f7ff fff0 	bl	8006654 <__sfp_lock_acquire>
 8006674:	6a23      	ldr	r3, [r4, #32]
 8006676:	b11b      	cbz	r3, 8006680 <__sinit+0x14>
 8006678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800667c:	f7ff bff0 	b.w	8006660 <__sfp_lock_release>
 8006680:	4b04      	ldr	r3, [pc, #16]	@ (8006694 <__sinit+0x28>)
 8006682:	6223      	str	r3, [r4, #32]
 8006684:	4b04      	ldr	r3, [pc, #16]	@ (8006698 <__sinit+0x2c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1f5      	bne.n	8006678 <__sinit+0xc>
 800668c:	f7ff ffc4 	bl	8006618 <global_stdio_init.part.0>
 8006690:	e7f2      	b.n	8006678 <__sinit+0xc>
 8006692:	bf00      	nop
 8006694:	080065d9 	.word	0x080065d9
 8006698:	20000968 	.word	0x20000968

0800669c <_fwalk_sglue>:
 800669c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a0:	4607      	mov	r7, r0
 80066a2:	4688      	mov	r8, r1
 80066a4:	4614      	mov	r4, r2
 80066a6:	2600      	movs	r6, #0
 80066a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066ac:	f1b9 0901 	subs.w	r9, r9, #1
 80066b0:	d505      	bpl.n	80066be <_fwalk_sglue+0x22>
 80066b2:	6824      	ldr	r4, [r4, #0]
 80066b4:	2c00      	cmp	r4, #0
 80066b6:	d1f7      	bne.n	80066a8 <_fwalk_sglue+0xc>
 80066b8:	4630      	mov	r0, r6
 80066ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066be:	89ab      	ldrh	r3, [r5, #12]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d907      	bls.n	80066d4 <_fwalk_sglue+0x38>
 80066c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066c8:	3301      	adds	r3, #1
 80066ca:	d003      	beq.n	80066d4 <_fwalk_sglue+0x38>
 80066cc:	4629      	mov	r1, r5
 80066ce:	4638      	mov	r0, r7
 80066d0:	47c0      	blx	r8
 80066d2:	4306      	orrs	r6, r0
 80066d4:	3568      	adds	r5, #104	@ 0x68
 80066d6:	e7e9      	b.n	80066ac <_fwalk_sglue+0x10>

080066d8 <iprintf>:
 80066d8:	b40f      	push	{r0, r1, r2, r3}
 80066da:	b507      	push	{r0, r1, r2, lr}
 80066dc:	4906      	ldr	r1, [pc, #24]	@ (80066f8 <iprintf+0x20>)
 80066de:	ab04      	add	r3, sp, #16
 80066e0:	6808      	ldr	r0, [r1, #0]
 80066e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80066e6:	6881      	ldr	r1, [r0, #8]
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	f000 fbd5 	bl	8006e98 <_vfiprintf_r>
 80066ee:	b003      	add	sp, #12
 80066f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066f4:	b004      	add	sp, #16
 80066f6:	4770      	bx	lr
 80066f8:	200000e0 	.word	0x200000e0

080066fc <_puts_r>:
 80066fc:	6a03      	ldr	r3, [r0, #32]
 80066fe:	b570      	push	{r4, r5, r6, lr}
 8006700:	6884      	ldr	r4, [r0, #8]
 8006702:	4605      	mov	r5, r0
 8006704:	460e      	mov	r6, r1
 8006706:	b90b      	cbnz	r3, 800670c <_puts_r+0x10>
 8006708:	f7ff ffb0 	bl	800666c <__sinit>
 800670c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800670e:	07db      	lsls	r3, r3, #31
 8006710:	d405      	bmi.n	800671e <_puts_r+0x22>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	0598      	lsls	r0, r3, #22
 8006716:	d402      	bmi.n	800671e <_puts_r+0x22>
 8006718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800671a:	f000 f9e0 	bl	8006ade <__retarget_lock_acquire_recursive>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	0719      	lsls	r1, r3, #28
 8006722:	d502      	bpl.n	800672a <_puts_r+0x2e>
 8006724:	6923      	ldr	r3, [r4, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d135      	bne.n	8006796 <_puts_r+0x9a>
 800672a:	4621      	mov	r1, r4
 800672c:	4628      	mov	r0, r5
 800672e:	f000 f8e5 	bl	80068fc <__swsetup_r>
 8006732:	b380      	cbz	r0, 8006796 <_puts_r+0x9a>
 8006734:	f04f 35ff 	mov.w	r5, #4294967295
 8006738:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800673a:	07da      	lsls	r2, r3, #31
 800673c:	d405      	bmi.n	800674a <_puts_r+0x4e>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	059b      	lsls	r3, r3, #22
 8006742:	d402      	bmi.n	800674a <_puts_r+0x4e>
 8006744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006746:	f000 f9cb 	bl	8006ae0 <__retarget_lock_release_recursive>
 800674a:	4628      	mov	r0, r5
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	2b00      	cmp	r3, #0
 8006750:	da04      	bge.n	800675c <_puts_r+0x60>
 8006752:	69a2      	ldr	r2, [r4, #24]
 8006754:	429a      	cmp	r2, r3
 8006756:	dc17      	bgt.n	8006788 <_puts_r+0x8c>
 8006758:	290a      	cmp	r1, #10
 800675a:	d015      	beq.n	8006788 <_puts_r+0x8c>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	6022      	str	r2, [r4, #0]
 8006762:	7019      	strb	r1, [r3, #0]
 8006764:	68a3      	ldr	r3, [r4, #8]
 8006766:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800676a:	3b01      	subs	r3, #1
 800676c:	60a3      	str	r3, [r4, #8]
 800676e:	2900      	cmp	r1, #0
 8006770:	d1ed      	bne.n	800674e <_puts_r+0x52>
 8006772:	2b00      	cmp	r3, #0
 8006774:	da11      	bge.n	800679a <_puts_r+0x9e>
 8006776:	4622      	mov	r2, r4
 8006778:	210a      	movs	r1, #10
 800677a:	4628      	mov	r0, r5
 800677c:	f000 f87f 	bl	800687e <__swbuf_r>
 8006780:	3001      	adds	r0, #1
 8006782:	d0d7      	beq.n	8006734 <_puts_r+0x38>
 8006784:	250a      	movs	r5, #10
 8006786:	e7d7      	b.n	8006738 <_puts_r+0x3c>
 8006788:	4622      	mov	r2, r4
 800678a:	4628      	mov	r0, r5
 800678c:	f000 f877 	bl	800687e <__swbuf_r>
 8006790:	3001      	adds	r0, #1
 8006792:	d1e7      	bne.n	8006764 <_puts_r+0x68>
 8006794:	e7ce      	b.n	8006734 <_puts_r+0x38>
 8006796:	3e01      	subs	r6, #1
 8006798:	e7e4      	b.n	8006764 <_puts_r+0x68>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	6022      	str	r2, [r4, #0]
 80067a0:	220a      	movs	r2, #10
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	e7ee      	b.n	8006784 <_puts_r+0x88>
	...

080067a8 <puts>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	@ (80067b4 <puts+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f7ff bfa5 	b.w	80066fc <_puts_r>
 80067b2:	bf00      	nop
 80067b4:	200000e0 	.word	0x200000e0

080067b8 <siprintf>:
 80067b8:	b40e      	push	{r1, r2, r3}
 80067ba:	b500      	push	{lr}
 80067bc:	b09c      	sub	sp, #112	@ 0x70
 80067be:	ab1d      	add	r3, sp, #116	@ 0x74
 80067c0:	9002      	str	r0, [sp, #8]
 80067c2:	9006      	str	r0, [sp, #24]
 80067c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067c8:	4809      	ldr	r0, [pc, #36]	@ (80067f0 <siprintf+0x38>)
 80067ca:	9107      	str	r1, [sp, #28]
 80067cc:	9104      	str	r1, [sp, #16]
 80067ce:	4909      	ldr	r1, [pc, #36]	@ (80067f4 <siprintf+0x3c>)
 80067d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d4:	9105      	str	r1, [sp, #20]
 80067d6:	6800      	ldr	r0, [r0, #0]
 80067d8:	9301      	str	r3, [sp, #4]
 80067da:	a902      	add	r1, sp, #8
 80067dc:	f000 fa36 	bl	8006c4c <_svfiprintf_r>
 80067e0:	9b02      	ldr	r3, [sp, #8]
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	b01c      	add	sp, #112	@ 0x70
 80067e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067ec:	b003      	add	sp, #12
 80067ee:	4770      	bx	lr
 80067f0:	200000e0 	.word	0x200000e0
 80067f4:	ffff0208 	.word	0xffff0208

080067f8 <__sread>:
 80067f8:	b510      	push	{r4, lr}
 80067fa:	460c      	mov	r4, r1
 80067fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006800:	f000 f90e 	bl	8006a20 <_read_r>
 8006804:	2800      	cmp	r0, #0
 8006806:	bfab      	itete	ge
 8006808:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800680a:	89a3      	ldrhlt	r3, [r4, #12]
 800680c:	181b      	addge	r3, r3, r0
 800680e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006812:	bfac      	ite	ge
 8006814:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006816:	81a3      	strhlt	r3, [r4, #12]
 8006818:	bd10      	pop	{r4, pc}

0800681a <__swrite>:
 800681a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800681e:	461f      	mov	r7, r3
 8006820:	898b      	ldrh	r3, [r1, #12]
 8006822:	05db      	lsls	r3, r3, #23
 8006824:	4605      	mov	r5, r0
 8006826:	460c      	mov	r4, r1
 8006828:	4616      	mov	r6, r2
 800682a:	d505      	bpl.n	8006838 <__swrite+0x1e>
 800682c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006830:	2302      	movs	r3, #2
 8006832:	2200      	movs	r2, #0
 8006834:	f000 f8e2 	bl	80069fc <_lseek_r>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800683e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	4632      	mov	r2, r6
 8006846:	463b      	mov	r3, r7
 8006848:	4628      	mov	r0, r5
 800684a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800684e:	f000 b909 	b.w	8006a64 <_write_r>

08006852 <__sseek>:
 8006852:	b510      	push	{r4, lr}
 8006854:	460c      	mov	r4, r1
 8006856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685a:	f000 f8cf 	bl	80069fc <_lseek_r>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	bf15      	itete	ne
 8006864:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006866:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800686a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800686e:	81a3      	strheq	r3, [r4, #12]
 8006870:	bf18      	it	ne
 8006872:	81a3      	strhne	r3, [r4, #12]
 8006874:	bd10      	pop	{r4, pc}

08006876 <__sclose>:
 8006876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800687a:	f000 b8af 	b.w	80069dc <_close_r>

0800687e <__swbuf_r>:
 800687e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006880:	460e      	mov	r6, r1
 8006882:	4614      	mov	r4, r2
 8006884:	4605      	mov	r5, r0
 8006886:	b118      	cbz	r0, 8006890 <__swbuf_r+0x12>
 8006888:	6a03      	ldr	r3, [r0, #32]
 800688a:	b90b      	cbnz	r3, 8006890 <__swbuf_r+0x12>
 800688c:	f7ff feee 	bl	800666c <__sinit>
 8006890:	69a3      	ldr	r3, [r4, #24]
 8006892:	60a3      	str	r3, [r4, #8]
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	071a      	lsls	r2, r3, #28
 8006898:	d501      	bpl.n	800689e <__swbuf_r+0x20>
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	b943      	cbnz	r3, 80068b0 <__swbuf_r+0x32>
 800689e:	4621      	mov	r1, r4
 80068a0:	4628      	mov	r0, r5
 80068a2:	f000 f82b 	bl	80068fc <__swsetup_r>
 80068a6:	b118      	cbz	r0, 80068b0 <__swbuf_r+0x32>
 80068a8:	f04f 37ff 	mov.w	r7, #4294967295
 80068ac:	4638      	mov	r0, r7
 80068ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	6922      	ldr	r2, [r4, #16]
 80068b4:	1a98      	subs	r0, r3, r2
 80068b6:	6963      	ldr	r3, [r4, #20]
 80068b8:	b2f6      	uxtb	r6, r6
 80068ba:	4283      	cmp	r3, r0
 80068bc:	4637      	mov	r7, r6
 80068be:	dc05      	bgt.n	80068cc <__swbuf_r+0x4e>
 80068c0:	4621      	mov	r1, r4
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 fe12 	bl	80074ec <_fflush_r>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d1ed      	bne.n	80068a8 <__swbuf_r+0x2a>
 80068cc:	68a3      	ldr	r3, [r4, #8]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	6022      	str	r2, [r4, #0]
 80068d8:	701e      	strb	r6, [r3, #0]
 80068da:	6962      	ldr	r2, [r4, #20]
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	429a      	cmp	r2, r3
 80068e0:	d004      	beq.n	80068ec <__swbuf_r+0x6e>
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	07db      	lsls	r3, r3, #31
 80068e6:	d5e1      	bpl.n	80068ac <__swbuf_r+0x2e>
 80068e8:	2e0a      	cmp	r6, #10
 80068ea:	d1df      	bne.n	80068ac <__swbuf_r+0x2e>
 80068ec:	4621      	mov	r1, r4
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 fdfc 	bl	80074ec <_fflush_r>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d0d9      	beq.n	80068ac <__swbuf_r+0x2e>
 80068f8:	e7d6      	b.n	80068a8 <__swbuf_r+0x2a>
	...

080068fc <__swsetup_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4b29      	ldr	r3, [pc, #164]	@ (80069a4 <__swsetup_r+0xa8>)
 8006900:	4605      	mov	r5, r0
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	460c      	mov	r4, r1
 8006906:	b118      	cbz	r0, 8006910 <__swsetup_r+0x14>
 8006908:	6a03      	ldr	r3, [r0, #32]
 800690a:	b90b      	cbnz	r3, 8006910 <__swsetup_r+0x14>
 800690c:	f7ff feae 	bl	800666c <__sinit>
 8006910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006914:	0719      	lsls	r1, r3, #28
 8006916:	d422      	bmi.n	800695e <__swsetup_r+0x62>
 8006918:	06da      	lsls	r2, r3, #27
 800691a:	d407      	bmi.n	800692c <__swsetup_r+0x30>
 800691c:	2209      	movs	r2, #9
 800691e:	602a      	str	r2, [r5, #0]
 8006920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	f04f 30ff 	mov.w	r0, #4294967295
 800692a:	e033      	b.n	8006994 <__swsetup_r+0x98>
 800692c:	0758      	lsls	r0, r3, #29
 800692e:	d512      	bpl.n	8006956 <__swsetup_r+0x5a>
 8006930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006932:	b141      	cbz	r1, 8006946 <__swsetup_r+0x4a>
 8006934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006938:	4299      	cmp	r1, r3
 800693a:	d002      	beq.n	8006942 <__swsetup_r+0x46>
 800693c:	4628      	mov	r0, r5
 800693e:	f000 f8df 	bl	8006b00 <_free_r>
 8006942:	2300      	movs	r3, #0
 8006944:	6363      	str	r3, [r4, #52]	@ 0x34
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800694c:	81a3      	strh	r3, [r4, #12]
 800694e:	2300      	movs	r3, #0
 8006950:	6063      	str	r3, [r4, #4]
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f043 0308 	orr.w	r3, r3, #8
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	b94b      	cbnz	r3, 8006976 <__swsetup_r+0x7a>
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800696c:	d003      	beq.n	8006976 <__swsetup_r+0x7a>
 800696e:	4621      	mov	r1, r4
 8006970:	4628      	mov	r0, r5
 8006972:	f000 fe09 	bl	8007588 <__smakebuf_r>
 8006976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800697a:	f013 0201 	ands.w	r2, r3, #1
 800697e:	d00a      	beq.n	8006996 <__swsetup_r+0x9a>
 8006980:	2200      	movs	r2, #0
 8006982:	60a2      	str	r2, [r4, #8]
 8006984:	6962      	ldr	r2, [r4, #20]
 8006986:	4252      	negs	r2, r2
 8006988:	61a2      	str	r2, [r4, #24]
 800698a:	6922      	ldr	r2, [r4, #16]
 800698c:	b942      	cbnz	r2, 80069a0 <__swsetup_r+0xa4>
 800698e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006992:	d1c5      	bne.n	8006920 <__swsetup_r+0x24>
 8006994:	bd38      	pop	{r3, r4, r5, pc}
 8006996:	0799      	lsls	r1, r3, #30
 8006998:	bf58      	it	pl
 800699a:	6962      	ldrpl	r2, [r4, #20]
 800699c:	60a2      	str	r2, [r4, #8]
 800699e:	e7f4      	b.n	800698a <__swsetup_r+0x8e>
 80069a0:	2000      	movs	r0, #0
 80069a2:	e7f7      	b.n	8006994 <__swsetup_r+0x98>
 80069a4:	200000e0 	.word	0x200000e0

080069a8 <memset>:
 80069a8:	4402      	add	r2, r0
 80069aa:	4603      	mov	r3, r0
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d100      	bne.n	80069b2 <memset+0xa>
 80069b0:	4770      	bx	lr
 80069b2:	f803 1b01 	strb.w	r1, [r3], #1
 80069b6:	e7f9      	b.n	80069ac <memset+0x4>

080069b8 <strncmp>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	b16a      	cbz	r2, 80069d8 <strncmp+0x20>
 80069bc:	3901      	subs	r1, #1
 80069be:	1884      	adds	r4, r0, r2
 80069c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d103      	bne.n	80069d4 <strncmp+0x1c>
 80069cc:	42a0      	cmp	r0, r4
 80069ce:	d001      	beq.n	80069d4 <strncmp+0x1c>
 80069d0:	2a00      	cmp	r2, #0
 80069d2:	d1f5      	bne.n	80069c0 <strncmp+0x8>
 80069d4:	1ad0      	subs	r0, r2, r3
 80069d6:	bd10      	pop	{r4, pc}
 80069d8:	4610      	mov	r0, r2
 80069da:	e7fc      	b.n	80069d6 <strncmp+0x1e>

080069dc <_close_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4d06      	ldr	r5, [pc, #24]	@ (80069f8 <_close_r+0x1c>)
 80069e0:	2300      	movs	r3, #0
 80069e2:	4604      	mov	r4, r0
 80069e4:	4608      	mov	r0, r1
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	f7fb fe8b 	bl	8002702 <_close>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_close_r+0x1a>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_close_r+0x1a>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	2000096c 	.word	0x2000096c

080069fc <_lseek_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4d07      	ldr	r5, [pc, #28]	@ (8006a1c <_lseek_r+0x20>)
 8006a00:	4604      	mov	r4, r0
 8006a02:	4608      	mov	r0, r1
 8006a04:	4611      	mov	r1, r2
 8006a06:	2200      	movs	r2, #0
 8006a08:	602a      	str	r2, [r5, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f7fb fea0 	bl	8002750 <_lseek>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d102      	bne.n	8006a1a <_lseek_r+0x1e>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	b103      	cbz	r3, 8006a1a <_lseek_r+0x1e>
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	bd38      	pop	{r3, r4, r5, pc}
 8006a1c:	2000096c 	.word	0x2000096c

08006a20 <_read_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4d07      	ldr	r5, [pc, #28]	@ (8006a40 <_read_r+0x20>)
 8006a24:	4604      	mov	r4, r0
 8006a26:	4608      	mov	r0, r1
 8006a28:	4611      	mov	r1, r2
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	602a      	str	r2, [r5, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f7fb fe2e 	bl	8002690 <_read>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_read_r+0x1e>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_read_r+0x1e>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	2000096c 	.word	0x2000096c

08006a44 <_sbrk_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4d06      	ldr	r5, [pc, #24]	@ (8006a60 <_sbrk_r+0x1c>)
 8006a48:	2300      	movs	r3, #0
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	f7fb fe8c 	bl	800276c <_sbrk>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_sbrk_r+0x1a>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_sbrk_r+0x1a>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	2000096c 	.word	0x2000096c

08006a64 <_write_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4d07      	ldr	r5, [pc, #28]	@ (8006a84 <_write_r+0x20>)
 8006a68:	4604      	mov	r4, r0
 8006a6a:	4608      	mov	r0, r1
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	2200      	movs	r2, #0
 8006a70:	602a      	str	r2, [r5, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f7fb fe29 	bl	80026ca <_write>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_write_r+0x1e>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_write_r+0x1e>
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	2000096c 	.word	0x2000096c

08006a88 <__errno>:
 8006a88:	4b01      	ldr	r3, [pc, #4]	@ (8006a90 <__errno+0x8>)
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	200000e0 	.word	0x200000e0

08006a94 <__libc_init_array>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	4d0d      	ldr	r5, [pc, #52]	@ (8006acc <__libc_init_array+0x38>)
 8006a98:	4c0d      	ldr	r4, [pc, #52]	@ (8006ad0 <__libc_init_array+0x3c>)
 8006a9a:	1b64      	subs	r4, r4, r5
 8006a9c:	10a4      	asrs	r4, r4, #2
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	42a6      	cmp	r6, r4
 8006aa2:	d109      	bne.n	8006ab8 <__libc_init_array+0x24>
 8006aa4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ad4 <__libc_init_array+0x40>)
 8006aa6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ad8 <__libc_init_array+0x44>)
 8006aa8:	f000 fe1c 	bl	80076e4 <_init>
 8006aac:	1b64      	subs	r4, r4, r5
 8006aae:	10a4      	asrs	r4, r4, #2
 8006ab0:	2600      	movs	r6, #0
 8006ab2:	42a6      	cmp	r6, r4
 8006ab4:	d105      	bne.n	8006ac2 <__libc_init_array+0x2e>
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abc:	4798      	blx	r3
 8006abe:	3601      	adds	r6, #1
 8006ac0:	e7ee      	b.n	8006aa0 <__libc_init_array+0xc>
 8006ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac6:	4798      	blx	r3
 8006ac8:	3601      	adds	r6, #1
 8006aca:	e7f2      	b.n	8006ab2 <__libc_init_array+0x1e>
 8006acc:	08007a88 	.word	0x08007a88
 8006ad0:	08007a88 	.word	0x08007a88
 8006ad4:	08007a88 	.word	0x08007a88
 8006ad8:	08007a8c 	.word	0x08007a8c

08006adc <__retarget_lock_init_recursive>:
 8006adc:	4770      	bx	lr

08006ade <__retarget_lock_acquire_recursive>:
 8006ade:	4770      	bx	lr

08006ae0 <__retarget_lock_release_recursive>:
 8006ae0:	4770      	bx	lr

08006ae2 <memcpy>:
 8006ae2:	440a      	add	r2, r1
 8006ae4:	4291      	cmp	r1, r2
 8006ae6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aea:	d100      	bne.n	8006aee <memcpy+0xc>
 8006aec:	4770      	bx	lr
 8006aee:	b510      	push	{r4, lr}
 8006af0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006af4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006af8:	4291      	cmp	r1, r2
 8006afa:	d1f9      	bne.n	8006af0 <memcpy+0xe>
 8006afc:	bd10      	pop	{r4, pc}
	...

08006b00 <_free_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4605      	mov	r5, r0
 8006b04:	2900      	cmp	r1, #0
 8006b06:	d041      	beq.n	8006b8c <_free_r+0x8c>
 8006b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b0c:	1f0c      	subs	r4, r1, #4
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bfb8      	it	lt
 8006b12:	18e4      	addlt	r4, r4, r3
 8006b14:	f7ff fd12 	bl	800653c <__malloc_lock>
 8006b18:	4a1d      	ldr	r2, [pc, #116]	@ (8006b90 <_free_r+0x90>)
 8006b1a:	6813      	ldr	r3, [r2, #0]
 8006b1c:	b933      	cbnz	r3, 8006b2c <_free_r+0x2c>
 8006b1e:	6063      	str	r3, [r4, #4]
 8006b20:	6014      	str	r4, [r2, #0]
 8006b22:	4628      	mov	r0, r5
 8006b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b28:	f7ff bd0e 	b.w	8006548 <__malloc_unlock>
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	d908      	bls.n	8006b42 <_free_r+0x42>
 8006b30:	6820      	ldr	r0, [r4, #0]
 8006b32:	1821      	adds	r1, r4, r0
 8006b34:	428b      	cmp	r3, r1
 8006b36:	bf01      	itttt	eq
 8006b38:	6819      	ldreq	r1, [r3, #0]
 8006b3a:	685b      	ldreq	r3, [r3, #4]
 8006b3c:	1809      	addeq	r1, r1, r0
 8006b3e:	6021      	streq	r1, [r4, #0]
 8006b40:	e7ed      	b.n	8006b1e <_free_r+0x1e>
 8006b42:	461a      	mov	r2, r3
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	b10b      	cbz	r3, 8006b4c <_free_r+0x4c>
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	d9fa      	bls.n	8006b42 <_free_r+0x42>
 8006b4c:	6811      	ldr	r1, [r2, #0]
 8006b4e:	1850      	adds	r0, r2, r1
 8006b50:	42a0      	cmp	r0, r4
 8006b52:	d10b      	bne.n	8006b6c <_free_r+0x6c>
 8006b54:	6820      	ldr	r0, [r4, #0]
 8006b56:	4401      	add	r1, r0
 8006b58:	1850      	adds	r0, r2, r1
 8006b5a:	4283      	cmp	r3, r0
 8006b5c:	6011      	str	r1, [r2, #0]
 8006b5e:	d1e0      	bne.n	8006b22 <_free_r+0x22>
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	6053      	str	r3, [r2, #4]
 8006b66:	4408      	add	r0, r1
 8006b68:	6010      	str	r0, [r2, #0]
 8006b6a:	e7da      	b.n	8006b22 <_free_r+0x22>
 8006b6c:	d902      	bls.n	8006b74 <_free_r+0x74>
 8006b6e:	230c      	movs	r3, #12
 8006b70:	602b      	str	r3, [r5, #0]
 8006b72:	e7d6      	b.n	8006b22 <_free_r+0x22>
 8006b74:	6820      	ldr	r0, [r4, #0]
 8006b76:	1821      	adds	r1, r4, r0
 8006b78:	428b      	cmp	r3, r1
 8006b7a:	bf04      	itt	eq
 8006b7c:	6819      	ldreq	r1, [r3, #0]
 8006b7e:	685b      	ldreq	r3, [r3, #4]
 8006b80:	6063      	str	r3, [r4, #4]
 8006b82:	bf04      	itt	eq
 8006b84:	1809      	addeq	r1, r1, r0
 8006b86:	6021      	streq	r1, [r4, #0]
 8006b88:	6054      	str	r4, [r2, #4]
 8006b8a:	e7ca      	b.n	8006b22 <_free_r+0x22>
 8006b8c:	bd38      	pop	{r3, r4, r5, pc}
 8006b8e:	bf00      	nop
 8006b90:	2000082c 	.word	0x2000082c

08006b94 <__ssputs_r>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	688e      	ldr	r6, [r1, #8]
 8006b9a:	461f      	mov	r7, r3
 8006b9c:	42be      	cmp	r6, r7
 8006b9e:	680b      	ldr	r3, [r1, #0]
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	4690      	mov	r8, r2
 8006ba6:	d82d      	bhi.n	8006c04 <__ssputs_r+0x70>
 8006ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bb0:	d026      	beq.n	8006c00 <__ssputs_r+0x6c>
 8006bb2:	6965      	ldr	r5, [r4, #20]
 8006bb4:	6909      	ldr	r1, [r1, #16]
 8006bb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bba:	eba3 0901 	sub.w	r9, r3, r1
 8006bbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bc2:	1c7b      	adds	r3, r7, #1
 8006bc4:	444b      	add	r3, r9
 8006bc6:	106d      	asrs	r5, r5, #1
 8006bc8:	429d      	cmp	r5, r3
 8006bca:	bf38      	it	cc
 8006bcc:	461d      	movcc	r5, r3
 8006bce:	0553      	lsls	r3, r2, #21
 8006bd0:	d527      	bpl.n	8006c22 <__ssputs_r+0x8e>
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	f7ff fc32 	bl	800643c <_malloc_r>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	b360      	cbz	r0, 8006c36 <__ssputs_r+0xa2>
 8006bdc:	6921      	ldr	r1, [r4, #16]
 8006bde:	464a      	mov	r2, r9
 8006be0:	f7ff ff7f 	bl	8006ae2 <memcpy>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	6126      	str	r6, [r4, #16]
 8006bf2:	6165      	str	r5, [r4, #20]
 8006bf4:	444e      	add	r6, r9
 8006bf6:	eba5 0509 	sub.w	r5, r5, r9
 8006bfa:	6026      	str	r6, [r4, #0]
 8006bfc:	60a5      	str	r5, [r4, #8]
 8006bfe:	463e      	mov	r6, r7
 8006c00:	42be      	cmp	r6, r7
 8006c02:	d900      	bls.n	8006c06 <__ssputs_r+0x72>
 8006c04:	463e      	mov	r6, r7
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4641      	mov	r1, r8
 8006c0c:	f000 fcf8 	bl	8007600 <memmove>
 8006c10:	68a3      	ldr	r3, [r4, #8]
 8006c12:	1b9b      	subs	r3, r3, r6
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	4433      	add	r3, r6
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c22:	462a      	mov	r2, r5
 8006c24:	f000 fd28 	bl	8007678 <_realloc_r>
 8006c28:	4606      	mov	r6, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d1e0      	bne.n	8006bf0 <__ssputs_r+0x5c>
 8006c2e:	6921      	ldr	r1, [r4, #16]
 8006c30:	4650      	mov	r0, sl
 8006c32:	f7ff ff65 	bl	8006b00 <_free_r>
 8006c36:	230c      	movs	r3, #12
 8006c38:	f8ca 3000 	str.w	r3, [sl]
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	e7e9      	b.n	8006c1e <__ssputs_r+0x8a>
	...

08006c4c <_svfiprintf_r>:
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	4698      	mov	r8, r3
 8006c52:	898b      	ldrh	r3, [r1, #12]
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	b09d      	sub	sp, #116	@ 0x74
 8006c58:	4607      	mov	r7, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	d510      	bpl.n	8006c82 <_svfiprintf_r+0x36>
 8006c60:	690b      	ldr	r3, [r1, #16]
 8006c62:	b973      	cbnz	r3, 8006c82 <_svfiprintf_r+0x36>
 8006c64:	2140      	movs	r1, #64	@ 0x40
 8006c66:	f7ff fbe9 	bl	800643c <_malloc_r>
 8006c6a:	6028      	str	r0, [r5, #0]
 8006c6c:	6128      	str	r0, [r5, #16]
 8006c6e:	b930      	cbnz	r0, 8006c7e <_svfiprintf_r+0x32>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	b01d      	add	sp, #116	@ 0x74
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	2340      	movs	r3, #64	@ 0x40
 8006c80:	616b      	str	r3, [r5, #20]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c86:	2320      	movs	r3, #32
 8006c88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c90:	2330      	movs	r3, #48	@ 0x30
 8006c92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e30 <_svfiprintf_r+0x1e4>
 8006c96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c9a:	f04f 0901 	mov.w	r9, #1
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	469a      	mov	sl, r3
 8006ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca6:	b10a      	cbz	r2, 8006cac <_svfiprintf_r+0x60>
 8006ca8:	2a25      	cmp	r2, #37	@ 0x25
 8006caa:	d1f9      	bne.n	8006ca0 <_svfiprintf_r+0x54>
 8006cac:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb0:	d00b      	beq.n	8006cca <_svfiprintf_r+0x7e>
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f7ff ff6b 	bl	8006b94 <__ssputs_r>
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f000 80a7 	beq.w	8006e12 <_svfiprintf_r+0x1c6>
 8006cc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc6:	445a      	add	r2, fp
 8006cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cca:	f89a 3000 	ldrb.w	r3, [sl]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 809f 	beq.w	8006e12 <_svfiprintf_r+0x1c6>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cde:	f10a 0a01 	add.w	sl, sl, #1
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	9307      	str	r3, [sp, #28]
 8006ce6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cea:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cec:	4654      	mov	r4, sl
 8006cee:	2205      	movs	r2, #5
 8006cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf4:	484e      	ldr	r0, [pc, #312]	@ (8006e30 <_svfiprintf_r+0x1e4>)
 8006cf6:	f7f9 fa7b 	bl	80001f0 <memchr>
 8006cfa:	9a04      	ldr	r2, [sp, #16]
 8006cfc:	b9d8      	cbnz	r0, 8006d36 <_svfiprintf_r+0xea>
 8006cfe:	06d0      	lsls	r0, r2, #27
 8006d00:	bf44      	itt	mi
 8006d02:	2320      	movmi	r3, #32
 8006d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d08:	0711      	lsls	r1, r2, #28
 8006d0a:	bf44      	itt	mi
 8006d0c:	232b      	movmi	r3, #43	@ 0x2b
 8006d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d12:	f89a 3000 	ldrb.w	r3, [sl]
 8006d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d18:	d015      	beq.n	8006d46 <_svfiprintf_r+0xfa>
 8006d1a:	9a07      	ldr	r2, [sp, #28]
 8006d1c:	4654      	mov	r4, sl
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f04f 0c0a 	mov.w	ip, #10
 8006d24:	4621      	mov	r1, r4
 8006d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d2a:	3b30      	subs	r3, #48	@ 0x30
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d94b      	bls.n	8006dc8 <_svfiprintf_r+0x17c>
 8006d30:	b1b0      	cbz	r0, 8006d60 <_svfiprintf_r+0x114>
 8006d32:	9207      	str	r2, [sp, #28]
 8006d34:	e014      	b.n	8006d60 <_svfiprintf_r+0x114>
 8006d36:	eba0 0308 	sub.w	r3, r0, r8
 8006d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	46a2      	mov	sl, r4
 8006d44:	e7d2      	b.n	8006cec <_svfiprintf_r+0xa0>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	1d19      	adds	r1, r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	9103      	str	r1, [sp, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfbb      	ittet	lt
 8006d52:	425b      	neglt	r3, r3
 8006d54:	f042 0202 	orrlt.w	r2, r2, #2
 8006d58:	9307      	strge	r3, [sp, #28]
 8006d5a:	9307      	strlt	r3, [sp, #28]
 8006d5c:	bfb8      	it	lt
 8006d5e:	9204      	strlt	r2, [sp, #16]
 8006d60:	7823      	ldrb	r3, [r4, #0]
 8006d62:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d64:	d10a      	bne.n	8006d7c <_svfiprintf_r+0x130>
 8006d66:	7863      	ldrb	r3, [r4, #1]
 8006d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d6a:	d132      	bne.n	8006dd2 <_svfiprintf_r+0x186>
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	1d1a      	adds	r2, r3, #4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	9203      	str	r2, [sp, #12]
 8006d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d78:	3402      	adds	r4, #2
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e40 <_svfiprintf_r+0x1f4>
 8006d80:	7821      	ldrb	r1, [r4, #0]
 8006d82:	2203      	movs	r2, #3
 8006d84:	4650      	mov	r0, sl
 8006d86:	f7f9 fa33 	bl	80001f0 <memchr>
 8006d8a:	b138      	cbz	r0, 8006d9c <_svfiprintf_r+0x150>
 8006d8c:	9b04      	ldr	r3, [sp, #16]
 8006d8e:	eba0 000a 	sub.w	r0, r0, sl
 8006d92:	2240      	movs	r2, #64	@ 0x40
 8006d94:	4082      	lsls	r2, r0
 8006d96:	4313      	orrs	r3, r2
 8006d98:	3401      	adds	r4, #1
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da0:	4824      	ldr	r0, [pc, #144]	@ (8006e34 <_svfiprintf_r+0x1e8>)
 8006da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006da6:	2206      	movs	r2, #6
 8006da8:	f7f9 fa22 	bl	80001f0 <memchr>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d036      	beq.n	8006e1e <_svfiprintf_r+0x1d2>
 8006db0:	4b21      	ldr	r3, [pc, #132]	@ (8006e38 <_svfiprintf_r+0x1ec>)
 8006db2:	bb1b      	cbnz	r3, 8006dfc <_svfiprintf_r+0x1b0>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	3307      	adds	r3, #7
 8006db8:	f023 0307 	bic.w	r3, r3, #7
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	9303      	str	r3, [sp, #12]
 8006dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc2:	4433      	add	r3, r6
 8006dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc6:	e76a      	b.n	8006c9e <_svfiprintf_r+0x52>
 8006dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dcc:	460c      	mov	r4, r1
 8006dce:	2001      	movs	r0, #1
 8006dd0:	e7a8      	b.n	8006d24 <_svfiprintf_r+0xd8>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	3401      	adds	r4, #1
 8006dd6:	9305      	str	r3, [sp, #20]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f04f 0c0a 	mov.w	ip, #10
 8006dde:	4620      	mov	r0, r4
 8006de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de4:	3a30      	subs	r2, #48	@ 0x30
 8006de6:	2a09      	cmp	r2, #9
 8006de8:	d903      	bls.n	8006df2 <_svfiprintf_r+0x1a6>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0c6      	beq.n	8006d7c <_svfiprintf_r+0x130>
 8006dee:	9105      	str	r1, [sp, #20]
 8006df0:	e7c4      	b.n	8006d7c <_svfiprintf_r+0x130>
 8006df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df6:	4604      	mov	r4, r0
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e7f0      	b.n	8006dde <_svfiprintf_r+0x192>
 8006dfc:	ab03      	add	r3, sp, #12
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	462a      	mov	r2, r5
 8006e02:	4b0e      	ldr	r3, [pc, #56]	@ (8006e3c <_svfiprintf_r+0x1f0>)
 8006e04:	a904      	add	r1, sp, #16
 8006e06:	4638      	mov	r0, r7
 8006e08:	f3af 8000 	nop.w
 8006e0c:	1c42      	adds	r2, r0, #1
 8006e0e:	4606      	mov	r6, r0
 8006e10:	d1d6      	bne.n	8006dc0 <_svfiprintf_r+0x174>
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	065b      	lsls	r3, r3, #25
 8006e16:	f53f af2d 	bmi.w	8006c74 <_svfiprintf_r+0x28>
 8006e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e1c:	e72c      	b.n	8006c78 <_svfiprintf_r+0x2c>
 8006e1e:	ab03      	add	r3, sp, #12
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	462a      	mov	r2, r5
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <_svfiprintf_r+0x1f0>)
 8006e26:	a904      	add	r1, sp, #16
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f000 f9bb 	bl	80071a4 <_printf_i>
 8006e2e:	e7ed      	b.n	8006e0c <_svfiprintf_r+0x1c0>
 8006e30:	08007a4a 	.word	0x08007a4a
 8006e34:	08007a54 	.word	0x08007a54
 8006e38:	00000000 	.word	0x00000000
 8006e3c:	08006b95 	.word	0x08006b95
 8006e40:	08007a50 	.word	0x08007a50

08006e44 <__sfputc_r>:
 8006e44:	6893      	ldr	r3, [r2, #8]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	b410      	push	{r4}
 8006e4c:	6093      	str	r3, [r2, #8]
 8006e4e:	da08      	bge.n	8006e62 <__sfputc_r+0x1e>
 8006e50:	6994      	ldr	r4, [r2, #24]
 8006e52:	42a3      	cmp	r3, r4
 8006e54:	db01      	blt.n	8006e5a <__sfputc_r+0x16>
 8006e56:	290a      	cmp	r1, #10
 8006e58:	d103      	bne.n	8006e62 <__sfputc_r+0x1e>
 8006e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e5e:	f7ff bd0e 	b.w	800687e <__swbuf_r>
 8006e62:	6813      	ldr	r3, [r2, #0]
 8006e64:	1c58      	adds	r0, r3, #1
 8006e66:	6010      	str	r0, [r2, #0]
 8006e68:	7019      	strb	r1, [r3, #0]
 8006e6a:	4608      	mov	r0, r1
 8006e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <__sfputs_r>:
 8006e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e74:	4606      	mov	r6, r0
 8006e76:	460f      	mov	r7, r1
 8006e78:	4614      	mov	r4, r2
 8006e7a:	18d5      	adds	r5, r2, r3
 8006e7c:	42ac      	cmp	r4, r5
 8006e7e:	d101      	bne.n	8006e84 <__sfputs_r+0x12>
 8006e80:	2000      	movs	r0, #0
 8006e82:	e007      	b.n	8006e94 <__sfputs_r+0x22>
 8006e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e88:	463a      	mov	r2, r7
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7ff ffda 	bl	8006e44 <__sfputc_r>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d1f3      	bne.n	8006e7c <__sfputs_r+0xa>
 8006e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e98 <_vfiprintf_r>:
 8006e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	460d      	mov	r5, r1
 8006e9e:	b09d      	sub	sp, #116	@ 0x74
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	4698      	mov	r8, r3
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	b118      	cbz	r0, 8006eb0 <_vfiprintf_r+0x18>
 8006ea8:	6a03      	ldr	r3, [r0, #32]
 8006eaa:	b90b      	cbnz	r3, 8006eb0 <_vfiprintf_r+0x18>
 8006eac:	f7ff fbde 	bl	800666c <__sinit>
 8006eb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006eb2:	07d9      	lsls	r1, r3, #31
 8006eb4:	d405      	bmi.n	8006ec2 <_vfiprintf_r+0x2a>
 8006eb6:	89ab      	ldrh	r3, [r5, #12]
 8006eb8:	059a      	lsls	r2, r3, #22
 8006eba:	d402      	bmi.n	8006ec2 <_vfiprintf_r+0x2a>
 8006ebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ebe:	f7ff fe0e 	bl	8006ade <__retarget_lock_acquire_recursive>
 8006ec2:	89ab      	ldrh	r3, [r5, #12]
 8006ec4:	071b      	lsls	r3, r3, #28
 8006ec6:	d501      	bpl.n	8006ecc <_vfiprintf_r+0x34>
 8006ec8:	692b      	ldr	r3, [r5, #16]
 8006eca:	b99b      	cbnz	r3, 8006ef4 <_vfiprintf_r+0x5c>
 8006ecc:	4629      	mov	r1, r5
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7ff fd14 	bl	80068fc <__swsetup_r>
 8006ed4:	b170      	cbz	r0, 8006ef4 <_vfiprintf_r+0x5c>
 8006ed6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ed8:	07dc      	lsls	r4, r3, #31
 8006eda:	d504      	bpl.n	8006ee6 <_vfiprintf_r+0x4e>
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee0:	b01d      	add	sp, #116	@ 0x74
 8006ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee6:	89ab      	ldrh	r3, [r5, #12]
 8006ee8:	0598      	lsls	r0, r3, #22
 8006eea:	d4f7      	bmi.n	8006edc <_vfiprintf_r+0x44>
 8006eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eee:	f7ff fdf7 	bl	8006ae0 <__retarget_lock_release_recursive>
 8006ef2:	e7f3      	b.n	8006edc <_vfiprintf_r+0x44>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef8:	2320      	movs	r3, #32
 8006efa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f02:	2330      	movs	r3, #48	@ 0x30
 8006f04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80070b4 <_vfiprintf_r+0x21c>
 8006f08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f0c:	f04f 0901 	mov.w	r9, #1
 8006f10:	4623      	mov	r3, r4
 8006f12:	469a      	mov	sl, r3
 8006f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f18:	b10a      	cbz	r2, 8006f1e <_vfiprintf_r+0x86>
 8006f1a:	2a25      	cmp	r2, #37	@ 0x25
 8006f1c:	d1f9      	bne.n	8006f12 <_vfiprintf_r+0x7a>
 8006f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8006f22:	d00b      	beq.n	8006f3c <_vfiprintf_r+0xa4>
 8006f24:	465b      	mov	r3, fp
 8006f26:	4622      	mov	r2, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f7ff ffa1 	bl	8006e72 <__sfputs_r>
 8006f30:	3001      	adds	r0, #1
 8006f32:	f000 80a7 	beq.w	8007084 <_vfiprintf_r+0x1ec>
 8006f36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f38:	445a      	add	r2, fp
 8006f3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 809f 	beq.w	8007084 <_vfiprintf_r+0x1ec>
 8006f46:	2300      	movs	r3, #0
 8006f48:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f50:	f10a 0a01 	add.w	sl, sl, #1
 8006f54:	9304      	str	r3, [sp, #16]
 8006f56:	9307      	str	r3, [sp, #28]
 8006f58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f5e:	4654      	mov	r4, sl
 8006f60:	2205      	movs	r2, #5
 8006f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f66:	4853      	ldr	r0, [pc, #332]	@ (80070b4 <_vfiprintf_r+0x21c>)
 8006f68:	f7f9 f942 	bl	80001f0 <memchr>
 8006f6c:	9a04      	ldr	r2, [sp, #16]
 8006f6e:	b9d8      	cbnz	r0, 8006fa8 <_vfiprintf_r+0x110>
 8006f70:	06d1      	lsls	r1, r2, #27
 8006f72:	bf44      	itt	mi
 8006f74:	2320      	movmi	r3, #32
 8006f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f7a:	0713      	lsls	r3, r2, #28
 8006f7c:	bf44      	itt	mi
 8006f7e:	232b      	movmi	r3, #43	@ 0x2b
 8006f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f84:	f89a 3000 	ldrb.w	r3, [sl]
 8006f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f8a:	d015      	beq.n	8006fb8 <_vfiprintf_r+0x120>
 8006f8c:	9a07      	ldr	r2, [sp, #28]
 8006f8e:	4654      	mov	r4, sl
 8006f90:	2000      	movs	r0, #0
 8006f92:	f04f 0c0a 	mov.w	ip, #10
 8006f96:	4621      	mov	r1, r4
 8006f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f9c:	3b30      	subs	r3, #48	@ 0x30
 8006f9e:	2b09      	cmp	r3, #9
 8006fa0:	d94b      	bls.n	800703a <_vfiprintf_r+0x1a2>
 8006fa2:	b1b0      	cbz	r0, 8006fd2 <_vfiprintf_r+0x13a>
 8006fa4:	9207      	str	r2, [sp, #28]
 8006fa6:	e014      	b.n	8006fd2 <_vfiprintf_r+0x13a>
 8006fa8:	eba0 0308 	sub.w	r3, r0, r8
 8006fac:	fa09 f303 	lsl.w	r3, r9, r3
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	9304      	str	r3, [sp, #16]
 8006fb4:	46a2      	mov	sl, r4
 8006fb6:	e7d2      	b.n	8006f5e <_vfiprintf_r+0xc6>
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	1d19      	adds	r1, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	9103      	str	r1, [sp, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	bfbb      	ittet	lt
 8006fc4:	425b      	neglt	r3, r3
 8006fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8006fca:	9307      	strge	r3, [sp, #28]
 8006fcc:	9307      	strlt	r3, [sp, #28]
 8006fce:	bfb8      	it	lt
 8006fd0:	9204      	strlt	r2, [sp, #16]
 8006fd2:	7823      	ldrb	r3, [r4, #0]
 8006fd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fd6:	d10a      	bne.n	8006fee <_vfiprintf_r+0x156>
 8006fd8:	7863      	ldrb	r3, [r4, #1]
 8006fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fdc:	d132      	bne.n	8007044 <_vfiprintf_r+0x1ac>
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	1d1a      	adds	r2, r3, #4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	9203      	str	r2, [sp, #12]
 8006fe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fea:	3402      	adds	r4, #2
 8006fec:	9305      	str	r3, [sp, #20]
 8006fee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80070c4 <_vfiprintf_r+0x22c>
 8006ff2:	7821      	ldrb	r1, [r4, #0]
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	4650      	mov	r0, sl
 8006ff8:	f7f9 f8fa 	bl	80001f0 <memchr>
 8006ffc:	b138      	cbz	r0, 800700e <_vfiprintf_r+0x176>
 8006ffe:	9b04      	ldr	r3, [sp, #16]
 8007000:	eba0 000a 	sub.w	r0, r0, sl
 8007004:	2240      	movs	r2, #64	@ 0x40
 8007006:	4082      	lsls	r2, r0
 8007008:	4313      	orrs	r3, r2
 800700a:	3401      	adds	r4, #1
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007012:	4829      	ldr	r0, [pc, #164]	@ (80070b8 <_vfiprintf_r+0x220>)
 8007014:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007018:	2206      	movs	r2, #6
 800701a:	f7f9 f8e9 	bl	80001f0 <memchr>
 800701e:	2800      	cmp	r0, #0
 8007020:	d03f      	beq.n	80070a2 <_vfiprintf_r+0x20a>
 8007022:	4b26      	ldr	r3, [pc, #152]	@ (80070bc <_vfiprintf_r+0x224>)
 8007024:	bb1b      	cbnz	r3, 800706e <_vfiprintf_r+0x1d6>
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	3307      	adds	r3, #7
 800702a:	f023 0307 	bic.w	r3, r3, #7
 800702e:	3308      	adds	r3, #8
 8007030:	9303      	str	r3, [sp, #12]
 8007032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007034:	443b      	add	r3, r7
 8007036:	9309      	str	r3, [sp, #36]	@ 0x24
 8007038:	e76a      	b.n	8006f10 <_vfiprintf_r+0x78>
 800703a:	fb0c 3202 	mla	r2, ip, r2, r3
 800703e:	460c      	mov	r4, r1
 8007040:	2001      	movs	r0, #1
 8007042:	e7a8      	b.n	8006f96 <_vfiprintf_r+0xfe>
 8007044:	2300      	movs	r3, #0
 8007046:	3401      	adds	r4, #1
 8007048:	9305      	str	r3, [sp, #20]
 800704a:	4619      	mov	r1, r3
 800704c:	f04f 0c0a 	mov.w	ip, #10
 8007050:	4620      	mov	r0, r4
 8007052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007056:	3a30      	subs	r2, #48	@ 0x30
 8007058:	2a09      	cmp	r2, #9
 800705a:	d903      	bls.n	8007064 <_vfiprintf_r+0x1cc>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0c6      	beq.n	8006fee <_vfiprintf_r+0x156>
 8007060:	9105      	str	r1, [sp, #20]
 8007062:	e7c4      	b.n	8006fee <_vfiprintf_r+0x156>
 8007064:	fb0c 2101 	mla	r1, ip, r1, r2
 8007068:	4604      	mov	r4, r0
 800706a:	2301      	movs	r3, #1
 800706c:	e7f0      	b.n	8007050 <_vfiprintf_r+0x1b8>
 800706e:	ab03      	add	r3, sp, #12
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	462a      	mov	r2, r5
 8007074:	4b12      	ldr	r3, [pc, #72]	@ (80070c0 <_vfiprintf_r+0x228>)
 8007076:	a904      	add	r1, sp, #16
 8007078:	4630      	mov	r0, r6
 800707a:	f3af 8000 	nop.w
 800707e:	4607      	mov	r7, r0
 8007080:	1c78      	adds	r0, r7, #1
 8007082:	d1d6      	bne.n	8007032 <_vfiprintf_r+0x19a>
 8007084:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007086:	07d9      	lsls	r1, r3, #31
 8007088:	d405      	bmi.n	8007096 <_vfiprintf_r+0x1fe>
 800708a:	89ab      	ldrh	r3, [r5, #12]
 800708c:	059a      	lsls	r2, r3, #22
 800708e:	d402      	bmi.n	8007096 <_vfiprintf_r+0x1fe>
 8007090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007092:	f7ff fd25 	bl	8006ae0 <__retarget_lock_release_recursive>
 8007096:	89ab      	ldrh	r3, [r5, #12]
 8007098:	065b      	lsls	r3, r3, #25
 800709a:	f53f af1f 	bmi.w	8006edc <_vfiprintf_r+0x44>
 800709e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070a0:	e71e      	b.n	8006ee0 <_vfiprintf_r+0x48>
 80070a2:	ab03      	add	r3, sp, #12
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	462a      	mov	r2, r5
 80070a8:	4b05      	ldr	r3, [pc, #20]	@ (80070c0 <_vfiprintf_r+0x228>)
 80070aa:	a904      	add	r1, sp, #16
 80070ac:	4630      	mov	r0, r6
 80070ae:	f000 f879 	bl	80071a4 <_printf_i>
 80070b2:	e7e4      	b.n	800707e <_vfiprintf_r+0x1e6>
 80070b4:	08007a4a 	.word	0x08007a4a
 80070b8:	08007a54 	.word	0x08007a54
 80070bc:	00000000 	.word	0x00000000
 80070c0:	08006e73 	.word	0x08006e73
 80070c4:	08007a50 	.word	0x08007a50

080070c8 <_printf_common>:
 80070c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	4616      	mov	r6, r2
 80070ce:	4698      	mov	r8, r3
 80070d0:	688a      	ldr	r2, [r1, #8]
 80070d2:	690b      	ldr	r3, [r1, #16]
 80070d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070d8:	4293      	cmp	r3, r2
 80070da:	bfb8      	it	lt
 80070dc:	4613      	movlt	r3, r2
 80070de:	6033      	str	r3, [r6, #0]
 80070e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070e4:	4607      	mov	r7, r0
 80070e6:	460c      	mov	r4, r1
 80070e8:	b10a      	cbz	r2, 80070ee <_printf_common+0x26>
 80070ea:	3301      	adds	r3, #1
 80070ec:	6033      	str	r3, [r6, #0]
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	0699      	lsls	r1, r3, #26
 80070f2:	bf42      	ittt	mi
 80070f4:	6833      	ldrmi	r3, [r6, #0]
 80070f6:	3302      	addmi	r3, #2
 80070f8:	6033      	strmi	r3, [r6, #0]
 80070fa:	6825      	ldr	r5, [r4, #0]
 80070fc:	f015 0506 	ands.w	r5, r5, #6
 8007100:	d106      	bne.n	8007110 <_printf_common+0x48>
 8007102:	f104 0a19 	add.w	sl, r4, #25
 8007106:	68e3      	ldr	r3, [r4, #12]
 8007108:	6832      	ldr	r2, [r6, #0]
 800710a:	1a9b      	subs	r3, r3, r2
 800710c:	42ab      	cmp	r3, r5
 800710e:	dc26      	bgt.n	800715e <_printf_common+0x96>
 8007110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007114:	6822      	ldr	r2, [r4, #0]
 8007116:	3b00      	subs	r3, #0
 8007118:	bf18      	it	ne
 800711a:	2301      	movne	r3, #1
 800711c:	0692      	lsls	r2, r2, #26
 800711e:	d42b      	bmi.n	8007178 <_printf_common+0xb0>
 8007120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007124:	4641      	mov	r1, r8
 8007126:	4638      	mov	r0, r7
 8007128:	47c8      	blx	r9
 800712a:	3001      	adds	r0, #1
 800712c:	d01e      	beq.n	800716c <_printf_common+0xa4>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	6922      	ldr	r2, [r4, #16]
 8007132:	f003 0306 	and.w	r3, r3, #6
 8007136:	2b04      	cmp	r3, #4
 8007138:	bf02      	ittt	eq
 800713a:	68e5      	ldreq	r5, [r4, #12]
 800713c:	6833      	ldreq	r3, [r6, #0]
 800713e:	1aed      	subeq	r5, r5, r3
 8007140:	68a3      	ldr	r3, [r4, #8]
 8007142:	bf0c      	ite	eq
 8007144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007148:	2500      	movne	r5, #0
 800714a:	4293      	cmp	r3, r2
 800714c:	bfc4      	itt	gt
 800714e:	1a9b      	subgt	r3, r3, r2
 8007150:	18ed      	addgt	r5, r5, r3
 8007152:	2600      	movs	r6, #0
 8007154:	341a      	adds	r4, #26
 8007156:	42b5      	cmp	r5, r6
 8007158:	d11a      	bne.n	8007190 <_printf_common+0xc8>
 800715a:	2000      	movs	r0, #0
 800715c:	e008      	b.n	8007170 <_printf_common+0xa8>
 800715e:	2301      	movs	r3, #1
 8007160:	4652      	mov	r2, sl
 8007162:	4641      	mov	r1, r8
 8007164:	4638      	mov	r0, r7
 8007166:	47c8      	blx	r9
 8007168:	3001      	adds	r0, #1
 800716a:	d103      	bne.n	8007174 <_printf_common+0xac>
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007174:	3501      	adds	r5, #1
 8007176:	e7c6      	b.n	8007106 <_printf_common+0x3e>
 8007178:	18e1      	adds	r1, r4, r3
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	2030      	movs	r0, #48	@ 0x30
 800717e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007182:	4422      	add	r2, r4
 8007184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800718c:	3302      	adds	r3, #2
 800718e:	e7c7      	b.n	8007120 <_printf_common+0x58>
 8007190:	2301      	movs	r3, #1
 8007192:	4622      	mov	r2, r4
 8007194:	4641      	mov	r1, r8
 8007196:	4638      	mov	r0, r7
 8007198:	47c8      	blx	r9
 800719a:	3001      	adds	r0, #1
 800719c:	d0e6      	beq.n	800716c <_printf_common+0xa4>
 800719e:	3601      	adds	r6, #1
 80071a0:	e7d9      	b.n	8007156 <_printf_common+0x8e>
	...

080071a4 <_printf_i>:
 80071a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a8:	7e0f      	ldrb	r7, [r1, #24]
 80071aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071ac:	2f78      	cmp	r7, #120	@ 0x78
 80071ae:	4691      	mov	r9, r2
 80071b0:	4680      	mov	r8, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	469a      	mov	sl, r3
 80071b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071ba:	d807      	bhi.n	80071cc <_printf_i+0x28>
 80071bc:	2f62      	cmp	r7, #98	@ 0x62
 80071be:	d80a      	bhi.n	80071d6 <_printf_i+0x32>
 80071c0:	2f00      	cmp	r7, #0
 80071c2:	f000 80d2 	beq.w	800736a <_printf_i+0x1c6>
 80071c6:	2f58      	cmp	r7, #88	@ 0x58
 80071c8:	f000 80b9 	beq.w	800733e <_printf_i+0x19a>
 80071cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071d4:	e03a      	b.n	800724c <_printf_i+0xa8>
 80071d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071da:	2b15      	cmp	r3, #21
 80071dc:	d8f6      	bhi.n	80071cc <_printf_i+0x28>
 80071de:	a101      	add	r1, pc, #4	@ (adr r1, 80071e4 <_printf_i+0x40>)
 80071e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071e4:	0800723d 	.word	0x0800723d
 80071e8:	08007251 	.word	0x08007251
 80071ec:	080071cd 	.word	0x080071cd
 80071f0:	080071cd 	.word	0x080071cd
 80071f4:	080071cd 	.word	0x080071cd
 80071f8:	080071cd 	.word	0x080071cd
 80071fc:	08007251 	.word	0x08007251
 8007200:	080071cd 	.word	0x080071cd
 8007204:	080071cd 	.word	0x080071cd
 8007208:	080071cd 	.word	0x080071cd
 800720c:	080071cd 	.word	0x080071cd
 8007210:	08007351 	.word	0x08007351
 8007214:	0800727b 	.word	0x0800727b
 8007218:	0800730b 	.word	0x0800730b
 800721c:	080071cd 	.word	0x080071cd
 8007220:	080071cd 	.word	0x080071cd
 8007224:	08007373 	.word	0x08007373
 8007228:	080071cd 	.word	0x080071cd
 800722c:	0800727b 	.word	0x0800727b
 8007230:	080071cd 	.word	0x080071cd
 8007234:	080071cd 	.word	0x080071cd
 8007238:	08007313 	.word	0x08007313
 800723c:	6833      	ldr	r3, [r6, #0]
 800723e:	1d1a      	adds	r2, r3, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6032      	str	r2, [r6, #0]
 8007244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800724c:	2301      	movs	r3, #1
 800724e:	e09d      	b.n	800738c <_printf_i+0x1e8>
 8007250:	6833      	ldr	r3, [r6, #0]
 8007252:	6820      	ldr	r0, [r4, #0]
 8007254:	1d19      	adds	r1, r3, #4
 8007256:	6031      	str	r1, [r6, #0]
 8007258:	0606      	lsls	r6, r0, #24
 800725a:	d501      	bpl.n	8007260 <_printf_i+0xbc>
 800725c:	681d      	ldr	r5, [r3, #0]
 800725e:	e003      	b.n	8007268 <_printf_i+0xc4>
 8007260:	0645      	lsls	r5, r0, #25
 8007262:	d5fb      	bpl.n	800725c <_printf_i+0xb8>
 8007264:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007268:	2d00      	cmp	r5, #0
 800726a:	da03      	bge.n	8007274 <_printf_i+0xd0>
 800726c:	232d      	movs	r3, #45	@ 0x2d
 800726e:	426d      	negs	r5, r5
 8007270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007274:	4859      	ldr	r0, [pc, #356]	@ (80073dc <_printf_i+0x238>)
 8007276:	230a      	movs	r3, #10
 8007278:	e011      	b.n	800729e <_printf_i+0xfa>
 800727a:	6821      	ldr	r1, [r4, #0]
 800727c:	6833      	ldr	r3, [r6, #0]
 800727e:	0608      	lsls	r0, r1, #24
 8007280:	f853 5b04 	ldr.w	r5, [r3], #4
 8007284:	d402      	bmi.n	800728c <_printf_i+0xe8>
 8007286:	0649      	lsls	r1, r1, #25
 8007288:	bf48      	it	mi
 800728a:	b2ad      	uxthmi	r5, r5
 800728c:	2f6f      	cmp	r7, #111	@ 0x6f
 800728e:	4853      	ldr	r0, [pc, #332]	@ (80073dc <_printf_i+0x238>)
 8007290:	6033      	str	r3, [r6, #0]
 8007292:	bf14      	ite	ne
 8007294:	230a      	movne	r3, #10
 8007296:	2308      	moveq	r3, #8
 8007298:	2100      	movs	r1, #0
 800729a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800729e:	6866      	ldr	r6, [r4, #4]
 80072a0:	60a6      	str	r6, [r4, #8]
 80072a2:	2e00      	cmp	r6, #0
 80072a4:	bfa2      	ittt	ge
 80072a6:	6821      	ldrge	r1, [r4, #0]
 80072a8:	f021 0104 	bicge.w	r1, r1, #4
 80072ac:	6021      	strge	r1, [r4, #0]
 80072ae:	b90d      	cbnz	r5, 80072b4 <_printf_i+0x110>
 80072b0:	2e00      	cmp	r6, #0
 80072b2:	d04b      	beq.n	800734c <_printf_i+0x1a8>
 80072b4:	4616      	mov	r6, r2
 80072b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80072ba:	fb03 5711 	mls	r7, r3, r1, r5
 80072be:	5dc7      	ldrb	r7, [r0, r7]
 80072c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072c4:	462f      	mov	r7, r5
 80072c6:	42bb      	cmp	r3, r7
 80072c8:	460d      	mov	r5, r1
 80072ca:	d9f4      	bls.n	80072b6 <_printf_i+0x112>
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d10b      	bne.n	80072e8 <_printf_i+0x144>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	07df      	lsls	r7, r3, #31
 80072d4:	d508      	bpl.n	80072e8 <_printf_i+0x144>
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	6861      	ldr	r1, [r4, #4]
 80072da:	4299      	cmp	r1, r3
 80072dc:	bfde      	ittt	le
 80072de:	2330      	movle	r3, #48	@ 0x30
 80072e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072e8:	1b92      	subs	r2, r2, r6
 80072ea:	6122      	str	r2, [r4, #16]
 80072ec:	f8cd a000 	str.w	sl, [sp]
 80072f0:	464b      	mov	r3, r9
 80072f2:	aa03      	add	r2, sp, #12
 80072f4:	4621      	mov	r1, r4
 80072f6:	4640      	mov	r0, r8
 80072f8:	f7ff fee6 	bl	80070c8 <_printf_common>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d14a      	bne.n	8007396 <_printf_i+0x1f2>
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	b004      	add	sp, #16
 8007306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	f043 0320 	orr.w	r3, r3, #32
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	4833      	ldr	r0, [pc, #204]	@ (80073e0 <_printf_i+0x23c>)
 8007314:	2778      	movs	r7, #120	@ 0x78
 8007316:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	6831      	ldr	r1, [r6, #0]
 800731e:	061f      	lsls	r7, r3, #24
 8007320:	f851 5b04 	ldr.w	r5, [r1], #4
 8007324:	d402      	bmi.n	800732c <_printf_i+0x188>
 8007326:	065f      	lsls	r7, r3, #25
 8007328:	bf48      	it	mi
 800732a:	b2ad      	uxthmi	r5, r5
 800732c:	6031      	str	r1, [r6, #0]
 800732e:	07d9      	lsls	r1, r3, #31
 8007330:	bf44      	itt	mi
 8007332:	f043 0320 	orrmi.w	r3, r3, #32
 8007336:	6023      	strmi	r3, [r4, #0]
 8007338:	b11d      	cbz	r5, 8007342 <_printf_i+0x19e>
 800733a:	2310      	movs	r3, #16
 800733c:	e7ac      	b.n	8007298 <_printf_i+0xf4>
 800733e:	4827      	ldr	r0, [pc, #156]	@ (80073dc <_printf_i+0x238>)
 8007340:	e7e9      	b.n	8007316 <_printf_i+0x172>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	f023 0320 	bic.w	r3, r3, #32
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	e7f6      	b.n	800733a <_printf_i+0x196>
 800734c:	4616      	mov	r6, r2
 800734e:	e7bd      	b.n	80072cc <_printf_i+0x128>
 8007350:	6833      	ldr	r3, [r6, #0]
 8007352:	6825      	ldr	r5, [r4, #0]
 8007354:	6961      	ldr	r1, [r4, #20]
 8007356:	1d18      	adds	r0, r3, #4
 8007358:	6030      	str	r0, [r6, #0]
 800735a:	062e      	lsls	r6, r5, #24
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	d501      	bpl.n	8007364 <_printf_i+0x1c0>
 8007360:	6019      	str	r1, [r3, #0]
 8007362:	e002      	b.n	800736a <_printf_i+0x1c6>
 8007364:	0668      	lsls	r0, r5, #25
 8007366:	d5fb      	bpl.n	8007360 <_printf_i+0x1bc>
 8007368:	8019      	strh	r1, [r3, #0]
 800736a:	2300      	movs	r3, #0
 800736c:	6123      	str	r3, [r4, #16]
 800736e:	4616      	mov	r6, r2
 8007370:	e7bc      	b.n	80072ec <_printf_i+0x148>
 8007372:	6833      	ldr	r3, [r6, #0]
 8007374:	1d1a      	adds	r2, r3, #4
 8007376:	6032      	str	r2, [r6, #0]
 8007378:	681e      	ldr	r6, [r3, #0]
 800737a:	6862      	ldr	r2, [r4, #4]
 800737c:	2100      	movs	r1, #0
 800737e:	4630      	mov	r0, r6
 8007380:	f7f8 ff36 	bl	80001f0 <memchr>
 8007384:	b108      	cbz	r0, 800738a <_printf_i+0x1e6>
 8007386:	1b80      	subs	r0, r0, r6
 8007388:	6060      	str	r0, [r4, #4]
 800738a:	6863      	ldr	r3, [r4, #4]
 800738c:	6123      	str	r3, [r4, #16]
 800738e:	2300      	movs	r3, #0
 8007390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007394:	e7aa      	b.n	80072ec <_printf_i+0x148>
 8007396:	6923      	ldr	r3, [r4, #16]
 8007398:	4632      	mov	r2, r6
 800739a:	4649      	mov	r1, r9
 800739c:	4640      	mov	r0, r8
 800739e:	47d0      	blx	sl
 80073a0:	3001      	adds	r0, #1
 80073a2:	d0ad      	beq.n	8007300 <_printf_i+0x15c>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	079b      	lsls	r3, r3, #30
 80073a8:	d413      	bmi.n	80073d2 <_printf_i+0x22e>
 80073aa:	68e0      	ldr	r0, [r4, #12]
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	4298      	cmp	r0, r3
 80073b0:	bfb8      	it	lt
 80073b2:	4618      	movlt	r0, r3
 80073b4:	e7a6      	b.n	8007304 <_printf_i+0x160>
 80073b6:	2301      	movs	r3, #1
 80073b8:	4632      	mov	r2, r6
 80073ba:	4649      	mov	r1, r9
 80073bc:	4640      	mov	r0, r8
 80073be:	47d0      	blx	sl
 80073c0:	3001      	adds	r0, #1
 80073c2:	d09d      	beq.n	8007300 <_printf_i+0x15c>
 80073c4:	3501      	adds	r5, #1
 80073c6:	68e3      	ldr	r3, [r4, #12]
 80073c8:	9903      	ldr	r1, [sp, #12]
 80073ca:	1a5b      	subs	r3, r3, r1
 80073cc:	42ab      	cmp	r3, r5
 80073ce:	dcf2      	bgt.n	80073b6 <_printf_i+0x212>
 80073d0:	e7eb      	b.n	80073aa <_printf_i+0x206>
 80073d2:	2500      	movs	r5, #0
 80073d4:	f104 0619 	add.w	r6, r4, #25
 80073d8:	e7f5      	b.n	80073c6 <_printf_i+0x222>
 80073da:	bf00      	nop
 80073dc:	08007a5b 	.word	0x08007a5b
 80073e0:	08007a6c 	.word	0x08007a6c

080073e4 <__sflush_r>:
 80073e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ec:	0716      	lsls	r6, r2, #28
 80073ee:	4605      	mov	r5, r0
 80073f0:	460c      	mov	r4, r1
 80073f2:	d454      	bmi.n	800749e <__sflush_r+0xba>
 80073f4:	684b      	ldr	r3, [r1, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	dc02      	bgt.n	8007400 <__sflush_r+0x1c>
 80073fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dd48      	ble.n	8007492 <__sflush_r+0xae>
 8007400:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007402:	2e00      	cmp	r6, #0
 8007404:	d045      	beq.n	8007492 <__sflush_r+0xae>
 8007406:	2300      	movs	r3, #0
 8007408:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800740c:	682f      	ldr	r7, [r5, #0]
 800740e:	6a21      	ldr	r1, [r4, #32]
 8007410:	602b      	str	r3, [r5, #0]
 8007412:	d030      	beq.n	8007476 <__sflush_r+0x92>
 8007414:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	0759      	lsls	r1, r3, #29
 800741a:	d505      	bpl.n	8007428 <__sflush_r+0x44>
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007422:	b10b      	cbz	r3, 8007428 <__sflush_r+0x44>
 8007424:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007426:	1ad2      	subs	r2, r2, r3
 8007428:	2300      	movs	r3, #0
 800742a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800742c:	6a21      	ldr	r1, [r4, #32]
 800742e:	4628      	mov	r0, r5
 8007430:	47b0      	blx	r6
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	d106      	bne.n	8007446 <__sflush_r+0x62>
 8007438:	6829      	ldr	r1, [r5, #0]
 800743a:	291d      	cmp	r1, #29
 800743c:	d82b      	bhi.n	8007496 <__sflush_r+0xb2>
 800743e:	4a2a      	ldr	r2, [pc, #168]	@ (80074e8 <__sflush_r+0x104>)
 8007440:	410a      	asrs	r2, r1
 8007442:	07d6      	lsls	r6, r2, #31
 8007444:	d427      	bmi.n	8007496 <__sflush_r+0xb2>
 8007446:	2200      	movs	r2, #0
 8007448:	6062      	str	r2, [r4, #4]
 800744a:	04d9      	lsls	r1, r3, #19
 800744c:	6922      	ldr	r2, [r4, #16]
 800744e:	6022      	str	r2, [r4, #0]
 8007450:	d504      	bpl.n	800745c <__sflush_r+0x78>
 8007452:	1c42      	adds	r2, r0, #1
 8007454:	d101      	bne.n	800745a <__sflush_r+0x76>
 8007456:	682b      	ldr	r3, [r5, #0]
 8007458:	b903      	cbnz	r3, 800745c <__sflush_r+0x78>
 800745a:	6560      	str	r0, [r4, #84]	@ 0x54
 800745c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800745e:	602f      	str	r7, [r5, #0]
 8007460:	b1b9      	cbz	r1, 8007492 <__sflush_r+0xae>
 8007462:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007466:	4299      	cmp	r1, r3
 8007468:	d002      	beq.n	8007470 <__sflush_r+0x8c>
 800746a:	4628      	mov	r0, r5
 800746c:	f7ff fb48 	bl	8006b00 <_free_r>
 8007470:	2300      	movs	r3, #0
 8007472:	6363      	str	r3, [r4, #52]	@ 0x34
 8007474:	e00d      	b.n	8007492 <__sflush_r+0xae>
 8007476:	2301      	movs	r3, #1
 8007478:	4628      	mov	r0, r5
 800747a:	47b0      	blx	r6
 800747c:	4602      	mov	r2, r0
 800747e:	1c50      	adds	r0, r2, #1
 8007480:	d1c9      	bne.n	8007416 <__sflush_r+0x32>
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0c6      	beq.n	8007416 <__sflush_r+0x32>
 8007488:	2b1d      	cmp	r3, #29
 800748a:	d001      	beq.n	8007490 <__sflush_r+0xac>
 800748c:	2b16      	cmp	r3, #22
 800748e:	d11e      	bne.n	80074ce <__sflush_r+0xea>
 8007490:	602f      	str	r7, [r5, #0]
 8007492:	2000      	movs	r0, #0
 8007494:	e022      	b.n	80074dc <__sflush_r+0xf8>
 8007496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800749a:	b21b      	sxth	r3, r3
 800749c:	e01b      	b.n	80074d6 <__sflush_r+0xf2>
 800749e:	690f      	ldr	r7, [r1, #16]
 80074a0:	2f00      	cmp	r7, #0
 80074a2:	d0f6      	beq.n	8007492 <__sflush_r+0xae>
 80074a4:	0793      	lsls	r3, r2, #30
 80074a6:	680e      	ldr	r6, [r1, #0]
 80074a8:	bf08      	it	eq
 80074aa:	694b      	ldreq	r3, [r1, #20]
 80074ac:	600f      	str	r7, [r1, #0]
 80074ae:	bf18      	it	ne
 80074b0:	2300      	movne	r3, #0
 80074b2:	eba6 0807 	sub.w	r8, r6, r7
 80074b6:	608b      	str	r3, [r1, #8]
 80074b8:	f1b8 0f00 	cmp.w	r8, #0
 80074bc:	dde9      	ble.n	8007492 <__sflush_r+0xae>
 80074be:	6a21      	ldr	r1, [r4, #32]
 80074c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80074c2:	4643      	mov	r3, r8
 80074c4:	463a      	mov	r2, r7
 80074c6:	4628      	mov	r0, r5
 80074c8:	47b0      	blx	r6
 80074ca:	2800      	cmp	r0, #0
 80074cc:	dc08      	bgt.n	80074e0 <__sflush_r+0xfc>
 80074ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e0:	4407      	add	r7, r0
 80074e2:	eba8 0800 	sub.w	r8, r8, r0
 80074e6:	e7e7      	b.n	80074b8 <__sflush_r+0xd4>
 80074e8:	dfbffffe 	.word	0xdfbffffe

080074ec <_fflush_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	690b      	ldr	r3, [r1, #16]
 80074f0:	4605      	mov	r5, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	b913      	cbnz	r3, 80074fc <_fflush_r+0x10>
 80074f6:	2500      	movs	r5, #0
 80074f8:	4628      	mov	r0, r5
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	b118      	cbz	r0, 8007506 <_fflush_r+0x1a>
 80074fe:	6a03      	ldr	r3, [r0, #32]
 8007500:	b90b      	cbnz	r3, 8007506 <_fflush_r+0x1a>
 8007502:	f7ff f8b3 	bl	800666c <__sinit>
 8007506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0f3      	beq.n	80074f6 <_fflush_r+0xa>
 800750e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007510:	07d0      	lsls	r0, r2, #31
 8007512:	d404      	bmi.n	800751e <_fflush_r+0x32>
 8007514:	0599      	lsls	r1, r3, #22
 8007516:	d402      	bmi.n	800751e <_fflush_r+0x32>
 8007518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800751a:	f7ff fae0 	bl	8006ade <__retarget_lock_acquire_recursive>
 800751e:	4628      	mov	r0, r5
 8007520:	4621      	mov	r1, r4
 8007522:	f7ff ff5f 	bl	80073e4 <__sflush_r>
 8007526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007528:	07da      	lsls	r2, r3, #31
 800752a:	4605      	mov	r5, r0
 800752c:	d4e4      	bmi.n	80074f8 <_fflush_r+0xc>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	059b      	lsls	r3, r3, #22
 8007532:	d4e1      	bmi.n	80074f8 <_fflush_r+0xc>
 8007534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007536:	f7ff fad3 	bl	8006ae0 <__retarget_lock_release_recursive>
 800753a:	e7dd      	b.n	80074f8 <_fflush_r+0xc>

0800753c <__swhatbuf_r>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	460c      	mov	r4, r1
 8007540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007544:	2900      	cmp	r1, #0
 8007546:	b096      	sub	sp, #88	@ 0x58
 8007548:	4615      	mov	r5, r2
 800754a:	461e      	mov	r6, r3
 800754c:	da0d      	bge.n	800756a <__swhatbuf_r+0x2e>
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007554:	f04f 0100 	mov.w	r1, #0
 8007558:	bf14      	ite	ne
 800755a:	2340      	movne	r3, #64	@ 0x40
 800755c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007560:	2000      	movs	r0, #0
 8007562:	6031      	str	r1, [r6, #0]
 8007564:	602b      	str	r3, [r5, #0]
 8007566:	b016      	add	sp, #88	@ 0x58
 8007568:	bd70      	pop	{r4, r5, r6, pc}
 800756a:	466a      	mov	r2, sp
 800756c:	f000 f862 	bl	8007634 <_fstat_r>
 8007570:	2800      	cmp	r0, #0
 8007572:	dbec      	blt.n	800754e <__swhatbuf_r+0x12>
 8007574:	9901      	ldr	r1, [sp, #4]
 8007576:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800757a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800757e:	4259      	negs	r1, r3
 8007580:	4159      	adcs	r1, r3
 8007582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007586:	e7eb      	b.n	8007560 <__swhatbuf_r+0x24>

08007588 <__smakebuf_r>:
 8007588:	898b      	ldrh	r3, [r1, #12]
 800758a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800758c:	079d      	lsls	r5, r3, #30
 800758e:	4606      	mov	r6, r0
 8007590:	460c      	mov	r4, r1
 8007592:	d507      	bpl.n	80075a4 <__smakebuf_r+0x1c>
 8007594:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	6123      	str	r3, [r4, #16]
 800759c:	2301      	movs	r3, #1
 800759e:	6163      	str	r3, [r4, #20]
 80075a0:	b003      	add	sp, #12
 80075a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a4:	ab01      	add	r3, sp, #4
 80075a6:	466a      	mov	r2, sp
 80075a8:	f7ff ffc8 	bl	800753c <__swhatbuf_r>
 80075ac:	9f00      	ldr	r7, [sp, #0]
 80075ae:	4605      	mov	r5, r0
 80075b0:	4639      	mov	r1, r7
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7fe ff42 	bl	800643c <_malloc_r>
 80075b8:	b948      	cbnz	r0, 80075ce <__smakebuf_r+0x46>
 80075ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075be:	059a      	lsls	r2, r3, #22
 80075c0:	d4ee      	bmi.n	80075a0 <__smakebuf_r+0x18>
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	f043 0302 	orr.w	r3, r3, #2
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	e7e2      	b.n	8007594 <__smakebuf_r+0xc>
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	6020      	str	r0, [r4, #0]
 80075d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	9b01      	ldr	r3, [sp, #4]
 80075da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075de:	b15b      	cbz	r3, 80075f8 <__smakebuf_r+0x70>
 80075e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075e4:	4630      	mov	r0, r6
 80075e6:	f000 f837 	bl	8007658 <_isatty_r>
 80075ea:	b128      	cbz	r0, 80075f8 <__smakebuf_r+0x70>
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	f023 0303 	bic.w	r3, r3, #3
 80075f2:	f043 0301 	orr.w	r3, r3, #1
 80075f6:	81a3      	strh	r3, [r4, #12]
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	431d      	orrs	r5, r3
 80075fc:	81a5      	strh	r5, [r4, #12]
 80075fe:	e7cf      	b.n	80075a0 <__smakebuf_r+0x18>

08007600 <memmove>:
 8007600:	4288      	cmp	r0, r1
 8007602:	b510      	push	{r4, lr}
 8007604:	eb01 0402 	add.w	r4, r1, r2
 8007608:	d902      	bls.n	8007610 <memmove+0x10>
 800760a:	4284      	cmp	r4, r0
 800760c:	4623      	mov	r3, r4
 800760e:	d807      	bhi.n	8007620 <memmove+0x20>
 8007610:	1e43      	subs	r3, r0, #1
 8007612:	42a1      	cmp	r1, r4
 8007614:	d008      	beq.n	8007628 <memmove+0x28>
 8007616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800761a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800761e:	e7f8      	b.n	8007612 <memmove+0x12>
 8007620:	4402      	add	r2, r0
 8007622:	4601      	mov	r1, r0
 8007624:	428a      	cmp	r2, r1
 8007626:	d100      	bne.n	800762a <memmove+0x2a>
 8007628:	bd10      	pop	{r4, pc}
 800762a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800762e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007632:	e7f7      	b.n	8007624 <memmove+0x24>

08007634 <_fstat_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d07      	ldr	r5, [pc, #28]	@ (8007654 <_fstat_r+0x20>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	f7fb f86a 	bl	800271a <_fstat>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d102      	bne.n	8007650 <_fstat_r+0x1c>
 800764a:	682b      	ldr	r3, [r5, #0]
 800764c:	b103      	cbz	r3, 8007650 <_fstat_r+0x1c>
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	bf00      	nop
 8007654:	2000096c 	.word	0x2000096c

08007658 <_isatty_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	@ (8007674 <_isatty_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7fb f869 	bl	800273a <_isatty>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_isatty_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_isatty_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	2000096c 	.word	0x2000096c

08007678 <_realloc_r>:
 8007678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767c:	4680      	mov	r8, r0
 800767e:	4615      	mov	r5, r2
 8007680:	460c      	mov	r4, r1
 8007682:	b921      	cbnz	r1, 800768e <_realloc_r+0x16>
 8007684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007688:	4611      	mov	r1, r2
 800768a:	f7fe bed7 	b.w	800643c <_malloc_r>
 800768e:	b92a      	cbnz	r2, 800769c <_realloc_r+0x24>
 8007690:	f7ff fa36 	bl	8006b00 <_free_r>
 8007694:	2400      	movs	r4, #0
 8007696:	4620      	mov	r0, r4
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	f000 f81a 	bl	80076d4 <_malloc_usable_size_r>
 80076a0:	4285      	cmp	r5, r0
 80076a2:	4606      	mov	r6, r0
 80076a4:	d802      	bhi.n	80076ac <_realloc_r+0x34>
 80076a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80076aa:	d8f4      	bhi.n	8007696 <_realloc_r+0x1e>
 80076ac:	4629      	mov	r1, r5
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7fe fec4 	bl	800643c <_malloc_r>
 80076b4:	4607      	mov	r7, r0
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d0ec      	beq.n	8007694 <_realloc_r+0x1c>
 80076ba:	42b5      	cmp	r5, r6
 80076bc:	462a      	mov	r2, r5
 80076be:	4621      	mov	r1, r4
 80076c0:	bf28      	it	cs
 80076c2:	4632      	movcs	r2, r6
 80076c4:	f7ff fa0d 	bl	8006ae2 <memcpy>
 80076c8:	4621      	mov	r1, r4
 80076ca:	4640      	mov	r0, r8
 80076cc:	f7ff fa18 	bl	8006b00 <_free_r>
 80076d0:	463c      	mov	r4, r7
 80076d2:	e7e0      	b.n	8007696 <_realloc_r+0x1e>

080076d4 <_malloc_usable_size_r>:
 80076d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d8:	1f18      	subs	r0, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bfbc      	itt	lt
 80076de:	580b      	ldrlt	r3, [r1, r0]
 80076e0:	18c0      	addlt	r0, r0, r3
 80076e2:	4770      	bx	lr

080076e4 <_init>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	bf00      	nop
 80076e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ea:	bc08      	pop	{r3}
 80076ec:	469e      	mov	lr, r3
 80076ee:	4770      	bx	lr

080076f0 <_fini>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr
