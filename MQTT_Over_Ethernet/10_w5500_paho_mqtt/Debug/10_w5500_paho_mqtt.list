
10_w5500_paho_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000566c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800580c  0800580c  0000680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a10  08005a10  000070c0  2**0
                  CONTENTS
  4 .ARM          00000008  08005a10  08005a10  00006a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a18  08005a18  000070c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a18  08005a18  00006a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a1c  08005a1c  00006a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08005a20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  200000c0  08005ae0  000070c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08005ae0  00007788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000531b  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001848  00000000  00000000  0000c40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0000dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000048d  00000000  00000000  0000e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f6a4  00000000  00000000  0000e715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008648  00000000  00000000  0001ddb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a68c  00000000  00000000  00026401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00080a8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f94  00000000  00000000  00080ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00082a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057f4 	.word	0x080057f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	080057f4 	.word	0x080057f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	MilliTimer++;
 8000284:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <MilliTimer_Handler+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a03      	ldr	r2, [pc, #12]	@ (8000298 <MilliTimer_Handler+0x18>)
 800028c:	6013      	str	r3, [r2, #0]
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	200000dc 	.word	0x200000dc

0800029c <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80002a0:	4b14      	ldr	r3, [pc, #80]	@ (80002f4 <pa1_adc_init+0x58>)
 80002a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a4:	4a13      	ldr	r2, [pc, #76]	@ (80002f4 <pa1_adc_init+0x58>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 80002ac:	4b12      	ldr	r3, [pc, #72]	@ (80002f8 <pa1_adc_init+0x5c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a11      	ldr	r2, [pc, #68]	@ (80002f8 <pa1_adc_init+0x5c>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80002b8:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <pa1_adc_init+0x5c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0e      	ldr	r2, [pc, #56]	@ (80002f8 <pa1_adc_init+0x5c>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 80002c4:	4b0b      	ldr	r3, [pc, #44]	@ (80002f4 <pa1_adc_init+0x58>)
 80002c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002c8:	4a0a      	ldr	r2, [pc, #40]	@ (80002f4 <pa1_adc_init+0x58>)
 80002ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ce:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80002d0:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <pa1_adc_init+0x60>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 80002d6:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <pa1_adc_init+0x60>)
 80002d8:	2200      	movs	r2, #0
 80002da:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 80002dc:	4b07      	ldr	r3, [pc, #28]	@ (80002fc <pa1_adc_init+0x60>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	4a06      	ldr	r2, [pc, #24]	@ (80002fc <pa1_adc_init+0x60>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6093      	str	r3, [r2, #8]

}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40012000 	.word	0x40012000

08000300 <start_conversion>:


void start_conversion(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <start_conversion+0x28>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4a07      	ldr	r2, [pc, #28]	@ (8000328 <start_conversion+0x28>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 8000310:	4b05      	ldr	r3, [pc, #20]	@ (8000328 <start_conversion+0x28>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4a04      	ldr	r2, [pc, #16]	@ (8000328 <start_conversion+0x28>)
 8000316:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800031a:	6093      	str	r3, [r2, #8]
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40012000 	.word	0x40012000

0800032c <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000330:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <led_init+0x34>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000334:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <led_init+0x34>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <led_init+0x38>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a08      	ldr	r2, [pc, #32]	@ (8000364 <led_init+0x38>)
 8000342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000346:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <led_init+0x38>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a05      	ldr	r2, [pc, #20]	@ (8000364 <led_init+0x38>)
 800034e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000352:	6013      	str	r3, [r2, #0]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800
 8000364:	40020000 	.word	0x40020000

08000368 <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 800036c:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <button_init+0x34>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000370:	4a0a      	ldr	r2, [pc, #40]	@ (800039c <button_init+0x34>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <button_init+0x38>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a08      	ldr	r2, [pc, #32]	@ (80003a0 <button_init+0x38>)
 800037e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000382:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <button_init+0x38>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a05      	ldr	r2, [pc, #20]	@ (80003a0 <button_init+0x38>)
 800038a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800038e:	6013      	str	r3, [r2, #0]

}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800
 80003a0:	40020800 	.word	0x40020800

080003a4 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 80003a8:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <fpu_enable+0x50>)
 80003aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ae:	4a11      	ldr	r2, [pc, #68]	@ (80003f4 <fpu_enable+0x50>)
 80003b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 80003b8:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <fpu_enable+0x50>)
 80003ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003be:	4a0d      	ldr	r2, [pc, #52]	@ (80003f4 <fpu_enable+0x50>)
 80003c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 80003c8:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <fpu_enable+0x50>)
 80003ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ce:	4a09      	ldr	r2, [pc, #36]	@ (80003f4 <fpu_enable+0x50>)
 80003d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <fpu_enable+0x50>)
 80003da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003de:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <fpu_enable+0x50>)
 80003e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80003e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <check_cable_connection>:


wiz_PhyConf current_phy_conf;

void check_cable_connection(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
	uint8_t cable_status;

	do{

		printf("\r\nGetting cable status...\r\n");
 80003fe:	480e      	ldr	r0, [pc, #56]	@ (8000438 <check_cable_connection+0x40>)
 8000400:	f004 fa6c 	bl	80048dc <puts>
		ctlwizchip(CW_GET_PHYLINK,(void *)&cable_status);
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	4619      	mov	r1, r3
 8000408:	200f      	movs	r0, #15
 800040a:	f003 fcb3 	bl	8003d74 <ctlwizchip>

		if(cable_status ==  PHY_LINK_OFF)
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d106      	bne.n	8000422 <check_cable_connection+0x2a>
		{
			printf("No cable detected ...\r\n");
 8000414:	4809      	ldr	r0, [pc, #36]	@ (800043c <check_cable_connection+0x44>)
 8000416:	f004 fa61 	bl	80048dc <puts>
			delay(1000);
 800041a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800041e:	f000 fd73 	bl	8000f08 <delay>
		}

	}while(cable_status ==  PHY_LINK_OFF);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d0ea      	beq.n	80003fe <check_cable_connection+0x6>

	printf("Cable connected...\r\n");
 8000428:	4805      	ldr	r0, [pc, #20]	@ (8000440 <check_cable_connection+0x48>)
 800042a:	f004 fa57 	bl	80048dc <puts>

}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	0800580c 	.word	0x0800580c
 800043c:	08005828 	.word	0x08005828
 8000440:	08005840 	.word	0x08005840

08000444 <display_phy_config>:

void display_phy_config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_conf;
	ctlwizchip(CW_GET_PHYCONF,(void*)&phy_conf);
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	4619      	mov	r1, r3
 800044e:	200b      	movs	r0, #11
 8000450:	f003 fc90 	bl	8003d74 <ctlwizchip>

	if(phy_conf.by == PHY_CONFBY_HW)
 8000454:	793b      	ldrb	r3, [r7, #4]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d103      	bne.n	8000462 <display_phy_config+0x1e>
	{
		printf("\n\rPHY is currently configured by hardware.");
 800045a:	4816      	ldr	r0, [pc, #88]	@ (80004b4 <display_phy_config+0x70>)
 800045c:	f004 f9d6 	bl	800480c <iprintf>
 8000460:	e002      	b.n	8000468 <display_phy_config+0x24>
	}
	else{
		printf("\n\rPHY is currently configured by software.");
 8000462:	4815      	ldr	r0, [pc, #84]	@ (80004b8 <display_phy_config+0x74>)
 8000464:	f004 f9d2 	bl	800480c <iprintf>

	}
	printf("\r\nSTATUS: Autonegotiation %s",(phy_conf.mode == PHY_MODE_AUTONEGO) ? "Enabled" : "Disabled");
 8000468:	797b      	ldrb	r3, [r7, #5]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d101      	bne.n	8000472 <display_phy_config+0x2e>
 800046e:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <display_phy_config+0x78>)
 8000470:	e000      	b.n	8000474 <display_phy_config+0x30>
 8000472:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <display_phy_config+0x7c>)
 8000474:	4619      	mov	r1, r3
 8000476:	4813      	ldr	r0, [pc, #76]	@ (80004c4 <display_phy_config+0x80>)
 8000478:	f004 f9c8 	bl	800480c <iprintf>
	printf("\r\nSTATUS: Duplex Mode: %s",(phy_conf.duplex == PHY_DUPLEX_FULL) ? "Full Duplex" : "Half Duplex");
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d101      	bne.n	8000486 <display_phy_config+0x42>
 8000482:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <display_phy_config+0x84>)
 8000484:	e000      	b.n	8000488 <display_phy_config+0x44>
 8000486:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <display_phy_config+0x88>)
 8000488:	4619      	mov	r1, r3
 800048a:	4811      	ldr	r0, [pc, #68]	@ (80004d0 <display_phy_config+0x8c>)
 800048c:	f004 f9be 	bl	800480c <iprintf>
	printf("\r\nSTATUS: Speed: %dMbps",(phy_conf.speed == PHY_SPEED_10) ? 10 : 100);
 8000490:	79bb      	ldrb	r3, [r7, #6]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d101      	bne.n	800049a <display_phy_config+0x56>
 8000496:	230a      	movs	r3, #10
 8000498:	e000      	b.n	800049c <display_phy_config+0x58>
 800049a:	2364      	movs	r3, #100	@ 0x64
 800049c:	4619      	mov	r1, r3
 800049e:	480d      	ldr	r0, [pc, #52]	@ (80004d4 <display_phy_config+0x90>)
 80004a0:	f004 f9b4 	bl	800480c <iprintf>
  printf("\r\n...");
 80004a4:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <display_phy_config+0x94>)
 80004a6:	f004 f9b1 	bl	800480c <iprintf>

}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	08005854 	.word	0x08005854
 80004b8:	08005880 	.word	0x08005880
 80004bc:	080058ac 	.word	0x080058ac
 80004c0:	080058b4 	.word	0x080058b4
 80004c4:	080058c0 	.word	0x080058c0
 80004c8:	080058e0 	.word	0x080058e0
 80004cc:	080058ec 	.word	0x080058ec
 80004d0:	080058f8 	.word	0x080058f8
 80004d4:	08005914 	.word	0x08005914
 80004d8:	0800592c 	.word	0x0800592c

080004dc <main>:

int main()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 80004e0:	f7ff ff60 	bl	80003a4 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 80004e4:	f000 fd52 	bl	8000f8c <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 80004e8:	f000 fd88 	bl	8000ffc <debug_uart_init>



	/*Initialize LED*/
	led_init();
 80004ec:	f7ff ff1e 	bl	800032c <led_init>

	/*Initialize Push button*/
	button_init();
 80004f0:	f7ff ff3a 	bl	8000368 <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 80004f4:	f7ff fed2 	bl	800029c <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 80004f8:	f7ff ff02 	bl	8000300 <start_conversion>

    wizchip_cs_pin_init();
 80004fc:	f000 fe2c 	bl	8001158 <wizchip_cs_pin_init>
    w5500_spi_init();
 8000500:	f000 feac 	bl	800125c <w5500_spi_init>
    w5500_init();
 8000504:	f000 fed6 	bl	80012b4 <w5500_init>

    check_cable_connection();
 8000508:	f7ff ff76 	bl	80003f8 <check_cable_connection>
    display_phy_config();
 800050c:	f7ff ff9a 	bl	8000444 <display_phy_config>

    current_phy_conf.by =  PHY_CONFBY_SW;
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <main+0x5c>)
 8000512:	2201      	movs	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
    current_phy_conf.duplex =  PHY_DUPLEX_FULL;
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <main+0x5c>)
 8000518:	2201      	movs	r2, #1
 800051a:	70da      	strb	r2, [r3, #3]
    current_phy_conf.mode   =  PHY_MODE_AUTONEGO;
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <main+0x5c>)
 800051e:	2201      	movs	r2, #1
 8000520:	705a      	strb	r2, [r3, #1]
    current_phy_conf.speed =  PHY_SPEED_10;
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <main+0x5c>)
 8000524:	2200      	movs	r2, #0
 8000526:	709a      	strb	r2, [r3, #2]

    ctlwizchip(CW_SET_PHYCONF,(void*)&current_phy_conf);
 8000528:	4903      	ldr	r1, [pc, #12]	@ (8000538 <main+0x5c>)
 800052a:	200a      	movs	r0, #10
 800052c:	f003 fc22 	bl	8003d74 <ctlwizchip>


    display_phy_config();
 8000530:	f7ff ff88 	bl	8000444 <display_phy_config>


	while(1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <main+0x58>
 8000538:	200000e0 	.word	0x200000e0

0800053c <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8000540:	4b3e      	ldr	r3, [pc, #248]	@ (800063c <spi1_gpio_init+0x100>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000544:	4a3d      	ldr	r2, [pc, #244]	@ (800063c <spi1_gpio_init+0x100>)
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 800054c:	4b3c      	ldr	r3, [pc, #240]	@ (8000640 <spi1_gpio_init+0x104>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a3b      	ldr	r2, [pc, #236]	@ (8000640 <spi1_gpio_init+0x104>)
 8000552:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000556:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8000558:	4b39      	ldr	r3, [pc, #228]	@ (8000640 <spi1_gpio_init+0x104>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a38      	ldr	r2, [pc, #224]	@ (8000640 <spi1_gpio_init+0x104>)
 800055e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000562:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8000564:	4b36      	ldr	r3, [pc, #216]	@ (8000640 <spi1_gpio_init+0x104>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a35      	ldr	r2, [pc, #212]	@ (8000640 <spi1_gpio_init+0x104>)
 800056a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800056e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8000570:	4b33      	ldr	r3, [pc, #204]	@ (8000640 <spi1_gpio_init+0x104>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a32      	ldr	r2, [pc, #200]	@ (8000640 <spi1_gpio_init+0x104>)
 8000576:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800057a:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 800057c:	4b30      	ldr	r3, [pc, #192]	@ (8000640 <spi1_gpio_init+0x104>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a2f      	ldr	r2, [pc, #188]	@ (8000640 <spi1_gpio_init+0x104>)
 8000582:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000586:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8000588:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <spi1_gpio_init+0x104>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a2c      	ldr	r2, [pc, #176]	@ (8000640 <spi1_gpio_init+0x104>)
 800058e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000592:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8000594:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <spi1_gpio_init+0x104>)
 8000596:	6a1b      	ldr	r3, [r3, #32]
 8000598:	4a29      	ldr	r2, [pc, #164]	@ (8000640 <spi1_gpio_init+0x104>)
 800059a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 80005a0:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <spi1_gpio_init+0x104>)
 80005a2:	6a1b      	ldr	r3, [r3, #32]
 80005a4:	4a26      	ldr	r2, [pc, #152]	@ (8000640 <spi1_gpio_init+0x104>)
 80005a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80005aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <spi1_gpio_init+0x104>)
 80005ae:	6a1b      	ldr	r3, [r3, #32]
 80005b0:	4a23      	ldr	r2, [pc, #140]	@ (8000640 <spi1_gpio_init+0x104>)
 80005b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 80005b8:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <spi1_gpio_init+0x104>)
 80005ba:	6a1b      	ldr	r3, [r3, #32]
 80005bc:	4a20      	ldr	r2, [pc, #128]	@ (8000640 <spi1_gpio_init+0x104>)
 80005be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80005c2:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 80005c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <spi1_gpio_init+0x104>)
 80005c6:	6a1b      	ldr	r3, [r3, #32]
 80005c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <spi1_gpio_init+0x104>)
 80005ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 80005d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <spi1_gpio_init+0x104>)
 80005d2:	6a1b      	ldr	r3, [r3, #32]
 80005d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000640 <spi1_gpio_init+0x104>)
 80005d6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80005da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <spi1_gpio_init+0x104>)
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <spi1_gpio_init+0x104>)
 80005e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 80005e8:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <spi1_gpio_init+0x104>)
 80005ea:	6a1b      	ldr	r3, [r3, #32]
 80005ec:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <spi1_gpio_init+0x104>)
 80005ee:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80005f2:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <spi1_gpio_init+0x104>)
 80005f6:	6a1b      	ldr	r3, [r3, #32]
 80005f8:	4a11      	ldr	r2, [pc, #68]	@ (8000640 <spi1_gpio_init+0x104>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <spi1_gpio_init+0x104>)
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	4a0e      	ldr	r2, [pc, #56]	@ (8000640 <spi1_gpio_init+0x104>)
 8000606:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800060a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <spi1_gpio_init+0x104>)
 800060e:	6a1b      	ldr	r3, [r3, #32]
 8000610:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <spi1_gpio_init+0x104>)
 8000612:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000616:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <spi1_gpio_init+0x104>)
 800061a:	6a1b      	ldr	r3, [r3, #32]
 800061c:	4a08      	ldr	r2, [pc, #32]	@ (8000640 <spi1_gpio_init+0x104>)
 800061e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000622:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <spi1_gpio_init+0x100>)
 8000626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <spi1_gpio_init+0x100>)
 800062a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800062e:	6453      	str	r3, [r2, #68]	@ 0x44

}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000

08000644 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <spi_init+0x12>
	{
		return DEV_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e05a      	b.n	800070c <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28

	if(hspi->State == SPI_STATE_RESET)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <spi_init+0x26>
	{
		spi1_gpio_init();
 8000666:	f7ff ff69 	bl	800053c <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2202      	movs	r2, #2
 800066e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000680:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8000692:	431a      	orrs	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800069c:	431a      	orrs	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	691b      	ldr	r3, [r3, #16]
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	431a      	orrs	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	431a      	orrs	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006ba:	431a      	orrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80006c4:	431a      	orrs	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ce:	ea42 0103 	orr.w	r1, r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	0c1b      	lsrs	r3, r3, #16
 80006e8:	f003 0104 	and.w	r1, r3, #4
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006f0:	f003 0210 	and.w	r2, r3, #16
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	430a      	orrs	r2, r1
 80006fa:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->State =  SPI_STATE_READY;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   return DEV_OK;
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <spi_transmit>:




StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4613      	mov	r3, r2
 8000722:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code;// = DEV_OK;
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 8000724:	88fb      	ldrh	r3, [r7, #6]
 8000726:	83fb      	strh	r3, [r7, #30]
	tickstart = get_tick();
 8000728:	f000 fc0c 	bl	8000f44 <get_tick>
 800072c:	61b8      	str	r0, [r7, #24]



	if((p_data == NULL) || (size  == 0))
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <spi_transmit+0x26>
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d101      	bne.n	800073e <spi_transmit+0x2a>
	{

		return DEV_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e106      	b.n	800094c <spi_transmit+0x238>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2203      	movs	r2, #3
 8000742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2200      	movs	r2, #0
 800074a:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  size;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	88fa      	ldrh	r2, [r7, #6]
 8000756:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  size;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	88fa      	ldrh	r2, [r7, #6]
 800075c:	865a      	strh	r2, [r3, #50]	@ 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2200      	movs	r2, #0
 8000762:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  0;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2200      	movs	r2, #0
 8000768:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  0;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2200      	movs	r2, #0
 800076e:	875a      	strh	r2, [r3, #58]	@ 0x3a


	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000778:	d10f      	bne.n	800079a <spi_transmit+0x86>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000788:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000798:	601a      	str	r2, [r3, #0]

	}



	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007a4:	2b40      	cmp	r3, #64	@ 0x40
 80007a6:	d007      	beq.n	80007b8 <spi_transmit+0xa4>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007b6:	601a      	str	r2, [r3, #0]
	}

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007c2:	2b40      	cmp	r3, #64	@ 0x40
 80007c4:	d007      	beq.n	80007d6 <spi_transmit+0xc2>
	  {

			SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007d4:	601a      	str	r2, [r3, #0]

	  }

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007de:	d14e      	bne.n	800087e <spi_transmit+0x16a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <spi_transmit+0xda>
 80007e8:	8bfb      	ldrh	r3, [r7, #30]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d141      	bne.n	8000872 <spi_transmit+0x15e>
		{
			hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f2:	881a      	ldrh	r2, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007fe:	1c9a      	adds	r2, r3, #2
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000808:	b29b      	uxth	r3, r3
 800080a:	3b01      	subs	r3, #1
 800080c:	b29a      	uxth	r2, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	865a      	strh	r2, [r3, #50]	@ 0x32
		}

		while(hspi->TxXferCount> 0)
 8000812:	e02e      	b.n	8000872 <spi_transmit+0x15e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d012      	beq.n	8000848 <spi_transmit+0x134>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000826:	881a      	ldrh	r2, [r3, #0]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000832:	1c9a      	adds	r2, r3, #2
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800083c:	b29b      	uxth	r3, r3
 800083e:	3b01      	subs	r3, #1
 8000840:	b29a      	uxth	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	865a      	strh	r2, [r3, #50]	@ 0x32
 8000846:	e014      	b.n	8000872 <spi_transmit+0x15e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000848:	f000 fb7c 	bl	8000f44 <get_tick>
 800084c:	4602      	mov	r2, r0
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	429a      	cmp	r2, r3
 8000856:	d803      	bhi.n	8000860 <spi_transmit+0x14c>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800085e:	d102      	bne.n	8000866 <spi_transmit+0x152>
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d105      	bne.n	8000872 <spi_transmit+0x15e>
		         {
					hspi->State = SPI_STATE_READY;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2201      	movs	r2, #1
 800086a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return DEV_TIMEOUT;
 800086e:	2303      	movs	r3, #3
 8000870:	e06c      	b.n	800094c <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000876:	b29b      	uxth	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1cb      	bne.n	8000814 <spi_transmit+0x100>
 800087c:	e051      	b.n	8000922 <spi_transmit+0x20e>
	}


	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <spi_transmit+0x178>
 8000886:	8bfb      	ldrh	r3, [r7, #30]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d145      	bne.n	8000918 <spi_transmit+0x204>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) =  *((const uint8_t *)hspi->pTxBuffPtr);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	330c      	adds	r3, #12
 8000896:	7812      	ldrb	r2, [r2, #0]
 8000898:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	3b01      	subs	r3, #1
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	865a      	strh	r2, [r3, #50]	@ 0x32
		}
		while(hspi->TxXferCount> 0)
 80008b2:	e031      	b.n	8000918 <spi_transmit+0x204>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d013      	beq.n	80008ea <spi_transmit+0x1d6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*(const uint8_t *)hspi->pTxBuffPtr);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	330c      	adds	r3, #12
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008de:	b29b      	uxth	r3, r3
 80008e0:	3b01      	subs	r3, #1
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	865a      	strh	r2, [r3, #50]	@ 0x32
 80008e8:	e016      	b.n	8000918 <spi_transmit+0x204>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80008ea:	f000 fb2b 	bl	8000f44 <get_tick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d803      	bhi.n	8000902 <spi_transmit+0x1ee>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000900:	d102      	bne.n	8000908 <spi_transmit+0x1f4>
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d107      	bne.n	8000918 <spi_transmit+0x204>
		         {
					error_code = DEV_TIMEOUT;
 8000908:	2303      	movs	r3, #3
 800090a:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2201      	movs	r2, #1
 8000910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	e019      	b.n	800094c <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800091c:	b29b      	uxth	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1c8      	bne.n	80008b4 <spi_transmit+0x1a0>
			}
		}

	}

	  __IO uint32_t tmpreg_ovr = 0x00U;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->DR;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->SR;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	613b      	str	r3, [r7, #16]

		hspi->State =  SPI_STATE_READY;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2201      	movs	r2, #1
 800093a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <spi_transmit+0x236>
	{
		return DEV_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <spi_transmit+0x238>
	}
	else
	{
		return DEV_OK;
 800094a:	2300      	movs	r3, #0

	}

}
 800094c:	4618      	mov	r0, r3
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af02      	add	r7, sp, #8
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	4613      	mov	r3, r2
 8000962:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 8000964:	2300      	movs	r3, #0
 8000966:	75fb      	strb	r3, [r7, #23]



	if(hspi->State != SPI_STATE_READY)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800096e:	2b01      	cmp	r3, #1
 8000970:	d007      	beq.n	8000982 <spi_receive+0x2e>
	{
		error_code = DEV_BUSY;
 8000972:	2302      	movs	r3, #2
 8000974:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2201      	movs	r2, #1
 800097a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 800097e:	7dfb      	ldrb	r3, [r7, #23]
 8000980:	e0d1      	b.n	8000b26 <spi_receive+0x1d2>
	}

	  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800098a:	d112      	bne.n	80009b2 <spi_receive+0x5e>
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10e      	bne.n	80009b2 <spi_receive+0x5e>
	  {
	    hspi->State = SPI_STATE_BUSY_RX;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2204      	movs	r2, #4
 8000998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
	    return spi_transmit_receive(hspi, p_data, p_data, size, timeout);
 800099c:	88fa      	ldrh	r2, [r7, #6]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	4613      	mov	r3, r2
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	68b9      	ldr	r1, [r7, #8]
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f000 f8c0 	bl	8000b2e <spi_transmit_receive>
 80009ae:	4603      	mov	r3, r0
 80009b0:	e0b9      	b.n	8000b26 <spi_receive+0x1d2>
	  }

		tickstart = get_tick();
 80009b2:	f000 fac7 	bl	8000f44 <get_tick>
 80009b6:	6138      	str	r0, [r7, #16]

	if((p_data == NULL) || (size  == 0))
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <spi_receive+0x70>
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d107      	bne.n	80009d4 <spi_receive+0x80>
	{
		error_code =  DEV_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2201      	movs	r2, #1
 80009cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	e0a8      	b.n	8000b26 <spi_receive+0x1d2>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2204      	movs	r2, #4
 80009d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2200      	movs	r2, #0
 80009e0:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  size;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	88fa      	ldrh	r2, [r7, #6]
 80009ec:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  size;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	88fa      	ldrh	r2, [r7, #6]
 80009f2:	875a      	strh	r2, [r3, #58]	@ 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2200      	movs	r2, #0
 80009f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  0;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  0;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2200      	movs	r2, #0
 8000a04:	865a      	strh	r2, [r3, #50]	@ 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a10:	2b40      	cmp	r3, #64	@ 0x40
 8000a12:	d007      	beq.n	8000a24 <spi_receive+0xd0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a22:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d16c      	bne.n	8000b06 <spi_receive+0x1b2>
	{
		while(hspi->RxXferCount > 0)
 8000a2c:	e033      	b.n	8000a96 <spi_receive+0x142>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d015      	beq.n	8000a68 <spi_receive+0x114>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f103 020c 	add.w	r2, r3, #12
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8000a66:	e016      	b.n	8000a96 <spi_receive+0x142>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000a68:	f000 fa6c 	bl	8000f44 <get_tick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	683a      	ldr	r2, [r7, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d803      	bhi.n	8000a80 <spi_receive+0x12c>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7e:	d102      	bne.n	8000a86 <spi_receive+0x132>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d107      	bne.n	8000a96 <spi_receive+0x142>
		         {
					error_code = DEV_TIMEOUT;
 8000a86:	2303      	movs	r3, #3
 8000a88:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8000a92:	7dfb      	ldrb	r3, [r7, #23]
 8000a94:	e047      	b.n	8000b26 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1c6      	bne.n	8000a2e <spi_receive+0xda>
 8000aa0:	e036      	b.n	8000b10 <spi_receive+0x1bc>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <spi_receive+0x184>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68da      	ldr	r2, [r3, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aba:	b292      	uxth	r2, r2
 8000abc:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ac2:	1c9a      	adds	r2, r3, #2
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8000ad6:	e016      	b.n	8000b06 <spi_receive+0x1b2>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8000ad8:	f000 fa34 	bl	8000f44 <get_tick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d803      	bhi.n	8000af0 <spi_receive+0x19c>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aee:	d102      	bne.n	8000af6 <spi_receive+0x1a2>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d107      	bne.n	8000b06 <spi_receive+0x1b2>
		         {
					error_code = DEV_TIMEOUT;
 8000af6:	2303      	movs	r3, #3
 8000af8:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2201      	movs	r2, #1
 8000afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	e00f      	b.n	8000b26 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1c8      	bne.n	8000aa2 <spi_receive+0x14e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <spi_receive+0x1c8>
	{
		error_code = DEV_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return error_code;
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <spi_transmit_receive>:


StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b08a      	sub	sp, #40	@ 0x28
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
	  StatusTypeDef        error_code = DEV_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 8000b46:	f000 f9fd 	bl	8000f44 <get_tick>
 8000b4a:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000b52:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	641a      	str	r2, [r3, #64]	@ 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	635a      	str	r2, [r3, #52]	@ 0x34
	  hspi->RxXferCount = size;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	887a      	ldrh	r2, [r7, #2]
 8000b6e:	875a      	strh	r2, [r3, #58]	@ 0x3a
	  hspi->RxXferSize  = size;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	871a      	strh	r2, [r3, #56]	@ 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi->TxXferCount = size;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	865a      	strh	r2, [r3, #50]	@ 0x32
	  hspi->TxXferSize  = size;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	887a      	ldrh	r2, [r7, #2]
 8000b86:	861a      	strh	r2, [r3, #48]	@ 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b92:	2b40      	cmp	r3, #64	@ 0x40
 8000b94:	d007      	beq.n	8000ba6 <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ba4:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000bae:	d17e      	bne.n	8000cae <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <spi_transmit_receive+0x90>
 8000bb8:	8a7b      	ldrh	r3, [r7, #18]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d16c      	bne.n	8000c98 <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc2:	881a      	ldrh	r2, [r3, #0]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bce:	1c9a      	adds	r2, r3, #2
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000be2:	e059      	b.n	8000c98 <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d01b      	beq.n	8000c2a <spi_transmit_receive+0xfc>
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d016      	beq.n	8000c2a <spi_transmit_receive+0xfc>
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d113      	bne.n	8000c2a <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c06:	881a      	ldrh	r2, [r3, #0]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c12:	1c9a      	adds	r2, r3, #2
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d019      	beq.n	8000c6c <spi_transmit_receive+0x13e>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d014      	beq.n	8000c6c <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4c:	b292      	uxth	r2, r2
 8000c4e:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c54:	1c9a      	adds	r2, r3, #2
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	3b01      	subs	r3, #1
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 8000c6c:	f000 f96a 	bl	8000f44 <get_tick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d80d      	bhi.n	8000c98 <spi_transmit_receive+0x16a>
 8000c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c82:	d009      	beq.n	8000c98 <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8000c92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c96:	e08f      	b.n	8000db8 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1a0      	bne.n	8000be4 <spi_transmit_receive+0xb6>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d19b      	bne.n	8000be4 <spi_transmit_receive+0xb6>
 8000cac:	e082      	b.n	8000db4 <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <spi_transmit_receive+0x18e>
 8000cb6:	8a7b      	ldrh	r3, [r7, #18]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d171      	bne.n	8000da0 <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	330c      	adds	r3, #12
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000ce2:	e05d      	b.n	8000da0 <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d01c      	beq.n	8000d2c <spi_transmit_receive+0x1fe>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d017      	beq.n	8000d2c <spi_transmit_receive+0x1fe>
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d114      	bne.n	8000d2c <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	330c      	adds	r3, #12
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	3b01      	subs	r3, #1
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d019      	beq.n	8000d6e <spi_transmit_receive+0x240>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d014      	beq.n	8000d6e <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	3b01      	subs	r3, #1
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 8000d6e:	f000 f8e9 	bl	8000f44 <get_tick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d803      	bhi.n	8000d86 <spi_transmit_receive+0x258>
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d84:	d102      	bne.n	8000d8c <spi_transmit_receive+0x25e>
 8000d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d109      	bne.n	8000da0 <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8000d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000d9e:	e00b      	b.n	8000db8 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d19c      	bne.n	8000ce4 <spi_transmit_receive+0x1b6>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d197      	bne.n	8000ce4 <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 8000db4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3728      	adds	r7, #40	@ 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e00a      	b.n	8000de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dd2:	f3af 8000 	nop.w
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	b2ca      	uxtb	r2, r1
 8000de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf0      	blt.n	8000dd2 <_read+0x12>
	}

return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e009      	b.n	8000e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 f8e5 	bl	8000fe4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbf1      	blt.n	8000e0c <_write+0x12>
	}
	return len;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_close>:

int _close(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_isatty>:

int _isatty(int file)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	return 1;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f003 fe64 	bl	8004b98 <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20020000 	.word	0x20020000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	200000e4 	.word	0x200000e4
 8000f04:	20000788 	.word	0x20000788

08000f08 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8000f10:	f000 f818 	bl	8000f44 <get_tick>
 8000f14:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d002      	beq.n	8000f28 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3301      	adds	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8000f28:	bf00      	nop
 8000f2a:	f000 f80b 	bl	8000f44 <get_tick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d8f7      	bhi.n	8000f2a <delay+0x22>

}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <get_tick>:

uint32_t get_tick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <get_tick+0x24>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <get_tick+0x28>)
 8000f52:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f54:	b662      	cpsie	i
}
 8000f56:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <get_tick+0x28>)
 8000f5a:	681b      	ldr	r3, [r3, #0]

}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200000e8 	.word	0x200000e8
 8000f6c:	200000ec 	.word	0x200000ec

08000f70 <tick_increment>:
static void tick_increment(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <tick_increment+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a03      	ldr	r2, [pc, #12]	@ (8000f88 <tick_increment+0x18>)
 8000f7c:	6013      	str	r3, [r2, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	200000e8 	.word	0x200000e8

08000f8c <timebase_init>:
void timebase_init(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <timebase_init+0x44>)
 8000f96:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000f9a:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <timebase_init+0x44>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <timebase_init+0x44>)
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <timebase_init+0x44>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a08      	ldr	r2, [pc, #32]	@ (8000fd0 <timebase_init+0x44>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <timebase_init+0x44>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <timebase_init+0x44>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fc0:	b662      	cpsie	i
}
 8000fc2:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	tick_increment();
 8000fd8:	f7ff ffca 	bl	8000f70 <tick_increment>
	MilliTimer_Handler();
 8000fdc:	f7ff f950 	bl	8000280 <MilliTimer_Handler>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f84f 	bl	8001090 <uart_write>
	return ch;
 8000ff2:	687b      	ldr	r3, [r7, #4]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <debug_uart_init>:

void debug_uart_init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <debug_uart_init+0x84>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001004:	4a1e      	ldr	r2, [pc, #120]	@ (8001080 <debug_uart_init+0x84>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 800100c:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <debug_uart_init+0x88>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a1c      	ldr	r2, [pc, #112]	@ (8001084 <debug_uart_init+0x88>)
 8001012:	f023 0310 	bic.w	r3, r3, #16
 8001016:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8001018:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <debug_uart_init+0x88>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a19      	ldr	r2, [pc, #100]	@ (8001084 <debug_uart_init+0x88>)
 800101e:	f043 0320 	orr.w	r3, r3, #32
 8001022:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <debug_uart_init+0x88>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4a16      	ldr	r2, [pc, #88]	@ (8001084 <debug_uart_init+0x88>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800102e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <debug_uart_init+0x88>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <debug_uart_init+0x88>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800103a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <debug_uart_init+0x88>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4a10      	ldr	r2, [pc, #64]	@ (8001084 <debug_uart_init+0x88>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001046:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <debug_uart_init+0x88>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <debug_uart_init+0x88>)
 800104e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001052:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <debug_uart_init+0x84>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <debug_uart_init+0x84>)
 800105a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800105e:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8001060:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001064:	4808      	ldr	r0, [pc, #32]	@ (8001088 <debug_uart_init+0x8c>)
 8001066:	f000 f83f 	bl	80010e8 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <debug_uart_init+0x90>)
 800106c:	2208      	movs	r2, #8
 800106e:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <debug_uart_init+0x90>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4a05      	ldr	r2, [pc, #20]	@ (800108c <debug_uart_init+0x90>)
 8001076:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000
 8001088:	00f42400 	.word	0x00f42400
 800108c:	40004400 	.word	0x40004400

08001090 <uart_write>:



static void uart_write(int ch)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8001098:	bf00      	nop
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <uart_write+0x2c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f9      	beq.n	800109a <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <uart_write+0x2c>)
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	6053      	str	r3, [r2, #4]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40004400 	.word	0x40004400

080010c0 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	085a      	lsrs	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	441a      	add	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d8:	b29b      	uxth	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffe3 	bl	80010c0 <compute_uart_bd>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b03      	ldr	r3, [pc, #12]	@ (800110c <uart_set_baudrate+0x24>)
 8001100:	609a      	str	r2, [r3, #8]
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40004400 	.word	0x40004400

08001110 <ip_assigned_callback>:

volatile bool is_ip_assigned =  false;


void ip_assigned_callback(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <ip_assigned_callback+0x14>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	200005e0 	.word	0x200005e0

08001128 <ip_update_callback>:

void ip_update_callback(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <ip_update_callback+0x14>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	200005e0 	.word	0x200005e0

08001140 <ip_conflict_callback>:
void ip_conflict_callback(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	is_ip_assigned =  false;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <ip_conflict_callback+0x14>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	200005e0 	.word	0x200005e0

08001158 <wizchip_cs_pin_init>:
    .dhcp =  NETINFO_DHCP
};
/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <wizchip_cs_pin_init+0x34>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <wizchip_cs_pin_init+0x34>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 8001168:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <wizchip_cs_pin_init+0x38>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a08      	ldr	r2, [pc, #32]	@ (8001190 <wizchip_cs_pin_init+0x38>)
 800116e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001172:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <wizchip_cs_pin_init+0x38>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <wizchip_cs_pin_init+0x38>)
 800117a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800117e:	6013      	str	r3, [r2, #0]

}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000

08001194 <wizchip_pin_cs_select>:
/*Select W5500 by pulling CS pin low*/
void wizchip_pin_cs_select(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <wizchip_pin_cs_select+0x1c>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <wizchip_pin_cs_select+0x1c>)
 800119e:	f023 0310 	bic.w	r3, r3, #16
 80011a2:	6153      	str	r3, [r2, #20]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000

080011b4 <wizchip_pin_cs_deselect>:

/*Unselect W5500 by pulling CS pin high*/
void wizchip_pin_cs_deselect(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <wizchip_pin_cs_deselect+0x1c>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <wizchip_pin_cs_deselect+0x1c>)
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	6153      	str	r3, [r2, #20]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40020000 	.word	0x40020000

080011d4 <wizchip_read_burst>:

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);
 80011e0:	887a      	ldrh	r2, [r7, #2]
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <wizchip_read_burst+0x24>)
 80011ea:	f7ff fbb3 	bl	8000954 <spi_receive>

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000f0 	.word	0x200000f0

080011fc <wizchip_read_byte>:

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	2101      	movs	r1, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ffe4 	bl	80011d4 <wizchip_read_burst>
	return byte;
 800120c:	79fb      	ldrb	r3, [r7, #7]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <wizchip_write_burst>:
/*Spi write multiple bytes*/
void wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);
 8001224:	887a      	ldrh	r2, [r7, #2]
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <wizchip_write_burst+0x24>)
 800122e:	f7ff fa71 	bl	8000714 <spi_transmit>

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000f0 	.word	0x200000f0

08001240 <wizchip_write_byte>:

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	wizchip_write_burst(&byte,sizeof(byte));
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffe2 	bl	8001218 <wizchip_write_burst>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <w5500_spi_init>:
 void w5500_spi_init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <w5500_spi_init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <w5500_spi_init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <w5500_spi_init+0x50>)
 8001268:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800126c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <w5500_spi_init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001274:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <w5500_spi_init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <w5500_spi_init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <w5500_spi_init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <w5500_spi_init+0x50>)
 8001288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800128c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <w5500_spi_init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <w5500_spi_init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <w5500_spi_init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Initialize spi*/
	spi_init(&hspi1);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <w5500_spi_init+0x50>)
 80012a2:	f7ff f9cf 	bl	8000644 <spi_init>

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200000f0 	.word	0x200000f0
 80012b0:	40013000 	.word	0x40013000

080012b4 <w5500_init>:


 void w5500_init(void)
 {
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	b093      	sub	sp, #76	@ 0x4c
 80012b8:	af0a      	add	r7, sp, #40	@ 0x28
     //Set RX and TX Buffer sizes

	 /*Set 2KB buffer for each of the 8 sockets*/
	 uint8_t rx_tx_buff_sizes[]= {2,2,2,2,2,2,2,2};
 80012ba:	4a4a      	ldr	r2, [pc, #296]	@ (80013e4 <w5500_init+0x130>)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c4:	e883 0003 	stmia.w	r3, {r0, r1}

	 /*Initialize the W5500 with the RX and TX buffer sizes*/
	 wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80012c8:	f107 0214 	add.w	r2, r7, #20
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fe7a 	bl	8003fcc <wizchip_init>

	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_pin_cs_select,wizchip_pin_cs_deselect);
 80012d8:	4943      	ldr	r1, [pc, #268]	@ (80013e8 <w5500_init+0x134>)
 80012da:	4844      	ldr	r0, [pc, #272]	@ (80013ec <w5500_init+0x138>)
 80012dc:	f002 fccc 	bl	8003c78 <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
 80012e0:	4943      	ldr	r1, [pc, #268]	@ (80013f0 <w5500_init+0x13c>)
 80012e2:	4844      	ldr	r0, [pc, #272]	@ (80013f4 <w5500_init+0x140>)
 80012e4:	f002 fcee 	bl	8003cc4 <reg_wizchip_spi_cbfunc>
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 80012e8:	4943      	ldr	r1, [pc, #268]	@ (80013f8 <w5500_init+0x144>)
 80012ea:	4844      	ldr	r0, [pc, #272]	@ (80013fc <w5500_init+0x148>)
 80012ec:	f002 fd16 	bl	8003d1c <reg_wizchip_spiburst_cbfunc>

	 /*Set MAC Address*/
	 setSHAR(net_info.mac);
 80012f0:	2206      	movs	r2, #6
 80012f2:	4943      	ldr	r1, [pc, #268]	@ (8001400 <w5500_init+0x14c>)
 80012f4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80012f8:	f002 fa6e 	bl	80037d8 <WIZCHIP_WRITE_BUF>

	 /*Initialize DHCP*/
	 DHCP_init(DHCP_SOCKET,dhcp_buffer);
 80012fc:	4941      	ldr	r1, [pc, #260]	@ (8001404 <w5500_init+0x150>)
 80012fe:	2000      	movs	r0, #0
 8001300:	f001 fbaa 	bl	8002a58 <DHCP_init>

	 //Register DHCP Callbacks
	 reg_dhcp_cbfunc(ip_assigned_callback,ip_update_callback,ip_conflict_callback);
 8001304:	4a40      	ldr	r2, [pc, #256]	@ (8001408 <w5500_init+0x154>)
 8001306:	4941      	ldr	r1, [pc, #260]	@ (800140c <w5500_init+0x158>)
 8001308:	4841      	ldr	r0, [pc, #260]	@ (8001410 <w5500_init+0x15c>)
 800130a:	f000 f903 	bl	8001514 <reg_dhcp_cbfunc>

	 /*Wait for IP assignment from DHCP*/
	 uint16_t timeout_counter =  10000;
 800130e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001312:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8001314:	e004      	b.n	8001320 <w5500_init+0x6c>
	 {
		 DHCP_run();
 8001316:	f001 f9e7 	bl	80026e8 <DHCP_run>
		 timeout_counter--;
 800131a:	8bfb      	ldrh	r3, [r7, #30]
 800131c:	3b01      	subs	r3, #1
 800131e:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8001320:	4b3c      	ldr	r3, [pc, #240]	@ (8001414 <w5500_init+0x160>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f083 0301 	eor.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <w5500_init+0x82>
 8001330:	8bfb      	ldrh	r3, [r7, #30]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1ef      	bne.n	8001316 <w5500_init+0x62>
	 }

	 if(!is_ip_assigned)
 8001336:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <w5500_init+0x160>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f083 0301 	eor.w	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d149      	bne.n	80013da <w5500_init+0x126>
	 {
		 return;
	 }

	 /*Get network settings from DHCP*/
	 getIPfromDHCP(net_info.ip);
 8001346:	4834      	ldr	r0, [pc, #208]	@ (8001418 <w5500_init+0x164>)
 8001348:	f001 fc30 	bl	8002bac <getIPfromDHCP>
	 getGWfromDHCP(net_info.gw);
 800134c:	4833      	ldr	r0, [pc, #204]	@ (800141c <w5500_init+0x168>)
 800134e:	f001 fc4d 	bl	8002bec <getGWfromDHCP>
	 getSNfromDHCP(net_info.sn);
 8001352:	4833      	ldr	r0, [pc, #204]	@ (8001420 <w5500_init+0x16c>)
 8001354:	f001 fc6a 	bl	8002c2c <getSNfromDHCP>


	/* Format and print the assigned IP, Gateway, and Subnet mask */
	sprintf(temp_buffer,
		"IP Address:  %d.%d.%d.%d\r\nGateway:  %d.%d.%d.%d\r\nSubnet mask: %d.%d.%d.%d\r\n",
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001358:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <w5500_init+0x14c>)
 800135a:	799b      	ldrb	r3, [r3, #6]
	sprintf(temp_buffer,
 800135c:	469c      	mov	ip, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800135e:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <w5500_init+0x14c>)
 8001360:	79db      	ldrb	r3, [r3, #7]
	sprintf(temp_buffer,
 8001362:	469e      	mov	lr, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001364:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <w5500_init+0x14c>)
 8001366:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(temp_buffer,
 8001368:	461a      	mov	r2, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800136a:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <w5500_init+0x14c>)
 800136c:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(temp_buffer,
 800136e:	4619      	mov	r1, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <w5500_init+0x14c>)
 8001372:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(temp_buffer,
 8001374:	4618      	mov	r0, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <w5500_init+0x14c>)
 8001378:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(temp_buffer,
 800137a:	461c      	mov	r4, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800137c:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <w5500_init+0x14c>)
 800137e:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(temp_buffer,
 8001380:	461d      	mov	r5, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <w5500_init+0x14c>)
 8001384:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(temp_buffer,
 8001386:	461e      	mov	r6, r3
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001388:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <w5500_init+0x14c>)
 800138a:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(temp_buffer,
 800138c:	60fb      	str	r3, [r7, #12]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <w5500_init+0x14c>)
 8001390:	7adb      	ldrb	r3, [r3, #11]
	sprintf(temp_buffer,
 8001392:	60bb      	str	r3, [r7, #8]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <w5500_init+0x14c>)
 8001396:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(temp_buffer,
 8001398:	607b      	str	r3, [r7, #4]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <w5500_init+0x14c>)
 800139c:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(temp_buffer,
 800139e:	9309      	str	r3, [sp, #36]	@ 0x24
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	9308      	str	r3, [sp, #32]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	9307      	str	r3, [sp, #28]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	9306      	str	r3, [sp, #24]
 80013ac:	9605      	str	r6, [sp, #20]
 80013ae:	9504      	str	r5, [sp, #16]
 80013b0:	9403      	str	r4, [sp, #12]
 80013b2:	9002      	str	r0, [sp, #8]
 80013b4:	9101      	str	r1, [sp, #4]
 80013b6:	9200      	str	r2, [sp, #0]
 80013b8:	4673      	mov	r3, lr
 80013ba:	4662      	mov	r2, ip
 80013bc:	4919      	ldr	r1, [pc, #100]	@ (8001424 <w5500_init+0x170>)
 80013be:	481a      	ldr	r0, [pc, #104]	@ (8001428 <w5500_init+0x174>)
 80013c0:	f003 fa94 	bl	80048ec <siprintf>
	);

    printf("*************Network Information************************\r\n");
 80013c4:	4819      	ldr	r0, [pc, #100]	@ (800142c <w5500_init+0x178>)
 80013c6:	f003 fa89 	bl	80048dc <puts>
    printf("%s", temp_buffer);
 80013ca:	4917      	ldr	r1, [pc, #92]	@ (8001428 <w5500_init+0x174>)
 80013cc:	4818      	ldr	r0, [pc, #96]	@ (8001430 <w5500_init+0x17c>)
 80013ce:	f003 fa1d 	bl	800480c <iprintf>

    /*Apply the network configurations to the W5500*/
    wizchip_setnetinfo(&net_info);
 80013d2:	480b      	ldr	r0, [pc, #44]	@ (8001400 <w5500_init+0x14c>)
 80013d4:	f003 f86a 	bl	80044ac <wizchip_setnetinfo>
 80013d8:	e000      	b.n	80013dc <w5500_init+0x128>
		 return;
 80013da:	bf00      	nop

 }
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	080059c0 	.word	0x080059c0
 80013e8:	080011b5 	.word	0x080011b5
 80013ec:	08001195 	.word	0x08001195
 80013f0:	08001241 	.word	0x08001241
 80013f4:	080011fd 	.word	0x080011fd
 80013f8:	08001219 	.word	0x08001219
 80013fc:	080011d5 	.word	0x080011d5
 8001400:	20000000 	.word	0x20000000
 8001404:	200001e0 	.word	0x200001e0
 8001408:	08001141 	.word	0x08001141
 800140c:	08001129 	.word	0x08001129
 8001410:	08001111 	.word	0x08001111
 8001414:	200005e0 	.word	0x200005e0
 8001418:	20000006 	.word	0x20000006
 800141c:	2000000e 	.word	0x2000000e
 8001420:	2000000a 	.word	0x2000000a
 8001424:	08005934 	.word	0x08005934
 8001428:	20000134 	.word	0x20000134
 800142c:	08005980 	.word	0x08005980
 8001430:	080059bc 	.word	0x080059bc

08001434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001436:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001438:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <LoopForever+0x6>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	@ (8001474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <LoopForever+0xe>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	@ (8001480 <LoopForever+0x16>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001462:	f003 fb9f 	bl	8004ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001466:	f7ff f839 	bl	80004dc <main>

0800146a <LoopForever>:

LoopForever:
    b LoopForever
 800146a:	e7fe      	b.n	800146a <LoopForever>
  ldr   r0, =_estack
 800146c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001478:	08005a20 	.word	0x08005a20
  ldr r2, =_sbss
 800147c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001480:	20000788 	.word	0x20000788

08001484 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 800148c:	2204      	movs	r2, #4
 800148e:	4909      	ldr	r1, [pc, #36]	@ (80014b4 <default_ip_assign+0x2c>)
 8001490:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001494:	f002 f9a0 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8001498:	2204      	movs	r2, #4
 800149a:	4907      	ldr	r1, [pc, #28]	@ (80014b8 <default_ip_assign+0x30>)
 800149c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80014a0:	f002 f99a 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 80014a4:	2204      	movs	r2, #4
 80014a6:	4905      	ldr	r1, [pc, #20]	@ (80014bc <default_ip_assign+0x34>)
 80014a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80014ac:	f002 f994 	bl	80037d8 <WIZCHIP_WRITE_BUF>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200005f0 	.word	0x200005f0
 80014b8:	200005f8 	.word	0x200005f8
 80014bc:	200005f4 	.word	0x200005f4

080014c0 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80014c4:	2180      	movs	r1, #128	@ 0x80
 80014c6:	2000      	movs	r0, #0
 80014c8:	f002 f8d8 	bl	800367c <WIZCHIP_WRITE>
   getMR(); // for delay
 80014cc:	2000      	movs	r0, #0
 80014ce:	f002 f889 	bl	80035e4 <WIZCHIP_READ>
   default_ip_assign();
 80014d2:	f7ff ffd9 	bl	8001488 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 80014d6:	2206      	movs	r2, #6
 80014d8:	4903      	ldr	r1, [pc, #12]	@ (80014e8 <default_ip_update+0x28>)
 80014da:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80014de:	f002 f97b 	bl	80037d8 <WIZCHIP_WRITE_BUF>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000610 	.word	0x20000610

080014ec <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 80014f0:	2180      	movs	r1, #128	@ 0x80
 80014f2:	2000      	movs	r0, #0
 80014f4:	f002 f8c2 	bl	800367c <WIZCHIP_WRITE>
	getMR(); // for delay
 80014f8:	2000      	movs	r0, #0
 80014fa:	f002 f873 	bl	80035e4 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80014fe:	2206      	movs	r2, #6
 8001500:	4903      	ldr	r1, [pc, #12]	@ (8001510 <default_ip_conflict+0x24>)
 8001502:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001506:	f002 f967 	bl	80037d8 <WIZCHIP_WRITE_BUF>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000610 	.word	0x20000610

08001514 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8001520:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <reg_dhcp_cbfunc+0x50>)
 8001522:	4a11      	ldr	r2, [pc, #68]	@ (8001568 <reg_dhcp_cbfunc+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <reg_dhcp_cbfunc+0x58>)
 8001528:	4a11      	ldr	r2, [pc, #68]	@ (8001570 <reg_dhcp_cbfunc+0x5c>)
 800152a:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <reg_dhcp_cbfunc+0x60>)
 800152e:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <reg_dhcp_cbfunc+0x64>)
 8001530:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <reg_dhcp_cbfunc+0x2a>
 8001538:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <reg_dhcp_cbfunc+0x50>)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <reg_dhcp_cbfunc+0x36>
 8001544:	4a09      	ldr	r2, [pc, #36]	@ (800156c <reg_dhcp_cbfunc+0x58>)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <reg_dhcp_cbfunc+0x42>
 8001550:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <reg_dhcp_cbfunc+0x60>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000028 	.word	0x20000028
 8001568:	08001489 	.word	0x08001489
 800156c:	2000002c 	.word	0x2000002c
 8001570:	080014c1 	.word	0x080014c1
 8001574:	20000030 	.word	0x20000030
 8001578:	080014ed 	.word	0x080014ed

0800157c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8001582:	463b      	mov	r3, r7
 8001584:	2206      	movs	r2, #6
 8001586:	4619      	mov	r1, r3
 8001588:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800158c:	f002 f8c4 	bl	8003718 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001590:	4b72      	ldr	r3, [pc, #456]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001598:	4b70      	ldr	r3, [pc, #448]	@ (800175c <makeDHCPMSG+0x1e0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2201      	movs	r2, #1
 800159e:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 80015a0:	4b6e      	ldr	r3, [pc, #440]	@ (800175c <makeDHCPMSG+0x1e0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2206      	movs	r2, #6
 80015a6:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 80015a8:	4b6c      	ldr	r3, [pc, #432]	@ (800175c <makeDHCPMSG+0x1e0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2200      	movs	r2, #0
 80015ae:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 80015b0:	4b6a      	ldr	r3, [pc, #424]	@ (800175c <makeDHCPMSG+0x1e0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3304      	adds	r3, #4
 80015b6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80015b8:	4b69      	ldr	r3, [pc, #420]	@ (8001760 <makeDHCPMSG+0x1e4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0e1b      	lsrs	r3, r3, #24
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80015c4:	4b66      	ldr	r3, [pc, #408]	@ (8001760 <makeDHCPMSG+0x1e4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0c1a      	lsrs	r2, r3, #16
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80015d2:	4b63      	ldr	r3, [pc, #396]	@ (8001760 <makeDHCPMSG+0x1e4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0a1a      	lsrs	r2, r3, #8
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3302      	adds	r3, #2
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80015e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001760 <makeDHCPMSG+0x1e4>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	3303      	adds	r3, #3
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80015ec:	4b5b      	ldr	r3, [pc, #364]	@ (800175c <makeDHCPMSG+0x1e0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2200      	movs	r2, #0
 80015f2:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80015f4:	4b59      	ldr	r3, [pc, #356]	@ (800175c <makeDHCPMSG+0x1e0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	330a      	adds	r3, #10
 80015fa:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2280      	movs	r2, #128	@ 0x80
 8001600:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	3301      	adds	r3, #1
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 800160a:	4b54      	ldr	r3, [pc, #336]	@ (800175c <makeDHCPMSG+0x1e0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8001612:	4b52      	ldr	r3, [pc, #328]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2200      	movs	r2, #0
 8001618:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 800161a:	4b50      	ldr	r3, [pc, #320]	@ (800175c <makeDHCPMSG+0x1e0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2200      	movs	r2, #0
 8001620:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8001622:	4b4e      	ldr	r3, [pc, #312]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 800162a:	4b4c      	ldr	r3, [pc, #304]	@ (800175c <makeDHCPMSG+0x1e0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8001632:	4b4a      	ldr	r3, [pc, #296]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 800163a:	4b48      	ldr	r3, [pc, #288]	@ (800175c <makeDHCPMSG+0x1e0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8001642:	4b46      	ldr	r3, [pc, #280]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 800164a:	4b44      	ldr	r3, [pc, #272]	@ (800175c <makeDHCPMSG+0x1e0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8001652:	4b42      	ldr	r3, [pc, #264]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 800165a:	4b40      	ldr	r3, [pc, #256]	@ (800175c <makeDHCPMSG+0x1e0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2200      	movs	r2, #0
 8001660:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8001662:	4b3e      	ldr	r3, [pc, #248]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 800166a:	4b3c      	ldr	r3, [pc, #240]	@ (800175c <makeDHCPMSG+0x1e0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8001672:	4b3a      	ldr	r3, [pc, #232]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 800167a:	4b38      	ldr	r3, [pc, #224]	@ (800175c <makeDHCPMSG+0x1e0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8001682:	4b36      	ldr	r3, [pc, #216]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 800168a:	4b34      	ldr	r3, [pc, #208]	@ (800175c <makeDHCPMSG+0x1e0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a35      	ldr	r2, [pc, #212]	@ (8001764 <makeDHCPMSG+0x1e8>)
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8001694:	4b31      	ldr	r3, [pc, #196]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a32      	ldr	r2, [pc, #200]	@ (8001764 <makeDHCPMSG+0x1e8>)
 800169a:	7852      	ldrb	r2, [r2, #1]
 800169c:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800169e:	4b2f      	ldr	r3, [pc, #188]	@ (800175c <makeDHCPMSG+0x1e0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a30      	ldr	r2, [pc, #192]	@ (8001764 <makeDHCPMSG+0x1e8>)
 80016a4:	7892      	ldrb	r2, [r2, #2]
 80016a6:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80016a8:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <makeDHCPMSG+0x1e0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001764 <makeDHCPMSG+0x1e8>)
 80016ae:	78d2      	ldrb	r2, [r2, #3]
 80016b0:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80016b2:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <makeDHCPMSG+0x1e0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001764 <makeDHCPMSG+0x1e8>)
 80016b8:	7912      	ldrb	r2, [r2, #4]
 80016ba:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80016be:	4b27      	ldr	r3, [pc, #156]	@ (800175c <makeDHCPMSG+0x1e0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a28      	ldr	r2, [pc, #160]	@ (8001764 <makeDHCPMSG+0x1e8>)
 80016c4:	7952      	ldrb	r2, [r2, #5]
 80016c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80016ca:	2306      	movs	r3, #6
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e008      	b.n	80016e2 <makeDHCPMSG+0x166>
 80016d0:	4b22      	ldr	r3, [pc, #136]	@ (800175c <makeDHCPMSG+0x1e0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	4413      	add	r3, r2
 80016d8:	2200      	movs	r2, #0
 80016da:	771a      	strb	r2, [r3, #28]
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	3301      	adds	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d9f3      	bls.n	80016d0 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e009      	b.n	8001702 <makeDHCPMSG+0x186>
 80016ee:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <makeDHCPMSG+0x1e0>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	4413      	add	r3, r2
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	3301      	adds	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	2b3f      	cmp	r3, #63	@ 0x3f
 8001706:	d9f2      	bls.n	80016ee <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e009      	b.n	8001722 <makeDHCPMSG+0x1a6>
 800170e:	4b13      	ldr	r3, [pc, #76]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	4413      	add	r3, r2
 8001716:	2200      	movs	r2, #0
 8001718:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	3301      	adds	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	2b00      	cmp	r3, #0
 8001728:	daf1      	bge.n	800170e <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <makeDHCPMSG+0x1e0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2263      	movs	r2, #99	@ 0x63
 8001730:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8001734:	4b09      	ldr	r3, [pc, #36]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2282      	movs	r2, #130	@ 0x82
 800173a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <makeDHCPMSG+0x1e0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2253      	movs	r2, #83	@ 0x53
 8001744:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <makeDHCPMSG+0x1e0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2263      	movs	r2, #99	@ 0x63
 800174e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000060c 	.word	0x2000060c
 8001760:	20000608 	.word	0x20000608
 8001764:	20000610 	.word	0x20000610

08001768 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8001772:	f7ff ff03 	bl	800157c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8001776:	4b56      	ldr	r3, [pc, #344]	@ (80018d0 <send_DHCP_DISCOVER+0x168>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 800177c:	4b54      	ldr	r3, [pc, #336]	@ (80018d0 <send_DHCP_DISCOVER+0x168>)
 800177e:	2200      	movs	r2, #0
 8001780:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8001782:	4b53      	ldr	r3, [pc, #332]	@ (80018d0 <send_DHCP_DISCOVER+0x168>)
 8001784:	2200      	movs	r2, #0
 8001786:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8001788:	4b51      	ldr	r3, [pc, #324]	@ (80018d0 <send_DHCP_DISCOVER+0x168>)
 800178a:	2200      	movs	r2, #0
 800178c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800178e:	4b51      	ldr	r3, [pc, #324]	@ (80018d4 <send_DHCP_DISCOVER+0x16c>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8001794:	4b4f      	ldr	r3, [pc, #316]	@ (80018d4 <send_DHCP_DISCOVER+0x16c>)
 8001796:	2200      	movs	r2, #0
 8001798:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 800179a:	4b4e      	ldr	r3, [pc, #312]	@ (80018d4 <send_DHCP_DISCOVER+0x16c>)
 800179c:	2200      	movs	r2, #0
 800179e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 80017a0:	4b4c      	ldr	r3, [pc, #304]	@ (80018d4 <send_DHCP_DISCOVER+0x16c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 80017a6:	2304      	movs	r3, #4
 80017a8:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80017aa:	4b4b      	ldr	r3, [pc, #300]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	1c59      	adds	r1, r3, #1
 80017b2:	80b9      	strh	r1, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	2235      	movs	r2, #53	@ 0x35
 80017b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80017bc:	4b46      	ldr	r3, [pc, #280]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	1c59      	adds	r1, r3, #1
 80017c4:	80b9      	strh	r1, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80017ce:	4b42      	ldr	r3, [pc, #264]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	1c59      	adds	r1, r3, #1
 80017d6:	80b9      	strh	r1, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80017e0:	4b3d      	ldr	r3, [pc, #244]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	88bb      	ldrh	r3, [r7, #4]
 80017e6:	1c59      	adds	r1, r3, #1
 80017e8:	80b9      	strh	r1, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	223d      	movs	r2, #61	@ 0x3d
 80017ee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80017f2:	4b39      	ldr	r3, [pc, #228]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	1c59      	adds	r1, r3, #1
 80017fa:	80b9      	strh	r1, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	2207      	movs	r2, #7
 8001800:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	1c59      	adds	r1, r3, #1
 800180c:	80b9      	strh	r1, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	2201      	movs	r2, #1
 8001812:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001816:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	1c59      	adds	r1, r3, #1
 800181e:	80b9      	strh	r1, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	4b2e      	ldr	r3, [pc, #184]	@ (80018dc <send_DHCP_DISCOVER+0x174>)
 8001824:	7819      	ldrb	r1, [r3, #0]
 8001826:	1813      	adds	r3, r2, r0
 8001828:	460a      	mov	r2, r1
 800182a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800182e:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	88bb      	ldrh	r3, [r7, #4]
 8001834:	1c59      	adds	r1, r3, #1
 8001836:	80b9      	strh	r1, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <send_DHCP_DISCOVER+0x174>)
 800183c:	7859      	ldrb	r1, [r3, #1]
 800183e:	1813      	adds	r3, r2, r0
 8001840:	460a      	mov	r2, r1
 8001842:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	88bb      	ldrh	r3, [r7, #4]
 800184c:	1c59      	adds	r1, r3, #1
 800184e:	80b9      	strh	r1, [r7, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <send_DHCP_DISCOVER+0x174>)
 8001854:	7899      	ldrb	r1, [r3, #2]
 8001856:	1813      	adds	r3, r2, r0
 8001858:	460a      	mov	r2, r1
 800185a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	1c59      	adds	r1, r3, #1
 8001866:	80b9      	strh	r1, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <send_DHCP_DISCOVER+0x174>)
 800186c:	78d9      	ldrb	r1, [r3, #3]
 800186e:	1813      	adds	r3, r2, r0
 8001870:	460a      	mov	r2, r1
 8001872:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	88bb      	ldrh	r3, [r7, #4]
 800187c:	1c59      	adds	r1, r3, #1
 800187e:	80b9      	strh	r1, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <send_DHCP_DISCOVER+0x174>)
 8001884:	7919      	ldrb	r1, [r3, #4]
 8001886:	1813      	adds	r3, r2, r0
 8001888:	460a      	mov	r2, r1
 800188a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800188e:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	88bb      	ldrh	r3, [r7, #4]
 8001894:	1c59      	adds	r1, r3, #1
 8001896:	80b9      	strh	r1, [r7, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <send_DHCP_DISCOVER+0x174>)
 800189c:	7959      	ldrb	r1, [r3, #5]
 800189e:	1813      	adds	r3, r2, r0
 80018a0:	460a      	mov	r2, r1
 80018a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	88bb      	ldrh	r3, [r7, #4]
 80018ac:	1c59      	adds	r1, r3, #1
 80018ae:	80b9      	strh	r1, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	220c      	movs	r2, #12
 80018b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80018b8:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <send_DHCP_DISCOVER+0x170>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	88bb      	ldrh	r3, [r7, #4]
 80018be:	1c59      	adds	r1, r3, #1
 80018c0:	80b9      	strh	r1, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	e017      	b.n	8001900 <send_DHCP_DISCOVER+0x198>
 80018d0:	200005e4 	.word	0x200005e4
 80018d4:	200005e8 	.word	0x200005e8
 80018d8:	2000060c 	.word	0x2000060c
 80018dc:	20000610 	.word	0x20000610
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80018e0:	88f9      	ldrh	r1, [r7, #6]
 80018e2:	4b80      	ldr	r3, [pc, #512]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	88bb      	ldrh	r3, [r7, #4]
 80018e8:	1c58      	adds	r0, r3, #1
 80018ea:	80b8      	strh	r0, [r7, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	4b7e      	ldr	r3, [pc, #504]	@ (8001ae8 <send_DHCP_DISCOVER+0x380>)
 80018f0:	5c59      	ldrb	r1, [r3, r1]
 80018f2:	1813      	adds	r3, r2, r0
 80018f4:	460a      	mov	r2, r1
 80018f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	3301      	adds	r3, #1
 80018fe:	80fb      	strh	r3, [r7, #6]
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4a79      	ldr	r2, [pc, #484]	@ (8001ae8 <send_DHCP_DISCOVER+0x380>)
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ea      	bne.n	80018e0 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800190a:	4b78      	ldr	r3, [pc, #480]	@ (8001aec <send_DHCP_DISCOVER+0x384>)
 800190c:	78db      	ldrb	r3, [r3, #3]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b74      	ldr	r3, [pc, #464]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001914:	681c      	ldr	r4, [r3, #0]
 8001916:	88bb      	ldrh	r3, [r7, #4]
 8001918:	1c59      	adds	r1, r3, #1
 800191a:	80b9      	strh	r1, [r7, #4]
 800191c:	461d      	mov	r5, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f001 f9a4 	bl	8002c6c <NibbleToHex>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	1963      	adds	r3, r4, r5
 800192a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800192e:	4b6f      	ldr	r3, [pc, #444]	@ (8001aec <send_DHCP_DISCOVER+0x384>)
 8001930:	78da      	ldrb	r2, [r3, #3]
 8001932:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001934:	681c      	ldr	r4, [r3, #0]
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	1c59      	adds	r1, r3, #1
 800193a:	80b9      	strh	r1, [r7, #4]
 800193c:	461d      	mov	r5, r3
 800193e:	4610      	mov	r0, r2
 8001940:	f001 f994 	bl	8002c6c <NibbleToHex>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	1963      	adds	r3, r4, r5
 800194a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800194e:	4b67      	ldr	r3, [pc, #412]	@ (8001aec <send_DHCP_DISCOVER+0x384>)
 8001950:	791b      	ldrb	r3, [r3, #4]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b63      	ldr	r3, [pc, #396]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001958:	681c      	ldr	r4, [r3, #0]
 800195a:	88bb      	ldrh	r3, [r7, #4]
 800195c:	1c59      	adds	r1, r3, #1
 800195e:	80b9      	strh	r1, [r7, #4]
 8001960:	461d      	mov	r5, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f001 f982 	bl	8002c6c <NibbleToHex>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	1963      	adds	r3, r4, r5
 800196e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001972:	4b5e      	ldr	r3, [pc, #376]	@ (8001aec <send_DHCP_DISCOVER+0x384>)
 8001974:	791a      	ldrb	r2, [r3, #4]
 8001976:	4b5b      	ldr	r3, [pc, #364]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001978:	681c      	ldr	r4, [r3, #0]
 800197a:	88bb      	ldrh	r3, [r7, #4]
 800197c:	1c59      	adds	r1, r3, #1
 800197e:	80b9      	strh	r1, [r7, #4]
 8001980:	461d      	mov	r5, r3
 8001982:	4610      	mov	r0, r2
 8001984:	f001 f972 	bl	8002c6c <NibbleToHex>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	1963      	adds	r3, r4, r5
 800198e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001992:	4b56      	ldr	r3, [pc, #344]	@ (8001aec <send_DHCP_DISCOVER+0x384>)
 8001994:	795b      	ldrb	r3, [r3, #5]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b52      	ldr	r3, [pc, #328]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 800199c:	681c      	ldr	r4, [r3, #0]
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	1c59      	adds	r1, r3, #1
 80019a2:	80b9      	strh	r1, [r7, #4]
 80019a4:	461d      	mov	r5, r3
 80019a6:	4610      	mov	r0, r2
 80019a8:	f001 f960 	bl	8002c6c <NibbleToHex>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	1963      	adds	r3, r4, r5
 80019b2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80019b6:	4b4d      	ldr	r3, [pc, #308]	@ (8001aec <send_DHCP_DISCOVER+0x384>)
 80019b8:	795a      	ldrb	r2, [r3, #5]
 80019ba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 80019bc:	681c      	ldr	r4, [r3, #0]
 80019be:	88bb      	ldrh	r3, [r7, #4]
 80019c0:	1c59      	adds	r1, r3, #1
 80019c2:	80b9      	strh	r1, [r7, #4]
 80019c4:	461d      	mov	r5, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f001 f950 	bl	8002c6c <NibbleToHex>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	1963      	adds	r3, r4, r5
 80019d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	b2d9      	uxtb	r1, r3
 80019da:	4b42      	ldr	r3, [pc, #264]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	88b8      	ldrh	r0, [r7, #4]
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	3307      	adds	r3, #7
 80019e4:	1ac3      	subs	r3, r0, r3
 80019e6:	3106      	adds	r1, #6
 80019e8:	b2c9      	uxtb	r1, r1
 80019ea:	4413      	add	r3, r2
 80019ec:	460a      	mov	r2, r1
 80019ee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80019f2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	88bb      	ldrh	r3, [r7, #4]
 80019f8:	1c59      	adds	r1, r3, #1
 80019fa:	80b9      	strh	r1, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	2237      	movs	r2, #55	@ 0x37
 8001a00:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001a04:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	1c59      	adds	r1, r3, #1
 8001a0c:	80b9      	strh	r1, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	2206      	movs	r2, #6
 8001a12:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001a16:	4b33      	ldr	r3, [pc, #204]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	88bb      	ldrh	r3, [r7, #4]
 8001a1c:	1c59      	adds	r1, r3, #1
 8001a1e:	80b9      	strh	r1, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001a28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	88bb      	ldrh	r3, [r7, #4]
 8001a2e:	1c59      	adds	r1, r3, #1
 8001a30:	80b9      	strh	r1, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	2203      	movs	r2, #3
 8001a36:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	1c59      	adds	r1, r3, #1
 8001a42:	80b9      	strh	r1, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	2206      	movs	r2, #6
 8001a48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001a4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	88bb      	ldrh	r3, [r7, #4]
 8001a52:	1c59      	adds	r1, r3, #1
 8001a54:	80b9      	strh	r1, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	88bb      	ldrh	r3, [r7, #4]
 8001a64:	1c59      	adds	r1, r3, #1
 8001a66:	80b9      	strh	r1, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	223a      	movs	r2, #58	@ 0x3a
 8001a6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001a70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	1c59      	adds	r1, r3, #1
 8001a78:	80b9      	strh	r1, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	223b      	movs	r2, #59	@ 0x3b
 8001a7e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001a82:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	88bb      	ldrh	r3, [r7, #4]
 8001a88:	1c59      	adds	r1, r3, #1
 8001a8a:	80b9      	strh	r1, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	22ff      	movs	r2, #255	@ 0xff
 8001a90:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001a94:	88bb      	ldrh	r3, [r7, #4]
 8001a96:	80fb      	strh	r3, [r7, #6]
 8001a98:	e009      	b.n	8001aae <send_DHCP_DISCOVER+0x346>
 8001a9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	80fb      	strh	r3, [r7, #6]
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001ab4:	d3f1      	bcc.n	8001a9a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8001ab6:	23ff      	movs	r3, #255	@ 0xff
 8001ab8:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001aba:	23ff      	movs	r3, #255	@ 0xff
 8001abc:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8001abe:	23ff      	movs	r3, #255	@ 0xff
 8001ac0:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8001ac2:	23ff      	movs	r3, #255	@ 0xff
 8001ac4:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <send_DHCP_DISCOVER+0x388>)
 8001ac8:	7818      	ldrb	r0, [r3, #0]
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <send_DHCP_DISCOVER+0x37c>)
 8001acc:	6819      	ldr	r1, [r3, #0]
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2243      	movs	r2, #67	@ 0x43
 8001ad2:	9200      	str	r2, [sp, #0]
 8001ad4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001ad8:	f001 fa64 	bl	8002fa4 <sendto>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae4:	2000060c 	.word	0x2000060c
 8001ae8:	20000020 	.word	0x20000020
 8001aec:	20000610 	.word	0x20000610
 8001af0:	200005e1 	.word	0x200005e1

08001af4 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001afe:	f7ff fd3d 	bl	800157c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001b02:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <send_DHCP_REQUEST+0x7c>)
 8001b04:	f993 3000 	ldrsb.w	r3, [r3]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d004      	beq.n	8001b16 <send_DHCP_REQUEST+0x22>
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <send_DHCP_REQUEST+0x7c>)
 8001b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d134      	bne.n	8001b80 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <send_DHCP_REQUEST+0x80>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	330a      	adds	r3, #10
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001b20:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <send_DHCP_REQUEST+0x80>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	330a      	adds	r3, #10
 8001b26:	3301      	adds	r3, #1
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <send_DHCP_REQUEST+0x80>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a11      	ldr	r2, [pc, #68]	@ (8001b78 <send_DHCP_REQUEST+0x84>)
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <send_DHCP_REQUEST+0x80>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b78 <send_DHCP_REQUEST+0x84>)
 8001b3c:	7852      	ldrb	r2, [r2, #1]
 8001b3e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <send_DHCP_REQUEST+0x80>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0c      	ldr	r2, [pc, #48]	@ (8001b78 <send_DHCP_REQUEST+0x84>)
 8001b46:	7892      	ldrb	r2, [r2, #2]
 8001b48:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <send_DHCP_REQUEST+0x80>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <send_DHCP_REQUEST+0x84>)
 8001b50:	78d2      	ldrb	r2, [r2, #3]
 8001b52:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <send_DHCP_REQUEST+0x88>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8001b5a:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <send_DHCP_REQUEST+0x88>)
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <send_DHCP_REQUEST+0x88>)
 8001b62:	789b      	ldrb	r3, [r3, #2]
 8001b64:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8001b66:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <send_DHCP_REQUEST+0x88>)
 8001b68:	78db      	ldrb	r3, [r3, #3]
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	e010      	b.n	8001b90 <send_DHCP_REQUEST+0x9c>
 8001b6e:	bf00      	nop
 8001b70:	20000600 	.word	0x20000600
 8001b74:	2000060c 	.word	0x2000060c
 8001b78:	200005f0 	.word	0x200005f0
 8001b7c:	200005e4 	.word	0x200005e4
   }
   else
   {
   	ip[0] = 255;
 8001b80:	23ff      	movs	r3, #255	@ 0xff
 8001b82:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8001b84:	23ff      	movs	r3, #255	@ 0xff
 8001b86:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001b88:	23ff      	movs	r3, #255	@ 0xff
 8001b8a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001b8c:	23ff      	movs	r3, #255	@ 0xff
 8001b8e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001b90:	2304      	movs	r3, #4
 8001b92:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001b94:	4b8d      	ldr	r3, [pc, #564]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	897b      	ldrh	r3, [r7, #10]
 8001b9a:	1c59      	adds	r1, r3, #1
 8001b9c:	8179      	strh	r1, [r7, #10]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2235      	movs	r2, #53	@ 0x35
 8001ba2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001ba6:	4b89      	ldr	r3, [pc, #548]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	897b      	ldrh	r3, [r7, #10]
 8001bac:	1c59      	adds	r1, r3, #1
 8001bae:	8179      	strh	r1, [r7, #10]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001bb8:	4b84      	ldr	r3, [pc, #528]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	897b      	ldrh	r3, [r7, #10]
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	8179      	strh	r1, [r7, #10]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001bca:	4b80      	ldr	r3, [pc, #512]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	897b      	ldrh	r3, [r7, #10]
 8001bd0:	1c59      	adds	r1, r3, #1
 8001bd2:	8179      	strh	r1, [r7, #10]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	223d      	movs	r2, #61	@ 0x3d
 8001bd8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001bdc:	4b7b      	ldr	r3, [pc, #492]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	897b      	ldrh	r3, [r7, #10]
 8001be2:	1c59      	adds	r1, r3, #1
 8001be4:	8179      	strh	r1, [r7, #10]
 8001be6:	4413      	add	r3, r2
 8001be8:	2207      	movs	r2, #7
 8001bea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001bee:	4b77      	ldr	r3, [pc, #476]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	1c59      	adds	r1, r3, #1
 8001bf6:	8179      	strh	r1, [r7, #10]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001c00:	4b72      	ldr	r3, [pc, #456]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	897b      	ldrh	r3, [r7, #10]
 8001c06:	1c59      	adds	r1, r3, #1
 8001c08:	8179      	strh	r1, [r7, #10]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4b70      	ldr	r3, [pc, #448]	@ (8001dd0 <send_DHCP_REQUEST+0x2dc>)
 8001c0e:	7819      	ldrb	r1, [r3, #0]
 8001c10:	1813      	adds	r3, r2, r0
 8001c12:	460a      	mov	r2, r1
 8001c14:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001c18:	4b6c      	ldr	r3, [pc, #432]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	897b      	ldrh	r3, [r7, #10]
 8001c1e:	1c59      	adds	r1, r3, #1
 8001c20:	8179      	strh	r1, [r7, #10]
 8001c22:	4618      	mov	r0, r3
 8001c24:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd0 <send_DHCP_REQUEST+0x2dc>)
 8001c26:	7859      	ldrb	r1, [r3, #1]
 8001c28:	1813      	adds	r3, r2, r0
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001c30:	4b66      	ldr	r3, [pc, #408]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	8179      	strh	r1, [r7, #10]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4b64      	ldr	r3, [pc, #400]	@ (8001dd0 <send_DHCP_REQUEST+0x2dc>)
 8001c3e:	7899      	ldrb	r1, [r3, #2]
 8001c40:	1813      	adds	r3, r2, r0
 8001c42:	460a      	mov	r2, r1
 8001c44:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001c48:	4b60      	ldr	r3, [pc, #384]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	897b      	ldrh	r3, [r7, #10]
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	8179      	strh	r1, [r7, #10]
 8001c52:	4618      	mov	r0, r3
 8001c54:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd0 <send_DHCP_REQUEST+0x2dc>)
 8001c56:	78d9      	ldrb	r1, [r3, #3]
 8001c58:	1813      	adds	r3, r2, r0
 8001c5a:	460a      	mov	r2, r1
 8001c5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001c60:	4b5a      	ldr	r3, [pc, #360]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	897b      	ldrh	r3, [r7, #10]
 8001c66:	1c59      	adds	r1, r3, #1
 8001c68:	8179      	strh	r1, [r7, #10]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4b58      	ldr	r3, [pc, #352]	@ (8001dd0 <send_DHCP_REQUEST+0x2dc>)
 8001c6e:	7919      	ldrb	r1, [r3, #4]
 8001c70:	1813      	adds	r3, r2, r0
 8001c72:	460a      	mov	r2, r1
 8001c74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001c78:	4b54      	ldr	r3, [pc, #336]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	897b      	ldrh	r3, [r7, #10]
 8001c7e:	1c59      	adds	r1, r3, #1
 8001c80:	8179      	strh	r1, [r7, #10]
 8001c82:	4618      	mov	r0, r3
 8001c84:	4b52      	ldr	r3, [pc, #328]	@ (8001dd0 <send_DHCP_REQUEST+0x2dc>)
 8001c86:	7959      	ldrb	r1, [r3, #5]
 8001c88:	1813      	adds	r3, r2, r0
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2bff      	cmp	r3, #255	@ 0xff
 8001c94:	f040 8084 	bne.w	8001da0 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001c98:	4b4c      	ldr	r3, [pc, #304]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	897b      	ldrh	r3, [r7, #10]
 8001c9e:	1c59      	adds	r1, r3, #1
 8001ca0:	8179      	strh	r1, [r7, #10]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2232      	movs	r2, #50	@ 0x32
 8001ca6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001caa:	4b48      	ldr	r3, [pc, #288]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	897b      	ldrh	r3, [r7, #10]
 8001cb0:	1c59      	adds	r1, r3, #1
 8001cb2:	8179      	strh	r1, [r7, #10]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001cbc:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	897b      	ldrh	r3, [r7, #10]
 8001cc2:	1c59      	adds	r1, r3, #1
 8001cc4:	8179      	strh	r1, [r7, #10]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	4b42      	ldr	r3, [pc, #264]	@ (8001dd4 <send_DHCP_REQUEST+0x2e0>)
 8001cca:	7819      	ldrb	r1, [r3, #0]
 8001ccc:	1813      	adds	r3, r2, r0
 8001cce:	460a      	mov	r2, r1
 8001cd0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	897b      	ldrh	r3, [r7, #10]
 8001cda:	1c59      	adds	r1, r3, #1
 8001cdc:	8179      	strh	r1, [r7, #10]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd4 <send_DHCP_REQUEST+0x2e0>)
 8001ce2:	7859      	ldrb	r1, [r3, #1]
 8001ce4:	1813      	adds	r3, r2, r0
 8001ce6:	460a      	mov	r2, r1
 8001ce8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001cec:	4b37      	ldr	r3, [pc, #220]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	1c59      	adds	r1, r3, #1
 8001cf4:	8179      	strh	r1, [r7, #10]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <send_DHCP_REQUEST+0x2e0>)
 8001cfa:	7899      	ldrb	r1, [r3, #2]
 8001cfc:	1813      	adds	r3, r2, r0
 8001cfe:	460a      	mov	r2, r1
 8001d00:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001d04:	4b31      	ldr	r3, [pc, #196]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	1c59      	adds	r1, r3, #1
 8001d0c:	8179      	strh	r1, [r7, #10]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <send_DHCP_REQUEST+0x2e0>)
 8001d12:	78d9      	ldrb	r1, [r3, #3]
 8001d14:	1813      	adds	r3, r2, r0
 8001d16:	460a      	mov	r2, r1
 8001d18:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	1c59      	adds	r1, r3, #1
 8001d24:	8179      	strh	r1, [r7, #10]
 8001d26:	4413      	add	r3, r2
 8001d28:	2236      	movs	r2, #54	@ 0x36
 8001d2a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001d2e:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	897b      	ldrh	r3, [r7, #10]
 8001d34:	1c59      	adds	r1, r3, #1
 8001d36:	8179      	strh	r1, [r7, #10]
 8001d38:	4413      	add	r3, r2
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001d40:	4b22      	ldr	r3, [pc, #136]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	897b      	ldrh	r3, [r7, #10]
 8001d46:	1c59      	adds	r1, r3, #1
 8001d48:	8179      	strh	r1, [r7, #10]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <send_DHCP_REQUEST+0x2e4>)
 8001d4e:	7819      	ldrb	r1, [r3, #0]
 8001d50:	1813      	adds	r3, r2, r0
 8001d52:	460a      	mov	r2, r1
 8001d54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001d58:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	897b      	ldrh	r3, [r7, #10]
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	8179      	strh	r1, [r7, #10]
 8001d62:	4618      	mov	r0, r3
 8001d64:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <send_DHCP_REQUEST+0x2e4>)
 8001d66:	7859      	ldrb	r1, [r3, #1]
 8001d68:	1813      	adds	r3, r2, r0
 8001d6a:	460a      	mov	r2, r1
 8001d6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	897b      	ldrh	r3, [r7, #10]
 8001d76:	1c59      	adds	r1, r3, #1
 8001d78:	8179      	strh	r1, [r7, #10]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <send_DHCP_REQUEST+0x2e4>)
 8001d7e:	7899      	ldrb	r1, [r3, #2]
 8001d80:	1813      	adds	r3, r2, r0
 8001d82:	460a      	mov	r2, r1
 8001d84:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001d88:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	897b      	ldrh	r3, [r7, #10]
 8001d8e:	1c59      	adds	r1, r3, #1
 8001d90:	8179      	strh	r1, [r7, #10]
 8001d92:	4618      	mov	r0, r3
 8001d94:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <send_DHCP_REQUEST+0x2e4>)
 8001d96:	78d9      	ldrb	r1, [r3, #3]
 8001d98:	1813      	adds	r3, r2, r0
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	897b      	ldrh	r3, [r7, #10]
 8001da6:	1c59      	adds	r1, r3, #1
 8001da8:	8179      	strh	r1, [r7, #10]
 8001daa:	4413      	add	r3, r2
 8001dac:	220c      	movs	r2, #12
 8001dae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <send_DHCP_REQUEST+0x2d8>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	897b      	ldrh	r3, [r7, #10]
 8001db8:	1c59      	adds	r1, r3, #1
 8001dba:	8179      	strh	r1, [r7, #10]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e019      	b.n	8001dfe <send_DHCP_REQUEST+0x30a>
 8001dca:	bf00      	nop
 8001dcc:	2000060c 	.word	0x2000060c
 8001dd0:	20000610 	.word	0x20000610
 8001dd4:	200005f0 	.word	0x200005f0
 8001dd8:	200005e4 	.word	0x200005e4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001ddc:	4b86      	ldr	r3, [pc, #536]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	897b      	ldrh	r3, [r7, #10]
 8001de2:	1c59      	adds	r1, r3, #1
 8001de4:	8179      	strh	r1, [r7, #10]
 8001de6:	4618      	mov	r0, r3
 8001de8:	4984      	ldr	r1, [pc, #528]	@ (8001ffc <send_DHCP_REQUEST+0x508>)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	440b      	add	r3, r1
 8001dee:	7819      	ldrb	r1, [r3, #0]
 8001df0:	1813      	adds	r3, r2, r0
 8001df2:	460a      	mov	r2, r1
 8001df4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4a7f      	ldr	r2, [pc, #508]	@ (8001ffc <send_DHCP_REQUEST+0x508>)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1e8      	bne.n	8001ddc <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001e0a:	4b7d      	ldr	r3, [pc, #500]	@ (8002000 <send_DHCP_REQUEST+0x50c>)
 8001e0c:	78db      	ldrb	r3, [r3, #3]
 8001e0e:	091b      	lsrs	r3, r3, #4
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b79      	ldr	r3, [pc, #484]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001e14:	681c      	ldr	r4, [r3, #0]
 8001e16:	897b      	ldrh	r3, [r7, #10]
 8001e18:	1c59      	adds	r1, r3, #1
 8001e1a:	8179      	strh	r1, [r7, #10]
 8001e1c:	461d      	mov	r5, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f000 ff24 	bl	8002c6c <NibbleToHex>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	1963      	adds	r3, r4, r5
 8001e2a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001e2e:	4b74      	ldr	r3, [pc, #464]	@ (8002000 <send_DHCP_REQUEST+0x50c>)
 8001e30:	78da      	ldrb	r2, [r3, #3]
 8001e32:	4b71      	ldr	r3, [pc, #452]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001e34:	681c      	ldr	r4, [r3, #0]
 8001e36:	897b      	ldrh	r3, [r7, #10]
 8001e38:	1c59      	adds	r1, r3, #1
 8001e3a:	8179      	strh	r1, [r7, #10]
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f000 ff14 	bl	8002c6c <NibbleToHex>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	1963      	adds	r3, r4, r5
 8001e4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001e4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002000 <send_DHCP_REQUEST+0x50c>)
 8001e50:	791b      	ldrb	r3, [r3, #4]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b68      	ldr	r3, [pc, #416]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001e58:	681c      	ldr	r4, [r3, #0]
 8001e5a:	897b      	ldrh	r3, [r7, #10]
 8001e5c:	1c59      	adds	r1, r3, #1
 8001e5e:	8179      	strh	r1, [r7, #10]
 8001e60:	461d      	mov	r5, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f000 ff02 	bl	8002c6c <NibbleToHex>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	1963      	adds	r3, r4, r5
 8001e6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001e72:	4b63      	ldr	r3, [pc, #396]	@ (8002000 <send_DHCP_REQUEST+0x50c>)
 8001e74:	791a      	ldrb	r2, [r3, #4]
 8001e76:	4b60      	ldr	r3, [pc, #384]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001e78:	681c      	ldr	r4, [r3, #0]
 8001e7a:	897b      	ldrh	r3, [r7, #10]
 8001e7c:	1c59      	adds	r1, r3, #1
 8001e7e:	8179      	strh	r1, [r7, #10]
 8001e80:	461d      	mov	r5, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f000 fef2 	bl	8002c6c <NibbleToHex>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	1963      	adds	r3, r4, r5
 8001e8e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001e92:	4b5b      	ldr	r3, [pc, #364]	@ (8002000 <send_DHCP_REQUEST+0x50c>)
 8001e94:	795b      	ldrb	r3, [r3, #5]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b57      	ldr	r3, [pc, #348]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001e9c:	681c      	ldr	r4, [r3, #0]
 8001e9e:	897b      	ldrh	r3, [r7, #10]
 8001ea0:	1c59      	adds	r1, r3, #1
 8001ea2:	8179      	strh	r1, [r7, #10]
 8001ea4:	461d      	mov	r5, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 fee0 	bl	8002c6c <NibbleToHex>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	1963      	adds	r3, r4, r5
 8001eb2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001eb6:	4b52      	ldr	r3, [pc, #328]	@ (8002000 <send_DHCP_REQUEST+0x50c>)
 8001eb8:	795a      	ldrb	r2, [r3, #5]
 8001eba:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001ebc:	681c      	ldr	r4, [r3, #0]
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	1c59      	adds	r1, r3, #1
 8001ec2:	8179      	strh	r1, [r7, #10]
 8001ec4:	461d      	mov	r5, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f000 fed0 	bl	8002c6c <NibbleToHex>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	1963      	adds	r3, r4, r5
 8001ed2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	b2d9      	uxtb	r1, r3
 8001eda:	4b47      	ldr	r3, [pc, #284]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	8978      	ldrh	r0, [r7, #10]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3307      	adds	r3, #7
 8001ee4:	1ac3      	subs	r3, r0, r3
 8001ee6:	3106      	adds	r1, #6
 8001ee8:	b2c9      	uxtb	r1, r1
 8001eea:	4413      	add	r3, r2
 8001eec:	460a      	mov	r2, r1
 8001eee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001ef2:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	1c59      	adds	r1, r3, #1
 8001efa:	8179      	strh	r1, [r7, #10]
 8001efc:	4413      	add	r3, r2
 8001efe:	2237      	movs	r2, #55	@ 0x37
 8001f00:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001f04:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	897b      	ldrh	r3, [r7, #10]
 8001f0a:	1c59      	adds	r1, r3, #1
 8001f0c:	8179      	strh	r1, [r7, #10]
 8001f0e:	4413      	add	r3, r2
 8001f10:	2208      	movs	r2, #8
 8001f12:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	1c59      	adds	r1, r3, #1
 8001f1e:	8179      	strh	r1, [r7, #10]
 8001f20:	4413      	add	r3, r2
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001f28:	4b33      	ldr	r3, [pc, #204]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	897b      	ldrh	r3, [r7, #10]
 8001f2e:	1c59      	adds	r1, r3, #1
 8001f30:	8179      	strh	r1, [r7, #10]
 8001f32:	4413      	add	r3, r2
 8001f34:	2203      	movs	r2, #3
 8001f36:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	897b      	ldrh	r3, [r7, #10]
 8001f40:	1c59      	adds	r1, r3, #1
 8001f42:	8179      	strh	r1, [r7, #10]
 8001f44:	4413      	add	r3, r2
 8001f46:	2206      	movs	r2, #6
 8001f48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	897b      	ldrh	r3, [r7, #10]
 8001f52:	1c59      	adds	r1, r3, #1
 8001f54:	8179      	strh	r1, [r7, #10]
 8001f56:	4413      	add	r3, r2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001f5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	897b      	ldrh	r3, [r7, #10]
 8001f64:	1c59      	adds	r1, r3, #1
 8001f66:	8179      	strh	r1, [r7, #10]
 8001f68:	4413      	add	r3, r2
 8001f6a:	223a      	movs	r2, #58	@ 0x3a
 8001f6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001f70:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	897b      	ldrh	r3, [r7, #10]
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	8179      	strh	r1, [r7, #10]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	223b      	movs	r2, #59	@ 0x3b
 8001f7e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001f82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	897b      	ldrh	r3, [r7, #10]
 8001f88:	1c59      	adds	r1, r3, #1
 8001f8a:	8179      	strh	r1, [r7, #10]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	221f      	movs	r2, #31
 8001f90:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001f94:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	897b      	ldrh	r3, [r7, #10]
 8001f9a:	1c59      	adds	r1, r3, #1
 8001f9c:	8179      	strh	r1, [r7, #10]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	2221      	movs	r2, #33	@ 0x21
 8001fa2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	897b      	ldrh	r3, [r7, #10]
 8001fac:	1c59      	adds	r1, r3, #1
 8001fae:	8179      	strh	r1, [r7, #10]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	22ff      	movs	r2, #255	@ 0xff
 8001fb4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001fb8:	897b      	ldrh	r3, [r7, #10]
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e009      	b.n	8001fd2 <send_DHCP_REQUEST+0x4de>
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	33ec      	adds	r3, #236	@ 0xec
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001fd8:	dbf1      	blt.n	8001fbe <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <send_DHCP_REQUEST+0x510>)
 8001fdc:	7818      	ldrb	r0, [r3, #0]
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <send_DHCP_REQUEST+0x504>)
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2243      	movs	r2, #67	@ 0x43
 8001fe6:	9200      	str	r2, [sp, #0]
 8001fe8:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001fec:	f000 ffda 	bl	8002fa4 <sendto>

}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff8:	2000060c 	.word	0x2000060c
 8001ffc:	20000020 	.word	0x20000020
 8002000:	20000610 	.word	0x20000610
 8002004:	200005e1 	.word	0x200005e1

08002008 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8002012:	f7ff fab3 	bl	800157c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002016:	2304      	movs	r3, #4
 8002018:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800201a:	4b9f      	ldr	r3, [pc, #636]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	330a      	adds	r3, #10
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8002024:	4b9c      	ldr	r3, [pc, #624]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	330a      	adds	r3, #10
 800202a:	3301      	adds	r3, #1
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002030:	4b99      	ldr	r3, [pc, #612]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	897b      	ldrh	r3, [r7, #10]
 8002036:	1c59      	adds	r1, r3, #1
 8002038:	8179      	strh	r1, [r7, #10]
 800203a:	4413      	add	r3, r2
 800203c:	2235      	movs	r2, #53	@ 0x35
 800203e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002042:	4b95      	ldr	r3, [pc, #596]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	897b      	ldrh	r3, [r7, #10]
 8002048:	1c59      	adds	r1, r3, #1
 800204a:	8179      	strh	r1, [r7, #10]
 800204c:	4413      	add	r3, r2
 800204e:	2201      	movs	r2, #1
 8002050:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8002054:	4b90      	ldr	r3, [pc, #576]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	897b      	ldrh	r3, [r7, #10]
 800205a:	1c59      	adds	r1, r3, #1
 800205c:	8179      	strh	r1, [r7, #10]
 800205e:	4413      	add	r3, r2
 8002060:	2204      	movs	r2, #4
 8002062:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002066:	4b8c      	ldr	r3, [pc, #560]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	897b      	ldrh	r3, [r7, #10]
 800206c:	1c59      	adds	r1, r3, #1
 800206e:	8179      	strh	r1, [r7, #10]
 8002070:	4413      	add	r3, r2
 8002072:	223d      	movs	r2, #61	@ 0x3d
 8002074:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002078:	4b87      	ldr	r3, [pc, #540]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	897b      	ldrh	r3, [r7, #10]
 800207e:	1c59      	adds	r1, r3, #1
 8002080:	8179      	strh	r1, [r7, #10]
 8002082:	4413      	add	r3, r2
 8002084:	2207      	movs	r2, #7
 8002086:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800208a:	4b83      	ldr	r3, [pc, #524]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	897b      	ldrh	r3, [r7, #10]
 8002090:	1c59      	adds	r1, r3, #1
 8002092:	8179      	strh	r1, [r7, #10]
 8002094:	4413      	add	r3, r2
 8002096:	2201      	movs	r2, #1
 8002098:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800209c:	4b7e      	ldr	r3, [pc, #504]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	897b      	ldrh	r3, [r7, #10]
 80020a2:	1c59      	adds	r1, r3, #1
 80020a4:	8179      	strh	r1, [r7, #10]
 80020a6:	4618      	mov	r0, r3
 80020a8:	4b7c      	ldr	r3, [pc, #496]	@ (800229c <send_DHCP_DECLINE+0x294>)
 80020aa:	7819      	ldrb	r1, [r3, #0]
 80020ac:	1813      	adds	r3, r2, r0
 80020ae:	460a      	mov	r2, r1
 80020b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80020b4:	4b78      	ldr	r3, [pc, #480]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	897b      	ldrh	r3, [r7, #10]
 80020ba:	1c59      	adds	r1, r3, #1
 80020bc:	8179      	strh	r1, [r7, #10]
 80020be:	4618      	mov	r0, r3
 80020c0:	4b76      	ldr	r3, [pc, #472]	@ (800229c <send_DHCP_DECLINE+0x294>)
 80020c2:	7859      	ldrb	r1, [r3, #1]
 80020c4:	1813      	adds	r3, r2, r0
 80020c6:	460a      	mov	r2, r1
 80020c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80020cc:	4b72      	ldr	r3, [pc, #456]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	897b      	ldrh	r3, [r7, #10]
 80020d2:	1c59      	adds	r1, r3, #1
 80020d4:	8179      	strh	r1, [r7, #10]
 80020d6:	4618      	mov	r0, r3
 80020d8:	4b70      	ldr	r3, [pc, #448]	@ (800229c <send_DHCP_DECLINE+0x294>)
 80020da:	7899      	ldrb	r1, [r3, #2]
 80020dc:	1813      	adds	r3, r2, r0
 80020de:	460a      	mov	r2, r1
 80020e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80020e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	897b      	ldrh	r3, [r7, #10]
 80020ea:	1c59      	adds	r1, r3, #1
 80020ec:	8179      	strh	r1, [r7, #10]
 80020ee:	4618      	mov	r0, r3
 80020f0:	4b6a      	ldr	r3, [pc, #424]	@ (800229c <send_DHCP_DECLINE+0x294>)
 80020f2:	78d9      	ldrb	r1, [r3, #3]
 80020f4:	1813      	adds	r3, r2, r0
 80020f6:	460a      	mov	r2, r1
 80020f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80020fc:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	897b      	ldrh	r3, [r7, #10]
 8002102:	1c59      	adds	r1, r3, #1
 8002104:	8179      	strh	r1, [r7, #10]
 8002106:	4618      	mov	r0, r3
 8002108:	4b64      	ldr	r3, [pc, #400]	@ (800229c <send_DHCP_DECLINE+0x294>)
 800210a:	7919      	ldrb	r1, [r3, #4]
 800210c:	1813      	adds	r3, r2, r0
 800210e:	460a      	mov	r2, r1
 8002110:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002114:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	897b      	ldrh	r3, [r7, #10]
 800211a:	1c59      	adds	r1, r3, #1
 800211c:	8179      	strh	r1, [r7, #10]
 800211e:	4618      	mov	r0, r3
 8002120:	4b5e      	ldr	r3, [pc, #376]	@ (800229c <send_DHCP_DECLINE+0x294>)
 8002122:	7959      	ldrb	r1, [r3, #5]
 8002124:	1813      	adds	r3, r2, r0
 8002126:	460a      	mov	r2, r1
 8002128:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800212c:	4b5a      	ldr	r3, [pc, #360]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	897b      	ldrh	r3, [r7, #10]
 8002132:	1c59      	adds	r1, r3, #1
 8002134:	8179      	strh	r1, [r7, #10]
 8002136:	4413      	add	r3, r2
 8002138:	2232      	movs	r2, #50	@ 0x32
 800213a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800213e:	4b56      	ldr	r3, [pc, #344]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	897b      	ldrh	r3, [r7, #10]
 8002144:	1c59      	adds	r1, r3, #1
 8002146:	8179      	strh	r1, [r7, #10]
 8002148:	4413      	add	r3, r2
 800214a:	2204      	movs	r2, #4
 800214c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8002150:	4b51      	ldr	r3, [pc, #324]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	897b      	ldrh	r3, [r7, #10]
 8002156:	1c59      	adds	r1, r3, #1
 8002158:	8179      	strh	r1, [r7, #10]
 800215a:	4618      	mov	r0, r3
 800215c:	4b50      	ldr	r3, [pc, #320]	@ (80022a0 <send_DHCP_DECLINE+0x298>)
 800215e:	7819      	ldrb	r1, [r3, #0]
 8002160:	1813      	adds	r3, r2, r0
 8002162:	460a      	mov	r2, r1
 8002164:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8002168:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	897b      	ldrh	r3, [r7, #10]
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	8179      	strh	r1, [r7, #10]
 8002172:	4618      	mov	r0, r3
 8002174:	4b4a      	ldr	r3, [pc, #296]	@ (80022a0 <send_DHCP_DECLINE+0x298>)
 8002176:	7859      	ldrb	r1, [r3, #1]
 8002178:	1813      	adds	r3, r2, r0
 800217a:	460a      	mov	r2, r1
 800217c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8002180:	4b45      	ldr	r3, [pc, #276]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	897b      	ldrh	r3, [r7, #10]
 8002186:	1c59      	adds	r1, r3, #1
 8002188:	8179      	strh	r1, [r7, #10]
 800218a:	4618      	mov	r0, r3
 800218c:	4b44      	ldr	r3, [pc, #272]	@ (80022a0 <send_DHCP_DECLINE+0x298>)
 800218e:	7899      	ldrb	r1, [r3, #2]
 8002190:	1813      	adds	r3, r2, r0
 8002192:	460a      	mov	r2, r1
 8002194:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8002198:	4b3f      	ldr	r3, [pc, #252]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	897b      	ldrh	r3, [r7, #10]
 800219e:	1c59      	adds	r1, r3, #1
 80021a0:	8179      	strh	r1, [r7, #10]
 80021a2:	4618      	mov	r0, r3
 80021a4:	4b3e      	ldr	r3, [pc, #248]	@ (80022a0 <send_DHCP_DECLINE+0x298>)
 80021a6:	78d9      	ldrb	r1, [r3, #3]
 80021a8:	1813      	adds	r3, r2, r0
 80021aa:	460a      	mov	r2, r1
 80021ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	897b      	ldrh	r3, [r7, #10]
 80021b6:	1c59      	adds	r1, r3, #1
 80021b8:	8179      	strh	r1, [r7, #10]
 80021ba:	4413      	add	r3, r2
 80021bc:	2236      	movs	r2, #54	@ 0x36
 80021be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80021c2:	4b35      	ldr	r3, [pc, #212]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	1c59      	adds	r1, r3, #1
 80021ca:	8179      	strh	r1, [r7, #10]
 80021cc:	4413      	add	r3, r2
 80021ce:	2204      	movs	r2, #4
 80021d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	897b      	ldrh	r3, [r7, #10]
 80021da:	1c59      	adds	r1, r3, #1
 80021dc:	8179      	strh	r1, [r7, #10]
 80021de:	4618      	mov	r0, r3
 80021e0:	4b30      	ldr	r3, [pc, #192]	@ (80022a4 <send_DHCP_DECLINE+0x29c>)
 80021e2:	7819      	ldrb	r1, [r3, #0]
 80021e4:	1813      	adds	r3, r2, r0
 80021e6:	460a      	mov	r2, r1
 80021e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80021ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	897b      	ldrh	r3, [r7, #10]
 80021f2:	1c59      	adds	r1, r3, #1
 80021f4:	8179      	strh	r1, [r7, #10]
 80021f6:	4618      	mov	r0, r3
 80021f8:	4b2a      	ldr	r3, [pc, #168]	@ (80022a4 <send_DHCP_DECLINE+0x29c>)
 80021fa:	7859      	ldrb	r1, [r3, #1]
 80021fc:	1813      	adds	r3, r2, r0
 80021fe:	460a      	mov	r2, r1
 8002200:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8002204:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	897b      	ldrh	r3, [r7, #10]
 800220a:	1c59      	adds	r1, r3, #1
 800220c:	8179      	strh	r1, [r7, #10]
 800220e:	4618      	mov	r0, r3
 8002210:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <send_DHCP_DECLINE+0x29c>)
 8002212:	7899      	ldrb	r1, [r3, #2]
 8002214:	1813      	adds	r3, r2, r0
 8002216:	460a      	mov	r2, r1
 8002218:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800221c:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	897b      	ldrh	r3, [r7, #10]
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	8179      	strh	r1, [r7, #10]
 8002226:	4618      	mov	r0, r3
 8002228:	4b1e      	ldr	r3, [pc, #120]	@ (80022a4 <send_DHCP_DECLINE+0x29c>)
 800222a:	78d9      	ldrb	r1, [r3, #3]
 800222c:	1813      	adds	r3, r2, r0
 800222e:	460a      	mov	r2, r1
 8002230:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8002234:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	897b      	ldrh	r3, [r7, #10]
 800223a:	1c59      	adds	r1, r3, #1
 800223c:	8179      	strh	r1, [r7, #10]
 800223e:	4413      	add	r3, r2
 8002240:	22ff      	movs	r2, #255	@ 0xff
 8002242:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002246:	897b      	ldrh	r3, [r7, #10]
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e009      	b.n	8002260 <send_DHCP_DECLINE+0x258>
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	33ec      	adds	r3, #236	@ 0xec
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002266:	dbf1      	blt.n	800224c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8002268:	23ff      	movs	r3, #255	@ 0xff
 800226a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800226c:	23ff      	movs	r3, #255	@ 0xff
 800226e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8002270:	23ff      	movs	r3, #255	@ 0xff
 8002272:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8002274:	23ff      	movs	r3, #255	@ 0xff
 8002276:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <send_DHCP_DECLINE+0x2a0>)
 800227a:	7818      	ldrb	r0, [r3, #0]
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <send_DHCP_DECLINE+0x290>)
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2243      	movs	r2, #67	@ 0x43
 8002284:	9200      	str	r2, [sp, #0]
 8002286:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800228a:	f000 fe8b 	bl	8002fa4 <sendto>
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000060c 	.word	0x2000060c
 800229c:	20000610 	.word	0x20000610
 80022a0:	200005f0 	.word	0x200005f0
 80022a4:	200005e4 	.word	0x200005e4
 80022a8:	200005e1 	.word	0x200005e1

080022ac <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 80022b6:	4ba1      	ldr	r3, [pc, #644]	@ (800253c <parseDHCPMSG+0x290>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 fb35 	bl	800392a <getSn_RX_RSR>
 80022c0:	4603      	mov	r3, r0
 80022c2:	823b      	strh	r3, [r7, #16]
 80022c4:	8a3b      	ldrh	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d011      	beq.n	80022ee <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 80022ca:	4b9c      	ldr	r3, [pc, #624]	@ (800253c <parseDHCPMSG+0x290>)
 80022cc:	7818      	ldrb	r0, [r3, #0]
 80022ce:	4b9c      	ldr	r3, [pc, #624]	@ (8002540 <parseDHCPMSG+0x294>)
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	1d3c      	adds	r4, r7, #4
 80022d4:	8a3a      	ldrh	r2, [r7, #16]
 80022d6:	1cbb      	adds	r3, r7, #2
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	4623      	mov	r3, r4
 80022dc:	f000 ff96 	bl	800320c <recvfrom>
 80022e0:	4603      	mov	r3, r0
 80022e2:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	2b43      	cmp	r3, #67	@ 0x43
 80022e8:	f040 81ed 	bne.w	80026c6 <parseDHCPMSG+0x41a>
 80022ec:	e001      	b.n	80022f2 <parseDHCPMSG+0x46>
   else return 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e1eb      	b.n	80026ca <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80022f2:	4b93      	ldr	r3, [pc, #588]	@ (8002540 <parseDHCPMSG+0x294>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	7f1a      	ldrb	r2, [r3, #28]
 80022f8:	4b92      	ldr	r3, [pc, #584]	@ (8002544 <parseDHCPMSG+0x298>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d124      	bne.n	800234a <parseDHCPMSG+0x9e>
 8002300:	4b8f      	ldr	r3, [pc, #572]	@ (8002540 <parseDHCPMSG+0x294>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	7f5a      	ldrb	r2, [r3, #29]
 8002306:	4b8f      	ldr	r3, [pc, #572]	@ (8002544 <parseDHCPMSG+0x298>)
 8002308:	785b      	ldrb	r3, [r3, #1]
 800230a:	429a      	cmp	r2, r3
 800230c:	d11d      	bne.n	800234a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800230e:	4b8c      	ldr	r3, [pc, #560]	@ (8002540 <parseDHCPMSG+0x294>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	7f9a      	ldrb	r2, [r3, #30]
 8002314:	4b8b      	ldr	r3, [pc, #556]	@ (8002544 <parseDHCPMSG+0x298>)
 8002316:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d116      	bne.n	800234a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800231c:	4b88      	ldr	r3, [pc, #544]	@ (8002540 <parseDHCPMSG+0x294>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	7fda      	ldrb	r2, [r3, #31]
 8002322:	4b88      	ldr	r3, [pc, #544]	@ (8002544 <parseDHCPMSG+0x298>)
 8002324:	78db      	ldrb	r3, [r3, #3]
 8002326:	429a      	cmp	r2, r3
 8002328:	d10f      	bne.n	800234a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800232a:	4b85      	ldr	r3, [pc, #532]	@ (8002540 <parseDHCPMSG+0x294>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002332:	4b84      	ldr	r3, [pc, #528]	@ (8002544 <parseDHCPMSG+0x298>)
 8002334:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d107      	bne.n	800234a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800233a:	4b81      	ldr	r3, [pc, #516]	@ (8002540 <parseDHCPMSG+0x294>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8002342:	4b80      	ldr	r3, [pc, #512]	@ (8002544 <parseDHCPMSG+0x298>)
 8002344:	795b      	ldrb	r3, [r3, #5]
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 800234a:	2300      	movs	r3, #0
 800234c:	e1bd      	b.n	80026ca <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 800234e:	4b7e      	ldr	r3, [pc, #504]	@ (8002548 <parseDHCPMSG+0x29c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10b      	bne.n	800236e <parseDHCPMSG+0xc2>
 8002356:	4b7c      	ldr	r3, [pc, #496]	@ (8002548 <parseDHCPMSG+0x29c>)
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d107      	bne.n	800236e <parseDHCPMSG+0xc2>
 800235e:	4b7a      	ldr	r3, [pc, #488]	@ (8002548 <parseDHCPMSG+0x29c>)
 8002360:	789b      	ldrb	r3, [r3, #2]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <parseDHCPMSG+0xc2>
 8002366:	4b78      	ldr	r3, [pc, #480]	@ (8002548 <parseDHCPMSG+0x29c>)
 8002368:	78db      	ldrb	r3, [r3, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d029      	beq.n	80023c2 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800236e:	793a      	ldrb	r2, [r7, #4]
 8002370:	4b75      	ldr	r3, [pc, #468]	@ (8002548 <parseDHCPMSG+0x29c>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d10e      	bne.n	8002396 <parseDHCPMSG+0xea>
 8002378:	797a      	ldrb	r2, [r7, #5]
 800237a:	4b73      	ldr	r3, [pc, #460]	@ (8002548 <parseDHCPMSG+0x29c>)
 800237c:	785b      	ldrb	r3, [r3, #1]
 800237e:	429a      	cmp	r2, r3
 8002380:	d109      	bne.n	8002396 <parseDHCPMSG+0xea>
 8002382:	79ba      	ldrb	r2, [r7, #6]
 8002384:	4b70      	ldr	r3, [pc, #448]	@ (8002548 <parseDHCPMSG+0x29c>)
 8002386:	789b      	ldrb	r3, [r3, #2]
 8002388:	429a      	cmp	r2, r3
 800238a:	d104      	bne.n	8002396 <parseDHCPMSG+0xea>
 800238c:	79fa      	ldrb	r2, [r7, #7]
 800238e:	4b6e      	ldr	r3, [pc, #440]	@ (8002548 <parseDHCPMSG+0x29c>)
 8002390:	78db      	ldrb	r3, [r3, #3]
 8002392:	429a      	cmp	r2, r3
 8002394:	d015      	beq.n	80023c2 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002396:	793a      	ldrb	r2, [r7, #4]
 8002398:	4b6c      	ldr	r3, [pc, #432]	@ (800254c <parseDHCPMSG+0x2a0>)
 800239a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800239c:	429a      	cmp	r2, r3
 800239e:	d10e      	bne.n	80023be <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 80023a0:	797a      	ldrb	r2, [r7, #5]
 80023a2:	4b6a      	ldr	r3, [pc, #424]	@ (800254c <parseDHCPMSG+0x2a0>)
 80023a4:	785b      	ldrb	r3, [r3, #1]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d109      	bne.n	80023be <parseDHCPMSG+0x112>
 80023aa:	79ba      	ldrb	r2, [r7, #6]
 80023ac:	4b67      	ldr	r3, [pc, #412]	@ (800254c <parseDHCPMSG+0x2a0>)
 80023ae:	789b      	ldrb	r3, [r3, #2]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d104      	bne.n	80023be <parseDHCPMSG+0x112>
 80023b4:	79fa      	ldrb	r2, [r7, #7]
 80023b6:	4b65      	ldr	r3, [pc, #404]	@ (800254c <parseDHCPMSG+0x2a0>)
 80023b8:	78db      	ldrb	r3, [r3, #3]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d001      	beq.n	80023c2 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	e183      	b.n	80026ca <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 80023c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002540 <parseDHCPMSG+0x294>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	33f0      	adds	r3, #240	@ 0xf0
 80023cc:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 80023ce:	8a3b      	ldrh	r3, [r7, #16]
 80023d0:	3bf0      	subs	r3, #240	@ 0xf0
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4413      	add	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80023d8:	e170      	b.n	80026bc <parseDHCPMSG+0x410>

			switch ( *p ) {
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b36      	cmp	r3, #54	@ 0x36
 80023e0:	dc76      	bgt.n	80024d0 <parseDHCPMSG+0x224>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f2c0 815d 	blt.w	80026a2 <parseDHCPMSG+0x3f6>
 80023e8:	2b36      	cmp	r3, #54	@ 0x36
 80023ea:	f200 815a 	bhi.w	80026a2 <parseDHCPMSG+0x3f6>
 80023ee:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <parseDHCPMSG+0x148>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	080024dd 	.word	0x080024dd
 80023f8:	080024fd 	.word	0x080024fd
 80023fc:	080026a3 	.word	0x080026a3
 8002400:	08002555 	.word	0x08002555
 8002404:	080026a3 	.word	0x080026a3
 8002408:	080026a3 	.word	0x080026a3
 800240c:	080025a1 	.word	0x080025a1
 8002410:	080026a3 	.word	0x080026a3
 8002414:	080026a3 	.word	0x080026a3
 8002418:	080026a3 	.word	0x080026a3
 800241c:	080026a3 	.word	0x080026a3
 8002420:	080026a3 	.word	0x080026a3
 8002424:	080026a3 	.word	0x080026a3
 8002428:	080026a3 	.word	0x080026a3
 800242c:	080026a3 	.word	0x080026a3
 8002430:	080026a3 	.word	0x080026a3
 8002434:	080026a3 	.word	0x080026a3
 8002438:	080026a3 	.word	0x080026a3
 800243c:	080026a3 	.word	0x080026a3
 8002440:	080026a3 	.word	0x080026a3
 8002444:	080026a3 	.word	0x080026a3
 8002448:	080026a3 	.word	0x080026a3
 800244c:	080026a3 	.word	0x080026a3
 8002450:	080026a3 	.word	0x080026a3
 8002454:	080026a3 	.word	0x080026a3
 8002458:	080026a3 	.word	0x080026a3
 800245c:	080026a3 	.word	0x080026a3
 8002460:	080026a3 	.word	0x080026a3
 8002464:	080026a3 	.word	0x080026a3
 8002468:	080026a3 	.word	0x080026a3
 800246c:	080026a3 	.word	0x080026a3
 8002470:	080026a3 	.word	0x080026a3
 8002474:	080026a3 	.word	0x080026a3
 8002478:	080026a3 	.word	0x080026a3
 800247c:	080026a3 	.word	0x080026a3
 8002480:	080026a3 	.word	0x080026a3
 8002484:	080026a3 	.word	0x080026a3
 8002488:	080026a3 	.word	0x080026a3
 800248c:	080026a3 	.word	0x080026a3
 8002490:	080026a3 	.word	0x080026a3
 8002494:	080026a3 	.word	0x080026a3
 8002498:	080026a3 	.word	0x080026a3
 800249c:	080026a3 	.word	0x080026a3
 80024a0:	080026a3 	.word	0x080026a3
 80024a4:	080026a3 	.word	0x080026a3
 80024a8:	080026a3 	.word	0x080026a3
 80024ac:	080026a3 	.word	0x080026a3
 80024b0:	080026a3 	.word	0x080026a3
 80024b4:	080026a3 	.word	0x080026a3
 80024b8:	080026a3 	.word	0x080026a3
 80024bc:	080026a3 	.word	0x080026a3
 80024c0:	080025ed 	.word	0x080025ed
 80024c4:	080026a3 	.word	0x080026a3
 80024c8:	080024e5 	.word	0x080024e5
 80024cc:	08002649 	.word	0x08002649
 80024d0:	2bff      	cmp	r3, #255	@ 0xff
 80024d2:	f040 80e6 	bne.w	80026a2 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	617b      	str	r3, [r7, #20]
   				break;
 80024da:	e0ef      	b.n	80026bc <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
   				break;
 80024e2:	e0eb      	b.n	80026bc <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
   				p++;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	617a      	str	r2, [r7, #20]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	74fb      	strb	r3, [r7, #19]
   				break;
 80024fa:	e0df      	b.n	80026bc <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	617b      	str	r3, [r7, #20]
   				p++;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	617a      	str	r2, [r7, #20]
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <parseDHCPMSG+0x2a4>)
 8002512:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	617a      	str	r2, [r7, #20]
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <parseDHCPMSG+0x2a4>)
 800251e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	617a      	str	r2, [r7, #20]
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <parseDHCPMSG+0x2a4>)
 800252a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	617a      	str	r2, [r7, #20]
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <parseDHCPMSG+0x2a4>)
 8002536:	70da      	strb	r2, [r3, #3]
   				break;
 8002538:	e0c0      	b.n	80026bc <parseDHCPMSG+0x410>
 800253a:	bf00      	nop
 800253c:	200005e1 	.word	0x200005e1
 8002540:	2000060c 	.word	0x2000060c
 8002544:	20000610 	.word	0x20000610
 8002548:	200005e4 	.word	0x200005e4
 800254c:	200005e8 	.word	0x200005e8
 8002550:	200005f8 	.word	0x200005f8
   			case routersOnSubnet :
   				p++;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	617a      	str	r2, [r7, #20]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	617a      	str	r2, [r7, #20]
 800256a:	781a      	ldrb	r2, [r3, #0]
 800256c:	4b59      	ldr	r3, [pc, #356]	@ (80026d4 <parseDHCPMSG+0x428>)
 800256e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	617a      	str	r2, [r7, #20]
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	4b56      	ldr	r3, [pc, #344]	@ (80026d4 <parseDHCPMSG+0x428>)
 800257a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	617a      	str	r2, [r7, #20]
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	4b53      	ldr	r3, [pc, #332]	@ (80026d4 <parseDHCPMSG+0x428>)
 8002586:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	617a      	str	r2, [r7, #20]
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	4b50      	ldr	r3, [pc, #320]	@ (80026d4 <parseDHCPMSG+0x428>)
 8002592:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	3b04      	subs	r3, #4
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4413      	add	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
   				break;
 800259e:	e08d      	b.n	80026bc <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	617a      	str	r2, [r7, #20]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	617a      	str	r2, [r7, #20]
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <parseDHCPMSG+0x42c>)
 80025ba:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	617a      	str	r2, [r7, #20]
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	4b44      	ldr	r3, [pc, #272]	@ (80026d8 <parseDHCPMSG+0x42c>)
 80025c6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	617a      	str	r2, [r7, #20]
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	4b41      	ldr	r3, [pc, #260]	@ (80026d8 <parseDHCPMSG+0x42c>)
 80025d2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	617a      	str	r2, [r7, #20]
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	4b3e      	ldr	r3, [pc, #248]	@ (80026d8 <parseDHCPMSG+0x42c>)
 80025de:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80025e0:	7afb      	ldrb	r3, [r7, #11]
 80025e2:	3b04      	subs	r3, #4
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4413      	add	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
   				break;
 80025ea:	e067      	b.n	80026bc <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	617a      	str	r2, [r7, #20]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	617a      	str	r2, [r7, #20]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	4b35      	ldr	r3, [pc, #212]	@ (80026dc <parseDHCPMSG+0x430>)
 8002608:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800260a:	4b34      	ldr	r3, [pc, #208]	@ (80026dc <parseDHCPMSG+0x430>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	021a      	lsls	r2, r3, #8
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	1c59      	adds	r1, r3, #1
 8002614:	6179      	str	r1, [r7, #20]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4413      	add	r3, r2
 800261a:	4a30      	ldr	r2, [pc, #192]	@ (80026dc <parseDHCPMSG+0x430>)
 800261c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800261e:	4b2f      	ldr	r3, [pc, #188]	@ (80026dc <parseDHCPMSG+0x430>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	021a      	lsls	r2, r3, #8
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	6179      	str	r1, [r7, #20]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4413      	add	r3, r2
 800262e:	4a2b      	ldr	r2, [pc, #172]	@ (80026dc <parseDHCPMSG+0x430>)
 8002630:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002632:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <parseDHCPMSG+0x430>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1c59      	adds	r1, r3, #1
 800263c:	6179      	str	r1, [r7, #20]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4413      	add	r3, r2
 8002642:	4a26      	ldr	r2, [pc, #152]	@ (80026dc <parseDHCPMSG+0x430>)
 8002644:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8002646:	e039      	b.n	80026bc <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3301      	adds	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	617a      	str	r2, [r7, #20]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	617a      	str	r2, [r7, #20]
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <parseDHCPMSG+0x434>)
 8002662:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	617a      	str	r2, [r7, #20]
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	4b1c      	ldr	r3, [pc, #112]	@ (80026e0 <parseDHCPMSG+0x434>)
 800266e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	617a      	str	r2, [r7, #20]
 8002676:	781a      	ldrb	r2, [r3, #0]
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <parseDHCPMSG+0x434>)
 800267a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	617a      	str	r2, [r7, #20]
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	4b16      	ldr	r3, [pc, #88]	@ (80026e0 <parseDHCPMSG+0x434>)
 8002686:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002688:	793a      	ldrb	r2, [r7, #4]
 800268a:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <parseDHCPMSG+0x438>)
 800268c:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800268e:	797a      	ldrb	r2, [r7, #5]
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <parseDHCPMSG+0x438>)
 8002692:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8002694:	79ba      	ldrb	r2, [r7, #6]
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <parseDHCPMSG+0x438>)
 8002698:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 800269a:	79fa      	ldrb	r2, [r7, #7]
 800269c:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <parseDHCPMSG+0x438>)
 800269e:	70da      	strb	r2, [r3, #3]
   				break;
 80026a0:	e00c      	b.n	80026bc <parseDHCPMSG+0x410>
   			default :
   				p++;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	617a      	str	r2, [r7, #20]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
   				break;
 80026ba:	bf00      	nop
		while ( p < e ) {
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f4ff ae8a 	bcc.w	80023da <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 80026c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200005f4 	.word	0x200005f4
 80026d8:	200005fc 	.word	0x200005fc
 80026dc:	20000018 	.word	0x20000018
 80026e0:	200005e4 	.word	0x200005e4
 80026e4:	200005e8 	.word	0x200005e8

080026e8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80026ee:	4b7f      	ldr	r3, [pc, #508]	@ (80028ec <DHCP_run+0x204>)
 80026f0:	f993 3000 	ldrsb.w	r3, [r3]
 80026f4:	2b06      	cmp	r3, #6
 80026f6:	d101      	bne.n	80026fc <DHCP_run+0x14>
 80026f8:	2305      	movs	r3, #5
 80026fa:	e0f3      	b.n	80028e4 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80026fc:	4b7c      	ldr	r3, [pc, #496]	@ (80028f0 <DHCP_run+0x208>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	3301      	adds	r3, #1
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800270a:	4618      	mov	r0, r3
 800270c:	f000 ff6a 	bl	80035e4 <WIZCHIP_READ>
 8002710:	4603      	mov	r3, r0
 8002712:	2b22      	cmp	r3, #34	@ 0x22
 8002714:	d006      	beq.n	8002724 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8002716:	4b76      	ldr	r3, [pc, #472]	@ (80028f0 <DHCP_run+0x208>)
 8002718:	7818      	ldrb	r0, [r3, #0]
 800271a:	2300      	movs	r3, #0
 800271c:	2244      	movs	r2, #68	@ 0x44
 800271e:	2102      	movs	r1, #2
 8002720:	f000 fabe 	bl	8002ca0 <socket>

	ret = DHCP_RUNNING;
 8002724:	2301      	movs	r3, #1
 8002726:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8002728:	f7ff fdc0 	bl	80022ac <parseDHCPMSG>
 800272c:	4603      	mov	r3, r0
 800272e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8002730:	4b6e      	ldr	r3, [pc, #440]	@ (80028ec <DHCP_run+0x204>)
 8002732:	f993 3000 	ldrsb.w	r3, [r3]
 8002736:	2b04      	cmp	r3, #4
 8002738:	f200 80d0 	bhi.w	80028dc <DHCP_run+0x1f4>
 800273c:	a201      	add	r2, pc, #4	@ (adr r2, 8002744 <DHCP_run+0x5c>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002759 	.word	0x08002759
 8002748:	0800277d 	.word	0x0800277d
 800274c:	080027c1 	.word	0x080027c1
 8002750:	08002811 	.word	0x08002811
 8002754:	0800286b 	.word	0x0800286b
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8002758:	4b66      	ldr	r3, [pc, #408]	@ (80028f4 <DHCP_run+0x20c>)
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800275e:	4b65      	ldr	r3, [pc, #404]	@ (80028f4 <DHCP_run+0x20c>)
 8002760:	2200      	movs	r2, #0
 8002762:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8002764:	4b63      	ldr	r3, [pc, #396]	@ (80028f4 <DHCP_run+0x20c>)
 8002766:	2200      	movs	r2, #0
 8002768:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800276a:	4b62      	ldr	r3, [pc, #392]	@ (80028f4 <DHCP_run+0x20c>)
 800276c:	2200      	movs	r2, #0
 800276e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8002770:	f7fe fffa 	bl	8001768 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8002774:	4b5d      	ldr	r3, [pc, #372]	@ (80028ec <DHCP_run+0x204>)
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
   		break;
 800277a:	e0b2      	b.n	80028e2 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 800277c:	79bb      	ldrb	r3, [r7, #6]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d119      	bne.n	80027b6 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8002782:	4b5d      	ldr	r3, [pc, #372]	@ (80028f8 <DHCP_run+0x210>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	7c1a      	ldrb	r2, [r3, #16]
 8002788:	4b5a      	ldr	r3, [pc, #360]	@ (80028f4 <DHCP_run+0x20c>)
 800278a:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 800278c:	4b5a      	ldr	r3, [pc, #360]	@ (80028f8 <DHCP_run+0x210>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	7c5a      	ldrb	r2, [r3, #17]
 8002792:	4b58      	ldr	r3, [pc, #352]	@ (80028f4 <DHCP_run+0x20c>)
 8002794:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8002796:	4b58      	ldr	r3, [pc, #352]	@ (80028f8 <DHCP_run+0x210>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	7c9a      	ldrb	r2, [r3, #18]
 800279c:	4b55      	ldr	r3, [pc, #340]	@ (80028f4 <DHCP_run+0x20c>)
 800279e:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80027a0:	4b55      	ldr	r3, [pc, #340]	@ (80028f8 <DHCP_run+0x210>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	7cda      	ldrb	r2, [r3, #19]
 80027a6:	4b53      	ldr	r3, [pc, #332]	@ (80028f4 <DHCP_run+0x20c>)
 80027a8:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80027aa:	f7ff f9a3 	bl	8001af4 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80027ae:	4b4f      	ldr	r3, [pc, #316]	@ (80028ec <DHCP_run+0x204>)
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80027b4:	e095      	b.n	80028e2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80027b6:	f000 f8b1 	bl	800291c <check_DHCP_timeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
         break;
 80027be:	e090      	b.n	80028e2 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d116      	bne.n	80027f4 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80027c6:	f000 f909 	bl	80029dc <check_DHCP_leasedIP>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80027d0:	4b4a      	ldr	r3, [pc, #296]	@ (80028fc <DHCP_run+0x214>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4798      	blx	r3
					reset_DHCP_timeout();
 80027d6:	f000 f9d3 	bl	8002b80 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80027da:	4b44      	ldr	r3, [pc, #272]	@ (80028ec <DHCP_run+0x204>)
 80027dc:	2203      	movs	r2, #3
 80027de:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80027e0:	e07f      	b.n	80028e2 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80027e2:	f000 f9cd 	bl	8002b80 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80027e6:	4b46      	ldr	r3, [pc, #280]	@ (8002900 <DHCP_run+0x218>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80027ec:	4b3f      	ldr	r3, [pc, #252]	@ (80028ec <DHCP_run+0x204>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
		break;
 80027f2:	e076      	b.n	80028e2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d105      	bne.n	8002806 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 80027fa:	f000 f9c1 	bl	8002b80 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80027fe:	4b3b      	ldr	r3, [pc, #236]	@ (80028ec <DHCP_run+0x204>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
		break;
 8002804:	e06d      	b.n	80028e2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002806:	f000 f889 	bl	800291c <check_DHCP_timeout>
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
		break;
 800280e:	e068      	b.n	80028e2 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8002810:	2304      	movs	r3, #4
 8002812:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8002814:	4b3b      	ldr	r3, [pc, #236]	@ (8002904 <DHCP_run+0x21c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d060      	beq.n	80028e0 <DHCP_run+0x1f8>
 800281e:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <DHCP_run+0x21c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	085a      	lsrs	r2, r3, #1
 8002824:	4b38      	ldr	r3, [pc, #224]	@ (8002908 <DHCP_run+0x220>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d259      	bcs.n	80028e0 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8002830:	4b30      	ldr	r3, [pc, #192]	@ (80028f4 <DHCP_run+0x20c>)
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	4b35      	ldr	r3, [pc, #212]	@ (800290c <DHCP_run+0x224>)
 8002836:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8002838:	4b2e      	ldr	r3, [pc, #184]	@ (80028f4 <DHCP_run+0x20c>)
 800283a:	785a      	ldrb	r2, [r3, #1]
 800283c:	4b33      	ldr	r3, [pc, #204]	@ (800290c <DHCP_run+0x224>)
 800283e:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8002840:	4b2c      	ldr	r3, [pc, #176]	@ (80028f4 <DHCP_run+0x20c>)
 8002842:	789a      	ldrb	r2, [r3, #2]
 8002844:	4b31      	ldr	r3, [pc, #196]	@ (800290c <DHCP_run+0x224>)
 8002846:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8002848:	4b2a      	ldr	r3, [pc, #168]	@ (80028f4 <DHCP_run+0x20c>)
 800284a:	78da      	ldrb	r2, [r3, #3]
 800284c:	4b2f      	ldr	r3, [pc, #188]	@ (800290c <DHCP_run+0x224>)
 800284e:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8002850:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <DHCP_run+0x228>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	4a2e      	ldr	r2, [pc, #184]	@ (8002910 <DHCP_run+0x228>)
 8002858:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800285a:	f7ff f94b 	bl	8001af4 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800285e:	f000 f98f 	bl	8002b80 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8002862:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <DHCP_run+0x204>)
 8002864:	2204      	movs	r2, #4
 8002866:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002868:	e03a      	b.n	80028e0 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800286a:	2304      	movs	r3, #4
 800286c:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800286e:	79bb      	ldrb	r3, [r7, #6]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d125      	bne.n	80028c0 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8002874:	4b27      	ldr	r3, [pc, #156]	@ (8002914 <DHCP_run+0x22c>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800287a:	4b24      	ldr	r3, [pc, #144]	@ (800290c <DHCP_run+0x224>)
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	4b1d      	ldr	r3, [pc, #116]	@ (80028f4 <DHCP_run+0x20c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d111      	bne.n	80028aa <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002886:	4b21      	ldr	r3, [pc, #132]	@ (800290c <DHCP_run+0x224>)
 8002888:	785a      	ldrb	r2, [r3, #1]
 800288a:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <DHCP_run+0x20c>)
 800288c:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800288e:	429a      	cmp	r2, r3
 8002890:	d10b      	bne.n	80028aa <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002892:	4b1e      	ldr	r3, [pc, #120]	@ (800290c <DHCP_run+0x224>)
 8002894:	789a      	ldrb	r2, [r3, #2]
 8002896:	4b17      	ldr	r3, [pc, #92]	@ (80028f4 <DHCP_run+0x20c>)
 8002898:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d105      	bne.n	80028aa <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800289e:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <DHCP_run+0x224>)
 80028a0:	78da      	ldrb	r2, [r3, #3]
 80028a2:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <DHCP_run+0x20c>)
 80028a4:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d004      	beq.n	80028b4 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 80028aa:	2303      	movs	r3, #3
 80028ac:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80028ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002918 <DHCP_run+0x230>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80028b4:	f000 f964 	bl	8002b80 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <DHCP_run+0x204>)
 80028ba:	2203      	movs	r2, #3
 80028bc:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80028be:	e010      	b.n	80028e2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80028c0:	79bb      	ldrb	r3, [r7, #6]
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d105      	bne.n	80028d2 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80028c6:	f000 f95b 	bl	8002b80 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80028ca:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <DHCP_run+0x204>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
	   	break;
 80028d0:	e007      	b.n	80028e2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80028d2:	f000 f823 	bl	800291c <check_DHCP_timeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	   	break;
 80028da:	e002      	b.n	80028e2 <DHCP_run+0x1fa>
		default :
   		break;
 80028dc:	bf00      	nop
 80028de:	e000      	b.n	80028e2 <DHCP_run+0x1fa>
		break;
 80028e0:	bf00      	nop
	}

	return ret;
 80028e2:	79fb      	ldrb	r3, [r7, #7]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000600 	.word	0x20000600
 80028f0:	200005e1 	.word	0x200005e1
 80028f4:	200005f0 	.word	0x200005f0
 80028f8:	2000060c 	.word	0x2000060c
 80028fc:	20000028 	.word	0x20000028
 8002900:	20000030 	.word	0x20000030
 8002904:	20000018 	.word	0x20000018
 8002908:	20000604 	.word	0x20000604
 800290c:	200005ec 	.word	0x200005ec
 8002910:	20000608 	.word	0x20000608
 8002914:	20000601 	.word	0x20000601
 8002918:	2000002c 	.word	0x2000002c

0800291c <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8002922:	2301      	movs	r3, #1
 8002924:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8002926:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <check_DHCP_timeout+0xb0>)
 8002928:	f993 3000 	ldrsb.w	r3, [r3]
 800292c:	2b01      	cmp	r3, #1
 800292e:	dc2d      	bgt.n	800298c <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8002930:	4b27      	ldr	r3, [pc, #156]	@ (80029d0 <check_DHCP_timeout+0xb4>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b27      	ldr	r3, [pc, #156]	@ (80029d4 <check_DHCP_timeout+0xb8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d242      	bcs.n	80029c2 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 800293c:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <check_DHCP_timeout+0xbc>)
 800293e:	f993 3000 	ldrsb.w	r3, [r3]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d00c      	beq.n	8002960 <check_DHCP_timeout+0x44>
 8002946:	2b04      	cmp	r3, #4
 8002948:	dc0d      	bgt.n	8002966 <check_DHCP_timeout+0x4a>
 800294a:	2b01      	cmp	r3, #1
 800294c:	d002      	beq.n	8002954 <check_DHCP_timeout+0x38>
 800294e:	2b02      	cmp	r3, #2
 8002950:	d003      	beq.n	800295a <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8002952:	e008      	b.n	8002966 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8002954:	f7fe ff08 	bl	8001768 <send_DHCP_DISCOVER>
				break;
 8002958:	e006      	b.n	8002968 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800295a:	f7ff f8cb 	bl	8001af4 <send_DHCP_REQUEST>
				break;
 800295e:	e003      	b.n	8002968 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002960:	f7ff f8c8 	bl	8001af4 <send_DHCP_REQUEST>
				break;
 8002964:	e000      	b.n	8002968 <check_DHCP_timeout+0x4c>
				break;
 8002966:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8002968:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <check_DHCP_timeout+0xb8>)
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800296e:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <check_DHCP_timeout+0xb8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330a      	adds	r3, #10
 8002974:	4a16      	ldr	r2, [pc, #88]	@ (80029d0 <check_DHCP_timeout+0xb4>)
 8002976:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002978:	4b14      	ldr	r3, [pc, #80]	@ (80029cc <check_DHCP_timeout+0xb0>)
 800297a:	f993 3000 	ldrsb.w	r3, [r3]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	3301      	adds	r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	b25a      	sxtb	r2, r3
 8002986:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <check_DHCP_timeout+0xb0>)
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e01a      	b.n	80029c2 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 800298c:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <check_DHCP_timeout+0xbc>)
 800298e:	f993 3000 	ldrsb.w	r3, [r3]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d00c      	beq.n	80029b0 <check_DHCP_timeout+0x94>
 8002996:	2b04      	cmp	r3, #4
 8002998:	dc10      	bgt.n	80029bc <check_DHCP_timeout+0xa0>
 800299a:	2b01      	cmp	r3, #1
 800299c:	d002      	beq.n	80029a4 <check_DHCP_timeout+0x88>
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d006      	beq.n	80029b0 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80029a2:	e00b      	b.n	80029bc <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <check_DHCP_timeout+0xbc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80029aa:	2300      	movs	r3, #0
 80029ac:	71fb      	strb	r3, [r7, #7]
				break;
 80029ae:	e006      	b.n	80029be <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 80029b0:	f7fe feda 	bl	8001768 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <check_DHCP_timeout+0xbc>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
				break;
 80029ba:	e000      	b.n	80029be <check_DHCP_timeout+0xa2>
				break;
 80029bc:	bf00      	nop
		}
		reset_DHCP_timeout();
 80029be:	f000 f8df 	bl	8002b80 <reset_DHCP_timeout>
	}
	return ret;
 80029c2:	79fb      	ldrb	r3, [r7, #7]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000601 	.word	0x20000601
 80029d0:	2000001c 	.word	0x2000001c
 80029d4:	20000604 	.word	0x20000604
 80029d8:	20000600 	.word	0x20000600

080029dc <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80029e2:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80029e6:	f000 fdfd 	bl	80035e4 <WIZCHIP_READ>
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80029ee:	2103      	movs	r1, #3
 80029f0:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80029f4:	f000 fe42 	bl	800367c <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <check_DHCP_leasedIP+0x6c>)
 80029fa:	7818      	ldrb	r0, [r3, #0]
 80029fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <check_DHCP_leasedIP+0x70>)
 8002a04:	2211      	movs	r2, #17
 8002a06:	4912      	ldr	r1, [pc, #72]	@ (8002a50 <check_DHCP_leasedIP+0x74>)
 8002a08:	f000 facc 	bl	8002fa4 <sendto>
 8002a0c:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002a16:	f000 fe31 	bl	800367c <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f113 0f0d 	cmn.w	r3, #13
 8002a20:	d101      	bne.n	8002a26 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00c      	b.n	8002a40 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8002a26:	f7ff faef 	bl	8002008 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <check_DHCP_leasedIP+0x78>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8002a30:	bf00      	nop
 8002a32:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <check_DHCP_leasedIP+0x78>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d9f9      	bls.n	8002a32 <check_DHCP_leasedIP+0x56>

		return 0;
 8002a3e:	2300      	movs	r3, #0
	}
}	
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	200005e1 	.word	0x200005e1
 8002a4c:	200005f0 	.word	0x200005f0
 8002a50:	080059c8 	.word	0x080059c8
 8002a54:	20000604 	.word	0x20000604

08002a58 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002a68:	2206      	movs	r2, #6
 8002a6a:	493f      	ldr	r1, [pc, #252]	@ (8002b68 <DHCP_init+0x110>)
 8002a6c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002a70:	f000 fe52 	bl	8003718 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002a74:	4b3c      	ldr	r3, [pc, #240]	@ (8002b68 <DHCP_init+0x110>)
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	4b3b      	ldr	r3, [pc, #236]	@ (8002b68 <DHCP_init+0x110>)
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b39      	ldr	r3, [pc, #228]	@ (8002b68 <DHCP_init+0x110>)
 8002a82:	789b      	ldrb	r3, [r3, #2]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b37      	ldr	r3, [pc, #220]	@ (8002b68 <DHCP_init+0x110>)
 8002a8a:	78db      	ldrb	r3, [r3, #3]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b35      	ldr	r3, [pc, #212]	@ (8002b68 <DHCP_init+0x110>)
 8002a92:	791b      	ldrb	r3, [r3, #4]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	4b33      	ldr	r3, [pc, #204]	@ (8002b68 <DHCP_init+0x110>)
 8002a9a:	795b      	ldrb	r3, [r3, #5]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d117      	bne.n	8002ad4 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002aa4:	4b30      	ldr	r3, [pc, #192]	@ (8002b68 <DHCP_init+0x110>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8002b68 <DHCP_init+0x110>)
 8002aac:	2208      	movs	r2, #8
 8002aae:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b68 <DHCP_init+0x110>)
 8002ab2:	22dc      	movs	r2, #220	@ 0xdc
 8002ab4:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b68 <DHCP_init+0x110>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002abc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b68 <DHCP_init+0x110>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8002ac2:	4b29      	ldr	r3, [pc, #164]	@ (8002b68 <DHCP_init+0x110>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002ac8:	2206      	movs	r2, #6
 8002aca:	4927      	ldr	r1, [pc, #156]	@ (8002b68 <DHCP_init+0x110>)
 8002acc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002ad0:	f000 fe82 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002ad4:	4a25      	ldr	r2, [pc, #148]	@ (8002b6c <DHCP_init+0x114>)
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002ada:	4a25      	ldr	r2, [pc, #148]	@ (8002b70 <DHCP_init+0x118>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002ae0:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <DHCP_init+0x11c>)
 8002ae2:	4a25      	ldr	r2, [pc, #148]	@ (8002b78 <DHCP_init+0x120>)
 8002ae4:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8002ae6:	4b20      	ldr	r3, [pc, #128]	@ (8002b68 <DHCP_init+0x110>)
 8002ae8:	78db      	ldrb	r3, [r3, #3]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <DHCP_init+0x11c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a20      	ldr	r2, [pc, #128]	@ (8002b74 <DHCP_init+0x11c>)
 8002af4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8002af6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <DHCP_init+0x110>)
 8002af8:	791b      	ldrb	r3, [r3, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <DHCP_init+0x11c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	4a1c      	ldr	r2, [pc, #112]	@ (8002b74 <DHCP_init+0x11c>)
 8002b04:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8002b06:	4b18      	ldr	r3, [pc, #96]	@ (8002b68 <DHCP_init+0x110>)
 8002b08:	795b      	ldrb	r3, [r3, #5]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <DHCP_init+0x11c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a18      	ldr	r2, [pc, #96]	@ (8002b74 <DHCP_init+0x11c>)
 8002b14:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8002b16:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <DHCP_init+0x110>)
 8002b18:	78da      	ldrb	r2, [r3, #3]
 8002b1a:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <DHCP_init+0x110>)
 8002b1c:	791b      	ldrb	r3, [r3, #4]
 8002b1e:	4053      	eors	r3, r2
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <DHCP_init+0x110>)
 8002b24:	795b      	ldrb	r3, [r3, #5]
 8002b26:	4053      	eors	r3, r2
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <DHCP_init+0x11c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4413      	add	r3, r2
 8002b32:	4a10      	ldr	r2, [pc, #64]	@ (8002b74 <DHCP_init+0x11c>)
 8002b34:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002b42:	f000 fe49 	bl	80037d8 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8002b46:	f107 030c 	add.w	r3, r7, #12
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002b52:	f000 fe41 	bl	80037d8 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002b56:	f000 f813 	bl	8002b80 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <DHCP_init+0x124>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000610 	.word	0x20000610
 8002b6c:	200005e1 	.word	0x200005e1
 8002b70:	2000060c 	.word	0x2000060c
 8002b74:	20000608 	.word	0x20000608
 8002b78:	12345678 	.word	0x12345678
 8002b7c:	20000600 	.word	0x20000600

08002b80 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <reset_DHCP_timeout+0x20>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <reset_DHCP_timeout+0x24>)
 8002b8c:	220a      	movs	r2, #10
 8002b8e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002b90:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <reset_DHCP_timeout+0x28>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	20000604 	.word	0x20000604
 8002ba4:	2000001c 	.word	0x2000001c
 8002ba8:	20000601 	.word	0x20000601

08002bac <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <getIPfromDHCP+0x3c>)
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	4a09      	ldr	r2, [pc, #36]	@ (8002be8 <getIPfromDHCP+0x3c>)
 8002bc2:	7852      	ldrb	r2, [r2, #1]
 8002bc4:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3302      	adds	r3, #2
 8002bca:	4a07      	ldr	r2, [pc, #28]	@ (8002be8 <getIPfromDHCP+0x3c>)
 8002bcc:	7892      	ldrb	r2, [r2, #2]
 8002bce:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3303      	adds	r3, #3
 8002bd4:	4a04      	ldr	r2, [pc, #16]	@ (8002be8 <getIPfromDHCP+0x3c>)
 8002bd6:	78d2      	ldrb	r2, [r2, #3]
 8002bd8:	701a      	strb	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	200005f0 	.word	0x200005f0

08002bec <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c28 <getGWfromDHCP+0x3c>)
 8002bf6:	781a      	ldrb	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	4a09      	ldr	r2, [pc, #36]	@ (8002c28 <getGWfromDHCP+0x3c>)
 8002c02:	7852      	ldrb	r2, [r2, #1]
 8002c04:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3302      	adds	r3, #2
 8002c0a:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <getGWfromDHCP+0x3c>)
 8002c0c:	7892      	ldrb	r2, [r2, #2]
 8002c0e:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3303      	adds	r3, #3
 8002c14:	4a04      	ldr	r2, [pc, #16]	@ (8002c28 <getGWfromDHCP+0x3c>)
 8002c16:	78d2      	ldrb	r2, [r2, #3]
 8002c18:	701a      	strb	r2, [r3, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	200005f4 	.word	0x200005f4

08002c2c <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8002c34:	4b0c      	ldr	r3, [pc, #48]	@ (8002c68 <getSNfromDHCP+0x3c>)
 8002c36:	781a      	ldrb	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	4a09      	ldr	r2, [pc, #36]	@ (8002c68 <getSNfromDHCP+0x3c>)
 8002c42:	7852      	ldrb	r2, [r2, #1]
 8002c44:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3302      	adds	r3, #2
 8002c4a:	4a07      	ldr	r2, [pc, #28]	@ (8002c68 <getSNfromDHCP+0x3c>)
 8002c4c:	7892      	ldrb	r2, [r2, #2]
 8002c4e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3303      	adds	r3, #3
 8002c54:	4a04      	ldr	r2, [pc, #16]	@ (8002c68 <getSNfromDHCP+0x3c>)
 8002c56:	78d2      	ldrb	r2, [r2, #3]
 8002c58:	701a      	strb	r2, [r3, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	200005f8 	.word	0x200005f8

08002c6c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	2b09      	cmp	r3, #9
 8002c82:	d803      	bhi.n	8002c8c <NibbleToHex+0x20>
    return nibble + '0';
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	3330      	adds	r3, #48	@ 0x30
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e002      	b.n	8002c92 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	3337      	adds	r3, #55	@ 0x37
 8002c90:	b2db      	uxtb	r3, r3
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	4608      	mov	r0, r1
 8002caa:	4611      	mov	r1, r2
 8002cac:	461a      	mov	r2, r3
 8002cae:	4623      	mov	r3, r4
 8002cb0:	71fb      	strb	r3, [r7, #7]
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71bb      	strb	r3, [r7, #6]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	80bb      	strh	r3, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d902      	bls.n	8002cca <socket+0x2a>
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc8:	e0f0      	b.n	8002eac <socket+0x20c>
	switch(protocol)
 8002cca:	79bb      	ldrb	r3, [r7, #6]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d005      	beq.n	8002cdc <socket+0x3c>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	dd11      	ble.n	8002cf8 <socket+0x58>
 8002cd4:	3b02      	subs	r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d80e      	bhi.n	8002cf8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002cda:	e011      	b.n	8002d00 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002cdc:	f107 030c 	add.w	r3, r7, #12
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002ce8:	f000 fd16 	bl	8003718 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d105      	bne.n	8002cfe <socket+0x5e>
 8002cf2:	f06f 0302 	mvn.w	r3, #2
 8002cf6:	e0d9      	b.n	8002eac <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002cf8:	f06f 0304 	mvn.w	r3, #4
 8002cfc:	e0d6      	b.n	8002eac <socket+0x20c>
	    break;
 8002cfe:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <socket+0x70>
 8002d0a:	f06f 0305 	mvn.w	r3, #5
 8002d0e:	e0cd      	b.n	8002eac <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d028      	beq.n	8002d68 <socket+0xc8>
	{
   	switch(protocol)
 8002d16:	79bb      	ldrb	r3, [r7, #6]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d002      	beq.n	8002d22 <socket+0x82>
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d008      	beq.n	8002d32 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002d20:	e022      	b.n	8002d68 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11a      	bne.n	8002d62 <socket+0xc2>
 8002d2c:	f06f 0305 	mvn.w	r3, #5
 8002d30:	e0bc      	b.n	8002eac <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002d32:	78fb      	ldrb	r3, [r7, #3]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db02      	blt.n	8002d4a <socket+0xaa>
 8002d44:	f06f 0305 	mvn.w	r3, #5
 8002d48:	e0b0      	b.n	8002eac <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db04      	blt.n	8002d66 <socket+0xc6>
 8002d5c:	f06f 0305 	mvn.w	r3, #5
 8002d60:	e0a4      	b.n	8002eac <socket+0x20c>
   	      break;
 8002d62:	bf00      	nop
 8002d64:	e000      	b.n	8002d68 <socket+0xc8>
   	      break;
 8002d66:	bf00      	nop
   	}
   }
	close(sn);
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f8ac 	bl	8002ec8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	3301      	adds	r3, #1
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7e:	f023 030f 	bic.w	r3, r3, #15
 8002d82:	b25a      	sxtb	r2, r3
 8002d84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	b25b      	sxtb	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f000 fc74 	bl	800367c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002d94:	88bb      	ldrh	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d110      	bne.n	8002dbc <socket+0x11c>
	{
	   port = sock_any_port++;
 8002d9a:	4b46      	ldr	r3, [pc, #280]	@ (8002eb4 <socket+0x214>)
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	b291      	uxth	r1, r2
 8002da2:	4a44      	ldr	r2, [pc, #272]	@ (8002eb4 <socket+0x214>)
 8002da4:	8011      	strh	r1, [r2, #0]
 8002da6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002da8:	4b42      	ldr	r3, [pc, #264]	@ (8002eb4 <socket+0x214>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d103      	bne.n	8002dbc <socket+0x11c>
 8002db4:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb4 <socket+0x214>)
 8002db6:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002dba:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dc8:	461a      	mov	r2, r3
 8002dca:	88bb      	ldrh	r3, [r7, #4]
 8002dcc:	0a1b      	lsrs	r3, r3, #8
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f000 fc51 	bl	800367c <WIZCHIP_WRITE>
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	3301      	adds	r3, #1
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de6:	461a      	mov	r2, r3
 8002de8:	88bb      	ldrh	r3, [r7, #4]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f000 fc44 	bl	800367c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	3301      	adds	r3, #1
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e00:	2101      	movs	r1, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fc3a 	bl	800367c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002e08:	bf00      	nop
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	3301      	adds	r3, #1
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fbe4 	bl	80035e4 <WIZCHIP_READ>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f3      	bne.n	8002e0a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2201      	movs	r2, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	b21b      	sxth	r3, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	b21a      	sxth	r2, r3
 8002e30:	4b21      	ldr	r3, [pc, #132]	@ (8002eb8 <socket+0x218>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b21b      	sxth	r3, r3
 8002e36:	4013      	ands	r3, r2
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb8 <socket+0x218>)
 8002e3e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	f003 0201 	and.w	r2, r3, #1
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	b21a      	sxth	r2, r3
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <socket+0x218>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	4313      	orrs	r3, r2
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	4b17      	ldr	r3, [pc, #92]	@ (8002eb8 <socket+0x218>)
 8002e5c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	2201      	movs	r2, #1
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	b21b      	sxth	r3, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	b21a      	sxth	r2, r3
 8002e6c:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <socket+0x21c>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	4013      	ands	r3, r2
 8002e74:	b21b      	sxth	r3, r3
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <socket+0x21c>)
 8002e7a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	4a10      	ldr	r2, [pc, #64]	@ (8002ec0 <socket+0x220>)
 8002e80:	2100      	movs	r1, #0
 8002e82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec4 <socket+0x224>)
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002e8e:	bf00      	nop
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	3301      	adds	r3, #1
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fba1 	bl	80035e4 <WIZCHIP_READ>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f3      	beq.n	8002e90 <socket+0x1f0>
   return (int8_t)sn;
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	20000034 	.word	0x20000034
 8002eb8:	20000616 	.word	0x20000616
 8002ebc:	20000618 	.word	0x20000618
 8002ec0:	2000061c 	.word	0x2000061c
 8002ec4:	2000062c 	.word	0x2000062c

08002ec8 <close>:

int8_t close(uint8_t sn)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d902      	bls.n	8002ede <close+0x16>
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	e055      	b.n	8002f8a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002eea:	2110      	movs	r1, #16
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fbc5 	bl	800367c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002ef2:	bf00      	nop
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	3301      	adds	r3, #1
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fb6f 	bl	80035e4 <WIZCHIP_READ>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f3      	bne.n	8002ef4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	3301      	adds	r3, #1
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002f18:	211f      	movs	r1, #31
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fbae 	bl	800367c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	2201      	movs	r2, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	b21b      	sxth	r3, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	b21a      	sxth	r2, r3
 8002f2e:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <close+0xcc>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4013      	ands	r3, r2
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <close+0xcc>)
 8002f3c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	2201      	movs	r2, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	b21a      	sxth	r2, r3
 8002f4c:	4b12      	ldr	r3, [pc, #72]	@ (8002f98 <close+0xd0>)
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b21b      	sxth	r3, r3
 8002f52:	4013      	ands	r3, r2
 8002f54:	b21b      	sxth	r3, r3
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <close+0xd0>)
 8002f5a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f9c <close+0xd4>)
 8002f60:	2100      	movs	r1, #0
 8002f62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa0 <close+0xd8>)
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002f6e:	bf00      	nop
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	3301      	adds	r3, #1
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fb31 	bl	80035e4 <WIZCHIP_READ>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f3      	bne.n	8002f70 <close+0xa8>
	return SOCK_OK;
 8002f88:	2301      	movs	r3, #1
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000616 	.word	0x20000616
 8002f98:	20000618 	.word	0x20000618
 8002f9c:	2000061c 	.word	0x2000061c
 8002fa0:	2000062c 	.word	0x2000062c

08002fa4 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d902      	bls.n	8002fca <sendto+0x26>
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc8:	e11a      	b.n	8003200 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	3301      	adds	r3, #1
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fb06 	bl	80035e4 <WIZCHIP_READ>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3b02      	subs	r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d902      	bls.n	8002fea <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002fe4:	f06f 0304 	mvn.w	r3, #4
 8002fe8:	e10a      	b.n	8003200 <sendto+0x25c>
         break;
 8002fea:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002fec:	89bb      	ldrh	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <sendto+0x54>
 8002ff2:	f06f 030d 	mvn.w	r3, #13
 8002ff6:	e103      	b.n	8003200 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	3201      	adds	r2, #1
 8003006:	7812      	ldrb	r2, [r2, #0]
 8003008:	4413      	add	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	3202      	adds	r2, #2
 8003014:	7812      	ldrb	r2, [r2, #0]
 8003016:	4413      	add	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	3203      	adds	r2, #3
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	4413      	add	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10e      	bne.n	800304c <sendto+0xa8>
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	3301      	adds	r3, #1
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fad4 	bl	80035e4 <WIZCHIP_READ>
 800303c:	4603      	mov	r3, r0
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d002      	beq.n	800304c <sendto+0xa8>
 8003046:	f06f 030b 	mvn.w	r3, #11
 800304a:	e0d9      	b.n	8003200 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800304c:	8c3b      	ldrh	r3, [r7, #32]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10e      	bne.n	8003070 <sendto+0xcc>
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	3301      	adds	r3, #1
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fac2 	bl	80035e4 <WIZCHIP_READ>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d002      	beq.n	8003070 <sendto+0xcc>
 800306a:	f06f 030a 	mvn.w	r3, #10
 800306e:	e0c7      	b.n	8003200 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	3301      	adds	r3, #1
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fab1 	bl	80035e4 <WIZCHIP_READ>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b42      	cmp	r3, #66	@ 0x42
 800308a:	d008      	beq.n	800309e <sendto+0xfa>
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	2b22      	cmp	r3, #34	@ 0x22
 8003090:	d005      	beq.n	800309e <sendto+0xfa>
 8003092:	7dfb      	ldrb	r3, [r7, #23]
 8003094:	2b32      	cmp	r3, #50	@ 0x32
 8003096:	d002      	beq.n	800309e <sendto+0xfa>
 8003098:	f06f 0306 	mvn.w	r3, #6
 800309c:	e0b0      	b.n	8003200 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	3301      	adds	r3, #1
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80030aa:	2204      	movs	r2, #4
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fb92 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	3301      	adds	r3, #1
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c0:	461a      	mov	r2, r3
 80030c2:	8c3b      	ldrh	r3, [r7, #32]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	4619      	mov	r1, r3
 80030cc:	4610      	mov	r0, r2
 80030ce:	f000 fad5 	bl	800367c <WIZCHIP_WRITE>
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	3301      	adds	r3, #1
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80030de:	461a      	mov	r2, r3
 80030e0:	8c3b      	ldrh	r3, [r7, #32]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f000 fac8 	bl	800367c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	3301      	adds	r3, #1
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fa73 	bl	80035e4 <WIZCHIP_READ>
 80030fe:	4603      	mov	r3, r0
 8003100:	029b      	lsls	r3, r3, #10
 8003102:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003104:	89ba      	ldrh	r2, [r7, #12]
 8003106:	8abb      	ldrh	r3, [r7, #20]
 8003108:	429a      	cmp	r2, r3
 800310a:	d901      	bls.n	8003110 <sendto+0x16c>
 800310c:	8abb      	ldrh	r3, [r7, #20]
 800310e:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fbc0 	bl	8003898 <getSn_TX_FSR>
 8003118:	4603      	mov	r3, r0
 800311a:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	3301      	adds	r3, #1
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fa5b 	bl	80035e4 <WIZCHIP_READ>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <sendto+0x196>
 8003134:	f06f 0303 	mvn.w	r3, #3
 8003138:	e062      	b.n	8003200 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800313a:	4b33      	ldr	r3, [pc, #204]	@ (8003208 <sendto+0x264>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	fa42 f303 	asr.w	r3, r2, r3
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <sendto+0x1b6>
 800314e:	89ba      	ldrh	r2, [r7, #12]
 8003150:	8abb      	ldrh	r3, [r7, #20]
 8003152:	429a      	cmp	r2, r3
 8003154:	d901      	bls.n	800315a <sendto+0x1b6>
 8003156:	2300      	movs	r3, #0
 8003158:	e052      	b.n	8003200 <sendto+0x25c>
      if(len <= freesize) break;
 800315a:	89ba      	ldrh	r2, [r7, #12]
 800315c:	8abb      	ldrh	r3, [r7, #20]
 800315e:	429a      	cmp	r2, r3
 8003160:	d900      	bls.n	8003164 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8003162:	e7d5      	b.n	8003110 <sendto+0x16c>
      if(len <= freesize) break;
 8003164:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8003166:	89ba      	ldrh	r2, [r7, #12]
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fc25 	bl	80039bc <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	3301      	adds	r3, #1
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800317e:	2120      	movs	r1, #32
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fa7b 	bl	800367c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003186:	bf00      	nop
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	3301      	adds	r3, #1
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fa25 	bl	80035e4 <WIZCHIP_READ>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f3      	bne.n	8003188 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	3301      	adds	r3, #1
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fa19 	bl	80035e4 <WIZCHIP_READ>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00c      	beq.n	80031de <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	3301      	adds	r3, #1
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80031d0:	2110      	movs	r1, #16
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fa52 	bl	800367c <WIZCHIP_WRITE>
         break;
 80031d8:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80031da:	89bb      	ldrh	r3, [r7, #12]
 80031dc:	e010      	b.n	8003200 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0db      	beq.n	80031a0 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	3301      	adds	r3, #1
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80031f4:	2108      	movs	r1, #8
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fa40 	bl	800367c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80031fc:	f06f 030c 	mvn.w	r3, #12
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000616 	.word	0x20000616

0800320c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	4613      	mov	r3, r2
 800321c:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800321e:	2300      	movs	r3, #0
 8003220:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d902      	bls.n	800322e <recvfrom+0x22>
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	e1d2      	b.n	80035d4 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	3301      	adds	r3, #1
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f9d4 	bl	80035e4 <WIZCHIP_READ>
 800323c:	4603      	mov	r3, r0
 800323e:	777b      	strb	r3, [r7, #29]
 8003240:	7f7b      	ldrb	r3, [r7, #29]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3b02      	subs	r3, #2
 8003248:	2b02      	cmp	r3, #2
 800324a:	d902      	bls.n	8003252 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800324c:	f06f 0304 	mvn.w	r3, #4
 8003250:	e1c0      	b.n	80035d4 <recvfrom+0x3c8>
         break;
 8003252:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003254:	89bb      	ldrh	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <recvfrom+0x54>
 800325a:	f06f 030d 	mvn.w	r3, #13
 800325e:	e1b9      	b.n	80035d4 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	4a87      	ldr	r2, [pc, #540]	@ (8003480 <recvfrom+0x274>)
 8003264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d128      	bne.n	80032be <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fb5b 	bl	800392a <getSn_RX_RSR>
 8003274:	4603      	mov	r3, r0
 8003276:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	3301      	adds	r3, #1
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003284:	4618      	mov	r0, r3
 8003286:	f000 f9ad 	bl	80035e4 <WIZCHIP_READ>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <recvfrom+0x8a>
 8003290:	f06f 0303 	mvn.w	r3, #3
 8003294:	e19e      	b.n	80035d4 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8003296:	4b7b      	ldr	r3, [pc, #492]	@ (8003484 <recvfrom+0x278>)
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	fa42 f303 	asr.w	r3, r2, r3
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <recvfrom+0xa8>
 80032aa:	8bfb      	ldrh	r3, [r7, #30]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <recvfrom+0xa8>
 80032b0:	2300      	movs	r3, #0
 80032b2:	e18f      	b.n	80035d4 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 80032b4:	8bfb      	ldrh	r3, [r7, #30]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d100      	bne.n	80032bc <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80032ba:	e7d7      	b.n	800326c <recvfrom+0x60>
         if(pack_len != 0) break;
 80032bc:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80032be:	7f7b      	ldrb	r3, [r7, #29]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d078      	beq.n	80033ba <recvfrom+0x1ae>
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	f300 8140 	bgt.w	800354e <recvfrom+0x342>
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d003      	beq.n	80032da <recvfrom+0xce>
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	f000 80da 	beq.w	800348c <recvfrom+0x280>
 80032d8:	e139      	b.n	800354e <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	4a68      	ldr	r2, [pc, #416]	@ (8003480 <recvfrom+0x274>)
 80032de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d151      	bne.n	800338a <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80032e6:	f107 0114 	add.w	r1, r7, #20
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2208      	movs	r2, #8
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fbbe 	bl	8003a70 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	3301      	adds	r3, #1
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003300:	2140      	movs	r1, #64	@ 0x40
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f9ba 	bl	800367c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003308:	bf00      	nop
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	3301      	adds	r3, #1
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f964 	bl	80035e4 <WIZCHIP_READ>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f3      	bne.n	800330a <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8003322:	7d3a      	ldrb	r2, [r7, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3301      	adds	r3, #1
 800332c:	7d7a      	ldrb	r2, [r7, #21]
 800332e:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3302      	adds	r3, #2
 8003334:	7dba      	ldrb	r2, [r7, #22]
 8003336:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3303      	adds	r3, #3
 800333c:	7dfa      	ldrb	r2, [r7, #23]
 800333e:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8003340:	7e3b      	ldrb	r3, [r7, #24]
 8003342:	461a      	mov	r2, r3
 8003344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003346:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	b29b      	uxth	r3, r3
 8003350:	7e7a      	ldrb	r2, [r7, #25]
 8003352:	4413      	add	r3, r2
 8003354:	b29a      	uxth	r2, r3
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800335a:	7eba      	ldrb	r2, [r7, #26]
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	4611      	mov	r1, r2
 8003360:	4a47      	ldr	r2, [pc, #284]	@ (8003480 <recvfrom+0x274>)
 8003362:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	4a45      	ldr	r2, [pc, #276]	@ (8003480 <recvfrom+0x274>)
 800336a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	b29a      	uxth	r2, r3
 8003372:	7efb      	ldrb	r3, [r7, #27]
 8003374:	4619      	mov	r1, r3
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	440a      	add	r2, r1
 800337a:	b291      	uxth	r1, r2
 800337c:	4a40      	ldr	r2, [pc, #256]	@ (8003480 <recvfrom+0x274>)
 800337e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	4a40      	ldr	r2, [pc, #256]	@ (8003488 <recvfrom+0x27c>)
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	4a3c      	ldr	r2, [pc, #240]	@ (8003480 <recvfrom+0x274>)
 800338e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003392:	89ba      	ldrh	r2, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d202      	bcs.n	800339e <recvfrom+0x192>
 8003398:	89bb      	ldrh	r3, [r7, #12]
 800339a:	83fb      	strh	r3, [r7, #30]
 800339c:	e004      	b.n	80033a8 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	4a37      	ldr	r2, [pc, #220]	@ (8003480 <recvfrom+0x274>)
 80033a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a6:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80033a8:	8bfb      	ldrh	r3, [r7, #30]
 80033aa:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80033ac:	8bfa      	ldrh	r2, [r7, #30]
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fb5c 	bl	8003a70 <wiz_recv_data>
			break;
 80033b8:	e0d5      	b.n	8003566 <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	4a30      	ldr	r2, [pc, #192]	@ (8003480 <recvfrom+0x274>)
 80033be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d145      	bne.n	8003452 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 80033c6:	f107 0114 	add.w	r1, r7, #20
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2202      	movs	r2, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fb4e 	bl	8003a70 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	3301      	adds	r3, #1
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80033e0:	2140      	movs	r1, #64	@ 0x40
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f94a 	bl	800367c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80033e8:	bf00      	nop
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	3301      	adds	r3, #1
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f8f4 	bl	80035e4 <WIZCHIP_READ>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f3      	bne.n	80033ea <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8003402:	7d3a      	ldrb	r2, [r7, #20]
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	4611      	mov	r1, r2
 8003408:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <recvfrom+0x274>)
 800340a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	4a1b      	ldr	r2, [pc, #108]	@ (8003480 <recvfrom+0x274>)
 8003412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	b29b      	uxth	r3, r3
 800341a:	7d7a      	ldrb	r2, [r7, #21]
 800341c:	4413      	add	r3, r2
 800341e:	b29a      	uxth	r2, r3
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	3a02      	subs	r2, #2
 8003424:	b291      	uxth	r1, r2
 8003426:	4a16      	ldr	r2, [pc, #88]	@ (8003480 <recvfrom+0x274>)
 8003428:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <recvfrom+0x274>)
 8003430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003434:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8003438:	4293      	cmp	r3, r2
 800343a:	d906      	bls.n	800344a <recvfrom+0x23e>
   			{
   			   close(sn);
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fd42 	bl	8002ec8 <close>
   			   return SOCKFATAL_PACKLEN;
 8003444:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8003448:	e0c4      	b.n	80035d4 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	4a0e      	ldr	r2, [pc, #56]	@ (8003488 <recvfrom+0x27c>)
 800344e:	2180      	movs	r1, #128	@ 0x80
 8003450:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	4a0a      	ldr	r2, [pc, #40]	@ (8003480 <recvfrom+0x274>)
 8003456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800345a:	89ba      	ldrh	r2, [r7, #12]
 800345c:	429a      	cmp	r2, r3
 800345e:	d202      	bcs.n	8003466 <recvfrom+0x25a>
 8003460:	89bb      	ldrh	r3, [r7, #12]
 8003462:	83fb      	strh	r3, [r7, #30]
 8003464:	e004      	b.n	8003470 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	4a05      	ldr	r2, [pc, #20]	@ (8003480 <recvfrom+0x274>)
 800346a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800346e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003470:	8bfa      	ldrh	r2, [r7, #30]
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fafa 	bl	8003a70 <wiz_recv_data>
		   break;
 800347c:	e073      	b.n	8003566 <recvfrom+0x35a>
 800347e:	bf00      	nop
 8003480:	2000061c 	.word	0x2000061c
 8003484:	20000616 	.word	0x20000616
 8003488:	2000062c 	.word	0x2000062c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	4a53      	ldr	r2, [pc, #332]	@ (80035dc <recvfrom+0x3d0>)
 8003490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d144      	bne.n	8003522 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8003498:	f107 0114 	add.w	r1, r7, #20
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2206      	movs	r2, #6
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fae5 	bl	8003a70 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	3301      	adds	r3, #1
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034b2:	2140      	movs	r1, #64	@ 0x40
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f8e1 	bl	800367c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80034ba:	bf00      	nop
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	3301      	adds	r3, #1
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f88b 	bl	80035e4 <WIZCHIP_READ>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f3      	bne.n	80034bc <recvfrom+0x2b0>
   			addr[0] = head[0];
 80034d4:	7d3a      	ldrb	r2, [r7, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3301      	adds	r3, #1
 80034de:	7d7a      	ldrb	r2, [r7, #21]
 80034e0:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3302      	adds	r3, #2
 80034e6:	7dba      	ldrb	r2, [r7, #22]
 80034e8:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3303      	adds	r3, #3
 80034ee:	7dfa      	ldrb	r2, [r7, #23]
 80034f0:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80034f2:	7e3a      	ldrb	r2, [r7, #24]
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4a38      	ldr	r2, [pc, #224]	@ (80035dc <recvfrom+0x3d0>)
 80034fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	4a36      	ldr	r2, [pc, #216]	@ (80035dc <recvfrom+0x3d0>)
 8003502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	b29a      	uxth	r2, r3
 800350a:	7e7b      	ldrb	r3, [r7, #25]
 800350c:	4619      	mov	r1, r3
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	440a      	add	r2, r1
 8003512:	b291      	uxth	r1, r2
 8003514:	4a31      	ldr	r2, [pc, #196]	@ (80035dc <recvfrom+0x3d0>)
 8003516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	4a30      	ldr	r2, [pc, #192]	@ (80035e0 <recvfrom+0x3d4>)
 800351e:	2180      	movs	r1, #128	@ 0x80
 8003520:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	4a2d      	ldr	r2, [pc, #180]	@ (80035dc <recvfrom+0x3d0>)
 8003526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800352a:	89ba      	ldrh	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d202      	bcs.n	8003536 <recvfrom+0x32a>
 8003530:	89bb      	ldrh	r3, [r7, #12]
 8003532:	83fb      	strh	r3, [r7, #30]
 8003534:	e004      	b.n	8003540 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	4a28      	ldr	r2, [pc, #160]	@ (80035dc <recvfrom+0x3d0>)
 800353a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800353e:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003540:	8bfa      	ldrh	r2, [r7, #30]
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fa92 	bl	8003a70 <wiz_recv_data>
			break;
 800354c:	e00b      	b.n	8003566 <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800354e:	8bfa      	ldrh	r2, [r7, #30]
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fae5 	bl	8003b24 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	491f      	ldr	r1, [pc, #124]	@ (80035dc <recvfrom+0x3d0>)
 800355e:	8bfa      	ldrh	r2, [r7, #30]
 8003560:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8003564:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	3301      	adds	r3, #1
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003572:	2140      	movs	r1, #64	@ 0x40
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f881 	bl	800367c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800357a:	bf00      	nop
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3301      	adds	r3, #1
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003588:	4618      	mov	r0, r3
 800358a:	f000 f82b 	bl	80035e4 <WIZCHIP_READ>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f3      	bne.n	800357c <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	4a11      	ldr	r2, [pc, #68]	@ (80035dc <recvfrom+0x3d0>)
 8003598:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	8bfa      	ldrh	r2, [r7, #30]
 80035a0:	1a8a      	subs	r2, r1, r2
 80035a2:	b291      	uxth	r1, r2
 80035a4:	4a0d      	ldr	r2, [pc, #52]	@ (80035dc <recvfrom+0x3d0>)
 80035a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	4a0b      	ldr	r2, [pc, #44]	@ (80035dc <recvfrom+0x3d0>)
 80035ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	4a09      	ldr	r2, [pc, #36]	@ (80035e0 <recvfrom+0x3d4>)
 80035ba:	5cd2      	ldrb	r2, [r2, r3]
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	b2d1      	uxtb	r1, r2
 80035c4:	4a06      	ldr	r2, [pc, #24]	@ (80035e0 <recvfrom+0x3d4>)
 80035c6:	54d1      	strb	r1, [r2, r3]
 80035c8:	e003      	b.n	80035d2 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	4a04      	ldr	r2, [pc, #16]	@ (80035e0 <recvfrom+0x3d4>)
 80035ce:	2100      	movs	r1, #0
 80035d0:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80035d2:	8bfb      	ldrh	r3, [r7, #30]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	2000061c 	.word	0x2000061c
 80035e0:	2000062c 	.word	0x2000062c

080035e4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80035ec:	4b22      	ldr	r3, [pc, #136]	@ (8003678 <WIZCHIP_READ+0x94>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80035f2:	4b21      	ldr	r3, [pc, #132]	@ (8003678 <WIZCHIP_READ+0x94>)
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80035f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003678 <WIZCHIP_READ+0x94>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <WIZCHIP_READ+0x24>
 8003600:	4b1d      	ldr	r3, [pc, #116]	@ (8003678 <WIZCHIP_READ+0x94>)
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d114      	bne.n	8003632 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003608:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <WIZCHIP_READ+0x94>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	0c12      	lsrs	r2, r2, #16
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	4610      	mov	r0, r2
 8003614:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003616:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <WIZCHIP_READ+0x94>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	0a12      	lsrs	r2, r2, #8
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	4610      	mov	r0, r2
 8003622:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003624:	4b14      	ldr	r3, [pc, #80]	@ (8003678 <WIZCHIP_READ+0x94>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	4610      	mov	r0, r2
 800362e:	4798      	blx	r3
 8003630:	e011      	b.n	8003656 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	b2db      	uxtb	r3, r3
 8003638:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	b2db      	uxtb	r3, r3
 8003640:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003648:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <WIZCHIP_READ+0x94>)
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	f107 020c 	add.w	r2, r7, #12
 8003650:	2103      	movs	r1, #3
 8003652:	4610      	mov	r0, r2
 8003654:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003656:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <WIZCHIP_READ+0x94>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4798      	blx	r3
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <WIZCHIP_READ+0x94>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003666:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <WIZCHIP_READ+0x94>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	4798      	blx	r3
   return ret;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000038 	.word	0x20000038

0800367c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003688:	4b22      	ldr	r3, [pc, #136]	@ (8003714 <WIZCHIP_WRITE+0x98>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800368e:	4b21      	ldr	r3, [pc, #132]	@ (8003714 <WIZCHIP_WRITE+0x98>)
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800369c:	4b1d      	ldr	r3, [pc, #116]	@ (8003714 <WIZCHIP_WRITE+0x98>)
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d119      	bne.n	80036d8 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80036a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <WIZCHIP_WRITE+0x98>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	0c12      	lsrs	r2, r2, #16
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	4610      	mov	r0, r2
 80036b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <WIZCHIP_WRITE+0x98>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	0a12      	lsrs	r2, r2, #8
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	4610      	mov	r0, r2
 80036be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80036c0:	4b14      	ldr	r3, [pc, #80]	@ (8003714 <WIZCHIP_WRITE+0x98>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	4610      	mov	r0, r2
 80036ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80036cc:	4b11      	ldr	r3, [pc, #68]	@ (8003714 <WIZCHIP_WRITE+0x98>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	4610      	mov	r0, r2
 80036d4:	4798      	blx	r3
 80036d6:	e013      	b.n	8003700 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0c1b      	lsrs	r3, r3, #16
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80036f2:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <WIZCHIP_WRITE+0x98>)
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	f107 020c 	add.w	r2, r7, #12
 80036fa:	2104      	movs	r1, #4
 80036fc:	4610      	mov	r0, r2
 80036fe:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003700:	4b04      	ldr	r3, [pc, #16]	@ (8003714 <WIZCHIP_WRITE+0x98>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003706:	4b03      	ldr	r3, [pc, #12]	@ (8003714 <WIZCHIP_WRITE+0x98>)
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	4798      	blx	r3
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000038 	.word	0x20000038

08003718 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003726:	4b2b      	ldr	r3, [pc, #172]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800372c:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003732:	4b28      	ldr	r3, [pc, #160]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <WIZCHIP_READ_BUF+0x2a>
 800373a:	4b26      	ldr	r3, [pc, #152]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 800373c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d126      	bne.n	8003790 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003742:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	0c12      	lsrs	r2, r2, #16
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	4610      	mov	r0, r2
 800374e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003750:	4b20      	ldr	r3, [pc, #128]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	0a12      	lsrs	r2, r2, #8
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	4610      	mov	r0, r2
 800375c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800375e:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	4610      	mov	r0, r2
 8003768:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	82fb      	strh	r3, [r7, #22]
 800376e:	e00a      	b.n	8003786 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003770:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	8afa      	ldrh	r2, [r7, #22]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	188c      	adds	r4, r1, r2
 800377a:	4798      	blx	r3
 800377c:	4603      	mov	r3, r0
 800377e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003780:	8afb      	ldrh	r3, [r7, #22]
 8003782:	3301      	adds	r3, #1
 8003784:	82fb      	strh	r3, [r7, #22]
 8003786:	8afa      	ldrh	r2, [r7, #22]
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3f0      	bcc.n	8003770 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800378e:	e017      	b.n	80037c0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	0c1b      	lsrs	r3, r3, #16
 8003794:	b2db      	uxtb	r3, r3
 8003796:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	b2db      	uxtb	r3, r3
 800379e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80037a6:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 80037a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037aa:	f107 0210 	add.w	r2, r7, #16
 80037ae:	2103      	movs	r1, #3
 80037b0:	4610      	mov	r0, r2
 80037b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80037b4:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	88fa      	ldrh	r2, [r7, #6]
 80037ba:	4611      	mov	r1, r2
 80037bc:	68b8      	ldr	r0, [r7, #8]
 80037be:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80037c0:	4b04      	ldr	r3, [pc, #16]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80037c6:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <WIZCHIP_READ_BUF+0xbc>)
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	4798      	blx	r3
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd90      	pop	{r4, r7, pc}
 80037d4:	20000038 	.word	0x20000038

080037d8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80037e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	4798      	blx	r3
   WIZCHIP.CS._select();
 80037ec:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f043 0304 	orr.w	r3, r3, #4
 80037f8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80037fa:	4b26      	ldr	r3, [pc, #152]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d126      	bne.n	8003850 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003802:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	0c12      	lsrs	r2, r2, #16
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	4610      	mov	r0, r2
 800380e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003810:	4b20      	ldr	r3, [pc, #128]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	0a12      	lsrs	r2, r2, #8
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	4610      	mov	r0, r2
 800381c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800381e:	4b1d      	ldr	r3, [pc, #116]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	4610      	mov	r0, r2
 8003828:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800382a:	2300      	movs	r3, #0
 800382c:	82fb      	strh	r3, [r7, #22]
 800382e:	e00a      	b.n	8003846 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003830:	4b18      	ldr	r3, [pc, #96]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	8afa      	ldrh	r2, [r7, #22]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	440a      	add	r2, r1
 800383a:	7812      	ldrb	r2, [r2, #0]
 800383c:	4610      	mov	r0, r2
 800383e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003840:	8afb      	ldrh	r3, [r7, #22]
 8003842:	3301      	adds	r3, #1
 8003844:	82fb      	strh	r3, [r7, #22]
 8003846:	8afa      	ldrh	r2, [r7, #22]
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	429a      	cmp	r2, r3
 800384c:	d3f0      	bcc.n	8003830 <WIZCHIP_WRITE_BUF+0x58>
 800384e:	e017      	b.n	8003880 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	0c1b      	lsrs	r3, r3, #16
 8003854:	b2db      	uxtb	r3, r3
 8003856:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	b2db      	uxtb	r3, r3
 800385e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003866:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	f107 0210 	add.w	r2, r7, #16
 800386e:	2103      	movs	r1, #3
 8003870:	4610      	mov	r0, r2
 8003872:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003874:	4b07      	ldr	r3, [pc, #28]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	4611      	mov	r1, r2
 800387c:	68b8      	ldr	r0, [r7, #8]
 800387e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003880:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003886:	4b03      	ldr	r3, [pc, #12]	@ (8003894 <WIZCHIP_WRITE_BUF+0xbc>)
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	4798      	blx	r3
}
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000038 	.word	0x20000038

08003898 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	81fb      	strh	r3, [r7, #14]
 80038a6:	2300      	movs	r3, #0
 80038a8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3301      	adds	r3, #1
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fe94 	bl	80035e4 <WIZCHIP_READ>
 80038bc:	4603      	mov	r3, r0
 80038be:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80038c0:	89bb      	ldrh	r3, [r7, #12]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	b29c      	uxth	r4, r3
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	3301      	adds	r3, #1
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fe86 	bl	80035e4 <WIZCHIP_READ>
 80038d8:	4603      	mov	r3, r0
 80038da:	4423      	add	r3, r4
 80038dc:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80038de:	89bb      	ldrh	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d019      	beq.n	8003918 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	3301      	adds	r3, #1
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fe77 	bl	80035e4 <WIZCHIP_READ>
 80038f6:	4603      	mov	r3, r0
 80038f8:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80038fa:	89fb      	ldrh	r3, [r7, #14]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	b29c      	uxth	r4, r3
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	3301      	adds	r3, #1
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fe69 	bl	80035e4 <WIZCHIP_READ>
 8003912:	4603      	mov	r3, r0
 8003914:	4423      	add	r3, r4
 8003916:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003918:	89fa      	ldrh	r2, [r7, #14]
 800391a:	89bb      	ldrh	r3, [r7, #12]
 800391c:	429a      	cmp	r2, r3
 800391e:	d1c4      	bne.n	80038aa <getSn_TX_FSR+0x12>
   return val;
 8003920:	89fb      	ldrh	r3, [r7, #14]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}

0800392a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800392a:	b590      	push	{r4, r7, lr}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	4603      	mov	r3, r0
 8003932:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003934:	2300      	movs	r3, #0
 8003936:	81fb      	strh	r3, [r7, #14]
 8003938:	2300      	movs	r3, #0
 800393a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	3301      	adds	r3, #1
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fe4b 	bl	80035e4 <WIZCHIP_READ>
 800394e:	4603      	mov	r3, r0
 8003950:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003952:	89bb      	ldrh	r3, [r7, #12]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	b29c      	uxth	r4, r3
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	3301      	adds	r3, #1
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fe3d 	bl	80035e4 <WIZCHIP_READ>
 800396a:	4603      	mov	r3, r0
 800396c:	4423      	add	r3, r4
 800396e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003970:	89bb      	ldrh	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d019      	beq.n	80039aa <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	3301      	adds	r3, #1
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fe2e 	bl	80035e4 <WIZCHIP_READ>
 8003988:	4603      	mov	r3, r0
 800398a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800398c:	89fb      	ldrh	r3, [r7, #14]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	b29c      	uxth	r4, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	3301      	adds	r3, #1
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fe20 	bl	80035e4 <WIZCHIP_READ>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4423      	add	r3, r4
 80039a8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80039aa:	89fa      	ldrh	r2, [r7, #14]
 80039ac:	89bb      	ldrh	r3, [r7, #12]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d1c4      	bne.n	800393c <getSn_RX_RSR+0x12>
   return val;
 80039b2:	89fb      	ldrh	r3, [r7, #14]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd90      	pop	{r4, r7, pc}

080039bc <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	6039      	str	r1, [r7, #0]
 80039c6:	71fb      	strb	r3, [r7, #7]
 80039c8:	4613      	mov	r3, r2
 80039ca:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80039d4:	88bb      	ldrh	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d046      	beq.n	8003a68 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	3301      	adds	r3, #1
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fdfc 	bl	80035e4 <WIZCHIP_READ>
 80039ec:	4603      	mov	r3, r0
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	b29c      	uxth	r4, r3
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	3301      	adds	r3, #1
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fdf0 	bl	80035e4 <WIZCHIP_READ>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4423      	add	r3, r4
 8003a08:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003a0a:	89fb      	ldrh	r3, [r7, #14]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	79fa      	ldrb	r2, [r7, #7]
 8003a10:	0092      	lsls	r2, r2, #2
 8003a12:	3202      	adds	r2, #2
 8003a14:	00d2      	lsls	r2, r2, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003a1a:	88bb      	ldrh	r3, [r7, #4]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6839      	ldr	r1, [r7, #0]
 8003a20:	68b8      	ldr	r0, [r7, #8]
 8003a22:	f7ff fed9 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003a26:	89fa      	ldrh	r2, [r7, #14]
 8003a28:	88bb      	ldrh	r3, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	3301      	adds	r3, #1
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	89fb      	ldrh	r3, [r7, #14]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f7ff fe18 	bl	800367c <WIZCHIP_WRITE>
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	3301      	adds	r3, #1
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003a58:	461a      	mov	r2, r3
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f7ff fe0b 	bl	800367c <WIZCHIP_WRITE>
 8003a66:	e000      	b.n	8003a6a <wiz_send_data+0xae>
   if(len == 0)  return;
 8003a68:	bf00      	nop
}
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd90      	pop	{r4, r7, pc}

08003a70 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	71fb      	strb	r3, [r7, #7]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003a88:	88bb      	ldrh	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d046      	beq.n	8003b1c <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	3301      	adds	r3, #1
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fda2 	bl	80035e4 <WIZCHIP_READ>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	b29c      	uxth	r4, r3
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	3301      	adds	r3, #1
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fd96 	bl	80035e4 <WIZCHIP_READ>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4423      	add	r3, r4
 8003abc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003abe:	89fb      	ldrh	r3, [r7, #14]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	79fa      	ldrb	r2, [r7, #7]
 8003ac4:	0092      	lsls	r2, r2, #2
 8003ac6:	3203      	adds	r2, #3
 8003ac8:	00d2      	lsls	r2, r2, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003ace:	88bb      	ldrh	r3, [r7, #4]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6839      	ldr	r1, [r7, #0]
 8003ad4:	68b8      	ldr	r0, [r7, #8]
 8003ad6:	f7ff fe1f 	bl	8003718 <WIZCHIP_READ_BUF>
   ptr += len;
 8003ada:	89fa      	ldrh	r2, [r7, #14]
 8003adc:	88bb      	ldrh	r3, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003aee:	461a      	mov	r2, r3
 8003af0:	89fb      	ldrh	r3, [r7, #14]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f7ff fdbe 	bl	800367c <WIZCHIP_WRITE>
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	3301      	adds	r3, #1
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	89fb      	ldrh	r3, [r7, #14]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f7ff fdb1 	bl	800367c <WIZCHIP_WRITE>
 8003b1a:	e000      	b.n	8003b1e <wiz_recv_data+0xae>
   if(len == 0) return;
 8003b1c:	bf00      	nop
}
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd90      	pop	{r4, r7, pc}

08003b24 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	460a      	mov	r2, r1
 8003b2e:	71fb      	strb	r3, [r7, #7]
 8003b30:	4613      	mov	r3, r2
 8003b32:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fd4d 	bl	80035e4 <WIZCHIP_READ>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	b29c      	uxth	r4, r3
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	3301      	adds	r3, #1
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fd41 	bl	80035e4 <WIZCHIP_READ>
 8003b62:	4603      	mov	r3, r0
 8003b64:	4423      	add	r3, r4
 8003b66:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8003b68:	89fa      	ldrh	r2, [r7, #14]
 8003b6a:	88bb      	ldrh	r3, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	3301      	adds	r3, #1
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	89fb      	ldrh	r3, [r7, #14]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f7ff fd77 	bl	800367c <WIZCHIP_WRITE>
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	3301      	adds	r3, #1
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	89fb      	ldrh	r3, [r7, #14]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	f7ff fd6a 	bl	800367c <WIZCHIP_WRITE>
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd90      	pop	{r4, r7, pc}

08003bb0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70fb      	strb	r3, [r7, #3]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	2300      	movs	r3, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	807b      	strh	r3, [r7, #2]
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	460b      	mov	r3, r1
 8003c68:	807b      	strh	r3, [r7, #2]
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <reg_wizchip_cs_cbfunc+0x16>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c90:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <reg_wizchip_cs_cbfunc+0x44>)
 8003c92:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003c94:	4b08      	ldr	r3, [pc, #32]	@ (8003cb8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c96:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc0 <reg_wizchip_cs_cbfunc+0x48>)
 8003c98:	619a      	str	r2, [r3, #24]
 8003c9a:	e006      	b.n	8003caa <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003c9c:	4a06      	ldr	r2, [pc, #24]	@ (8003cb8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003ca2:	4a05      	ldr	r2, [pc, #20]	@ (8003cb8 <reg_wizchip_cs_cbfunc+0x40>)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6193      	str	r3, [r2, #24]
   }
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000038 	.word	0x20000038
 8003cbc:	08003bcd 	.word	0x08003bcd
 8003cc0:	08003bdb 	.word	0x08003bdb

08003cc4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003cce:	bf00      	nop
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d10 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f9      	beq.n	8003cd0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <reg_wizchip_spi_cbfunc+0x24>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d106      	bne.n	8003cf6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003ce8:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cea:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <reg_wizchip_spi_cbfunc+0x50>)
 8003cec:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003cee:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cf0:	4a09      	ldr	r2, [pc, #36]	@ (8003d18 <reg_wizchip_spi_cbfunc+0x54>)
 8003cf2:	621a      	str	r2, [r3, #32]
 8003cf4:	e006      	b.n	8003d04 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003cf6:	4a06      	ldr	r2, [pc, #24]	@ (8003d10 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003cfc:	4a04      	ldr	r2, [pc, #16]	@ (8003d10 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6213      	str	r3, [r2, #32]
   }
}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	20000038 	.word	0x20000038
 8003d14:	08003c21 	.word	0x08003c21
 8003d18:	08003c31 	.word	0x08003c31

08003d1c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003d26:	bf00      	nop
 8003d28:	4b0f      	ldr	r3, [pc, #60]	@ (8003d68 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f9      	beq.n	8003d28 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <reg_wizchip_spiburst_cbfunc+0x24>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003d40:	4b09      	ldr	r3, [pc, #36]	@ (8003d68 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d42:	4a0a      	ldr	r2, [pc, #40]	@ (8003d6c <reg_wizchip_spiburst_cbfunc+0x50>)
 8003d44:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003d46:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d48:	4a09      	ldr	r2, [pc, #36]	@ (8003d70 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003d4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d4c:	e006      	b.n	8003d5c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003d4e:	4a06      	ldr	r2, [pc, #24]	@ (8003d68 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003d54:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	20000038 	.word	0x20000038
 8003d6c:	08003c47 	.word	0x08003c47
 8003d70:	08003c5f 	.word	0x08003c5f

08003d74 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	6039      	str	r1, [r7, #0]
 8003d7e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	f200 80c5 	bhi.w	8003f1e <ctlwizchip+0x1aa>
 8003d94:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <ctlwizchip+0x28>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003ddd 	.word	0x08003ddd
 8003da0:	08003de3 	.word	0x08003de3
 8003da4:	08003e0f 	.word	0x08003e0f
 8003da8:	08003e03 	.word	0x08003e03
 8003dac:	08003e1d 	.word	0x08003e1d
 8003db0:	08003e29 	.word	0x08003e29
 8003db4:	08003e37 	.word	0x08003e37
 8003db8:	08003e5d 	.word	0x08003e5d
 8003dbc:	08003e7f 	.word	0x08003e7f
 8003dc0:	08003ec3 	.word	0x08003ec3
 8003dc4:	08003ec9 	.word	0x08003ec9
 8003dc8:	08003ed1 	.word	0x08003ed1
 8003dcc:	08003f25 	.word	0x08003f25
 8003dd0:	08003ed9 	.word	0x08003ed9
 8003dd4:	08003ee7 	.word	0x08003ee7
 8003dd8:	08003f03 	.word	0x08003f03
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003ddc:	f000 f8aa 	bl	8003f34 <wizchip_sw_reset>
         break;
 8003de0:	e0a1      	b.n	8003f26 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3308      	adds	r3, #8
 8003df0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f8e7 	bl	8003fcc <wizchip_init>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	e092      	b.n	8003f28 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f96c 	bl	80040e4 <wizchip_clrinterrupt>
         break;
 8003e0c:	e08b      	b.n	8003f26 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003e0e:	f000 f99d 	bl	800414c <wizchip_getinterrupt>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	801a      	strh	r2, [r3, #0]
         break;
 8003e1a:	e084      	b.n	8003f26 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 f9b8 	bl	8004196 <wizchip_setinterruptmask>
         break;         
 8003e26:	e07e      	b.n	8003f26 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003e28:	f000 f9d0 	bl	80041cc <wizchip_getinterruptmask>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	801a      	strh	r2, [r3, #0]
         break;
 8003e34:	e077      	b.n	8003f26 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4619      	mov	r1, r3
 8003e42:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003e46:	f7ff fc19 	bl	800367c <WIZCHIP_WRITE>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003e56:	f7ff fc11 	bl	800367c <WIZCHIP_WRITE>
         break;
 8003e5a:	e064      	b.n	8003f26 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003e5c:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003e60:	f7ff fbc0 	bl	80035e4 <WIZCHIP_READ>
 8003e64:	4603      	mov	r3, r0
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	b29c      	uxth	r4, r3
 8003e6a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003e6e:	f7ff fbb9 	bl	80035e4 <WIZCHIP_READ>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4423      	add	r3, r4
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	801a      	strh	r2, [r3, #0]
         break;
 8003e7c:	e053      	b.n	8003f26 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f30 <ctlwizchip+0x1bc>)
 8003e80:	789a      	ldrb	r2, [r3, #2]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	4a29      	ldr	r2, [pc, #164]	@ (8003f30 <ctlwizchip+0x1bc>)
 8003e8c:	78d2      	ldrb	r2, [r2, #3]
 8003e8e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	3302      	adds	r3, #2
 8003e94:	4a26      	ldr	r2, [pc, #152]	@ (8003f30 <ctlwizchip+0x1bc>)
 8003e96:	7912      	ldrb	r2, [r2, #4]
 8003e98:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	3303      	adds	r3, #3
 8003e9e:	4a24      	ldr	r2, [pc, #144]	@ (8003f30 <ctlwizchip+0x1bc>)
 8003ea0:	7952      	ldrb	r2, [r2, #5]
 8003ea2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4a21      	ldr	r2, [pc, #132]	@ (8003f30 <ctlwizchip+0x1bc>)
 8003eaa:	7992      	ldrb	r2, [r2, #6]
 8003eac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	3305      	adds	r3, #5
 8003eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f30 <ctlwizchip+0x1bc>)
 8003eb4:	79d2      	ldrb	r2, [r2, #7]
 8003eb6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	3306      	adds	r3, #6
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
         break;
 8003ec0:	e031      	b.n	8003f26 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003ec2:	f000 f9d5 	bl	8004270 <wizphy_reset>
         break;
 8003ec6:	e02e      	b.n	8003f26 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003ec8:	6838      	ldr	r0, [r7, #0]
 8003eca:	f000 f9f8 	bl	80042be <wizphy_setphyconf>
         break;
 8003ece:	e02a      	b.n	8003f26 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003ed0:	6838      	ldr	r0, [r7, #0]
 8003ed2:	f000 fa37 	bl	8004344 <wizphy_getphyconf>
         break;
 8003ed6:	e026      	b.n	8003f26 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fa9b 	bl	8004418 <wizphy_setphypmode>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	e020      	b.n	8003f28 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003ee6:	f000 f9aa 	bl	800423e <wizphy_getphypmode>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2bff      	cmp	r3, #255	@ 0xff
 8003ef2:	d102      	bne.n	8003efa <ctlwizchip+0x186>
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef8:	e016      	b.n	8003f28 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	7dfa      	ldrb	r2, [r7, #23]
 8003efe:	701a      	strb	r2, [r3, #0]
         break;
 8003f00:	e011      	b.n	8003f26 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003f02:	f000 f986 	bl	8004212 <wizphy_getphylink>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
 8003f0c:	2bff      	cmp	r3, #255	@ 0xff
 8003f0e:	d102      	bne.n	8003f16 <ctlwizchip+0x1a2>
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
 8003f14:	e008      	b.n	8003f28 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	7dfa      	ldrb	r2, [r7, #23]
 8003f1a:	701a      	strb	r2, [r3, #0]
         break;
 8003f1c:	e003      	b.n	8003f26 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	e001      	b.n	8003f28 <ctlwizchip+0x1b4>
         break;
 8003f24:	bf00      	nop
   }
   return 0;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	20000038 	.word	0x20000038

08003f34 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	2206      	movs	r2, #6
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003f44:	f7ff fbe8 	bl	8003718 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003f48:	f107 0314 	add.w	r3, r7, #20
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003f54:	f7ff fbe0 	bl	8003718 <WIZCHIP_READ_BUF>
 8003f58:	f107 0310 	add.w	r3, r7, #16
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003f64:	f7ff fbd8 	bl	8003718 <WIZCHIP_READ_BUF>
 8003f68:	f107 030c 	add.w	r3, r7, #12
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003f74:	f7ff fbd0 	bl	8003718 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003f78:	2180      	movs	r1, #128	@ 0x80
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f7ff fb7e 	bl	800367c <WIZCHIP_WRITE>
   getMR(); // for delay
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7ff fb2f 	bl	80035e4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	2206      	movs	r2, #6
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003f90:	f7ff fc22 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	2204      	movs	r2, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003fa0:	f7ff fc1a 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003fa4:	f107 0310 	add.w	r3, r7, #16
 8003fa8:	2204      	movs	r2, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003fb0:	f7ff fc12 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003fb4:	f107 030c 	add.w	r3, r7, #12
 8003fb8:	2204      	movs	r2, #4
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003fc0:	f7ff fc0a 	bl	80037d8 <WIZCHIP_WRITE_BUF>
}
 8003fc4:	bf00      	nop
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003fda:	f7ff ffab 	bl	8003f34 <wizchip_sw_reset>
   if(txsize)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d03b      	beq.n	800405c <wizchip_init+0x90>
   {
      tmp = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]
 8003fec:	e015      	b.n	800401a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	781a      	ldrb	r2, [r3, #0]
 8003ff8:	7bbb      	ldrb	r3, [r7, #14]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004004:	2b10      	cmp	r3, #16
 8004006:	dd02      	ble.n	800400e <wizchip_init+0x42>
 8004008:	f04f 33ff 	mov.w	r3, #4294967295
 800400c:	e066      	b.n	80040dc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800400e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3301      	adds	r3, #1
 8004016:	b2db      	uxtb	r3, r3
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401e:	2b07      	cmp	r3, #7
 8004020:	dde5      	ble.n	8003fee <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	e015      	b.n	8004054 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	3301      	adds	r3, #1
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004036:	4618      	mov	r0, r3
 8004038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	4413      	add	r3, r2
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	f7ff fb1a 	bl	800367c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	3301      	adds	r3, #1
 8004050:	b2db      	uxtb	r3, r3
 8004052:	73fb      	strb	r3, [r7, #15]
 8004054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004058:	2b07      	cmp	r3, #7
 800405a:	dde5      	ble.n	8004028 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d03b      	beq.n	80040da <wizchip_init+0x10e>
   {
      tmp = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	e015      	b.n	8004098 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800406c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	4413      	add	r3, r2
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	7bbb      	ldrb	r3, [r7, #14]
 8004078:	4413      	add	r3, r2
 800407a:	b2db      	uxtb	r3, r3
 800407c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800407e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004082:	2b10      	cmp	r3, #16
 8004084:	dd02      	ble.n	800408c <wizchip_init+0xc0>
 8004086:	f04f 33ff 	mov.w	r3, #4294967295
 800408a:	e027      	b.n	80040dc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800408c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	3301      	adds	r3, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409c:	2b07      	cmp	r3, #7
 800409e:	dde5      	ble.n	800406c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	e015      	b.n	80040d2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80040a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	3301      	adds	r3, #1
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80040b4:	4618      	mov	r0, r3
 80040b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	4413      	add	r3, r2
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f7ff fadb 	bl	800367c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80040c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d6:	2b07      	cmp	r3, #7
 80040d8:	dde5      	ble.n	80040a6 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	f023 030f 	bic.w	r3, r3, #15
 8004100:	b2db      	uxtb	r3, r3
 8004102:	4619      	mov	r1, r3
 8004104:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004108:	f7ff fab8 	bl	800367c <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 800410c:	2300      	movs	r3, #0
 800410e:	73fb      	strb	r3, [r7, #15]
 8004110:	e014      	b.n	800413c <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8004112:	7bba      	ldrb	r2, [r7, #14]
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	fa42 f303 	asr.w	r3, r2, r3
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <wizchip_clrinterrupt+0x52>
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3301      	adds	r3, #1
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800412e:	211f      	movs	r1, #31
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff faa3 	bl	800367c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	3301      	adds	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b07      	cmp	r3, #7
 8004140:	d9e7      	bls.n	8004112 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800415e:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004162:	f7ff fa3f 	bl	80035e4 <WIZCHIP_READ>
 8004166:	4603      	mov	r3, r0
 8004168:	f023 030f 	bic.w	r3, r3, #15
 800416c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800416e:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8004172:	f7ff fa37 	bl	80035e4 <WIZCHIP_READ>
 8004176:	4603      	mov	r3, r0
 8004178:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800417a:	79bb      	ldrb	r3, [r7, #6]
 800417c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800417e:	88bb      	ldrh	r3, [r7, #4]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	b29a      	uxth	r2, r3
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	b29b      	uxth	r3, r3
 8004188:	4413      	add	r3, r2
 800418a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800418c:	88bb      	ldrh	r3, [r7, #4]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	4603      	mov	r3, r0
 800419e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	4619      	mov	r1, r3
 80041b0:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80041b4:	f7ff fa62 	bl	800367c <WIZCHIP_WRITE>
   setSIMR(simr);
 80041b8:	7bbb      	ldrb	r3, [r7, #14]
 80041ba:	4619      	mov	r1, r3
 80041bc:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80041c0:	f7ff fa5c 	bl	800367c <WIZCHIP_WRITE>
#endif   
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80041de:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80041e2:	f7ff f9ff 	bl	80035e4 <WIZCHIP_READ>
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80041ea:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80041ee:	f7ff f9f9 	bl	80035e4 <WIZCHIP_READ>
 80041f2:	4603      	mov	r3, r0
 80041f4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80041f6:	79bb      	ldrb	r3, [r7, #6]
 80041f8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80041fa:	88bb      	ldrh	r3, [r7, #4]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	b29a      	uxth	r2, r3
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	b29b      	uxth	r3, r3
 8004204:	4413      	add	r3, r2
 8004206:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004208:	88bb      	ldrh	r3, [r7, #4]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004218:	2300      	movs	r3, #0
 800421a:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800421c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004220:	f7ff f9e0 	bl	80035e4 <WIZCHIP_READ>
 8004224:	4603      	mov	r3, r0
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800422e:	2301      	movs	r3, #1
 8004230:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8004232:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004248:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800424c:	f7ff f9ca 	bl	80035e4 <WIZCHIP_READ>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004256:	2b30      	cmp	r3, #48	@ 0x30
 8004258:	d102      	bne.n	8004260 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800425a:	2301      	movs	r3, #1
 800425c:	71fb      	strb	r3, [r7, #7]
 800425e:	e001      	b.n	8004264 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004260:	2300      	movs	r3, #0
 8004262:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004264:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004276:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800427a:	f7ff f9b3 	bl	80035e4 <WIZCHIP_READ>
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004288:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	4619      	mov	r1, r3
 800428e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004292:	f7ff f9f3 	bl	800367c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004296:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800429a:	f7ff f9a3 	bl	80035e4 <WIZCHIP_READ>
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042a8:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	4619      	mov	r1, r3
 80042ae:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80042b2:	f7ff f9e3 	bl	800367c <WIZCHIP_WRITE>
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d104      	bne.n	80042dc <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	e003      	b.n	80042e4 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042e2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	785b      	ldrb	r3, [r3, #1]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d104      	bne.n	80042f6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80042f2:	73fb      	strb	r3, [r7, #15]
 80042f4:	e019      	b.n	800432a <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	78db      	ldrb	r3, [r3, #3]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10d      	bne.n	800431a <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	789b      	ldrb	r3, [r3, #2]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d104      	bne.n	8004310 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	f043 0318 	orr.w	r3, r3, #24
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	e00c      	b.n	800432a <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	f043 0308 	orr.w	r3, r3, #8
 8004316:	73fb      	strb	r3, [r7, #15]
 8004318:	e007      	b.n	800432a <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	789b      	ldrb	r3, [r3, #2]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d103      	bne.n	800432a <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	f043 0310 	orr.w	r3, r3, #16
 8004328:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	4619      	mov	r1, r3
 800432e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004332:	f7ff f9a3 	bl	800367c <WIZCHIP_WRITE>
   wizphy_reset();
 8004336:	f7ff ff9b 	bl	8004270 <wizphy_reset>
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004350:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004354:	f7ff f946 	bl	80035e4 <WIZCHIP_READ>
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	119b      	asrs	r3, r3, #6
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	b2da      	uxtb	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004372:	2b20      	cmp	r3, #32
 8004374:	d001      	beq.n	800437a <wizphy_getphyconf+0x36>
 8004376:	2b38      	cmp	r3, #56	@ 0x38
 8004378:	d103      	bne.n	8004382 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	705a      	strb	r2, [r3, #1]
         break;
 8004380:	e003      	b.n	800438a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	705a      	strb	r2, [r3, #1]
         break;
 8004388:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004390:	3b10      	subs	r3, #16
 8004392:	2b10      	cmp	r3, #16
 8004394:	bf8c      	ite	hi
 8004396:	2201      	movhi	r2, #1
 8004398:	2200      	movls	r2, #0
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	2a00      	cmp	r2, #0
 800439e:	d10f      	bne.n	80043c0 <wizphy_getphyconf+0x7c>
 80043a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004410 <wizphy_getphyconf+0xcc>)
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bf14      	ite	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	2300      	moveq	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	709a      	strb	r2, [r3, #2]
         break;
 80043be:	e003      	b.n	80043c8 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	709a      	strb	r2, [r3, #2]
         break;
 80043c6:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043ce:	3b08      	subs	r3, #8
 80043d0:	2b18      	cmp	r3, #24
 80043d2:	bf8c      	ite	hi
 80043d4:	2201      	movhi	r2, #1
 80043d6:	2200      	movls	r2, #0
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d10f      	bne.n	80043fe <wizphy_getphyconf+0xba>
 80043de:	4a0d      	ldr	r2, [pc, #52]	@ (8004414 <wizphy_getphyconf+0xd0>)
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	70da      	strb	r2, [r3, #3]
         break;
 80043fc:	e003      	b.n	8004406 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	70da      	strb	r2, [r3, #3]
         break;
 8004404:	bf00      	nop
   }
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	00010101 	.word	0x00010101
 8004414:	01010001 	.word	0x01010001

08004418 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004426:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800442a:	f7ff f8db 	bl	80035e4 <WIZCHIP_READ>
 800442e:	4603      	mov	r3, r0
 8004430:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <wizphy_setphypmode+0x2a>
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
 8004440:	e030      	b.n	80044a4 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004448:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d104      	bne.n	800445a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	e003      	b.n	8004462 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004460:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	4619      	mov	r1, r3
 8004466:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800446a:	f7ff f907 	bl	800367c <WIZCHIP_WRITE>
   wizphy_reset();
 800446e:	f7ff feff 	bl	8004270 <wizphy_reset>
   tmp = getPHYCFGR();
 8004472:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004476:	f7ff f8b5 	bl	80035e4 <WIZCHIP_READ>
 800447a:	4603      	mov	r3, r0
 800447c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d106      	bne.n	8004492 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <wizphy_setphypmode+0x88>
 800448e:	2300      	movs	r3, #0
 8004490:	e008      	b.n	80044a4 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <wizphy_setphypmode+0x88>
 800449c:	2300      	movs	r3, #0
 800449e:	e001      	b.n	80044a4 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80044a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2206      	movs	r2, #6
 80044b8:	4619      	mov	r1, r3
 80044ba:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80044be:	f7ff f98b 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	330e      	adds	r3, #14
 80044c6:	2204      	movs	r2, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80044ce:	f7ff f983 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	330a      	adds	r3, #10
 80044d6:	2204      	movs	r2, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80044de:	f7ff f97b 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3306      	adds	r3, #6
 80044e6:	2204      	movs	r2, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80044ee:	f7ff f973 	bl	80037d8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	7c9a      	ldrb	r2, [r3, #18]
 80044f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <wizchip_setnetinfo+0x78>)
 80044f8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	7cda      	ldrb	r2, [r3, #19]
 80044fe:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <wizchip_setnetinfo+0x78>)
 8004500:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	7d1a      	ldrb	r2, [r3, #20]
 8004506:	4b07      	ldr	r3, [pc, #28]	@ (8004524 <wizchip_setnetinfo+0x78>)
 8004508:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	7d5a      	ldrb	r2, [r3, #21]
 800450e:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <wizchip_setnetinfo+0x78>)
 8004510:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	7d9a      	ldrb	r2, [r3, #22]
 8004516:	4b04      	ldr	r3, [pc, #16]	@ (8004528 <wizchip_setnetinfo+0x7c>)
 8004518:	701a      	strb	r2, [r3, #0]
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000634 	.word	0x20000634
 8004528:	20000638 	.word	0x20000638

0800452c <sbrk_aligned>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	4e0f      	ldr	r6, [pc, #60]	@ (800456c <sbrk_aligned+0x40>)
 8004530:	460c      	mov	r4, r1
 8004532:	6831      	ldr	r1, [r6, #0]
 8004534:	4605      	mov	r5, r0
 8004536:	b911      	cbnz	r1, 800453e <sbrk_aligned+0x12>
 8004538:	f000 fb0c 	bl	8004b54 <_sbrk_r>
 800453c:	6030      	str	r0, [r6, #0]
 800453e:	4621      	mov	r1, r4
 8004540:	4628      	mov	r0, r5
 8004542:	f000 fb07 	bl	8004b54 <_sbrk_r>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	d103      	bne.n	8004552 <sbrk_aligned+0x26>
 800454a:	f04f 34ff 	mov.w	r4, #4294967295
 800454e:	4620      	mov	r0, r4
 8004550:	bd70      	pop	{r4, r5, r6, pc}
 8004552:	1cc4      	adds	r4, r0, #3
 8004554:	f024 0403 	bic.w	r4, r4, #3
 8004558:	42a0      	cmp	r0, r4
 800455a:	d0f8      	beq.n	800454e <sbrk_aligned+0x22>
 800455c:	1a21      	subs	r1, r4, r0
 800455e:	4628      	mov	r0, r5
 8004560:	f000 faf8 	bl	8004b54 <_sbrk_r>
 8004564:	3001      	adds	r0, #1
 8004566:	d1f2      	bne.n	800454e <sbrk_aligned+0x22>
 8004568:	e7ef      	b.n	800454a <sbrk_aligned+0x1e>
 800456a:	bf00      	nop
 800456c:	2000063c 	.word	0x2000063c

08004570 <_malloc_r>:
 8004570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004574:	1ccd      	adds	r5, r1, #3
 8004576:	f025 0503 	bic.w	r5, r5, #3
 800457a:	3508      	adds	r5, #8
 800457c:	2d0c      	cmp	r5, #12
 800457e:	bf38      	it	cc
 8004580:	250c      	movcc	r5, #12
 8004582:	2d00      	cmp	r5, #0
 8004584:	4606      	mov	r6, r0
 8004586:	db01      	blt.n	800458c <_malloc_r+0x1c>
 8004588:	42a9      	cmp	r1, r5
 800458a:	d904      	bls.n	8004596 <_malloc_r+0x26>
 800458c:	230c      	movs	r3, #12
 800458e:	6033      	str	r3, [r6, #0]
 8004590:	2000      	movs	r0, #0
 8004592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004596:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800466c <_malloc_r+0xfc>
 800459a:	f000 f869 	bl	8004670 <__malloc_lock>
 800459e:	f8d8 3000 	ldr.w	r3, [r8]
 80045a2:	461c      	mov	r4, r3
 80045a4:	bb44      	cbnz	r4, 80045f8 <_malloc_r+0x88>
 80045a6:	4629      	mov	r1, r5
 80045a8:	4630      	mov	r0, r6
 80045aa:	f7ff ffbf 	bl	800452c <sbrk_aligned>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	4604      	mov	r4, r0
 80045b2:	d158      	bne.n	8004666 <_malloc_r+0xf6>
 80045b4:	f8d8 4000 	ldr.w	r4, [r8]
 80045b8:	4627      	mov	r7, r4
 80045ba:	2f00      	cmp	r7, #0
 80045bc:	d143      	bne.n	8004646 <_malloc_r+0xd6>
 80045be:	2c00      	cmp	r4, #0
 80045c0:	d04b      	beq.n	800465a <_malloc_r+0xea>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	4639      	mov	r1, r7
 80045c6:	4630      	mov	r0, r6
 80045c8:	eb04 0903 	add.w	r9, r4, r3
 80045cc:	f000 fac2 	bl	8004b54 <_sbrk_r>
 80045d0:	4581      	cmp	r9, r0
 80045d2:	d142      	bne.n	800465a <_malloc_r+0xea>
 80045d4:	6821      	ldr	r1, [r4, #0]
 80045d6:	1a6d      	subs	r5, r5, r1
 80045d8:	4629      	mov	r1, r5
 80045da:	4630      	mov	r0, r6
 80045dc:	f7ff ffa6 	bl	800452c <sbrk_aligned>
 80045e0:	3001      	adds	r0, #1
 80045e2:	d03a      	beq.n	800465a <_malloc_r+0xea>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	442b      	add	r3, r5
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	f8d8 3000 	ldr.w	r3, [r8]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	bb62      	cbnz	r2, 800464c <_malloc_r+0xdc>
 80045f2:	f8c8 7000 	str.w	r7, [r8]
 80045f6:	e00f      	b.n	8004618 <_malloc_r+0xa8>
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	1b52      	subs	r2, r2, r5
 80045fc:	d420      	bmi.n	8004640 <_malloc_r+0xd0>
 80045fe:	2a0b      	cmp	r2, #11
 8004600:	d917      	bls.n	8004632 <_malloc_r+0xc2>
 8004602:	1961      	adds	r1, r4, r5
 8004604:	42a3      	cmp	r3, r4
 8004606:	6025      	str	r5, [r4, #0]
 8004608:	bf18      	it	ne
 800460a:	6059      	strne	r1, [r3, #4]
 800460c:	6863      	ldr	r3, [r4, #4]
 800460e:	bf08      	it	eq
 8004610:	f8c8 1000 	streq.w	r1, [r8]
 8004614:	5162      	str	r2, [r4, r5]
 8004616:	604b      	str	r3, [r1, #4]
 8004618:	4630      	mov	r0, r6
 800461a:	f000 f82f 	bl	800467c <__malloc_unlock>
 800461e:	f104 000b 	add.w	r0, r4, #11
 8004622:	1d23      	adds	r3, r4, #4
 8004624:	f020 0007 	bic.w	r0, r0, #7
 8004628:	1ac2      	subs	r2, r0, r3
 800462a:	bf1c      	itt	ne
 800462c:	1a1b      	subne	r3, r3, r0
 800462e:	50a3      	strne	r3, [r4, r2]
 8004630:	e7af      	b.n	8004592 <_malloc_r+0x22>
 8004632:	6862      	ldr	r2, [r4, #4]
 8004634:	42a3      	cmp	r3, r4
 8004636:	bf0c      	ite	eq
 8004638:	f8c8 2000 	streq.w	r2, [r8]
 800463c:	605a      	strne	r2, [r3, #4]
 800463e:	e7eb      	b.n	8004618 <_malloc_r+0xa8>
 8004640:	4623      	mov	r3, r4
 8004642:	6864      	ldr	r4, [r4, #4]
 8004644:	e7ae      	b.n	80045a4 <_malloc_r+0x34>
 8004646:	463c      	mov	r4, r7
 8004648:	687f      	ldr	r7, [r7, #4]
 800464a:	e7b6      	b.n	80045ba <_malloc_r+0x4a>
 800464c:	461a      	mov	r2, r3
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	42a3      	cmp	r3, r4
 8004652:	d1fb      	bne.n	800464c <_malloc_r+0xdc>
 8004654:	2300      	movs	r3, #0
 8004656:	6053      	str	r3, [r2, #4]
 8004658:	e7de      	b.n	8004618 <_malloc_r+0xa8>
 800465a:	230c      	movs	r3, #12
 800465c:	6033      	str	r3, [r6, #0]
 800465e:	4630      	mov	r0, r6
 8004660:	f000 f80c 	bl	800467c <__malloc_unlock>
 8004664:	e794      	b.n	8004590 <_malloc_r+0x20>
 8004666:	6005      	str	r5, [r0, #0]
 8004668:	e7d6      	b.n	8004618 <_malloc_r+0xa8>
 800466a:	bf00      	nop
 800466c:	20000640 	.word	0x20000640

08004670 <__malloc_lock>:
 8004670:	4801      	ldr	r0, [pc, #4]	@ (8004678 <__malloc_lock+0x8>)
 8004672:	f000 babc 	b.w	8004bee <__retarget_lock_acquire_recursive>
 8004676:	bf00      	nop
 8004678:	20000784 	.word	0x20000784

0800467c <__malloc_unlock>:
 800467c:	4801      	ldr	r0, [pc, #4]	@ (8004684 <__malloc_unlock+0x8>)
 800467e:	f000 bab7 	b.w	8004bf0 <__retarget_lock_release_recursive>
 8004682:	bf00      	nop
 8004684:	20000784 	.word	0x20000784

08004688 <std>:
 8004688:	2300      	movs	r3, #0
 800468a:	b510      	push	{r4, lr}
 800468c:	4604      	mov	r4, r0
 800468e:	e9c0 3300 	strd	r3, r3, [r0]
 8004692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004696:	6083      	str	r3, [r0, #8]
 8004698:	8181      	strh	r1, [r0, #12]
 800469a:	6643      	str	r3, [r0, #100]	@ 0x64
 800469c:	81c2      	strh	r2, [r0, #14]
 800469e:	6183      	str	r3, [r0, #24]
 80046a0:	4619      	mov	r1, r3
 80046a2:	2208      	movs	r2, #8
 80046a4:	305c      	adds	r0, #92	@ 0x5c
 80046a6:	f000 fa19 	bl	8004adc <memset>
 80046aa:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <std+0x58>)
 80046ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80046ae:	4b0d      	ldr	r3, [pc, #52]	@ (80046e4 <std+0x5c>)
 80046b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <std+0x60>)
 80046b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046b6:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <std+0x64>)
 80046b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80046ba:	4b0d      	ldr	r3, [pc, #52]	@ (80046f0 <std+0x68>)
 80046bc:	6224      	str	r4, [r4, #32]
 80046be:	429c      	cmp	r4, r3
 80046c0:	d006      	beq.n	80046d0 <std+0x48>
 80046c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046c6:	4294      	cmp	r4, r2
 80046c8:	d002      	beq.n	80046d0 <std+0x48>
 80046ca:	33d0      	adds	r3, #208	@ 0xd0
 80046cc:	429c      	cmp	r4, r3
 80046ce:	d105      	bne.n	80046dc <std+0x54>
 80046d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046d8:	f000 ba88 	b.w	8004bec <__retarget_lock_init_recursive>
 80046dc:	bd10      	pop	{r4, pc}
 80046de:	bf00      	nop
 80046e0:	0800492d 	.word	0x0800492d
 80046e4:	0800494f 	.word	0x0800494f
 80046e8:	08004987 	.word	0x08004987
 80046ec:	080049ab 	.word	0x080049ab
 80046f0:	20000644 	.word	0x20000644

080046f4 <stdio_exit_handler>:
 80046f4:	4a02      	ldr	r2, [pc, #8]	@ (8004700 <stdio_exit_handler+0xc>)
 80046f6:	4903      	ldr	r1, [pc, #12]	@ (8004704 <stdio_exit_handler+0x10>)
 80046f8:	4803      	ldr	r0, [pc, #12]	@ (8004708 <stdio_exit_handler+0x14>)
 80046fa:	f000 b869 	b.w	80047d0 <_fwalk_sglue>
 80046fe:	bf00      	nop
 8004700:	20000064 	.word	0x20000064
 8004704:	080055fd 	.word	0x080055fd
 8004708:	20000074 	.word	0x20000074

0800470c <cleanup_stdio>:
 800470c:	6841      	ldr	r1, [r0, #4]
 800470e:	4b0c      	ldr	r3, [pc, #48]	@ (8004740 <cleanup_stdio+0x34>)
 8004710:	4299      	cmp	r1, r3
 8004712:	b510      	push	{r4, lr}
 8004714:	4604      	mov	r4, r0
 8004716:	d001      	beq.n	800471c <cleanup_stdio+0x10>
 8004718:	f000 ff70 	bl	80055fc <_fflush_r>
 800471c:	68a1      	ldr	r1, [r4, #8]
 800471e:	4b09      	ldr	r3, [pc, #36]	@ (8004744 <cleanup_stdio+0x38>)
 8004720:	4299      	cmp	r1, r3
 8004722:	d002      	beq.n	800472a <cleanup_stdio+0x1e>
 8004724:	4620      	mov	r0, r4
 8004726:	f000 ff69 	bl	80055fc <_fflush_r>
 800472a:	68e1      	ldr	r1, [r4, #12]
 800472c:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <cleanup_stdio+0x3c>)
 800472e:	4299      	cmp	r1, r3
 8004730:	d004      	beq.n	800473c <cleanup_stdio+0x30>
 8004732:	4620      	mov	r0, r4
 8004734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004738:	f000 bf60 	b.w	80055fc <_fflush_r>
 800473c:	bd10      	pop	{r4, pc}
 800473e:	bf00      	nop
 8004740:	20000644 	.word	0x20000644
 8004744:	200006ac 	.word	0x200006ac
 8004748:	20000714 	.word	0x20000714

0800474c <global_stdio_init.part.0>:
 800474c:	b510      	push	{r4, lr}
 800474e:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <global_stdio_init.part.0+0x30>)
 8004750:	4c0b      	ldr	r4, [pc, #44]	@ (8004780 <global_stdio_init.part.0+0x34>)
 8004752:	4a0c      	ldr	r2, [pc, #48]	@ (8004784 <global_stdio_init.part.0+0x38>)
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	4620      	mov	r0, r4
 8004758:	2200      	movs	r2, #0
 800475a:	2104      	movs	r1, #4
 800475c:	f7ff ff94 	bl	8004688 <std>
 8004760:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004764:	2201      	movs	r2, #1
 8004766:	2109      	movs	r1, #9
 8004768:	f7ff ff8e 	bl	8004688 <std>
 800476c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004770:	2202      	movs	r2, #2
 8004772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004776:	2112      	movs	r1, #18
 8004778:	f7ff bf86 	b.w	8004688 <std>
 800477c:	2000077c 	.word	0x2000077c
 8004780:	20000644 	.word	0x20000644
 8004784:	080046f5 	.word	0x080046f5

08004788 <__sfp_lock_acquire>:
 8004788:	4801      	ldr	r0, [pc, #4]	@ (8004790 <__sfp_lock_acquire+0x8>)
 800478a:	f000 ba30 	b.w	8004bee <__retarget_lock_acquire_recursive>
 800478e:	bf00      	nop
 8004790:	20000785 	.word	0x20000785

08004794 <__sfp_lock_release>:
 8004794:	4801      	ldr	r0, [pc, #4]	@ (800479c <__sfp_lock_release+0x8>)
 8004796:	f000 ba2b 	b.w	8004bf0 <__retarget_lock_release_recursive>
 800479a:	bf00      	nop
 800479c:	20000785 	.word	0x20000785

080047a0 <__sinit>:
 80047a0:	b510      	push	{r4, lr}
 80047a2:	4604      	mov	r4, r0
 80047a4:	f7ff fff0 	bl	8004788 <__sfp_lock_acquire>
 80047a8:	6a23      	ldr	r3, [r4, #32]
 80047aa:	b11b      	cbz	r3, 80047b4 <__sinit+0x14>
 80047ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b0:	f7ff bff0 	b.w	8004794 <__sfp_lock_release>
 80047b4:	4b04      	ldr	r3, [pc, #16]	@ (80047c8 <__sinit+0x28>)
 80047b6:	6223      	str	r3, [r4, #32]
 80047b8:	4b04      	ldr	r3, [pc, #16]	@ (80047cc <__sinit+0x2c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f5      	bne.n	80047ac <__sinit+0xc>
 80047c0:	f7ff ffc4 	bl	800474c <global_stdio_init.part.0>
 80047c4:	e7f2      	b.n	80047ac <__sinit+0xc>
 80047c6:	bf00      	nop
 80047c8:	0800470d 	.word	0x0800470d
 80047cc:	2000077c 	.word	0x2000077c

080047d0 <_fwalk_sglue>:
 80047d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d4:	4607      	mov	r7, r0
 80047d6:	4688      	mov	r8, r1
 80047d8:	4614      	mov	r4, r2
 80047da:	2600      	movs	r6, #0
 80047dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047e0:	f1b9 0901 	subs.w	r9, r9, #1
 80047e4:	d505      	bpl.n	80047f2 <_fwalk_sglue+0x22>
 80047e6:	6824      	ldr	r4, [r4, #0]
 80047e8:	2c00      	cmp	r4, #0
 80047ea:	d1f7      	bne.n	80047dc <_fwalk_sglue+0xc>
 80047ec:	4630      	mov	r0, r6
 80047ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f2:	89ab      	ldrh	r3, [r5, #12]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d907      	bls.n	8004808 <_fwalk_sglue+0x38>
 80047f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047fc:	3301      	adds	r3, #1
 80047fe:	d003      	beq.n	8004808 <_fwalk_sglue+0x38>
 8004800:	4629      	mov	r1, r5
 8004802:	4638      	mov	r0, r7
 8004804:	47c0      	blx	r8
 8004806:	4306      	orrs	r6, r0
 8004808:	3568      	adds	r5, #104	@ 0x68
 800480a:	e7e9      	b.n	80047e0 <_fwalk_sglue+0x10>

0800480c <iprintf>:
 800480c:	b40f      	push	{r0, r1, r2, r3}
 800480e:	b507      	push	{r0, r1, r2, lr}
 8004810:	4906      	ldr	r1, [pc, #24]	@ (800482c <iprintf+0x20>)
 8004812:	ab04      	add	r3, sp, #16
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	f853 2b04 	ldr.w	r2, [r3], #4
 800481a:	6881      	ldr	r1, [r0, #8]
 800481c:	9301      	str	r3, [sp, #4]
 800481e:	f000 fbc3 	bl	8004fa8 <_vfiprintf_r>
 8004822:	b003      	add	sp, #12
 8004824:	f85d eb04 	ldr.w	lr, [sp], #4
 8004828:	b004      	add	sp, #16
 800482a:	4770      	bx	lr
 800482c:	20000070 	.word	0x20000070

08004830 <_puts_r>:
 8004830:	6a03      	ldr	r3, [r0, #32]
 8004832:	b570      	push	{r4, r5, r6, lr}
 8004834:	6884      	ldr	r4, [r0, #8]
 8004836:	4605      	mov	r5, r0
 8004838:	460e      	mov	r6, r1
 800483a:	b90b      	cbnz	r3, 8004840 <_puts_r+0x10>
 800483c:	f7ff ffb0 	bl	80047a0 <__sinit>
 8004840:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004842:	07db      	lsls	r3, r3, #31
 8004844:	d405      	bmi.n	8004852 <_puts_r+0x22>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	0598      	lsls	r0, r3, #22
 800484a:	d402      	bmi.n	8004852 <_puts_r+0x22>
 800484c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800484e:	f000 f9ce 	bl	8004bee <__retarget_lock_acquire_recursive>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	0719      	lsls	r1, r3, #28
 8004856:	d502      	bpl.n	800485e <_puts_r+0x2e>
 8004858:	6923      	ldr	r3, [r4, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d135      	bne.n	80048ca <_puts_r+0x9a>
 800485e:	4621      	mov	r1, r4
 8004860:	4628      	mov	r0, r5
 8004862:	f000 f8e5 	bl	8004a30 <__swsetup_r>
 8004866:	b380      	cbz	r0, 80048ca <_puts_r+0x9a>
 8004868:	f04f 35ff 	mov.w	r5, #4294967295
 800486c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800486e:	07da      	lsls	r2, r3, #31
 8004870:	d405      	bmi.n	800487e <_puts_r+0x4e>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	059b      	lsls	r3, r3, #22
 8004876:	d402      	bmi.n	800487e <_puts_r+0x4e>
 8004878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800487a:	f000 f9b9 	bl	8004bf0 <__retarget_lock_release_recursive>
 800487e:	4628      	mov	r0, r5
 8004880:	bd70      	pop	{r4, r5, r6, pc}
 8004882:	2b00      	cmp	r3, #0
 8004884:	da04      	bge.n	8004890 <_puts_r+0x60>
 8004886:	69a2      	ldr	r2, [r4, #24]
 8004888:	429a      	cmp	r2, r3
 800488a:	dc17      	bgt.n	80048bc <_puts_r+0x8c>
 800488c:	290a      	cmp	r1, #10
 800488e:	d015      	beq.n	80048bc <_puts_r+0x8c>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	6022      	str	r2, [r4, #0]
 8004896:	7019      	strb	r1, [r3, #0]
 8004898:	68a3      	ldr	r3, [r4, #8]
 800489a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800489e:	3b01      	subs	r3, #1
 80048a0:	60a3      	str	r3, [r4, #8]
 80048a2:	2900      	cmp	r1, #0
 80048a4:	d1ed      	bne.n	8004882 <_puts_r+0x52>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	da11      	bge.n	80048ce <_puts_r+0x9e>
 80048aa:	4622      	mov	r2, r4
 80048ac:	210a      	movs	r1, #10
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 f87f 	bl	80049b2 <__swbuf_r>
 80048b4:	3001      	adds	r0, #1
 80048b6:	d0d7      	beq.n	8004868 <_puts_r+0x38>
 80048b8:	250a      	movs	r5, #10
 80048ba:	e7d7      	b.n	800486c <_puts_r+0x3c>
 80048bc:	4622      	mov	r2, r4
 80048be:	4628      	mov	r0, r5
 80048c0:	f000 f877 	bl	80049b2 <__swbuf_r>
 80048c4:	3001      	adds	r0, #1
 80048c6:	d1e7      	bne.n	8004898 <_puts_r+0x68>
 80048c8:	e7ce      	b.n	8004868 <_puts_r+0x38>
 80048ca:	3e01      	subs	r6, #1
 80048cc:	e7e4      	b.n	8004898 <_puts_r+0x68>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	6022      	str	r2, [r4, #0]
 80048d4:	220a      	movs	r2, #10
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e7ee      	b.n	80048b8 <_puts_r+0x88>
	...

080048dc <puts>:
 80048dc:	4b02      	ldr	r3, [pc, #8]	@ (80048e8 <puts+0xc>)
 80048de:	4601      	mov	r1, r0
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	f7ff bfa5 	b.w	8004830 <_puts_r>
 80048e6:	bf00      	nop
 80048e8:	20000070 	.word	0x20000070

080048ec <siprintf>:
 80048ec:	b40e      	push	{r1, r2, r3}
 80048ee:	b500      	push	{lr}
 80048f0:	b09c      	sub	sp, #112	@ 0x70
 80048f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80048f4:	9002      	str	r0, [sp, #8]
 80048f6:	9006      	str	r0, [sp, #24]
 80048f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048fc:	4809      	ldr	r0, [pc, #36]	@ (8004924 <siprintf+0x38>)
 80048fe:	9107      	str	r1, [sp, #28]
 8004900:	9104      	str	r1, [sp, #16]
 8004902:	4909      	ldr	r1, [pc, #36]	@ (8004928 <siprintf+0x3c>)
 8004904:	f853 2b04 	ldr.w	r2, [r3], #4
 8004908:	9105      	str	r1, [sp, #20]
 800490a:	6800      	ldr	r0, [r0, #0]
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	a902      	add	r1, sp, #8
 8004910:	f000 fa24 	bl	8004d5c <_svfiprintf_r>
 8004914:	9b02      	ldr	r3, [sp, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	b01c      	add	sp, #112	@ 0x70
 800491c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004920:	b003      	add	sp, #12
 8004922:	4770      	bx	lr
 8004924:	20000070 	.word	0x20000070
 8004928:	ffff0208 	.word	0xffff0208

0800492c <__sread>:
 800492c:	b510      	push	{r4, lr}
 800492e:	460c      	mov	r4, r1
 8004930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004934:	f000 f8fc 	bl	8004b30 <_read_r>
 8004938:	2800      	cmp	r0, #0
 800493a:	bfab      	itete	ge
 800493c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800493e:	89a3      	ldrhlt	r3, [r4, #12]
 8004940:	181b      	addge	r3, r3, r0
 8004942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004946:	bfac      	ite	ge
 8004948:	6563      	strge	r3, [r4, #84]	@ 0x54
 800494a:	81a3      	strhlt	r3, [r4, #12]
 800494c:	bd10      	pop	{r4, pc}

0800494e <__swrite>:
 800494e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004952:	461f      	mov	r7, r3
 8004954:	898b      	ldrh	r3, [r1, #12]
 8004956:	05db      	lsls	r3, r3, #23
 8004958:	4605      	mov	r5, r0
 800495a:	460c      	mov	r4, r1
 800495c:	4616      	mov	r6, r2
 800495e:	d505      	bpl.n	800496c <__swrite+0x1e>
 8004960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004964:	2302      	movs	r3, #2
 8004966:	2200      	movs	r2, #0
 8004968:	f000 f8d0 	bl	8004b0c <_lseek_r>
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	4632      	mov	r2, r6
 800497a:	463b      	mov	r3, r7
 800497c:	4628      	mov	r0, r5
 800497e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004982:	f000 b8f7 	b.w	8004b74 <_write_r>

08004986 <__sseek>:
 8004986:	b510      	push	{r4, lr}
 8004988:	460c      	mov	r4, r1
 800498a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800498e:	f000 f8bd 	bl	8004b0c <_lseek_r>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	bf15      	itete	ne
 8004998:	6560      	strne	r0, [r4, #84]	@ 0x54
 800499a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800499e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049a2:	81a3      	strheq	r3, [r4, #12]
 80049a4:	bf18      	it	ne
 80049a6:	81a3      	strhne	r3, [r4, #12]
 80049a8:	bd10      	pop	{r4, pc}

080049aa <__sclose>:
 80049aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ae:	f000 b89d 	b.w	8004aec <_close_r>

080049b2 <__swbuf_r>:
 80049b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b4:	460e      	mov	r6, r1
 80049b6:	4614      	mov	r4, r2
 80049b8:	4605      	mov	r5, r0
 80049ba:	b118      	cbz	r0, 80049c4 <__swbuf_r+0x12>
 80049bc:	6a03      	ldr	r3, [r0, #32]
 80049be:	b90b      	cbnz	r3, 80049c4 <__swbuf_r+0x12>
 80049c0:	f7ff feee 	bl	80047a0 <__sinit>
 80049c4:	69a3      	ldr	r3, [r4, #24]
 80049c6:	60a3      	str	r3, [r4, #8]
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	071a      	lsls	r2, r3, #28
 80049cc:	d501      	bpl.n	80049d2 <__swbuf_r+0x20>
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	b943      	cbnz	r3, 80049e4 <__swbuf_r+0x32>
 80049d2:	4621      	mov	r1, r4
 80049d4:	4628      	mov	r0, r5
 80049d6:	f000 f82b 	bl	8004a30 <__swsetup_r>
 80049da:	b118      	cbz	r0, 80049e4 <__swbuf_r+0x32>
 80049dc:	f04f 37ff 	mov.w	r7, #4294967295
 80049e0:	4638      	mov	r0, r7
 80049e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	6922      	ldr	r2, [r4, #16]
 80049e8:	1a98      	subs	r0, r3, r2
 80049ea:	6963      	ldr	r3, [r4, #20]
 80049ec:	b2f6      	uxtb	r6, r6
 80049ee:	4283      	cmp	r3, r0
 80049f0:	4637      	mov	r7, r6
 80049f2:	dc05      	bgt.n	8004a00 <__swbuf_r+0x4e>
 80049f4:	4621      	mov	r1, r4
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 fe00 	bl	80055fc <_fflush_r>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d1ed      	bne.n	80049dc <__swbuf_r+0x2a>
 8004a00:	68a3      	ldr	r3, [r4, #8]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	60a3      	str	r3, [r4, #8]
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	6022      	str	r2, [r4, #0]
 8004a0c:	701e      	strb	r6, [r3, #0]
 8004a0e:	6962      	ldr	r2, [r4, #20]
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d004      	beq.n	8004a20 <__swbuf_r+0x6e>
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	07db      	lsls	r3, r3, #31
 8004a1a:	d5e1      	bpl.n	80049e0 <__swbuf_r+0x2e>
 8004a1c:	2e0a      	cmp	r6, #10
 8004a1e:	d1df      	bne.n	80049e0 <__swbuf_r+0x2e>
 8004a20:	4621      	mov	r1, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	f000 fdea 	bl	80055fc <_fflush_r>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d0d9      	beq.n	80049e0 <__swbuf_r+0x2e>
 8004a2c:	e7d6      	b.n	80049dc <__swbuf_r+0x2a>
	...

08004a30 <__swsetup_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4b29      	ldr	r3, [pc, #164]	@ (8004ad8 <__swsetup_r+0xa8>)
 8004a34:	4605      	mov	r5, r0
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	460c      	mov	r4, r1
 8004a3a:	b118      	cbz	r0, 8004a44 <__swsetup_r+0x14>
 8004a3c:	6a03      	ldr	r3, [r0, #32]
 8004a3e:	b90b      	cbnz	r3, 8004a44 <__swsetup_r+0x14>
 8004a40:	f7ff feae 	bl	80047a0 <__sinit>
 8004a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a48:	0719      	lsls	r1, r3, #28
 8004a4a:	d422      	bmi.n	8004a92 <__swsetup_r+0x62>
 8004a4c:	06da      	lsls	r2, r3, #27
 8004a4e:	d407      	bmi.n	8004a60 <__swsetup_r+0x30>
 8004a50:	2209      	movs	r2, #9
 8004a52:	602a      	str	r2, [r5, #0]
 8004a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5e:	e033      	b.n	8004ac8 <__swsetup_r+0x98>
 8004a60:	0758      	lsls	r0, r3, #29
 8004a62:	d512      	bpl.n	8004a8a <__swsetup_r+0x5a>
 8004a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a66:	b141      	cbz	r1, 8004a7a <__swsetup_r+0x4a>
 8004a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a6c:	4299      	cmp	r1, r3
 8004a6e:	d002      	beq.n	8004a76 <__swsetup_r+0x46>
 8004a70:	4628      	mov	r0, r5
 8004a72:	f000 f8cd 	bl	8004c10 <_free_r>
 8004a76:	2300      	movs	r3, #0
 8004a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	2300      	movs	r3, #0
 8004a84:	6063      	str	r3, [r4, #4]
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	f043 0308 	orr.w	r3, r3, #8
 8004a90:	81a3      	strh	r3, [r4, #12]
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	b94b      	cbnz	r3, 8004aaa <__swsetup_r+0x7a>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aa0:	d003      	beq.n	8004aaa <__swsetup_r+0x7a>
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f000 fdf7 	bl	8005698 <__smakebuf_r>
 8004aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aae:	f013 0201 	ands.w	r2, r3, #1
 8004ab2:	d00a      	beq.n	8004aca <__swsetup_r+0x9a>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	60a2      	str	r2, [r4, #8]
 8004ab8:	6962      	ldr	r2, [r4, #20]
 8004aba:	4252      	negs	r2, r2
 8004abc:	61a2      	str	r2, [r4, #24]
 8004abe:	6922      	ldr	r2, [r4, #16]
 8004ac0:	b942      	cbnz	r2, 8004ad4 <__swsetup_r+0xa4>
 8004ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ac6:	d1c5      	bne.n	8004a54 <__swsetup_r+0x24>
 8004ac8:	bd38      	pop	{r3, r4, r5, pc}
 8004aca:	0799      	lsls	r1, r3, #30
 8004acc:	bf58      	it	pl
 8004ace:	6962      	ldrpl	r2, [r4, #20]
 8004ad0:	60a2      	str	r2, [r4, #8]
 8004ad2:	e7f4      	b.n	8004abe <__swsetup_r+0x8e>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	e7f7      	b.n	8004ac8 <__swsetup_r+0x98>
 8004ad8:	20000070 	.word	0x20000070

08004adc <memset>:
 8004adc:	4402      	add	r2, r0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d100      	bne.n	8004ae6 <memset+0xa>
 8004ae4:	4770      	bx	lr
 8004ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aea:	e7f9      	b.n	8004ae0 <memset+0x4>

08004aec <_close_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	4d06      	ldr	r5, [pc, #24]	@ (8004b08 <_close_r+0x1c>)
 8004af0:	2300      	movs	r3, #0
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	602b      	str	r3, [r5, #0]
 8004af8:	f7fc f99b 	bl	8000e32 <_close>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d102      	bne.n	8004b06 <_close_r+0x1a>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	b103      	cbz	r3, 8004b06 <_close_r+0x1a>
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	20000780 	.word	0x20000780

08004b0c <_lseek_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	4d07      	ldr	r5, [pc, #28]	@ (8004b2c <_lseek_r+0x20>)
 8004b10:	4604      	mov	r4, r0
 8004b12:	4608      	mov	r0, r1
 8004b14:	4611      	mov	r1, r2
 8004b16:	2200      	movs	r2, #0
 8004b18:	602a      	str	r2, [r5, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f7fc f9b0 	bl	8000e80 <_lseek>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_lseek_r+0x1e>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_lseek_r+0x1e>
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	20000780 	.word	0x20000780

08004b30 <_read_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4d07      	ldr	r5, [pc, #28]	@ (8004b50 <_read_r+0x20>)
 8004b34:	4604      	mov	r4, r0
 8004b36:	4608      	mov	r0, r1
 8004b38:	4611      	mov	r1, r2
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	602a      	str	r2, [r5, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f7fc f93e 	bl	8000dc0 <_read>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_read_r+0x1e>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_read_r+0x1e>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	20000780 	.word	0x20000780

08004b54 <_sbrk_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4d06      	ldr	r5, [pc, #24]	@ (8004b70 <_sbrk_r+0x1c>)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	602b      	str	r3, [r5, #0]
 8004b60:	f7fc f99c 	bl	8000e9c <_sbrk>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d102      	bne.n	8004b6e <_sbrk_r+0x1a>
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	b103      	cbz	r3, 8004b6e <_sbrk_r+0x1a>
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}
 8004b70:	20000780 	.word	0x20000780

08004b74 <_write_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d07      	ldr	r5, [pc, #28]	@ (8004b94 <_write_r+0x20>)
 8004b78:	4604      	mov	r4, r0
 8004b7a:	4608      	mov	r0, r1
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	2200      	movs	r2, #0
 8004b80:	602a      	str	r2, [r5, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f7fc f939 	bl	8000dfa <_write>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_write_r+0x1e>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_write_r+0x1e>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	20000780 	.word	0x20000780

08004b98 <__errno>:
 8004b98:	4b01      	ldr	r3, [pc, #4]	@ (8004ba0 <__errno+0x8>)
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000070 	.word	0x20000070

08004ba4 <__libc_init_array>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8004bdc <__libc_init_array+0x38>)
 8004ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8004be0 <__libc_init_array+0x3c>)
 8004baa:	1b64      	subs	r4, r4, r5
 8004bac:	10a4      	asrs	r4, r4, #2
 8004bae:	2600      	movs	r6, #0
 8004bb0:	42a6      	cmp	r6, r4
 8004bb2:	d109      	bne.n	8004bc8 <__libc_init_array+0x24>
 8004bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8004be4 <__libc_init_array+0x40>)
 8004bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8004be8 <__libc_init_array+0x44>)
 8004bb8:	f000 fe1c 	bl	80057f4 <_init>
 8004bbc:	1b64      	subs	r4, r4, r5
 8004bbe:	10a4      	asrs	r4, r4, #2
 8004bc0:	2600      	movs	r6, #0
 8004bc2:	42a6      	cmp	r6, r4
 8004bc4:	d105      	bne.n	8004bd2 <__libc_init_array+0x2e>
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}
 8004bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bcc:	4798      	blx	r3
 8004bce:	3601      	adds	r6, #1
 8004bd0:	e7ee      	b.n	8004bb0 <__libc_init_array+0xc>
 8004bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd6:	4798      	blx	r3
 8004bd8:	3601      	adds	r6, #1
 8004bda:	e7f2      	b.n	8004bc2 <__libc_init_array+0x1e>
 8004bdc:	08005a18 	.word	0x08005a18
 8004be0:	08005a18 	.word	0x08005a18
 8004be4:	08005a18 	.word	0x08005a18
 8004be8:	08005a1c 	.word	0x08005a1c

08004bec <__retarget_lock_init_recursive>:
 8004bec:	4770      	bx	lr

08004bee <__retarget_lock_acquire_recursive>:
 8004bee:	4770      	bx	lr

08004bf0 <__retarget_lock_release_recursive>:
 8004bf0:	4770      	bx	lr

08004bf2 <memcpy>:
 8004bf2:	440a      	add	r2, r1
 8004bf4:	4291      	cmp	r1, r2
 8004bf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bfa:	d100      	bne.n	8004bfe <memcpy+0xc>
 8004bfc:	4770      	bx	lr
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c08:	4291      	cmp	r1, r2
 8004c0a:	d1f9      	bne.n	8004c00 <memcpy+0xe>
 8004c0c:	bd10      	pop	{r4, pc}
	...

08004c10 <_free_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4605      	mov	r5, r0
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d041      	beq.n	8004c9c <_free_r+0x8c>
 8004c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1c:	1f0c      	subs	r4, r1, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	18e4      	addlt	r4, r4, r3
 8004c24:	f7ff fd24 	bl	8004670 <__malloc_lock>
 8004c28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <_free_r+0x90>)
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	b933      	cbnz	r3, 8004c3c <_free_r+0x2c>
 8004c2e:	6063      	str	r3, [r4, #4]
 8004c30:	6014      	str	r4, [r2, #0]
 8004c32:	4628      	mov	r0, r5
 8004c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c38:	f7ff bd20 	b.w	800467c <__malloc_unlock>
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	d908      	bls.n	8004c52 <_free_r+0x42>
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	1821      	adds	r1, r4, r0
 8004c44:	428b      	cmp	r3, r1
 8004c46:	bf01      	itttt	eq
 8004c48:	6819      	ldreq	r1, [r3, #0]
 8004c4a:	685b      	ldreq	r3, [r3, #4]
 8004c4c:	1809      	addeq	r1, r1, r0
 8004c4e:	6021      	streq	r1, [r4, #0]
 8004c50:	e7ed      	b.n	8004c2e <_free_r+0x1e>
 8004c52:	461a      	mov	r2, r3
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	b10b      	cbz	r3, 8004c5c <_free_r+0x4c>
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	d9fa      	bls.n	8004c52 <_free_r+0x42>
 8004c5c:	6811      	ldr	r1, [r2, #0]
 8004c5e:	1850      	adds	r0, r2, r1
 8004c60:	42a0      	cmp	r0, r4
 8004c62:	d10b      	bne.n	8004c7c <_free_r+0x6c>
 8004c64:	6820      	ldr	r0, [r4, #0]
 8004c66:	4401      	add	r1, r0
 8004c68:	1850      	adds	r0, r2, r1
 8004c6a:	4283      	cmp	r3, r0
 8004c6c:	6011      	str	r1, [r2, #0]
 8004c6e:	d1e0      	bne.n	8004c32 <_free_r+0x22>
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	6053      	str	r3, [r2, #4]
 8004c76:	4408      	add	r0, r1
 8004c78:	6010      	str	r0, [r2, #0]
 8004c7a:	e7da      	b.n	8004c32 <_free_r+0x22>
 8004c7c:	d902      	bls.n	8004c84 <_free_r+0x74>
 8004c7e:	230c      	movs	r3, #12
 8004c80:	602b      	str	r3, [r5, #0]
 8004c82:	e7d6      	b.n	8004c32 <_free_r+0x22>
 8004c84:	6820      	ldr	r0, [r4, #0]
 8004c86:	1821      	adds	r1, r4, r0
 8004c88:	428b      	cmp	r3, r1
 8004c8a:	bf04      	itt	eq
 8004c8c:	6819      	ldreq	r1, [r3, #0]
 8004c8e:	685b      	ldreq	r3, [r3, #4]
 8004c90:	6063      	str	r3, [r4, #4]
 8004c92:	bf04      	itt	eq
 8004c94:	1809      	addeq	r1, r1, r0
 8004c96:	6021      	streq	r1, [r4, #0]
 8004c98:	6054      	str	r4, [r2, #4]
 8004c9a:	e7ca      	b.n	8004c32 <_free_r+0x22>
 8004c9c:	bd38      	pop	{r3, r4, r5, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000640 	.word	0x20000640

08004ca4 <__ssputs_r>:
 8004ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca8:	688e      	ldr	r6, [r1, #8]
 8004caa:	461f      	mov	r7, r3
 8004cac:	42be      	cmp	r6, r7
 8004cae:	680b      	ldr	r3, [r1, #0]
 8004cb0:	4682      	mov	sl, r0
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	4690      	mov	r8, r2
 8004cb6:	d82d      	bhi.n	8004d14 <__ssputs_r+0x70>
 8004cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cc0:	d026      	beq.n	8004d10 <__ssputs_r+0x6c>
 8004cc2:	6965      	ldr	r5, [r4, #20]
 8004cc4:	6909      	ldr	r1, [r1, #16]
 8004cc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cca:	eba3 0901 	sub.w	r9, r3, r1
 8004cce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cd2:	1c7b      	adds	r3, r7, #1
 8004cd4:	444b      	add	r3, r9
 8004cd6:	106d      	asrs	r5, r5, #1
 8004cd8:	429d      	cmp	r5, r3
 8004cda:	bf38      	it	cc
 8004cdc:	461d      	movcc	r5, r3
 8004cde:	0553      	lsls	r3, r2, #21
 8004ce0:	d527      	bpl.n	8004d32 <__ssputs_r+0x8e>
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	f7ff fc44 	bl	8004570 <_malloc_r>
 8004ce8:	4606      	mov	r6, r0
 8004cea:	b360      	cbz	r0, 8004d46 <__ssputs_r+0xa2>
 8004cec:	6921      	ldr	r1, [r4, #16]
 8004cee:	464a      	mov	r2, r9
 8004cf0:	f7ff ff7f 	bl	8004bf2 <memcpy>
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cfe:	81a3      	strh	r3, [r4, #12]
 8004d00:	6126      	str	r6, [r4, #16]
 8004d02:	6165      	str	r5, [r4, #20]
 8004d04:	444e      	add	r6, r9
 8004d06:	eba5 0509 	sub.w	r5, r5, r9
 8004d0a:	6026      	str	r6, [r4, #0]
 8004d0c:	60a5      	str	r5, [r4, #8]
 8004d0e:	463e      	mov	r6, r7
 8004d10:	42be      	cmp	r6, r7
 8004d12:	d900      	bls.n	8004d16 <__ssputs_r+0x72>
 8004d14:	463e      	mov	r6, r7
 8004d16:	6820      	ldr	r0, [r4, #0]
 8004d18:	4632      	mov	r2, r6
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	f000 fcf8 	bl	8005710 <memmove>
 8004d20:	68a3      	ldr	r3, [r4, #8]
 8004d22:	1b9b      	subs	r3, r3, r6
 8004d24:	60a3      	str	r3, [r4, #8]
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	4433      	add	r3, r6
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d32:	462a      	mov	r2, r5
 8004d34:	f000 fd28 	bl	8005788 <_realloc_r>
 8004d38:	4606      	mov	r6, r0
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d1e0      	bne.n	8004d00 <__ssputs_r+0x5c>
 8004d3e:	6921      	ldr	r1, [r4, #16]
 8004d40:	4650      	mov	r0, sl
 8004d42:	f7ff ff65 	bl	8004c10 <_free_r>
 8004d46:	230c      	movs	r3, #12
 8004d48:	f8ca 3000 	str.w	r3, [sl]
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d52:	81a3      	strh	r3, [r4, #12]
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295
 8004d58:	e7e9      	b.n	8004d2e <__ssputs_r+0x8a>
	...

08004d5c <_svfiprintf_r>:
 8004d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	4698      	mov	r8, r3
 8004d62:	898b      	ldrh	r3, [r1, #12]
 8004d64:	061b      	lsls	r3, r3, #24
 8004d66:	b09d      	sub	sp, #116	@ 0x74
 8004d68:	4607      	mov	r7, r0
 8004d6a:	460d      	mov	r5, r1
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	d510      	bpl.n	8004d92 <_svfiprintf_r+0x36>
 8004d70:	690b      	ldr	r3, [r1, #16]
 8004d72:	b973      	cbnz	r3, 8004d92 <_svfiprintf_r+0x36>
 8004d74:	2140      	movs	r1, #64	@ 0x40
 8004d76:	f7ff fbfb 	bl	8004570 <_malloc_r>
 8004d7a:	6028      	str	r0, [r5, #0]
 8004d7c:	6128      	str	r0, [r5, #16]
 8004d7e:	b930      	cbnz	r0, 8004d8e <_svfiprintf_r+0x32>
 8004d80:	230c      	movs	r3, #12
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	b01d      	add	sp, #116	@ 0x74
 8004d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8e:	2340      	movs	r3, #64	@ 0x40
 8004d90:	616b      	str	r3, [r5, #20]
 8004d92:	2300      	movs	r3, #0
 8004d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d96:	2320      	movs	r3, #32
 8004d98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004da0:	2330      	movs	r3, #48	@ 0x30
 8004da2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f40 <_svfiprintf_r+0x1e4>
 8004da6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004daa:	f04f 0901 	mov.w	r9, #1
 8004dae:	4623      	mov	r3, r4
 8004db0:	469a      	mov	sl, r3
 8004db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004db6:	b10a      	cbz	r2, 8004dbc <_svfiprintf_r+0x60>
 8004db8:	2a25      	cmp	r2, #37	@ 0x25
 8004dba:	d1f9      	bne.n	8004db0 <_svfiprintf_r+0x54>
 8004dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8004dc0:	d00b      	beq.n	8004dda <_svfiprintf_r+0x7e>
 8004dc2:	465b      	mov	r3, fp
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	4638      	mov	r0, r7
 8004dca:	f7ff ff6b 	bl	8004ca4 <__ssputs_r>
 8004dce:	3001      	adds	r0, #1
 8004dd0:	f000 80a7 	beq.w	8004f22 <_svfiprintf_r+0x1c6>
 8004dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dd6:	445a      	add	r2, fp
 8004dd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dda:	f89a 3000 	ldrb.w	r3, [sl]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 809f 	beq.w	8004f22 <_svfiprintf_r+0x1c6>
 8004de4:	2300      	movs	r3, #0
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dee:	f10a 0a01 	add.w	sl, sl, #1
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	9307      	str	r3, [sp, #28]
 8004df6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dfc:	4654      	mov	r4, sl
 8004dfe:	2205      	movs	r2, #5
 8004e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e04:	484e      	ldr	r0, [pc, #312]	@ (8004f40 <_svfiprintf_r+0x1e4>)
 8004e06:	f7fb f9eb 	bl	80001e0 <memchr>
 8004e0a:	9a04      	ldr	r2, [sp, #16]
 8004e0c:	b9d8      	cbnz	r0, 8004e46 <_svfiprintf_r+0xea>
 8004e0e:	06d0      	lsls	r0, r2, #27
 8004e10:	bf44      	itt	mi
 8004e12:	2320      	movmi	r3, #32
 8004e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e18:	0711      	lsls	r1, r2, #28
 8004e1a:	bf44      	itt	mi
 8004e1c:	232b      	movmi	r3, #43	@ 0x2b
 8004e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e22:	f89a 3000 	ldrb.w	r3, [sl]
 8004e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e28:	d015      	beq.n	8004e56 <_svfiprintf_r+0xfa>
 8004e2a:	9a07      	ldr	r2, [sp, #28]
 8004e2c:	4654      	mov	r4, sl
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f04f 0c0a 	mov.w	ip, #10
 8004e34:	4621      	mov	r1, r4
 8004e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e3a:	3b30      	subs	r3, #48	@ 0x30
 8004e3c:	2b09      	cmp	r3, #9
 8004e3e:	d94b      	bls.n	8004ed8 <_svfiprintf_r+0x17c>
 8004e40:	b1b0      	cbz	r0, 8004e70 <_svfiprintf_r+0x114>
 8004e42:	9207      	str	r2, [sp, #28]
 8004e44:	e014      	b.n	8004e70 <_svfiprintf_r+0x114>
 8004e46:	eba0 0308 	sub.w	r3, r0, r8
 8004e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	46a2      	mov	sl, r4
 8004e54:	e7d2      	b.n	8004dfc <_svfiprintf_r+0xa0>
 8004e56:	9b03      	ldr	r3, [sp, #12]
 8004e58:	1d19      	adds	r1, r3, #4
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	9103      	str	r1, [sp, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	bfbb      	ittet	lt
 8004e62:	425b      	neglt	r3, r3
 8004e64:	f042 0202 	orrlt.w	r2, r2, #2
 8004e68:	9307      	strge	r3, [sp, #28]
 8004e6a:	9307      	strlt	r3, [sp, #28]
 8004e6c:	bfb8      	it	lt
 8004e6e:	9204      	strlt	r2, [sp, #16]
 8004e70:	7823      	ldrb	r3, [r4, #0]
 8004e72:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e74:	d10a      	bne.n	8004e8c <_svfiprintf_r+0x130>
 8004e76:	7863      	ldrb	r3, [r4, #1]
 8004e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e7a:	d132      	bne.n	8004ee2 <_svfiprintf_r+0x186>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	1d1a      	adds	r2, r3, #4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	9203      	str	r2, [sp, #12]
 8004e84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e88:	3402      	adds	r4, #2
 8004e8a:	9305      	str	r3, [sp, #20]
 8004e8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f50 <_svfiprintf_r+0x1f4>
 8004e90:	7821      	ldrb	r1, [r4, #0]
 8004e92:	2203      	movs	r2, #3
 8004e94:	4650      	mov	r0, sl
 8004e96:	f7fb f9a3 	bl	80001e0 <memchr>
 8004e9a:	b138      	cbz	r0, 8004eac <_svfiprintf_r+0x150>
 8004e9c:	9b04      	ldr	r3, [sp, #16]
 8004e9e:	eba0 000a 	sub.w	r0, r0, sl
 8004ea2:	2240      	movs	r2, #64	@ 0x40
 8004ea4:	4082      	lsls	r2, r0
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	3401      	adds	r4, #1
 8004eaa:	9304      	str	r3, [sp, #16]
 8004eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb0:	4824      	ldr	r0, [pc, #144]	@ (8004f44 <_svfiprintf_r+0x1e8>)
 8004eb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004eb6:	2206      	movs	r2, #6
 8004eb8:	f7fb f992 	bl	80001e0 <memchr>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d036      	beq.n	8004f2e <_svfiprintf_r+0x1d2>
 8004ec0:	4b21      	ldr	r3, [pc, #132]	@ (8004f48 <_svfiprintf_r+0x1ec>)
 8004ec2:	bb1b      	cbnz	r3, 8004f0c <_svfiprintf_r+0x1b0>
 8004ec4:	9b03      	ldr	r3, [sp, #12]
 8004ec6:	3307      	adds	r3, #7
 8004ec8:	f023 0307 	bic.w	r3, r3, #7
 8004ecc:	3308      	adds	r3, #8
 8004ece:	9303      	str	r3, [sp, #12]
 8004ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ed2:	4433      	add	r3, r6
 8004ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ed6:	e76a      	b.n	8004dae <_svfiprintf_r+0x52>
 8004ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004edc:	460c      	mov	r4, r1
 8004ede:	2001      	movs	r0, #1
 8004ee0:	e7a8      	b.n	8004e34 <_svfiprintf_r+0xd8>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	3401      	adds	r4, #1
 8004ee6:	9305      	str	r3, [sp, #20]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f04f 0c0a 	mov.w	ip, #10
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ef4:	3a30      	subs	r2, #48	@ 0x30
 8004ef6:	2a09      	cmp	r2, #9
 8004ef8:	d903      	bls.n	8004f02 <_svfiprintf_r+0x1a6>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0c6      	beq.n	8004e8c <_svfiprintf_r+0x130>
 8004efe:	9105      	str	r1, [sp, #20]
 8004f00:	e7c4      	b.n	8004e8c <_svfiprintf_r+0x130>
 8004f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f06:	4604      	mov	r4, r0
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e7f0      	b.n	8004eee <_svfiprintf_r+0x192>
 8004f0c:	ab03      	add	r3, sp, #12
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	462a      	mov	r2, r5
 8004f12:	4b0e      	ldr	r3, [pc, #56]	@ (8004f4c <_svfiprintf_r+0x1f0>)
 8004f14:	a904      	add	r1, sp, #16
 8004f16:	4638      	mov	r0, r7
 8004f18:	f3af 8000 	nop.w
 8004f1c:	1c42      	adds	r2, r0, #1
 8004f1e:	4606      	mov	r6, r0
 8004f20:	d1d6      	bne.n	8004ed0 <_svfiprintf_r+0x174>
 8004f22:	89ab      	ldrh	r3, [r5, #12]
 8004f24:	065b      	lsls	r3, r3, #25
 8004f26:	f53f af2d 	bmi.w	8004d84 <_svfiprintf_r+0x28>
 8004f2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f2c:	e72c      	b.n	8004d88 <_svfiprintf_r+0x2c>
 8004f2e:	ab03      	add	r3, sp, #12
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	462a      	mov	r2, r5
 8004f34:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <_svfiprintf_r+0x1f0>)
 8004f36:	a904      	add	r1, sp, #16
 8004f38:	4638      	mov	r0, r7
 8004f3a:	f000 f9bb 	bl	80052b4 <_printf_i>
 8004f3e:	e7ed      	b.n	8004f1c <_svfiprintf_r+0x1c0>
 8004f40:	080059da 	.word	0x080059da
 8004f44:	080059e4 	.word	0x080059e4
 8004f48:	00000000 	.word	0x00000000
 8004f4c:	08004ca5 	.word	0x08004ca5
 8004f50:	080059e0 	.word	0x080059e0

08004f54 <__sfputc_r>:
 8004f54:	6893      	ldr	r3, [r2, #8]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	b410      	push	{r4}
 8004f5c:	6093      	str	r3, [r2, #8]
 8004f5e:	da08      	bge.n	8004f72 <__sfputc_r+0x1e>
 8004f60:	6994      	ldr	r4, [r2, #24]
 8004f62:	42a3      	cmp	r3, r4
 8004f64:	db01      	blt.n	8004f6a <__sfputc_r+0x16>
 8004f66:	290a      	cmp	r1, #10
 8004f68:	d103      	bne.n	8004f72 <__sfputc_r+0x1e>
 8004f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f6e:	f7ff bd20 	b.w	80049b2 <__swbuf_r>
 8004f72:	6813      	ldr	r3, [r2, #0]
 8004f74:	1c58      	adds	r0, r3, #1
 8004f76:	6010      	str	r0, [r2, #0]
 8004f78:	7019      	strb	r1, [r3, #0]
 8004f7a:	4608      	mov	r0, r1
 8004f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <__sfputs_r>:
 8004f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f84:	4606      	mov	r6, r0
 8004f86:	460f      	mov	r7, r1
 8004f88:	4614      	mov	r4, r2
 8004f8a:	18d5      	adds	r5, r2, r3
 8004f8c:	42ac      	cmp	r4, r5
 8004f8e:	d101      	bne.n	8004f94 <__sfputs_r+0x12>
 8004f90:	2000      	movs	r0, #0
 8004f92:	e007      	b.n	8004fa4 <__sfputs_r+0x22>
 8004f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f98:	463a      	mov	r2, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f7ff ffda 	bl	8004f54 <__sfputc_r>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d1f3      	bne.n	8004f8c <__sfputs_r+0xa>
 8004fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fa8 <_vfiprintf_r>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	460d      	mov	r5, r1
 8004fae:	b09d      	sub	sp, #116	@ 0x74
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	4698      	mov	r8, r3
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	b118      	cbz	r0, 8004fc0 <_vfiprintf_r+0x18>
 8004fb8:	6a03      	ldr	r3, [r0, #32]
 8004fba:	b90b      	cbnz	r3, 8004fc0 <_vfiprintf_r+0x18>
 8004fbc:	f7ff fbf0 	bl	80047a0 <__sinit>
 8004fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fc2:	07d9      	lsls	r1, r3, #31
 8004fc4:	d405      	bmi.n	8004fd2 <_vfiprintf_r+0x2a>
 8004fc6:	89ab      	ldrh	r3, [r5, #12]
 8004fc8:	059a      	lsls	r2, r3, #22
 8004fca:	d402      	bmi.n	8004fd2 <_vfiprintf_r+0x2a>
 8004fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fce:	f7ff fe0e 	bl	8004bee <__retarget_lock_acquire_recursive>
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	071b      	lsls	r3, r3, #28
 8004fd6:	d501      	bpl.n	8004fdc <_vfiprintf_r+0x34>
 8004fd8:	692b      	ldr	r3, [r5, #16]
 8004fda:	b99b      	cbnz	r3, 8005004 <_vfiprintf_r+0x5c>
 8004fdc:	4629      	mov	r1, r5
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7ff fd26 	bl	8004a30 <__swsetup_r>
 8004fe4:	b170      	cbz	r0, 8005004 <_vfiprintf_r+0x5c>
 8004fe6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fe8:	07dc      	lsls	r4, r3, #31
 8004fea:	d504      	bpl.n	8004ff6 <_vfiprintf_r+0x4e>
 8004fec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff0:	b01d      	add	sp, #116	@ 0x74
 8004ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff6:	89ab      	ldrh	r3, [r5, #12]
 8004ff8:	0598      	lsls	r0, r3, #22
 8004ffa:	d4f7      	bmi.n	8004fec <_vfiprintf_r+0x44>
 8004ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ffe:	f7ff fdf7 	bl	8004bf0 <__retarget_lock_release_recursive>
 8005002:	e7f3      	b.n	8004fec <_vfiprintf_r+0x44>
 8005004:	2300      	movs	r3, #0
 8005006:	9309      	str	r3, [sp, #36]	@ 0x24
 8005008:	2320      	movs	r3, #32
 800500a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800500e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005012:	2330      	movs	r3, #48	@ 0x30
 8005014:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051c4 <_vfiprintf_r+0x21c>
 8005018:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800501c:	f04f 0901 	mov.w	r9, #1
 8005020:	4623      	mov	r3, r4
 8005022:	469a      	mov	sl, r3
 8005024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005028:	b10a      	cbz	r2, 800502e <_vfiprintf_r+0x86>
 800502a:	2a25      	cmp	r2, #37	@ 0x25
 800502c:	d1f9      	bne.n	8005022 <_vfiprintf_r+0x7a>
 800502e:	ebba 0b04 	subs.w	fp, sl, r4
 8005032:	d00b      	beq.n	800504c <_vfiprintf_r+0xa4>
 8005034:	465b      	mov	r3, fp
 8005036:	4622      	mov	r2, r4
 8005038:	4629      	mov	r1, r5
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff ffa1 	bl	8004f82 <__sfputs_r>
 8005040:	3001      	adds	r0, #1
 8005042:	f000 80a7 	beq.w	8005194 <_vfiprintf_r+0x1ec>
 8005046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005048:	445a      	add	r2, fp
 800504a:	9209      	str	r2, [sp, #36]	@ 0x24
 800504c:	f89a 3000 	ldrb.w	r3, [sl]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 809f 	beq.w	8005194 <_vfiprintf_r+0x1ec>
 8005056:	2300      	movs	r3, #0
 8005058:	f04f 32ff 	mov.w	r2, #4294967295
 800505c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005060:	f10a 0a01 	add.w	sl, sl, #1
 8005064:	9304      	str	r3, [sp, #16]
 8005066:	9307      	str	r3, [sp, #28]
 8005068:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800506c:	931a      	str	r3, [sp, #104]	@ 0x68
 800506e:	4654      	mov	r4, sl
 8005070:	2205      	movs	r2, #5
 8005072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005076:	4853      	ldr	r0, [pc, #332]	@ (80051c4 <_vfiprintf_r+0x21c>)
 8005078:	f7fb f8b2 	bl	80001e0 <memchr>
 800507c:	9a04      	ldr	r2, [sp, #16]
 800507e:	b9d8      	cbnz	r0, 80050b8 <_vfiprintf_r+0x110>
 8005080:	06d1      	lsls	r1, r2, #27
 8005082:	bf44      	itt	mi
 8005084:	2320      	movmi	r3, #32
 8005086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800508a:	0713      	lsls	r3, r2, #28
 800508c:	bf44      	itt	mi
 800508e:	232b      	movmi	r3, #43	@ 0x2b
 8005090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005094:	f89a 3000 	ldrb.w	r3, [sl]
 8005098:	2b2a      	cmp	r3, #42	@ 0x2a
 800509a:	d015      	beq.n	80050c8 <_vfiprintf_r+0x120>
 800509c:	9a07      	ldr	r2, [sp, #28]
 800509e:	4654      	mov	r4, sl
 80050a0:	2000      	movs	r0, #0
 80050a2:	f04f 0c0a 	mov.w	ip, #10
 80050a6:	4621      	mov	r1, r4
 80050a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ac:	3b30      	subs	r3, #48	@ 0x30
 80050ae:	2b09      	cmp	r3, #9
 80050b0:	d94b      	bls.n	800514a <_vfiprintf_r+0x1a2>
 80050b2:	b1b0      	cbz	r0, 80050e2 <_vfiprintf_r+0x13a>
 80050b4:	9207      	str	r2, [sp, #28]
 80050b6:	e014      	b.n	80050e2 <_vfiprintf_r+0x13a>
 80050b8:	eba0 0308 	sub.w	r3, r0, r8
 80050bc:	fa09 f303 	lsl.w	r3, r9, r3
 80050c0:	4313      	orrs	r3, r2
 80050c2:	9304      	str	r3, [sp, #16]
 80050c4:	46a2      	mov	sl, r4
 80050c6:	e7d2      	b.n	800506e <_vfiprintf_r+0xc6>
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	1d19      	adds	r1, r3, #4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	9103      	str	r1, [sp, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bfbb      	ittet	lt
 80050d4:	425b      	neglt	r3, r3
 80050d6:	f042 0202 	orrlt.w	r2, r2, #2
 80050da:	9307      	strge	r3, [sp, #28]
 80050dc:	9307      	strlt	r3, [sp, #28]
 80050de:	bfb8      	it	lt
 80050e0:	9204      	strlt	r2, [sp, #16]
 80050e2:	7823      	ldrb	r3, [r4, #0]
 80050e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80050e6:	d10a      	bne.n	80050fe <_vfiprintf_r+0x156>
 80050e8:	7863      	ldrb	r3, [r4, #1]
 80050ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ec:	d132      	bne.n	8005154 <_vfiprintf_r+0x1ac>
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	1d1a      	adds	r2, r3, #4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	9203      	str	r2, [sp, #12]
 80050f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050fa:	3402      	adds	r4, #2
 80050fc:	9305      	str	r3, [sp, #20]
 80050fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051d4 <_vfiprintf_r+0x22c>
 8005102:	7821      	ldrb	r1, [r4, #0]
 8005104:	2203      	movs	r2, #3
 8005106:	4650      	mov	r0, sl
 8005108:	f7fb f86a 	bl	80001e0 <memchr>
 800510c:	b138      	cbz	r0, 800511e <_vfiprintf_r+0x176>
 800510e:	9b04      	ldr	r3, [sp, #16]
 8005110:	eba0 000a 	sub.w	r0, r0, sl
 8005114:	2240      	movs	r2, #64	@ 0x40
 8005116:	4082      	lsls	r2, r0
 8005118:	4313      	orrs	r3, r2
 800511a:	3401      	adds	r4, #1
 800511c:	9304      	str	r3, [sp, #16]
 800511e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005122:	4829      	ldr	r0, [pc, #164]	@ (80051c8 <_vfiprintf_r+0x220>)
 8005124:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005128:	2206      	movs	r2, #6
 800512a:	f7fb f859 	bl	80001e0 <memchr>
 800512e:	2800      	cmp	r0, #0
 8005130:	d03f      	beq.n	80051b2 <_vfiprintf_r+0x20a>
 8005132:	4b26      	ldr	r3, [pc, #152]	@ (80051cc <_vfiprintf_r+0x224>)
 8005134:	bb1b      	cbnz	r3, 800517e <_vfiprintf_r+0x1d6>
 8005136:	9b03      	ldr	r3, [sp, #12]
 8005138:	3307      	adds	r3, #7
 800513a:	f023 0307 	bic.w	r3, r3, #7
 800513e:	3308      	adds	r3, #8
 8005140:	9303      	str	r3, [sp, #12]
 8005142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005144:	443b      	add	r3, r7
 8005146:	9309      	str	r3, [sp, #36]	@ 0x24
 8005148:	e76a      	b.n	8005020 <_vfiprintf_r+0x78>
 800514a:	fb0c 3202 	mla	r2, ip, r2, r3
 800514e:	460c      	mov	r4, r1
 8005150:	2001      	movs	r0, #1
 8005152:	e7a8      	b.n	80050a6 <_vfiprintf_r+0xfe>
 8005154:	2300      	movs	r3, #0
 8005156:	3401      	adds	r4, #1
 8005158:	9305      	str	r3, [sp, #20]
 800515a:	4619      	mov	r1, r3
 800515c:	f04f 0c0a 	mov.w	ip, #10
 8005160:	4620      	mov	r0, r4
 8005162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005166:	3a30      	subs	r2, #48	@ 0x30
 8005168:	2a09      	cmp	r2, #9
 800516a:	d903      	bls.n	8005174 <_vfiprintf_r+0x1cc>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0c6      	beq.n	80050fe <_vfiprintf_r+0x156>
 8005170:	9105      	str	r1, [sp, #20]
 8005172:	e7c4      	b.n	80050fe <_vfiprintf_r+0x156>
 8005174:	fb0c 2101 	mla	r1, ip, r1, r2
 8005178:	4604      	mov	r4, r0
 800517a:	2301      	movs	r3, #1
 800517c:	e7f0      	b.n	8005160 <_vfiprintf_r+0x1b8>
 800517e:	ab03      	add	r3, sp, #12
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	462a      	mov	r2, r5
 8005184:	4b12      	ldr	r3, [pc, #72]	@ (80051d0 <_vfiprintf_r+0x228>)
 8005186:	a904      	add	r1, sp, #16
 8005188:	4630      	mov	r0, r6
 800518a:	f3af 8000 	nop.w
 800518e:	4607      	mov	r7, r0
 8005190:	1c78      	adds	r0, r7, #1
 8005192:	d1d6      	bne.n	8005142 <_vfiprintf_r+0x19a>
 8005194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005196:	07d9      	lsls	r1, r3, #31
 8005198:	d405      	bmi.n	80051a6 <_vfiprintf_r+0x1fe>
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	059a      	lsls	r2, r3, #22
 800519e:	d402      	bmi.n	80051a6 <_vfiprintf_r+0x1fe>
 80051a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051a2:	f7ff fd25 	bl	8004bf0 <__retarget_lock_release_recursive>
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	065b      	lsls	r3, r3, #25
 80051aa:	f53f af1f 	bmi.w	8004fec <_vfiprintf_r+0x44>
 80051ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051b0:	e71e      	b.n	8004ff0 <_vfiprintf_r+0x48>
 80051b2:	ab03      	add	r3, sp, #12
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	462a      	mov	r2, r5
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <_vfiprintf_r+0x228>)
 80051ba:	a904      	add	r1, sp, #16
 80051bc:	4630      	mov	r0, r6
 80051be:	f000 f879 	bl	80052b4 <_printf_i>
 80051c2:	e7e4      	b.n	800518e <_vfiprintf_r+0x1e6>
 80051c4:	080059da 	.word	0x080059da
 80051c8:	080059e4 	.word	0x080059e4
 80051cc:	00000000 	.word	0x00000000
 80051d0:	08004f83 	.word	0x08004f83
 80051d4:	080059e0 	.word	0x080059e0

080051d8 <_printf_common>:
 80051d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051dc:	4616      	mov	r6, r2
 80051de:	4698      	mov	r8, r3
 80051e0:	688a      	ldr	r2, [r1, #8]
 80051e2:	690b      	ldr	r3, [r1, #16]
 80051e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051e8:	4293      	cmp	r3, r2
 80051ea:	bfb8      	it	lt
 80051ec:	4613      	movlt	r3, r2
 80051ee:	6033      	str	r3, [r6, #0]
 80051f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051f4:	4607      	mov	r7, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	b10a      	cbz	r2, 80051fe <_printf_common+0x26>
 80051fa:	3301      	adds	r3, #1
 80051fc:	6033      	str	r3, [r6, #0]
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	0699      	lsls	r1, r3, #26
 8005202:	bf42      	ittt	mi
 8005204:	6833      	ldrmi	r3, [r6, #0]
 8005206:	3302      	addmi	r3, #2
 8005208:	6033      	strmi	r3, [r6, #0]
 800520a:	6825      	ldr	r5, [r4, #0]
 800520c:	f015 0506 	ands.w	r5, r5, #6
 8005210:	d106      	bne.n	8005220 <_printf_common+0x48>
 8005212:	f104 0a19 	add.w	sl, r4, #25
 8005216:	68e3      	ldr	r3, [r4, #12]
 8005218:	6832      	ldr	r2, [r6, #0]
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	42ab      	cmp	r3, r5
 800521e:	dc26      	bgt.n	800526e <_printf_common+0x96>
 8005220:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005224:	6822      	ldr	r2, [r4, #0]
 8005226:	3b00      	subs	r3, #0
 8005228:	bf18      	it	ne
 800522a:	2301      	movne	r3, #1
 800522c:	0692      	lsls	r2, r2, #26
 800522e:	d42b      	bmi.n	8005288 <_printf_common+0xb0>
 8005230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005234:	4641      	mov	r1, r8
 8005236:	4638      	mov	r0, r7
 8005238:	47c8      	blx	r9
 800523a:	3001      	adds	r0, #1
 800523c:	d01e      	beq.n	800527c <_printf_common+0xa4>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	6922      	ldr	r2, [r4, #16]
 8005242:	f003 0306 	and.w	r3, r3, #6
 8005246:	2b04      	cmp	r3, #4
 8005248:	bf02      	ittt	eq
 800524a:	68e5      	ldreq	r5, [r4, #12]
 800524c:	6833      	ldreq	r3, [r6, #0]
 800524e:	1aed      	subeq	r5, r5, r3
 8005250:	68a3      	ldr	r3, [r4, #8]
 8005252:	bf0c      	ite	eq
 8005254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005258:	2500      	movne	r5, #0
 800525a:	4293      	cmp	r3, r2
 800525c:	bfc4      	itt	gt
 800525e:	1a9b      	subgt	r3, r3, r2
 8005260:	18ed      	addgt	r5, r5, r3
 8005262:	2600      	movs	r6, #0
 8005264:	341a      	adds	r4, #26
 8005266:	42b5      	cmp	r5, r6
 8005268:	d11a      	bne.n	80052a0 <_printf_common+0xc8>
 800526a:	2000      	movs	r0, #0
 800526c:	e008      	b.n	8005280 <_printf_common+0xa8>
 800526e:	2301      	movs	r3, #1
 8005270:	4652      	mov	r2, sl
 8005272:	4641      	mov	r1, r8
 8005274:	4638      	mov	r0, r7
 8005276:	47c8      	blx	r9
 8005278:	3001      	adds	r0, #1
 800527a:	d103      	bne.n	8005284 <_printf_common+0xac>
 800527c:	f04f 30ff 	mov.w	r0, #4294967295
 8005280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005284:	3501      	adds	r5, #1
 8005286:	e7c6      	b.n	8005216 <_printf_common+0x3e>
 8005288:	18e1      	adds	r1, r4, r3
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	2030      	movs	r0, #48	@ 0x30
 800528e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005292:	4422      	add	r2, r4
 8005294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800529c:	3302      	adds	r3, #2
 800529e:	e7c7      	b.n	8005230 <_printf_common+0x58>
 80052a0:	2301      	movs	r3, #1
 80052a2:	4622      	mov	r2, r4
 80052a4:	4641      	mov	r1, r8
 80052a6:	4638      	mov	r0, r7
 80052a8:	47c8      	blx	r9
 80052aa:	3001      	adds	r0, #1
 80052ac:	d0e6      	beq.n	800527c <_printf_common+0xa4>
 80052ae:	3601      	adds	r6, #1
 80052b0:	e7d9      	b.n	8005266 <_printf_common+0x8e>
	...

080052b4 <_printf_i>:
 80052b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b8:	7e0f      	ldrb	r7, [r1, #24]
 80052ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052bc:	2f78      	cmp	r7, #120	@ 0x78
 80052be:	4691      	mov	r9, r2
 80052c0:	4680      	mov	r8, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	469a      	mov	sl, r3
 80052c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052ca:	d807      	bhi.n	80052dc <_printf_i+0x28>
 80052cc:	2f62      	cmp	r7, #98	@ 0x62
 80052ce:	d80a      	bhi.n	80052e6 <_printf_i+0x32>
 80052d0:	2f00      	cmp	r7, #0
 80052d2:	f000 80d2 	beq.w	800547a <_printf_i+0x1c6>
 80052d6:	2f58      	cmp	r7, #88	@ 0x58
 80052d8:	f000 80b9 	beq.w	800544e <_printf_i+0x19a>
 80052dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052e4:	e03a      	b.n	800535c <_printf_i+0xa8>
 80052e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052ea:	2b15      	cmp	r3, #21
 80052ec:	d8f6      	bhi.n	80052dc <_printf_i+0x28>
 80052ee:	a101      	add	r1, pc, #4	@ (adr r1, 80052f4 <_printf_i+0x40>)
 80052f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052f4:	0800534d 	.word	0x0800534d
 80052f8:	08005361 	.word	0x08005361
 80052fc:	080052dd 	.word	0x080052dd
 8005300:	080052dd 	.word	0x080052dd
 8005304:	080052dd 	.word	0x080052dd
 8005308:	080052dd 	.word	0x080052dd
 800530c:	08005361 	.word	0x08005361
 8005310:	080052dd 	.word	0x080052dd
 8005314:	080052dd 	.word	0x080052dd
 8005318:	080052dd 	.word	0x080052dd
 800531c:	080052dd 	.word	0x080052dd
 8005320:	08005461 	.word	0x08005461
 8005324:	0800538b 	.word	0x0800538b
 8005328:	0800541b 	.word	0x0800541b
 800532c:	080052dd 	.word	0x080052dd
 8005330:	080052dd 	.word	0x080052dd
 8005334:	08005483 	.word	0x08005483
 8005338:	080052dd 	.word	0x080052dd
 800533c:	0800538b 	.word	0x0800538b
 8005340:	080052dd 	.word	0x080052dd
 8005344:	080052dd 	.word	0x080052dd
 8005348:	08005423 	.word	0x08005423
 800534c:	6833      	ldr	r3, [r6, #0]
 800534e:	1d1a      	adds	r2, r3, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6032      	str	r2, [r6, #0]
 8005354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800535c:	2301      	movs	r3, #1
 800535e:	e09d      	b.n	800549c <_printf_i+0x1e8>
 8005360:	6833      	ldr	r3, [r6, #0]
 8005362:	6820      	ldr	r0, [r4, #0]
 8005364:	1d19      	adds	r1, r3, #4
 8005366:	6031      	str	r1, [r6, #0]
 8005368:	0606      	lsls	r6, r0, #24
 800536a:	d501      	bpl.n	8005370 <_printf_i+0xbc>
 800536c:	681d      	ldr	r5, [r3, #0]
 800536e:	e003      	b.n	8005378 <_printf_i+0xc4>
 8005370:	0645      	lsls	r5, r0, #25
 8005372:	d5fb      	bpl.n	800536c <_printf_i+0xb8>
 8005374:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005378:	2d00      	cmp	r5, #0
 800537a:	da03      	bge.n	8005384 <_printf_i+0xd0>
 800537c:	232d      	movs	r3, #45	@ 0x2d
 800537e:	426d      	negs	r5, r5
 8005380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005384:	4859      	ldr	r0, [pc, #356]	@ (80054ec <_printf_i+0x238>)
 8005386:	230a      	movs	r3, #10
 8005388:	e011      	b.n	80053ae <_printf_i+0xfa>
 800538a:	6821      	ldr	r1, [r4, #0]
 800538c:	6833      	ldr	r3, [r6, #0]
 800538e:	0608      	lsls	r0, r1, #24
 8005390:	f853 5b04 	ldr.w	r5, [r3], #4
 8005394:	d402      	bmi.n	800539c <_printf_i+0xe8>
 8005396:	0649      	lsls	r1, r1, #25
 8005398:	bf48      	it	mi
 800539a:	b2ad      	uxthmi	r5, r5
 800539c:	2f6f      	cmp	r7, #111	@ 0x6f
 800539e:	4853      	ldr	r0, [pc, #332]	@ (80054ec <_printf_i+0x238>)
 80053a0:	6033      	str	r3, [r6, #0]
 80053a2:	bf14      	ite	ne
 80053a4:	230a      	movne	r3, #10
 80053a6:	2308      	moveq	r3, #8
 80053a8:	2100      	movs	r1, #0
 80053aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053ae:	6866      	ldr	r6, [r4, #4]
 80053b0:	60a6      	str	r6, [r4, #8]
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	bfa2      	ittt	ge
 80053b6:	6821      	ldrge	r1, [r4, #0]
 80053b8:	f021 0104 	bicge.w	r1, r1, #4
 80053bc:	6021      	strge	r1, [r4, #0]
 80053be:	b90d      	cbnz	r5, 80053c4 <_printf_i+0x110>
 80053c0:	2e00      	cmp	r6, #0
 80053c2:	d04b      	beq.n	800545c <_printf_i+0x1a8>
 80053c4:	4616      	mov	r6, r2
 80053c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80053ca:	fb03 5711 	mls	r7, r3, r1, r5
 80053ce:	5dc7      	ldrb	r7, [r0, r7]
 80053d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053d4:	462f      	mov	r7, r5
 80053d6:	42bb      	cmp	r3, r7
 80053d8:	460d      	mov	r5, r1
 80053da:	d9f4      	bls.n	80053c6 <_printf_i+0x112>
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d10b      	bne.n	80053f8 <_printf_i+0x144>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	07df      	lsls	r7, r3, #31
 80053e4:	d508      	bpl.n	80053f8 <_printf_i+0x144>
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	6861      	ldr	r1, [r4, #4]
 80053ea:	4299      	cmp	r1, r3
 80053ec:	bfde      	ittt	le
 80053ee:	2330      	movle	r3, #48	@ 0x30
 80053f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053f8:	1b92      	subs	r2, r2, r6
 80053fa:	6122      	str	r2, [r4, #16]
 80053fc:	f8cd a000 	str.w	sl, [sp]
 8005400:	464b      	mov	r3, r9
 8005402:	aa03      	add	r2, sp, #12
 8005404:	4621      	mov	r1, r4
 8005406:	4640      	mov	r0, r8
 8005408:	f7ff fee6 	bl	80051d8 <_printf_common>
 800540c:	3001      	adds	r0, #1
 800540e:	d14a      	bne.n	80054a6 <_printf_i+0x1f2>
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	b004      	add	sp, #16
 8005416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	f043 0320 	orr.w	r3, r3, #32
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	4833      	ldr	r0, [pc, #204]	@ (80054f0 <_printf_i+0x23c>)
 8005424:	2778      	movs	r7, #120	@ 0x78
 8005426:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	6831      	ldr	r1, [r6, #0]
 800542e:	061f      	lsls	r7, r3, #24
 8005430:	f851 5b04 	ldr.w	r5, [r1], #4
 8005434:	d402      	bmi.n	800543c <_printf_i+0x188>
 8005436:	065f      	lsls	r7, r3, #25
 8005438:	bf48      	it	mi
 800543a:	b2ad      	uxthmi	r5, r5
 800543c:	6031      	str	r1, [r6, #0]
 800543e:	07d9      	lsls	r1, r3, #31
 8005440:	bf44      	itt	mi
 8005442:	f043 0320 	orrmi.w	r3, r3, #32
 8005446:	6023      	strmi	r3, [r4, #0]
 8005448:	b11d      	cbz	r5, 8005452 <_printf_i+0x19e>
 800544a:	2310      	movs	r3, #16
 800544c:	e7ac      	b.n	80053a8 <_printf_i+0xf4>
 800544e:	4827      	ldr	r0, [pc, #156]	@ (80054ec <_printf_i+0x238>)
 8005450:	e7e9      	b.n	8005426 <_printf_i+0x172>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	f023 0320 	bic.w	r3, r3, #32
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	e7f6      	b.n	800544a <_printf_i+0x196>
 800545c:	4616      	mov	r6, r2
 800545e:	e7bd      	b.n	80053dc <_printf_i+0x128>
 8005460:	6833      	ldr	r3, [r6, #0]
 8005462:	6825      	ldr	r5, [r4, #0]
 8005464:	6961      	ldr	r1, [r4, #20]
 8005466:	1d18      	adds	r0, r3, #4
 8005468:	6030      	str	r0, [r6, #0]
 800546a:	062e      	lsls	r6, r5, #24
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	d501      	bpl.n	8005474 <_printf_i+0x1c0>
 8005470:	6019      	str	r1, [r3, #0]
 8005472:	e002      	b.n	800547a <_printf_i+0x1c6>
 8005474:	0668      	lsls	r0, r5, #25
 8005476:	d5fb      	bpl.n	8005470 <_printf_i+0x1bc>
 8005478:	8019      	strh	r1, [r3, #0]
 800547a:	2300      	movs	r3, #0
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	4616      	mov	r6, r2
 8005480:	e7bc      	b.n	80053fc <_printf_i+0x148>
 8005482:	6833      	ldr	r3, [r6, #0]
 8005484:	1d1a      	adds	r2, r3, #4
 8005486:	6032      	str	r2, [r6, #0]
 8005488:	681e      	ldr	r6, [r3, #0]
 800548a:	6862      	ldr	r2, [r4, #4]
 800548c:	2100      	movs	r1, #0
 800548e:	4630      	mov	r0, r6
 8005490:	f7fa fea6 	bl	80001e0 <memchr>
 8005494:	b108      	cbz	r0, 800549a <_printf_i+0x1e6>
 8005496:	1b80      	subs	r0, r0, r6
 8005498:	6060      	str	r0, [r4, #4]
 800549a:	6863      	ldr	r3, [r4, #4]
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	2300      	movs	r3, #0
 80054a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054a4:	e7aa      	b.n	80053fc <_printf_i+0x148>
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	4632      	mov	r2, r6
 80054aa:	4649      	mov	r1, r9
 80054ac:	4640      	mov	r0, r8
 80054ae:	47d0      	blx	sl
 80054b0:	3001      	adds	r0, #1
 80054b2:	d0ad      	beq.n	8005410 <_printf_i+0x15c>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	079b      	lsls	r3, r3, #30
 80054b8:	d413      	bmi.n	80054e2 <_printf_i+0x22e>
 80054ba:	68e0      	ldr	r0, [r4, #12]
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	4298      	cmp	r0, r3
 80054c0:	bfb8      	it	lt
 80054c2:	4618      	movlt	r0, r3
 80054c4:	e7a6      	b.n	8005414 <_printf_i+0x160>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4632      	mov	r2, r6
 80054ca:	4649      	mov	r1, r9
 80054cc:	4640      	mov	r0, r8
 80054ce:	47d0      	blx	sl
 80054d0:	3001      	adds	r0, #1
 80054d2:	d09d      	beq.n	8005410 <_printf_i+0x15c>
 80054d4:	3501      	adds	r5, #1
 80054d6:	68e3      	ldr	r3, [r4, #12]
 80054d8:	9903      	ldr	r1, [sp, #12]
 80054da:	1a5b      	subs	r3, r3, r1
 80054dc:	42ab      	cmp	r3, r5
 80054de:	dcf2      	bgt.n	80054c6 <_printf_i+0x212>
 80054e0:	e7eb      	b.n	80054ba <_printf_i+0x206>
 80054e2:	2500      	movs	r5, #0
 80054e4:	f104 0619 	add.w	r6, r4, #25
 80054e8:	e7f5      	b.n	80054d6 <_printf_i+0x222>
 80054ea:	bf00      	nop
 80054ec:	080059eb 	.word	0x080059eb
 80054f0:	080059fc 	.word	0x080059fc

080054f4 <__sflush_r>:
 80054f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fc:	0716      	lsls	r6, r2, #28
 80054fe:	4605      	mov	r5, r0
 8005500:	460c      	mov	r4, r1
 8005502:	d454      	bmi.n	80055ae <__sflush_r+0xba>
 8005504:	684b      	ldr	r3, [r1, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	dc02      	bgt.n	8005510 <__sflush_r+0x1c>
 800550a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	dd48      	ble.n	80055a2 <__sflush_r+0xae>
 8005510:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005512:	2e00      	cmp	r6, #0
 8005514:	d045      	beq.n	80055a2 <__sflush_r+0xae>
 8005516:	2300      	movs	r3, #0
 8005518:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800551c:	682f      	ldr	r7, [r5, #0]
 800551e:	6a21      	ldr	r1, [r4, #32]
 8005520:	602b      	str	r3, [r5, #0]
 8005522:	d030      	beq.n	8005586 <__sflush_r+0x92>
 8005524:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005526:	89a3      	ldrh	r3, [r4, #12]
 8005528:	0759      	lsls	r1, r3, #29
 800552a:	d505      	bpl.n	8005538 <__sflush_r+0x44>
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005532:	b10b      	cbz	r3, 8005538 <__sflush_r+0x44>
 8005534:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	2300      	movs	r3, #0
 800553a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800553c:	6a21      	ldr	r1, [r4, #32]
 800553e:	4628      	mov	r0, r5
 8005540:	47b0      	blx	r6
 8005542:	1c43      	adds	r3, r0, #1
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	d106      	bne.n	8005556 <__sflush_r+0x62>
 8005548:	6829      	ldr	r1, [r5, #0]
 800554a:	291d      	cmp	r1, #29
 800554c:	d82b      	bhi.n	80055a6 <__sflush_r+0xb2>
 800554e:	4a2a      	ldr	r2, [pc, #168]	@ (80055f8 <__sflush_r+0x104>)
 8005550:	410a      	asrs	r2, r1
 8005552:	07d6      	lsls	r6, r2, #31
 8005554:	d427      	bmi.n	80055a6 <__sflush_r+0xb2>
 8005556:	2200      	movs	r2, #0
 8005558:	6062      	str	r2, [r4, #4]
 800555a:	04d9      	lsls	r1, r3, #19
 800555c:	6922      	ldr	r2, [r4, #16]
 800555e:	6022      	str	r2, [r4, #0]
 8005560:	d504      	bpl.n	800556c <__sflush_r+0x78>
 8005562:	1c42      	adds	r2, r0, #1
 8005564:	d101      	bne.n	800556a <__sflush_r+0x76>
 8005566:	682b      	ldr	r3, [r5, #0]
 8005568:	b903      	cbnz	r3, 800556c <__sflush_r+0x78>
 800556a:	6560      	str	r0, [r4, #84]	@ 0x54
 800556c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800556e:	602f      	str	r7, [r5, #0]
 8005570:	b1b9      	cbz	r1, 80055a2 <__sflush_r+0xae>
 8005572:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005576:	4299      	cmp	r1, r3
 8005578:	d002      	beq.n	8005580 <__sflush_r+0x8c>
 800557a:	4628      	mov	r0, r5
 800557c:	f7ff fb48 	bl	8004c10 <_free_r>
 8005580:	2300      	movs	r3, #0
 8005582:	6363      	str	r3, [r4, #52]	@ 0x34
 8005584:	e00d      	b.n	80055a2 <__sflush_r+0xae>
 8005586:	2301      	movs	r3, #1
 8005588:	4628      	mov	r0, r5
 800558a:	47b0      	blx	r6
 800558c:	4602      	mov	r2, r0
 800558e:	1c50      	adds	r0, r2, #1
 8005590:	d1c9      	bne.n	8005526 <__sflush_r+0x32>
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0c6      	beq.n	8005526 <__sflush_r+0x32>
 8005598:	2b1d      	cmp	r3, #29
 800559a:	d001      	beq.n	80055a0 <__sflush_r+0xac>
 800559c:	2b16      	cmp	r3, #22
 800559e:	d11e      	bne.n	80055de <__sflush_r+0xea>
 80055a0:	602f      	str	r7, [r5, #0]
 80055a2:	2000      	movs	r0, #0
 80055a4:	e022      	b.n	80055ec <__sflush_r+0xf8>
 80055a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055aa:	b21b      	sxth	r3, r3
 80055ac:	e01b      	b.n	80055e6 <__sflush_r+0xf2>
 80055ae:	690f      	ldr	r7, [r1, #16]
 80055b0:	2f00      	cmp	r7, #0
 80055b2:	d0f6      	beq.n	80055a2 <__sflush_r+0xae>
 80055b4:	0793      	lsls	r3, r2, #30
 80055b6:	680e      	ldr	r6, [r1, #0]
 80055b8:	bf08      	it	eq
 80055ba:	694b      	ldreq	r3, [r1, #20]
 80055bc:	600f      	str	r7, [r1, #0]
 80055be:	bf18      	it	ne
 80055c0:	2300      	movne	r3, #0
 80055c2:	eba6 0807 	sub.w	r8, r6, r7
 80055c6:	608b      	str	r3, [r1, #8]
 80055c8:	f1b8 0f00 	cmp.w	r8, #0
 80055cc:	dde9      	ble.n	80055a2 <__sflush_r+0xae>
 80055ce:	6a21      	ldr	r1, [r4, #32]
 80055d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055d2:	4643      	mov	r3, r8
 80055d4:	463a      	mov	r2, r7
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b0      	blx	r6
 80055da:	2800      	cmp	r0, #0
 80055dc:	dc08      	bgt.n	80055f0 <__sflush_r+0xfc>
 80055de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055e6:	81a3      	strh	r3, [r4, #12]
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f0:	4407      	add	r7, r0
 80055f2:	eba8 0800 	sub.w	r8, r8, r0
 80055f6:	e7e7      	b.n	80055c8 <__sflush_r+0xd4>
 80055f8:	dfbffffe 	.word	0xdfbffffe

080055fc <_fflush_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	690b      	ldr	r3, [r1, #16]
 8005600:	4605      	mov	r5, r0
 8005602:	460c      	mov	r4, r1
 8005604:	b913      	cbnz	r3, 800560c <_fflush_r+0x10>
 8005606:	2500      	movs	r5, #0
 8005608:	4628      	mov	r0, r5
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	b118      	cbz	r0, 8005616 <_fflush_r+0x1a>
 800560e:	6a03      	ldr	r3, [r0, #32]
 8005610:	b90b      	cbnz	r3, 8005616 <_fflush_r+0x1a>
 8005612:	f7ff f8c5 	bl	80047a0 <__sinit>
 8005616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f3      	beq.n	8005606 <_fflush_r+0xa>
 800561e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005620:	07d0      	lsls	r0, r2, #31
 8005622:	d404      	bmi.n	800562e <_fflush_r+0x32>
 8005624:	0599      	lsls	r1, r3, #22
 8005626:	d402      	bmi.n	800562e <_fflush_r+0x32>
 8005628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800562a:	f7ff fae0 	bl	8004bee <__retarget_lock_acquire_recursive>
 800562e:	4628      	mov	r0, r5
 8005630:	4621      	mov	r1, r4
 8005632:	f7ff ff5f 	bl	80054f4 <__sflush_r>
 8005636:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005638:	07da      	lsls	r2, r3, #31
 800563a:	4605      	mov	r5, r0
 800563c:	d4e4      	bmi.n	8005608 <_fflush_r+0xc>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	059b      	lsls	r3, r3, #22
 8005642:	d4e1      	bmi.n	8005608 <_fflush_r+0xc>
 8005644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005646:	f7ff fad3 	bl	8004bf0 <__retarget_lock_release_recursive>
 800564a:	e7dd      	b.n	8005608 <_fflush_r+0xc>

0800564c <__swhatbuf_r>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	460c      	mov	r4, r1
 8005650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005654:	2900      	cmp	r1, #0
 8005656:	b096      	sub	sp, #88	@ 0x58
 8005658:	4615      	mov	r5, r2
 800565a:	461e      	mov	r6, r3
 800565c:	da0d      	bge.n	800567a <__swhatbuf_r+0x2e>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005664:	f04f 0100 	mov.w	r1, #0
 8005668:	bf14      	ite	ne
 800566a:	2340      	movne	r3, #64	@ 0x40
 800566c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005670:	2000      	movs	r0, #0
 8005672:	6031      	str	r1, [r6, #0]
 8005674:	602b      	str	r3, [r5, #0]
 8005676:	b016      	add	sp, #88	@ 0x58
 8005678:	bd70      	pop	{r4, r5, r6, pc}
 800567a:	466a      	mov	r2, sp
 800567c:	f000 f862 	bl	8005744 <_fstat_r>
 8005680:	2800      	cmp	r0, #0
 8005682:	dbec      	blt.n	800565e <__swhatbuf_r+0x12>
 8005684:	9901      	ldr	r1, [sp, #4]
 8005686:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800568a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800568e:	4259      	negs	r1, r3
 8005690:	4159      	adcs	r1, r3
 8005692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005696:	e7eb      	b.n	8005670 <__swhatbuf_r+0x24>

08005698 <__smakebuf_r>:
 8005698:	898b      	ldrh	r3, [r1, #12]
 800569a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800569c:	079d      	lsls	r5, r3, #30
 800569e:	4606      	mov	r6, r0
 80056a0:	460c      	mov	r4, r1
 80056a2:	d507      	bpl.n	80056b4 <__smakebuf_r+0x1c>
 80056a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	6123      	str	r3, [r4, #16]
 80056ac:	2301      	movs	r3, #1
 80056ae:	6163      	str	r3, [r4, #20]
 80056b0:	b003      	add	sp, #12
 80056b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b4:	ab01      	add	r3, sp, #4
 80056b6:	466a      	mov	r2, sp
 80056b8:	f7ff ffc8 	bl	800564c <__swhatbuf_r>
 80056bc:	9f00      	ldr	r7, [sp, #0]
 80056be:	4605      	mov	r5, r0
 80056c0:	4639      	mov	r1, r7
 80056c2:	4630      	mov	r0, r6
 80056c4:	f7fe ff54 	bl	8004570 <_malloc_r>
 80056c8:	b948      	cbnz	r0, 80056de <__smakebuf_r+0x46>
 80056ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ce:	059a      	lsls	r2, r3, #22
 80056d0:	d4ee      	bmi.n	80056b0 <__smakebuf_r+0x18>
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	f043 0302 	orr.w	r3, r3, #2
 80056da:	81a3      	strh	r3, [r4, #12]
 80056dc:	e7e2      	b.n	80056a4 <__smakebuf_r+0xc>
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	6020      	str	r0, [r4, #0]
 80056e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056ee:	b15b      	cbz	r3, 8005708 <__smakebuf_r+0x70>
 80056f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 f837 	bl	8005768 <_isatty_r>
 80056fa:	b128      	cbz	r0, 8005708 <__smakebuf_r+0x70>
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	431d      	orrs	r5, r3
 800570c:	81a5      	strh	r5, [r4, #12]
 800570e:	e7cf      	b.n	80056b0 <__smakebuf_r+0x18>

08005710 <memmove>:
 8005710:	4288      	cmp	r0, r1
 8005712:	b510      	push	{r4, lr}
 8005714:	eb01 0402 	add.w	r4, r1, r2
 8005718:	d902      	bls.n	8005720 <memmove+0x10>
 800571a:	4284      	cmp	r4, r0
 800571c:	4623      	mov	r3, r4
 800571e:	d807      	bhi.n	8005730 <memmove+0x20>
 8005720:	1e43      	subs	r3, r0, #1
 8005722:	42a1      	cmp	r1, r4
 8005724:	d008      	beq.n	8005738 <memmove+0x28>
 8005726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800572a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800572e:	e7f8      	b.n	8005722 <memmove+0x12>
 8005730:	4402      	add	r2, r0
 8005732:	4601      	mov	r1, r0
 8005734:	428a      	cmp	r2, r1
 8005736:	d100      	bne.n	800573a <memmove+0x2a>
 8005738:	bd10      	pop	{r4, pc}
 800573a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800573e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005742:	e7f7      	b.n	8005734 <memmove+0x24>

08005744 <_fstat_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4d07      	ldr	r5, [pc, #28]	@ (8005764 <_fstat_r+0x20>)
 8005748:	2300      	movs	r3, #0
 800574a:	4604      	mov	r4, r0
 800574c:	4608      	mov	r0, r1
 800574e:	4611      	mov	r1, r2
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	f7fb fb7a 	bl	8000e4a <_fstat>
 8005756:	1c43      	adds	r3, r0, #1
 8005758:	d102      	bne.n	8005760 <_fstat_r+0x1c>
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	b103      	cbz	r3, 8005760 <_fstat_r+0x1c>
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	bd38      	pop	{r3, r4, r5, pc}
 8005762:	bf00      	nop
 8005764:	20000780 	.word	0x20000780

08005768 <_isatty_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d06      	ldr	r5, [pc, #24]	@ (8005784 <_isatty_r+0x1c>)
 800576c:	2300      	movs	r3, #0
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	602b      	str	r3, [r5, #0]
 8005774:	f7fb fb79 	bl	8000e6a <_isatty>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d102      	bne.n	8005782 <_isatty_r+0x1a>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	b103      	cbz	r3, 8005782 <_isatty_r+0x1a>
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	20000780 	.word	0x20000780

08005788 <_realloc_r>:
 8005788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800578c:	4680      	mov	r8, r0
 800578e:	4615      	mov	r5, r2
 8005790:	460c      	mov	r4, r1
 8005792:	b921      	cbnz	r1, 800579e <_realloc_r+0x16>
 8005794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005798:	4611      	mov	r1, r2
 800579a:	f7fe bee9 	b.w	8004570 <_malloc_r>
 800579e:	b92a      	cbnz	r2, 80057ac <_realloc_r+0x24>
 80057a0:	f7ff fa36 	bl	8004c10 <_free_r>
 80057a4:	2400      	movs	r4, #0
 80057a6:	4620      	mov	r0, r4
 80057a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ac:	f000 f81a 	bl	80057e4 <_malloc_usable_size_r>
 80057b0:	4285      	cmp	r5, r0
 80057b2:	4606      	mov	r6, r0
 80057b4:	d802      	bhi.n	80057bc <_realloc_r+0x34>
 80057b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80057ba:	d8f4      	bhi.n	80057a6 <_realloc_r+0x1e>
 80057bc:	4629      	mov	r1, r5
 80057be:	4640      	mov	r0, r8
 80057c0:	f7fe fed6 	bl	8004570 <_malloc_r>
 80057c4:	4607      	mov	r7, r0
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d0ec      	beq.n	80057a4 <_realloc_r+0x1c>
 80057ca:	42b5      	cmp	r5, r6
 80057cc:	462a      	mov	r2, r5
 80057ce:	4621      	mov	r1, r4
 80057d0:	bf28      	it	cs
 80057d2:	4632      	movcs	r2, r6
 80057d4:	f7ff fa0d 	bl	8004bf2 <memcpy>
 80057d8:	4621      	mov	r1, r4
 80057da:	4640      	mov	r0, r8
 80057dc:	f7ff fa18 	bl	8004c10 <_free_r>
 80057e0:	463c      	mov	r4, r7
 80057e2:	e7e0      	b.n	80057a6 <_realloc_r+0x1e>

080057e4 <_malloc_usable_size_r>:
 80057e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057e8:	1f18      	subs	r0, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bfbc      	itt	lt
 80057ee:	580b      	ldrlt	r3, [r1, r0]
 80057f0:	18c0      	addlt	r0, r0, r3
 80057f2:	4770      	bx	lr

080057f4 <_init>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	bf00      	nop
 80057f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fa:	bc08      	pop	{r3}
 80057fc:	469e      	mov	lr, r3
 80057fe:	4770      	bx	lr

08005800 <_fini>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	bf00      	nop
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr
